# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP242')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP242')
    _StepAP242 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP242', [dirname(__file__)])
        except ImportError:
            import _StepAP242
            return _StepAP242
        try:
            _mod = imp.load_module('_StepAP242', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP242 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP242
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP242.delete_SwigPyIterator

    def value(self):
        return _StepAP242.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepAP242.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepAP242.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepAP242.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepAP242.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepAP242.SwigPyIterator_copy(self)

    def next(self):
        return _StepAP242.SwigPyIterator_next(self)

    def __next__(self):
        return _StepAP242.SwigPyIterator___next__(self)

    def previous(self):
        return _StepAP242.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepAP242.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepAP242.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepAP242.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepAP242.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepAP242.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepAP242.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepAP242.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP242.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP242.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepAP242.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP242.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP242.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP242.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepAP242.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepAP242.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepAP242.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP242.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepAP242.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP242.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP242.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP242.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepAP242.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepAP242.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepAP242.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepAP242.ptr_to_number(item)
ptr_to_number = _StepAP242.ptr_to_number

def HashCode(*args):
    return _StepAP242.HashCode(*args)
HashCode = _StepAP242.HashCode

def ptr_equal(a, b):
    return _StepAP242.ptr_equal(a, b)
ptr_equal = _StepAP242.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepDimTol
else:
    import StepDimTol
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepAP214
else:
    import StepAP214
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepVisual
else:
    import StepVisual
del _swig_python_version_info
class StepAP242_ItemIdentifiedRepresentationUsage(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP242_ItemIdentifiedRepresentationUsage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP242_ItemIdentifiedRepresentationUsage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsage

        Returns a ItemIdentifiedRepresentationUsage


        """
        this = _StepAP242.new_StepAP242_ItemIdentifiedRepresentationUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition, Handle_StepRepr_Representation theUsedRepresentation, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Init all fields own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition
        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetName(self, *args)


    def Name(self, *args):
        """
        Name(StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_Description(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(StepAP242_ItemIdentifiedRepresentationUsage self, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition)

        Set field Definition

        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsageDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_Definition(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepRepr_Representation theUsedRepresentation)

        Set field UsedRepresentation

        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetUsedRepresentation(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_StepRepr_Representation

        Retuns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_UsedRepresentation(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_StepRepr_HArray1OfRepresentationItem

        Returns field IdentifiedItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_IdentifiedItem(self, *args)


    def NbIdentifiedItem(self, *args):
        """
        NbIdentifiedItem(StepAP242_ItemIdentifiedRepresentationUsage self) -> Standard_Integer

        Returns number of identified items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_NbIdentifiedItem(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Set fiels IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetIdentifiedItem(self, *args)


    def IdentifiedItemValue(self, *args):
        """
        IdentifiedItemValue(StepAP242_ItemIdentifiedRepresentationUsage self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        Returns identified item with given number

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_IdentifiedItemValue(self, *args)


    def SetIdentifiedItemValue(self, *args):
        """
        SetIdentifiedItemValue(StepAP242_ItemIdentifiedRepresentationUsage self, Standard_Integer const num, Handle_StepRepr_RepresentationItem theItem)

        Set identified item with given number

        :type num: int
        :type theItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_SetIdentifiedItemValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP242.delete_StepAP242_ItemIdentifiedRepresentationUsage
StepAP242_ItemIdentifiedRepresentationUsage_swigregister = _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_swigregister
StepAP242_ItemIdentifiedRepresentationUsage_swigregister(StepAP242_ItemIdentifiedRepresentationUsage)

def StepAP242_ItemIdentifiedRepresentationUsage_get_type_name(*args):
    """
    StepAP242_ItemIdentifiedRepresentationUsage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_get_type_name(*args)

def StepAP242_ItemIdentifiedRepresentationUsage_get_type_descriptor(*args):
    """
    StepAP242_ItemIdentifiedRepresentationUsage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsage_get_type_descriptor(*args)

class StepAP242_IdAttribute(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP242_IdAttribute
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP242_IdAttribute(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP242_IdAttribute self) -> StepAP242_IdAttribute

        Returns a IdAttribute


        """
        this = _StepAP242.new_StepAP242_IdAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP242_IdAttribute self, Handle_TCollection_HAsciiString theAttributeValue, StepAP242_IdAttributeSelect theIdentifiedItem)

        Init all field own and inherited

        :type theAttributeValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentifiedItem: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.StepAP242_IdAttribute_Init(self, *args)


    def SetAttributeValue(self, *args):
        """
        SetAttributeValue(StepAP242_IdAttribute self, Handle_TCollection_HAsciiString theAttributeValue)

        :type theAttributeValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_IdAttribute_SetAttributeValue(self, *args)


    def AttributeValue(self, *args):
        """
        AttributeValue(StepAP242_IdAttribute self) -> Handle_TCollection_HAsciiString

        Returns field AttributeValue

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.StepAP242_IdAttribute_AttributeValue(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(StepAP242_IdAttribute self, StepAP242_IdAttributeSelect theIdentifiedItem)

        Set field IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.StepAP242_IdAttribute_SetIdentifiedItem(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(StepAP242_IdAttribute self) -> StepAP242_IdAttributeSelect

        Returns IdentifiedItem

        :rtype: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.StepAP242_IdAttribute_IdentifiedItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP242.StepAP242_IdAttribute_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP242.StepAP242_IdAttribute_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.StepAP242_IdAttribute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP242.delete_StepAP242_IdAttribute
StepAP242_IdAttribute_swigregister = _StepAP242.StepAP242_IdAttribute_swigregister
StepAP242_IdAttribute_swigregister(StepAP242_IdAttribute)

def StepAP242_IdAttribute_get_type_name(*args):
    """
    StepAP242_IdAttribute_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP242.StepAP242_IdAttribute_get_type_name(*args)

def StepAP242_IdAttribute_get_type_descriptor(*args):
    """
    StepAP242_IdAttribute_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP242.StepAP242_IdAttribute_get_type_descriptor(*args)

class StepAP242_DraughtingModelItemAssociation(StepAP242_ItemIdentifiedRepresentationUsage):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP242_DraughtingModelItemAssociation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP242_DraughtingModelItemAssociation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP242_DraughtingModelItemAssociation self) -> StepAP242_DraughtingModelItemAssociation

        Added for Dimensional Tolerances
        """
        this = _StepAP242.new_StepAP242_DraughtingModelItemAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP242.StepAP242_DraughtingModelItemAssociation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP242.StepAP242_DraughtingModelItemAssociation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.StepAP242_DraughtingModelItemAssociation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP242.delete_StepAP242_DraughtingModelItemAssociation
StepAP242_DraughtingModelItemAssociation_swigregister = _StepAP242.StepAP242_DraughtingModelItemAssociation_swigregister
StepAP242_DraughtingModelItemAssociation_swigregister(StepAP242_DraughtingModelItemAssociation)

def StepAP242_DraughtingModelItemAssociation_get_type_name(*args):
    """
    StepAP242_DraughtingModelItemAssociation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP242.StepAP242_DraughtingModelItemAssociation_get_type_name(*args)

def StepAP242_DraughtingModelItemAssociation_get_type_descriptor(*args):
    """
    StepAP242_DraughtingModelItemAssociation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP242.StepAP242_DraughtingModelItemAssociation_get_type_descriptor(*args)

class Handle_StepAP242_IdAttribute(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP242_IdAttribute self)

        Nullify the handle


        """
        return _StepAP242.Handle_StepAP242_IdAttribute_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP242_IdAttribute self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP242_IdAttribute self, StepAP242_IdAttribute thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP242_IdAttribute self, Handle_StepAP242_IdAttribute theHandle) -> Handle_StepAP242_IdAttribute
        assign(Handle_StepAP242_IdAttribute self, StepAP242_IdAttribute thePtr) -> Handle_StepAP242_IdAttribute
        assign(Handle_StepAP242_IdAttribute self, Handle_StepAP242_IdAttribute theHandle) -> Handle_StepAP242_IdAttribute

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP242_IdAttribute self) -> StepAP242_IdAttribute

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP242_IdAttribute self) -> StepAP242_IdAttribute

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_IdAttribute___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP242_IdAttribute self) -> StepAP242_IdAttribute

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP242.Handle_StepAP242_IdAttribute___ref__(self, *args)


    def __hash__(self):
        return _StepAP242.Handle_StepAP242_IdAttribute___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP242.Handle_StepAP242_IdAttribute___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP242.new_Handle_StepAP242_IdAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP242.Handle_StepAP242_IdAttribute_DownCast)
    __swig_destroy__ = _StepAP242.delete_Handle_StepAP242_IdAttribute

    def Init(self, *args):
        """
        Init(Handle_StepAP242_IdAttribute self, Handle_TCollection_HAsciiString theAttributeValue, StepAP242_IdAttributeSelect theIdentifiedItem)

        Init all field own and inherited

        :type theAttributeValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentifiedItem: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_Init(self, *args)


    def SetAttributeValue(self, *args):
        """
        SetAttributeValue(Handle_StepAP242_IdAttribute self, Handle_TCollection_HAsciiString theAttributeValue)

        :type theAttributeValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_SetAttributeValue(self, *args)


    def AttributeValue(self, *args):
        """
        AttributeValue(Handle_StepAP242_IdAttribute self) -> Handle_TCollection_HAsciiString

        Returns field AttributeValue

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_AttributeValue(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(Handle_StepAP242_IdAttribute self, StepAP242_IdAttributeSelect theIdentifiedItem)

        Set field IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_SetIdentifiedItem(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(Handle_StepAP242_IdAttribute self) -> StepAP242_IdAttributeSelect

        Returns IdentifiedItem

        :rtype: OCC.wrapper.StepAP242.StepAP242_IdAttributeSelect

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_IdentifiedItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP242_IdAttribute self) -> char const *

        :rtype: const char *

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_IdAttribute_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_IdAttribute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP242_IdAttribute self)

        Memory deallocator for transient classes


        """
        return _StepAP242.Handle_StepAP242_IdAttribute_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP242_IdAttribute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP242_IdAttribute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP242_IdAttribute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP242_IdAttribute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP242_IdAttribute self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP242_IdAttribute self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP242_IdAttribute self)

        Increments the reference counter of this object


        """
        return _StepAP242.Handle_StepAP242_IdAttribute_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP242_IdAttribute self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_IdAttribute_DecrementRefCounter(self, *args)

Handle_StepAP242_IdAttribute_swigregister = _StepAP242.Handle_StepAP242_IdAttribute_swigregister
Handle_StepAP242_IdAttribute_swigregister(Handle_StepAP242_IdAttribute)

def Handle_StepAP242_IdAttribute_DownCast(thing):
    return _StepAP242.Handle_StepAP242_IdAttribute_DownCast(thing)
Handle_StepAP242_IdAttribute_DownCast = _StepAP242.Handle_StepAP242_IdAttribute_DownCast

class StepAP242_GeometricItemSpecificUsage(StepAP242_ItemIdentifiedRepresentationUsage):
    """Added for Dimensional Tolerances"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP242_GeometricItemSpecificUsage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP242_GeometricItemSpecificUsage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP242_GeometricItemSpecificUsage self) -> StepAP242_GeometricItemSpecificUsage

        Added for Dimensional Tolerances
        """
        this = _StepAP242.new_StepAP242_GeometricItemSpecificUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP242.StepAP242_GeometricItemSpecificUsage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP242.StepAP242_GeometricItemSpecificUsage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.StepAP242_GeometricItemSpecificUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP242.delete_StepAP242_GeometricItemSpecificUsage
StepAP242_GeometricItemSpecificUsage_swigregister = _StepAP242.StepAP242_GeometricItemSpecificUsage_swigregister
StepAP242_GeometricItemSpecificUsage_swigregister(StepAP242_GeometricItemSpecificUsage)

def StepAP242_GeometricItemSpecificUsage_get_type_name(*args):
    """
    StepAP242_GeometricItemSpecificUsage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP242.StepAP242_GeometricItemSpecificUsage_get_type_name(*args)

def StepAP242_GeometricItemSpecificUsage_get_type_descriptor(*args):
    """
    StepAP242_GeometricItemSpecificUsage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP242.StepAP242_GeometricItemSpecificUsage_get_type_descriptor(*args)

class Handle_StepAP242_DraughtingModelItemAssociation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP242_DraughtingModelItemAssociation self)

        Nullify the handle


        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP242_DraughtingModelItemAssociation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP242_DraughtingModelItemAssociation self, StepAP242_DraughtingModelItemAssociation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_StepAP242_DraughtingModelItemAssociation theHandle) -> Handle_StepAP242_DraughtingModelItemAssociation
        assign(Handle_StepAP242_DraughtingModelItemAssociation self, StepAP242_DraughtingModelItemAssociation thePtr) -> Handle_StepAP242_DraughtingModelItemAssociation
        assign(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_StepAP242_DraughtingModelItemAssociation theHandle) -> Handle_StepAP242_DraughtingModelItemAssociation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP242_DraughtingModelItemAssociation self) -> StepAP242_DraughtingModelItemAssociation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP242_DraughtingModelItemAssociation self) -> StepAP242_DraughtingModelItemAssociation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP242_DraughtingModelItemAssociation self) -> StepAP242_DraughtingModelItemAssociation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation___ref__(self, *args)


    def __hash__(self):
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP242.new_Handle_StepAP242_DraughtingModelItemAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_DownCast)
    __swig_destroy__ = _StepAP242.delete_Handle_StepAP242_DraughtingModelItemAssociation

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP242_DraughtingModelItemAssociation self) -> char const *

        :rtype: const char *

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition, Handle_StepRepr_Representation theUsedRepresentation, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Init all fields own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition
        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepAP242_DraughtingModelItemAssociation self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP242_DraughtingModelItemAssociation self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Description(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepAP242_DraughtingModelItemAssociation self, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition)

        Set field Definition

        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepAP242_DraughtingModelItemAssociation self) -> StepAP242_ItemIdentifiedRepresentationUsageDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Definition(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_StepRepr_Representation theUsedRepresentation)

        Set field UsedRepresentation

        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetUsedRepresentation(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepAP242_DraughtingModelItemAssociation self) -> Handle_StepRepr_Representation

        Retuns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_UsedRepresentation(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(Handle_StepAP242_DraughtingModelItemAssociation self) -> Handle_StepRepr_HArray1OfRepresentationItem

        Returns field IdentifiedItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IdentifiedItem(self, *args)


    def NbIdentifiedItem(self, *args):
        """
        NbIdentifiedItem(Handle_StepAP242_DraughtingModelItemAssociation self) -> Standard_Integer

        Returns number of identified items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_NbIdentifiedItem(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Set fiels IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetIdentifiedItem(self, *args)


    def IdentifiedItemValue(self, *args):
        """
        IdentifiedItemValue(Handle_StepAP242_DraughtingModelItemAssociation self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        Returns identified item with given number

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IdentifiedItemValue(self, *args)


    def SetIdentifiedItemValue(self, *args):
        """
        SetIdentifiedItemValue(Handle_StepAP242_DraughtingModelItemAssociation self, Standard_Integer const num, Handle_StepRepr_RepresentationItem theItem)

        Set identified item with given number

        :type num: int
        :type theItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_SetIdentifiedItemValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP242_DraughtingModelItemAssociation self)

        Memory deallocator for transient classes


        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP242_DraughtingModelItemAssociation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP242_DraughtingModelItemAssociation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP242_DraughtingModelItemAssociation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP242_DraughtingModelItemAssociation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP242_DraughtingModelItemAssociation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP242_DraughtingModelItemAssociation self)

        Increments the reference counter of this object


        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP242_DraughtingModelItemAssociation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_DecrementRefCounter(self, *args)

Handle_StepAP242_DraughtingModelItemAssociation_swigregister = _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_swigregister
Handle_StepAP242_DraughtingModelItemAssociation_swigregister(Handle_StepAP242_DraughtingModelItemAssociation)

def Handle_StepAP242_DraughtingModelItemAssociation_DownCast(thing):
    return _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_DownCast(thing)
Handle_StepAP242_DraughtingModelItemAssociation_DownCast = _StepAP242.Handle_StepAP242_DraughtingModelItemAssociation_DownCast

class Handle_StepAP242_GeometricItemSpecificUsage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP242_GeometricItemSpecificUsage self)

        Nullify the handle


        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP242_GeometricItemSpecificUsage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP242_GeometricItemSpecificUsage self, StepAP242_GeometricItemSpecificUsage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_StepAP242_GeometricItemSpecificUsage theHandle) -> Handle_StepAP242_GeometricItemSpecificUsage
        assign(Handle_StepAP242_GeometricItemSpecificUsage self, StepAP242_GeometricItemSpecificUsage thePtr) -> Handle_StepAP242_GeometricItemSpecificUsage
        assign(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_StepAP242_GeometricItemSpecificUsage theHandle) -> Handle_StepAP242_GeometricItemSpecificUsage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP242_GeometricItemSpecificUsage self) -> StepAP242_GeometricItemSpecificUsage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP242_GeometricItemSpecificUsage self) -> StepAP242_GeometricItemSpecificUsage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP242_GeometricItemSpecificUsage self) -> StepAP242_GeometricItemSpecificUsage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage___ref__(self, *args)


    def __hash__(self):
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP242.new_Handle_StepAP242_GeometricItemSpecificUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_DownCast)
    __swig_destroy__ = _StepAP242.delete_Handle_StepAP242_GeometricItemSpecificUsage

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP242_GeometricItemSpecificUsage self) -> char const *

        :rtype: const char *

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition, Handle_StepRepr_Representation theUsedRepresentation, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Init all fields own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition
        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepAP242_GeometricItemSpecificUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP242_GeometricItemSpecificUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Description(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepAP242_GeometricItemSpecificUsage self, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition)

        Set field Definition

        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepAP242_GeometricItemSpecificUsage self) -> StepAP242_ItemIdentifiedRepresentationUsageDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Definition(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_StepRepr_Representation theUsedRepresentation)

        Set field UsedRepresentation

        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetUsedRepresentation(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepAP242_GeometricItemSpecificUsage self) -> Handle_StepRepr_Representation

        Retuns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_UsedRepresentation(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(Handle_StepAP242_GeometricItemSpecificUsage self) -> Handle_StepRepr_HArray1OfRepresentationItem

        Returns field IdentifiedItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IdentifiedItem(self, *args)


    def NbIdentifiedItem(self, *args):
        """
        NbIdentifiedItem(Handle_StepAP242_GeometricItemSpecificUsage self) -> Standard_Integer

        Returns number of identified items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_NbIdentifiedItem(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Set fiels IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetIdentifiedItem(self, *args)


    def IdentifiedItemValue(self, *args):
        """
        IdentifiedItemValue(Handle_StepAP242_GeometricItemSpecificUsage self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        Returns identified item with given number

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IdentifiedItemValue(self, *args)


    def SetIdentifiedItemValue(self, *args):
        """
        SetIdentifiedItemValue(Handle_StepAP242_GeometricItemSpecificUsage self, Standard_Integer const num, Handle_StepRepr_RepresentationItem theItem)

        Set identified item with given number

        :type num: int
        :type theItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_SetIdentifiedItemValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP242_GeometricItemSpecificUsage self)

        Memory deallocator for transient classes


        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP242_GeometricItemSpecificUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP242_GeometricItemSpecificUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP242_GeometricItemSpecificUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP242_GeometricItemSpecificUsage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP242_GeometricItemSpecificUsage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP242_GeometricItemSpecificUsage self)

        Increments the reference counter of this object


        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP242_GeometricItemSpecificUsage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_DecrementRefCounter(self, *args)

Handle_StepAP242_GeometricItemSpecificUsage_swigregister = _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_swigregister
Handle_StepAP242_GeometricItemSpecificUsage_swigregister(Handle_StepAP242_GeometricItemSpecificUsage)

def Handle_StepAP242_GeometricItemSpecificUsage_DownCast(thing):
    return _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_DownCast(thing)
Handle_StepAP242_GeometricItemSpecificUsage_DownCast = _StepAP242.Handle_StepAP242_GeometricItemSpecificUsage_DownCast

class StepAP242_IdAttributeSelect(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP242_IdAttributeSelect self) -> StepAP242_IdAttributeSelect

        Returns a IdAttributeSelect select type


        """
        this = _StepAP242.new_StepAP242_IdAttributeSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP242_IdAttributeSelect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a IdAttributeSelect Kind Entity that is :
        1 -> Action
        2 -> Address
        3 -> ApplicationContext
        4 -> DimensionalSize
        5 -> GeometricTolerance
        6 -> Group
        7 -> Reserved for OrganizatonalProject (not implemented in OCCT)
        8 -> ProductCategory
        9 -> PropertyDefinition
        10 -> Representation
        11 -> ShapeAspect
        12 -> ShapeAspectRelationship
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.StepAP242_IdAttributeSelect_CaseNum(self, *args)


    def Action(self, *args):
        """
        Action(StepAP242_IdAttributeSelect self) -> Handle_StepBasic_Action

        returns Value as a Action (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP242.StepAP242_IdAttributeSelect_Action(self, *args)


    def Address(self, *args):
        """
        Address(StepAP242_IdAttributeSelect self) -> Handle_StepBasic_Address

        returns Value as a Address (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Address

        """
        return _StepAP242.StepAP242_IdAttributeSelect_Address(self, *args)


    def ApplicationContext(self, *args):
        """
        ApplicationContext(StepAP242_IdAttributeSelect self) -> Handle_StepBasic_ApplicationContext

        returns Value as a ApplicationContext (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContext

        """
        return _StepAP242.StepAP242_IdAttributeSelect_ApplicationContext(self, *args)


    def DimensionalSize(self, *args):
        """
        DimensionalSize(StepAP242_IdAttributeSelect self) -> Handle_StepShape_DimensionalSize

        returns Value as a DimensionalSize (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalSize

        """
        return _StepAP242.StepAP242_IdAttributeSelect_DimensionalSize(self, *args)


    def GeometricTolerance(self, *args):
        """
        GeometricTolerance(StepAP242_IdAttributeSelect self) -> Handle_StepDimTol_GeometricTolerance

        returns Value as a GeometricTolerance (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepAP242.StepAP242_IdAttributeSelect_GeometricTolerance(self, *args)


    def Group(self, *args):
        """
        Group(StepAP242_IdAttributeSelect self) -> Handle_StepBasic_Group

        returns Value as a Group (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP242.StepAP242_IdAttributeSelect_Group(self, *args)


    def ProductCategory(self, *args):
        """
        ProductCategory(StepAP242_IdAttributeSelect self) -> Handle_StepBasic_ProductCategory

        returns Value as a ProductCategory (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategory

        """
        return _StepAP242.StepAP242_IdAttributeSelect_ProductCategory(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepAP242_IdAttributeSelect self) -> Handle_StepRepr_PropertyDefinition

        returns Value as a PropertyDefinition (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepAP242.StepAP242_IdAttributeSelect_PropertyDefinition(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP242_IdAttributeSelect self) -> Handle_StepRepr_Representation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.StepAP242_IdAttributeSelect_Representation(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP242_IdAttributeSelect self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP242.Handle_StepRepr_ShapeAspect

        """
        return _StepAP242.StepAP242_IdAttributeSelect_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepAP242_IdAttributeSelect self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepAP242.StepAP242_IdAttributeSelect_ShapeAspectRelationship(self, *args)

    __swig_destroy__ = _StepAP242.delete_StepAP242_IdAttributeSelect
StepAP242_IdAttributeSelect_swigregister = _StepAP242.StepAP242_IdAttributeSelect_swigregister
StepAP242_IdAttributeSelect_swigregister(StepAP242_IdAttributeSelect)

class Handle_StepAP242_ItemIdentifiedRepresentationUsage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP242_ItemIdentifiedRepresentationUsage self)

        Nullify the handle


        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, StepAP242_ItemIdentifiedRepresentationUsage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepAP242_ItemIdentifiedRepresentationUsage theHandle) -> Handle_StepAP242_ItemIdentifiedRepresentationUsage
        assign(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, StepAP242_ItemIdentifiedRepresentationUsage thePtr) -> Handle_StepAP242_ItemIdentifiedRepresentationUsage
        assign(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepAP242_ItemIdentifiedRepresentationUsage theHandle) -> Handle_StepAP242_ItemIdentifiedRepresentationUsage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage___ref__(self, *args)


    def __hash__(self):
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP242.new_Handle_StepAP242_ItemIdentifiedRepresentationUsage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_DownCast)
    __swig_destroy__ = _StepAP242.delete_Handle_StepAP242_ItemIdentifiedRepresentationUsage

    def Init(self, *args):
        """
        Init(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition, Handle_StepRepr_Representation theUsedRepresentation, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Init all fields own and inherited

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition
        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation
        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Init(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theName)

        Set field Name

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Name(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_TCollection_HAsciiString theDescription)

        Set field Description

        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetDescription(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Description(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, StepAP242_ItemIdentifiedRepresentationUsageDefinition theDefinition)

        Set field Definition

        :type theDefinition: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> StepAP242_ItemIdentifiedRepresentationUsageDefinition

        Returns field Definition

        :rtype: OCC.wrapper.StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Definition(self, *args)


    def SetUsedRepresentation(self, *args):
        """
        SetUsedRepresentation(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepRepr_Representation theUsedRepresentation)

        Set field UsedRepresentation

        :type theUsedRepresentation: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetUsedRepresentation(self, *args)


    def UsedRepresentation(self, *args):
        """
        UsedRepresentation(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_StepRepr_Representation

        Retuns field UsedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_UsedRepresentation(self, *args)


    def IdentifiedItem(self, *args):
        """
        IdentifiedItem(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Handle_StepRepr_HArray1OfRepresentationItem

        Returns field IdentifiedItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IdentifiedItem(self, *args)


    def NbIdentifiedItem(self, *args):
        """
        NbIdentifiedItem(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Standard_Integer

        Returns number of identified items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_NbIdentifiedItem(self, *args)


    def SetIdentifiedItem(self, *args):
        """
        SetIdentifiedItem(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_StepRepr_HArray1OfRepresentationItem theIdentifiedItem)

        Set fiels IdentifiedItem

        :type theIdentifiedItem: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfRepresentationItem

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetIdentifiedItem(self, *args)


    def IdentifiedItemValue(self, *args):
        """
        IdentifiedItemValue(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Standard_Integer const num) -> Handle_StepRepr_RepresentationItem

        Returns identified item with given number

        :type num: int
        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IdentifiedItemValue(self, *args)


    def SetIdentifiedItemValue(self, *args):
        """
        SetIdentifiedItemValue(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Standard_Integer const num, Handle_StepRepr_RepresentationItem theItem)

        Set identified item with given number

        :type num: int
        :type theItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_SetIdentifiedItemValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> char const *

        :rtype: const char *

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP242_ItemIdentifiedRepresentationUsage self)

        Memory deallocator for transient classes


        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP242_ItemIdentifiedRepresentationUsage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP242_ItemIdentifiedRepresentationUsage self)

        Increments the reference counter of this object


        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP242_ItemIdentifiedRepresentationUsage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_DecrementRefCounter(self, *args)

Handle_StepAP242_ItemIdentifiedRepresentationUsage_swigregister = _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_swigregister
Handle_StepAP242_ItemIdentifiedRepresentationUsage_swigregister(Handle_StepAP242_ItemIdentifiedRepresentationUsage)

def Handle_StepAP242_ItemIdentifiedRepresentationUsage_DownCast(thing):
    return _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_DownCast(thing)
Handle_StepAP242_ItemIdentifiedRepresentationUsage_DownCast = _StepAP242.Handle_StepAP242_ItemIdentifiedRepresentationUsage_DownCast

class StepAP242_ItemIdentifiedRepresentationUsageDefinition(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> StepAP242_ItemIdentifiedRepresentationUsageDefinition

        Returns a ItemIdentifiedRepresentationUsageDefinition select type


        """
        this = _StepAP242.new_StepAP242_ItemIdentifiedRepresentationUsageDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP242_ItemIdentifiedRepresentationUsageDefinition self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a ItemIdentifiedRepresentationUsageDefinition Kind Entity that is :
        1 -> AppliedApprovalAssignment
        2 -> AppliedDateAndTimeAssignment
        3 -> AppliedDateAssignment
        4 -> AppliedDocumentReference
        5 -> AppliedExternalIdentificationAssignment
        6 -> AppliedGroupAssignment
        7 -> AppliedOrganizationAssignment
        8 -> AppliedPersonAndOrganizationAssignment
        9 -> AppliedSecurityClassificationAssignment
        10 -> DimensionalSize
        11 -> GeneralProperty
        12 -> GeometricTolerance
        13 -> ProductDefinitionRelationship
        14 -> PropertyDefinition
        15 -> PropertyDefinitionRelationship
        16 -> ShapeAspect
        17 -> ShapeAspectRelationship
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_CaseNum(self, *args)


    def AppliedApprovalAssignment(self, *args):
        """
        AppliedApprovalAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedApprovalAssignment

        returns Value as a AppliedApprovalAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedApprovalAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedApprovalAssignment(self, *args)


    def AppliedDateAndTimeAssignment(self, *args):
        """
        AppliedDateAndTimeAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedDateAndTimeAssignment

        returns Value as a AppliedDateAndTimeAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedDateAndTimeAssignment(self, *args)


    def AppliedDateAssignment(self, *args):
        """
        AppliedDateAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedDateAssignment

        returns Value as a AppliedDateAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedDateAssignment(self, *args)


    def AppliedDocumentReference(self, *args):
        """
        AppliedDocumentReference(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedDocumentReference

        returns Value as a AppliedDocumentReference (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDocumentReference

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedDocumentReference(self, *args)


    def AppliedExternalIdentificationAssignment(self, *args):
        """
        AppliedExternalIdentificationAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedExternalIdentificationAssignment

        returns Value as a AppliedExternalIdentificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedExternalIdentificationAssignment(self, *args)


    def AppliedGroupAssignment(self, *args):
        """
        AppliedGroupAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedGroupAssignment

        returns Value as a AppliedGroupAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedGroupAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedGroupAssignment(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedOrganizationAssignment

        returns Value as a AppliedOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedOrganizationAssignment(self, *args)


    def AppliedPersonAndOrganizationAssignment(self, *args):
        """
        AppliedPersonAndOrganizationAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        returns Value as a AppliedPersonAndOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedPersonAndOrganizationAssignment(self, *args)


    def AppliedSecurityClassificationAssignment(self, *args):
        """
        AppliedSecurityClassificationAssignment(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepAP214_AppliedSecurityClassificationAssignment

        returns Value as a AppliedSecurityClassificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_AppliedSecurityClassificationAssignment(self, *args)


    def DimensionalSize(self, *args):
        """
        DimensionalSize(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepShape_DimensionalSize

        returns Value as a DimensionalSize (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalSize

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_DimensionalSize(self, *args)


    def GeneralProperty(self, *args):
        """
        GeneralProperty(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepBasic_GeneralProperty

        returns Value as a GeneralProperty (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_GeneralProperty(self, *args)


    def GeometricTolerance(self, *args):
        """
        GeometricTolerance(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepDimTol_GeometricTolerance

        returns Value as a GeometricTolerance (Null if another type)

        :rtype: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_GeometricTolerance(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as a ProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_ProductDefinitionRelationship(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepRepr_PropertyDefinition

        returns Value as a PropertyDefinition (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_PropertyDefinition(self, *args)


    def PropertyDefinitionRelationship(self, *args):
        """
        PropertyDefinitionRelationship(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepRepr_PropertyDefinitionRelationship

        returns Value as a PropertyDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRelationship

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_PropertyDefinitionRelationship(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP242.Handle_StepRepr_ShapeAspect

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepAP242_ItemIdentifiedRepresentationUsageDefinition self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_ShapeAspectRelationship(self, *args)

    __swig_destroy__ = _StepAP242.delete_StepAP242_ItemIdentifiedRepresentationUsageDefinition
StepAP242_ItemIdentifiedRepresentationUsageDefinition_swigregister = _StepAP242.StepAP242_ItemIdentifiedRepresentationUsageDefinition_swigregister
StepAP242_ItemIdentifiedRepresentationUsageDefinition_swigregister(StepAP242_ItemIdentifiedRepresentationUsageDefinition)



