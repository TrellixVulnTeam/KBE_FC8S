# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_QABugs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_QABugs')
    _QABugs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_QABugs', [dirname(__file__)])
        except ImportError:
            import _QABugs
            return _QABugs
        try:
            _mod = imp.load_module('_QABugs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _QABugs = swig_import_helper()
    del swig_import_helper
else:
    import _QABugs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _QABugs.delete_SwigPyIterator

    def value(self):
        return _QABugs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _QABugs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _QABugs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _QABugs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _QABugs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _QABugs.SwigPyIterator_copy(self)

    def next(self):
        return _QABugs.SwigPyIterator_next(self)

    def __next__(self):
        return _QABugs.SwigPyIterator___next__(self)

    def previous(self):
        return _QABugs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _QABugs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _QABugs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _QABugs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _QABugs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _QABugs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _QABugs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _QABugs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _QABugs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QABugs.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_QABugs.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _QABugs.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QABugs.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QABugs.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _QABugs.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _QABugs.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _QABugs.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _QABugs.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_QABugs.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _QABugs.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _QABugs.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QABugs.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _QABugs.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _QABugs.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _QABugs.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _QABugs.ptr_to_number(item)
ptr_to_number = _QABugs.ptr_to_number

def HashCode(*args):
    return _QABugs.HashCode(*args)
HashCode = _QABugs.HashCode

def ptr_equal(a, b):
    return _QABugs.ptr_equal(a, b)
ptr_equal = _QABugs.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
class QABugs_PresentableObject(AIS.AIS_InteractiveObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_QABugs_PresentableObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_QABugs_PresentableObject(self) 
            return h


    def __init__(self, *args):
        """
        __init__(QABugs_PresentableObject self, PrsMgr_TypeOfPresentation3d const aTypeOfPresentation3d=PrsMgr_TOP_AllView) -> QABugs_PresentableObject

        :type aTypeOfPresentation3d: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        this = _QABugs.new_QABugs_PresentableObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _QABugs.QABugs_PresentableObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _QABugs.QABugs_PresentableObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _QABugs.QABugs_PresentableObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _QABugs.delete_QABugs_PresentableObject
QABugs_PresentableObject_swigregister = _QABugs.QABugs_PresentableObject_swigregister
QABugs_PresentableObject_swigregister(QABugs_PresentableObject)

def QABugs_PresentableObject_get_type_name(*args):
    """
    QABugs_PresentableObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _QABugs.QABugs_PresentableObject_get_type_name(*args)

def QABugs_PresentableObject_get_type_descriptor(*args):
    """
    QABugs_PresentableObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _QABugs.QABugs_PresentableObject_get_type_descriptor(*args)

class QABugs_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Commands(*args):
        """
        Commands(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands(*args)

    Commands = staticmethod(Commands)

    def Commands_1(*args):
        """
        Commands_1(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_1(*args)

    Commands_1 = staticmethod(Commands_1)

    def Commands_2(*args):
        """
        Commands_2(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_2(*args)

    Commands_2 = staticmethod(Commands_2)

    def Commands_3(*args):
        """
        Commands_3(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_3(*args)

    Commands_3 = staticmethod(Commands_3)

    def Commands_4(*args):
        """
        Commands_4(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_4(*args)

    Commands_4 = staticmethod(Commands_4)

    def Commands_5(*args):
        """
        Commands_5(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_5(*args)

    Commands_5 = staticmethod(Commands_5)

    def Commands_6(*args):
        """
        Commands_6(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_6(*args)

    Commands_6 = staticmethod(Commands_6)

    def Commands_7(*args):
        """
        Commands_7(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_7(*args)

    Commands_7 = staticmethod(Commands_7)

    def Commands_8(*args):
        """
        Commands_8(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_8(*args)

    Commands_8 = staticmethod(Commands_8)

    def Commands_9(*args):
        """
        Commands_9(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_9(*args)

    Commands_9 = staticmethod(Commands_9)

    def Commands_10(*args):
        """
        Commands_10(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_10(*args)

    Commands_10 = staticmethod(Commands_10)

    def Commands_11(*args):
        """
        Commands_11(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_11(*args)

    Commands_11 = staticmethod(Commands_11)

    def Commands_12(*args):
        """
        Commands_12(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_12(*args)

    Commands_12 = staticmethod(Commands_12)

    def Commands_13(*args):
        """
        Commands_13(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_13(*args)

    Commands_13 = staticmethod(Commands_13)

    def Commands_14(*args):
        """
        Commands_14(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_14(*args)

    Commands_14 = staticmethod(Commands_14)

    def Commands_15(*args):
        """
        Commands_15(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_15(*args)

    Commands_15 = staticmethod(Commands_15)

    def Commands_16(*args):
        """
        Commands_16(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_16(*args)

    Commands_16 = staticmethod(Commands_16)

    def Commands_17(*args):
        """
        Commands_17(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_17(*args)

    Commands_17 = staticmethod(Commands_17)

    def Commands_18(*args):
        """
        Commands_18(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_18(*args)

    Commands_18 = staticmethod(Commands_18)

    def Commands_19(*args):
        """
        Commands_19(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_19(*args)

    Commands_19 = staticmethod(Commands_19)

    def Commands_20(*args):
        """
        Commands_20(Draw_Interpretor DI)

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _QABugs.QABugs__Commands_20(*args)

    Commands_20 = staticmethod(Commands_20)

    def __init__(self):
        this = _QABugs.new_QABugs_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _QABugs.delete_QABugs_
QABugs__swigregister = _QABugs.QABugs__swigregister
QABugs__swigregister(QABugs_)

def QABugs__Commands(*args):
    """
    QABugs__Commands(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands(*args)

def QABugs__Commands_1(*args):
    """
    QABugs__Commands_1(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_1(*args)

def QABugs__Commands_2(*args):
    """
    QABugs__Commands_2(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_2(*args)

def QABugs__Commands_3(*args):
    """
    QABugs__Commands_3(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_3(*args)

def QABugs__Commands_4(*args):
    """
    QABugs__Commands_4(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_4(*args)

def QABugs__Commands_5(*args):
    """
    QABugs__Commands_5(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_5(*args)

def QABugs__Commands_6(*args):
    """
    QABugs__Commands_6(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_6(*args)

def QABugs__Commands_7(*args):
    """
    QABugs__Commands_7(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_7(*args)

def QABugs__Commands_8(*args):
    """
    QABugs__Commands_8(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_8(*args)

def QABugs__Commands_9(*args):
    """
    QABugs__Commands_9(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_9(*args)

def QABugs__Commands_10(*args):
    """
    QABugs__Commands_10(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_10(*args)

def QABugs__Commands_11(*args):
    """
    QABugs__Commands_11(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_11(*args)

def QABugs__Commands_12(*args):
    """
    QABugs__Commands_12(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_12(*args)

def QABugs__Commands_13(*args):
    """
    QABugs__Commands_13(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_13(*args)

def QABugs__Commands_14(*args):
    """
    QABugs__Commands_14(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_14(*args)

def QABugs__Commands_15(*args):
    """
    QABugs__Commands_15(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_15(*args)

def QABugs__Commands_16(*args):
    """
    QABugs__Commands_16(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_16(*args)

def QABugs__Commands_17(*args):
    """
    QABugs__Commands_17(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_17(*args)

def QABugs__Commands_18(*args):
    """
    QABugs__Commands_18(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_18(*args)

def QABugs__Commands_19(*args):
    """
    QABugs__Commands_19(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_19(*args)

def QABugs__Commands_20(*args):
    """
    QABugs__Commands_20(Draw_Interpretor DI)

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _QABugs.QABugs__Commands_20(*args)

class Handle_QABugs_PresentableObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_QABugs_PresentableObject self)

        Nullify the handle


        """
        return _QABugs.Handle_QABugs_PresentableObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_QABugs_PresentableObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_QABugs_PresentableObject self, QABugs_PresentableObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _QABugs.Handle_QABugs_PresentableObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_QABugs_PresentableObject self, Handle_QABugs_PresentableObject theHandle) -> Handle_QABugs_PresentableObject
        assign(Handle_QABugs_PresentableObject self, QABugs_PresentableObject thePtr) -> Handle_QABugs_PresentableObject
        assign(Handle_QABugs_PresentableObject self, Handle_QABugs_PresentableObject theHandle) -> Handle_QABugs_PresentableObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _QABugs.Handle_QABugs_PresentableObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_QABugs_PresentableObject self) -> QABugs_PresentableObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _QABugs.Handle_QABugs_PresentableObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_QABugs_PresentableObject self) -> QABugs_PresentableObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _QABugs.Handle_QABugs_PresentableObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_QABugs_PresentableObject self) -> QABugs_PresentableObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _QABugs.Handle_QABugs_PresentableObject___ref__(self, *args)


    def __hash__(self):
        return _QABugs.Handle_QABugs_PresentableObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _QABugs.Handle_QABugs_PresentableObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _QABugs.new_Handle_QABugs_PresentableObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_QABugs.Handle_QABugs_PresentableObject_DownCast)
    __swig_destroy__ = _QABugs.delete_Handle_QABugs_PresentableObject

    def get_type_name(self, *args):
        """
        get_type_name(Handle_QABugs_PresentableObject self) -> char const *

        :rtype: const char *

        """
        return _QABugs.Handle_QABugs_PresentableObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _QABugs.Handle_QABugs_PresentableObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _QABugs.Handle_QABugs_PresentableObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_QABugs_PresentableObject self) -> AIS_KindOfInteractive

        Returns the kind of Interactive Object:
        -   None
        -   Datum
        -   Relation
        -   Object
        By default, the   interactive object has a None type.
        Because specific shapes entail different behavior
        according to their sub-shapes, you may need to
        create a Local Context. This will allow you to
        specify the additional characteristics which you
        need to handle these shapes.

        :rtype: OCC.wrapper.AIS.AIS_KindOfInteractive

        """
        return _QABugs.Handle_QABugs_PresentableObject_Type(self, *args)


    def Signature(self, *args):
        """
        Signature(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Specifies additional characteristics of Interactive
        Objects. A signature is, in fact, an index with integer
        values assigned different properties.
        This method is frequently used in conjuction with
        Type to give a particular type and signature to an
        Interactive Object. By default, the Interactive Object
        has a None type and a signature of 0. Among the
        datums, this signature is attributed to the shape
        The remaining datums have the following default signatures:
        -   Point                   signature 1
        -   Axis                     signature 2
        -   Trihedron                signature 3
        -   PlaneTrihedron            signature 4
        -   Line                     signature 5
        -   Circle                  signature 6
        -   Plane                   signature 7.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_Signature(self, *args)


    def AcceptShapeDecomposition(self, *args):
        """
        AcceptShapeDecomposition(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Informs the graphic context that the interactive Object
        may be decomposed into sub-shapes for dynamic selection.
        The most used Interactive Object is AIS_Shape.
        Activation methods for standard selection modes are
        proposed in the Interactive Context. These include
        selection by vertex or by edges. For datums with the
        same behavior as AIS_Shape, such as vetices and
        edges, we must redefine the virtual method so that
        AcceptShapeDecomposition returns false.
        Rule for selection :
        Mode 0 :  Selection of  the interactive Object itself
        Mode 1 :  Selection of vertices
        Mode 2 :  Selection Of Edges
        Mode 3 :  Selection Of Wires
        Mode 4 :  Selection Of Faces ...

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_AcceptShapeDecomposition(self, *args)


    def SetCurrentFacingModel(self, *args):
        """
        SetCurrentFacingModel(Handle_QABugs_PresentableObject self, Aspect_TypeOfFacingModel const aModel=Aspect_TOFM_BOTH_SIDE)

        change the current facing model apply on polygons for
        SetColor(), SetTransparency(), SetMaterial() methods
        default facing model is Aspect_TOFM_TWO_SIDE. This mean that attributes is
        applying both on the front and back face.

        :type aModel: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetCurrentFacingModel(self, *args)


    def CurrentFacingModel(self, *args):
        """
        CurrentFacingModel(Handle_QABugs_PresentableObject self) -> Aspect_TypeOfFacingModel

        Returns the current facing model which is in effect.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfFacingModel

        """
        return _QABugs.Handle_QABugs_PresentableObject_CurrentFacingModel(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_QABugs_PresentableObject self, Quantity_Color theColor)

        Only the interactive object knowns which Drawer attribute is affected by the color, if any
        (ex: for a wire,it's the wireaspect field of the drawer, but for a vertex, only the point aspect field is affected by the color).
        WARNING : Do not forget to set the corresponding fields here (hasOwnColor and myDrawer->SetColor())

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetColor(self, *args)


    def UnsetColor(self, *args):
        """
        UnsetColor(Handle_QABugs_PresentableObject self)

        Removes color settings. Only the Interactive Object
        knows which Drawer attribute is   affected by the color
        setting. For a wire, for example, wire aspect is the
        attribute affected. For a vertex, however, only point
        aspect is affected by the color setting.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetColor(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_QABugs_PresentableObject self, Standard_Real const aValue)

        Allows you to provide the setting aValue for width.
        Only the Interactive Object knows which Drawer
        attribute is affected by the width setting.

        :type aValue: float

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetWidth(self, *args)


    def UnsetWidth(self, *args):
        """UnsetWidth(Handle_QABugs_PresentableObject self)"""
        return _QABugs.Handle_QABugs_PresentableObject_UnsetWidth(self, *args)


    def AcceptDisplayMode(self, *args):
        """
        AcceptDisplayMode(Handle_QABugs_PresentableObject self, Standard_Integer const aMode) -> Standard_Boolean

        Returns true if the class of objects accepts the display mode aMode.
        The interactive context can have a default mode of
        representation for the set of Interactive Objects. This
        mode may not be accepted by a given class of
        objects. Consequently, this virtual method allowing us
        to get information about the class in question must be implemented.

        :type aMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_AcceptDisplayMode(self, *args)


    def DefaultDisplayMode(self, *args):
        """
        DefaultDisplayMode(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Returns the default display mode. This method is to
        be implemented when the main mode is not mode 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_DefaultDisplayMode(self, *args)


    def Redisplay(self, *args):
        """
        Redisplay(Handle_QABugs_PresentableObject self, Standard_Boolean const AllModes)

        Updates the active presentation; if <AllModes> = Standard_True
        all the presentations inside are recomputed.
        IMPORTANT: It is preferable to call Redisplay method of
        corresponding AIS_InteractiveContext instance for cases when it
        is accessible. This method just redirects call to myCTXPtr,
        so this class field must be up to date for proper result.

        :type AllModes: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_Redisplay(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Handle_QABugs_PresentableObject self, Standard_Boolean const aFlag)

        Sets the infinite state flag aFlage.
        if   <aFlag>   = True  ,  the   interactiveObject  is
        considered as infinite, i.e. its graphic presentations
        are not taken in account for View FitAll...

        :type aFlag: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetInfiniteState(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the interactive object is infinite. In this
        case, its graphic presentations are not taken into
        account in the fit-all view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsInfinite(self, *args)


    def HasInteractiveContext(self, *args):
        """
        HasInteractiveContext(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Indicates whether the Interactive Object has a pointer to an interactive context.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasInteractiveContext(self, *args)


    def GetContext(self, *args):
        """
        GetContext(Handle_QABugs_PresentableObject self) -> Handle_AIS_InteractiveContext

        Returns the context pointer to the interactive context.

        :rtype: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetContext(self, *args)


    def SetContext(self, *args):
        """
        SetContext(Handle_QABugs_PresentableObject self, Handle_AIS_InteractiveContext aCtx)

        Sets the interactive context aCtx and provides a link
        to the default drawing tool or "Drawer" if there is none.

        :type aCtx: OCC.wrapper.AIS.Handle_AIS_InteractiveContext

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetContext(self, *args)


    def HasOwner(self, *args):
        """
        HasOwner(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the object has an owner attributed to it.
        The owner can be a shape for a set of sub-shapes or
        a sub-shape for sub-shapes which it is composed of,
        and takes the form of a transient.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasOwner(self, *args)


    def GetOwner(self, *args):
        """
        Returns the owner of the Interactive Object.
        The owner can be a shape for a set of sub-shapes or
        a sub-shape for sub-shapes which it is composed of,
        and takes the form of a transient.
        There are two types of owners:
        -   Direct owners, decomposition shapes such as
        edges, wires, and faces.
        -   Users, presentable objects connecting to sensitive
        primitives, or a shape which has been decomposed.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        res = _QABugs.Handle_QABugs_PresentableObject_GetOwner(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetOwner(self, *args):
        """
        SetOwner(Handle_QABugs_PresentableObject self, Handle_Standard_Transient theApplicativeEntity)

        Allows you to attribute the owner theApplicativeEntity to
        an Interactive Object. This can be a shape for a set of
        sub-shapes or a sub-shape for sub-shapes which it
        is composed of. The owner takes the form of a transient.

        :type theApplicativeEntity: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetOwner(self, *args)


    def ClearOwner(self, *args):
        """
        ClearOwner(Handle_QABugs_PresentableObject self)

        Each Interactive Object has methods which allow us
        to attribute an Owner to it in the form of a Transient.
        This method removes the owner from the graphic entity.


        """
        return _QABugs.Handle_QABugs_PresentableObject_ClearOwner(self, *args)


    def HasDisplayMode(self, *args):
        """
        HasDisplayMode(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the Interactive Object has a display
        mode setting. Otherwise, it is displayed in Neutral Point.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasDisplayMode(self, *args)


    def SetDisplayMode(self, *args):
        """
        SetDisplayMode(Handle_QABugs_PresentableObject self, Standard_Integer const aMode)

        Sets the display mode aMode for the interactive object.
        An object can have its own temporary display mode,
        which is different from that proposed by the interactive context.
        The range of possibilities currently proposed is the following:
        -   AIS_WireFrame
        -   AIS_Shaded
        This range can, however, be extended through the creation of new display modes.

        :type aMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetDisplayMode(self, *args)


    def UnsetDisplayMode(self, *args):
        """
        UnsetDisplayMode(Handle_QABugs_PresentableObject self)

        Removes display mode settings from the interactive object.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetDisplayMode(self, *args)


    def DisplayMode(self, *args):
        """
        DisplayMode(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Returns the display mode setting of the Interactive Object.
        The range of possibilities is the following:
        -   AIS_WireFrame
        -   AIS_Shaded
        This range can, however, be extended through the
        creation of new display modes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_DisplayMode(self, *args)


    def HasHilightMode(self, *args):
        """
        HasHilightMode(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the Interactive Object is in highlight mode.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasHilightMode(self, *args)


    def HilightMode(self, *args):
        """
        HilightMode(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Returns highlight display mode.
        This is obsolete method for backward compatibility - use ::HilightAttributes() and ::DynamicHilightAttributes() instead.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_HilightMode(self, *args)


    def SetHilightMode(self, *args):
        """
        SetHilightMode(Handle_QABugs_PresentableObject self, Standard_Integer const theMode)

        Sets highlight display mode.
        This is obsolete method for backward compatibility - use ::HilightAttributes() and ::DynamicHilightAttributes() instead.

        :type theMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetHilightMode(self, *args)


    def UnsetHilightMode(self, *args):
        """
        UnsetHilightMode(Handle_QABugs_PresentableObject self)

        Unsets highlight display mode.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetHilightMode(self, *args)


    def HasColor(self, *args):
        """
        HasColor(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the Interactive Object has color.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_QABugs_PresentableObject self, Quantity_Color theColor)

        Returns the color setting of the Interactive Object.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _QABugs.Handle_QABugs_PresentableObject_Color(self, *args)


    def HasWidth(self, *args):
        """
        HasWidth(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the Interactive Object has width.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasWidth(self, *args)


    def Width(self, *args):
        """
        Width(Handle_QABugs_PresentableObject self) -> Standard_Real

        Returns the width setting of the Interactive Object.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _QABugs.Handle_QABugs_PresentableObject_Width(self, *args)


    def HasMaterial(self, *args):
        """
        HasMaterial(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if the Interactive Object has a setting for material.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasMaterial(self, *args)


    def Material(self, *args):
        """
        Material(Handle_QABugs_PresentableObject self) -> Graphic3d_NameOfMaterial

        Returns the current material setting.
        This will be on of the following materials:
        -   Brass
        -   Bronze
        -   Gold
        -   Pewter
        -   Silver
        -   Stone.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _QABugs.Handle_QABugs_PresentableObject_Material(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(Handle_QABugs_PresentableObject self, Graphic3d_MaterialAspect aName)

        Sets the material aMat defining this display attribute
        for the interactive object.
        Material aspect determines shading aspect, color and
        transparency of visible entities.

        :type aName: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetMaterial(self, *args)


    def UnsetMaterial(self, *args):
        """
        UnsetMaterial(Handle_QABugs_PresentableObject self)

        Removes the setting for material.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetMaterial(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_QABugs_PresentableObject self, Standard_Real const aValue=0.6)

        Attributes a setting aValue for transparency.
        The transparency value should be between 0.0 and 1.0.
        At 0.0 an object will be totally opaque, and at 1.0, fully transparent.
        Warning At a value of 1.0, there may be nothing visible.

        :type aValue: float

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetTransparency(self, *args)


    def IsTransparent(self, *args):
        """
        IsTransparent(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if there is a transparency setting.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsTransparent(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_QABugs_PresentableObject self) -> Standard_Real

        Returns the transparency setting.
        This will be between 0.0 and 1.0.
        At 0.0 an object will be totally opaque, and at 1.0, fully transparent.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _QABugs.Handle_QABugs_PresentableObject_Transparency(self, *args)


    def UnsetTransparency(self, *args):
        """
        UnsetTransparency(Handle_QABugs_PresentableObject self)

        Removes the transparency setting. The object is opaque by default.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetTransparency(self, *args)


    def UnsetAttributes(self, *args):
        """
        UnsetAttributes(Handle_QABugs_PresentableObject self)

        Clears settings provided by the drawing tool aDrawer.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetAttributes(self, *args)


    def HasPresentation(self, *args):
        """
        HasPresentation(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns TRUE when this object has a presentation
        in the current DisplayMode()

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasPresentation(self, *args)


    def Presentation(self, *args):
        """
        Presentation(Handle_QABugs_PresentableObject self) -> Handle_Prs3d_Presentation

        Returns the current presentation of this object
        according to the current DisplayMode()

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _QABugs.Handle_QABugs_PresentableObject_Presentation(self, *args)


    def SetAspect(self, *args):
        """
        SetAspect(Handle_QABugs_PresentableObject self, Handle_Prs3d_BasicAspect anAspect)

        Sets the graphic basic aspect to the current presentation.

        :type anAspect: OCC.wrapper.Prs3d.Handle_Prs3d_BasicAspect

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetAspect(self, *args)


    def SetPolygonOffsets(self, *args):
        """
        SetPolygonOffsets(Handle_QABugs_PresentableObject self, Standard_Integer const aMode, Standard_ShortReal const aFactor=1.0, Standard_ShortReal const aUnits=0.0)

        Sets up polygon offsets for this object.
        It modifies all existing presentations of <anObj> (if any),
        so it is reasonable to call this method after <anObj> has been displayed.
        Otherwise, Compute() method should pass Graphic3d_AspectFillArea3d
        aspect from <myDrawer> to Graphic3d_Group to make polygon offsets work.

        <aMode> parameter can contain various combinations of
        Aspect_PolygonOffsetMode enumeration elements (Aspect_POM_None means
        that polygon offsets are not changed).
        If <aMode> is different from Aspect_POM_Off and Aspect_POM_None, then <aFactor> and <aUnits>
        arguments are used by graphic renderer to calculate a depth offset value:

        offset = <aFactor> * m + <aUnits> * r, where
        m - maximum depth slope for the polygon currently being displayed,
        r - minimum window coordinates depth resolution (implementation-specific).

        Deafult settings for OCC 3D viewer: mode = Aspect_POM_Fill, factor = 1., units = 0.

        Negative offset values move polygons closer to the viewport,
        while positive values shift polygons away.
        Consult OpenGL reference for details (glPolygonOffset function description).

        NOTE: This method has a side effect - it creates own shading aspect
        if not yet created, so it is better to set up object material,
        color, etc. first.

        :type aMode: int
        :type aFactor: float
        :type aUnits: float

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetPolygonOffsets(self, *args)


    def HasPolygonOffsets(self, *args):
        """
        HasPolygonOffsets(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns Standard_True if <myDrawer> has non-null shading aspect

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasPolygonOffsets(self, *args)


    def PolygonOffsets(self, *args):
        """
        PolygonOffsets(Handle_QABugs_PresentableObject self)

        Retrieves current polygon offsets settings from <myDrawer>.

        :type aMode: int
        :type aFactor: float
        :type aUnits: float

        """
        return _QABugs.Handle_QABugs_PresentableObject_PolygonOffsets(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_QABugs_PresentableObject self, Bnd_Box theBndBox)

        Returns bounding box of object correspondingly to its current display mode.

        :type theBndBox: OCC.wrapper.Bnd.Bnd_Box

        """
        return _QABugs.Handle_QABugs_PresentableObject_BoundingBox(self, *args)


    def SetIsoOnTriangulation(self, *args):
        """
        SetIsoOnTriangulation(Handle_QABugs_PresentableObject self, Standard_Boolean const theIsEnabled)

        Enables or disables on-triangulation build of isolines according to the flag given.

        :type theIsEnabled: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetIsoOnTriangulation(self, *args)


    def SynchronizeAspects(self, *args):
        """
        SynchronizeAspects(Handle_QABugs_PresentableObject self)

        Synchronize presentation aspects after their modification.

        This method should be called after modifying primitive aspect properties (material, texture, shader)
        so that modifications will take effect on already computed presentation groups (thus avoiding re-displaying the object).


        """
        return _QABugs.Handle_QABugs_PresentableObject_SynchronizeAspects(self, *args)


    def RecomputePrimitives(self, *args):
        """
        RecomputePrimitives(Handle_QABugs_PresentableObject self)
        RecomputePrimitives(Handle_QABugs_PresentableObject self, Standard_Integer const theMode)

        Re-computes the sensitive primitives which correspond to the <theMode>th selection mode.
        IMPORTANT: Do not use this method to update selection primitives except implementing custom selection manager!
        selection manager! This method does not take into account necessary BVH updates, but may invalidate
        the pointers it refers to. TO UPDATE SELECTION properly from outside classes, use method UpdateSelection.

        :type theMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_RecomputePrimitives(self, *args)


    def AddSelection(self, *args):
        """
        AddSelection(Handle_QABugs_PresentableObject self, Handle_SelectMgr_Selection aSelection, Standard_Integer const aMode)

        Adds the selection aSelection with the selection mode
        index aMode to this framework.

        :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection
        :type aMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_AddSelection(self, *args)


    def ClearSelections(self, *args):
        """
        ClearSelections(Handle_QABugs_PresentableObject self, Standard_Boolean const update)

        Empties all the selections in the SelectableObject
        <update> parameter defines whether all object's
        selections should be flagged for further update or not.
        This improved method can be used to recompute an
        object's selection (without redisplaying the object
        completely) when some selection mode is activated not for the first time.

        :type update: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_ClearSelections(self, *args)


    def Selection(self, *args):
        """
        Returns the selection having specified selection mode or NULL.

        :type theMode: int
        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        res = _QABugs.Handle_QABugs_PresentableObject_Selection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasSelection(self, *args):
        """
        HasSelection(Handle_QABugs_PresentableObject self, Standard_Integer const theMode) -> Standard_Boolean

        Returns true if a selection corresponding to the selection mode theMode was computed for this object.

        :type theMode: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasSelection(self, *args)


    def Selections(self, *args):
        """
        Return the sequence of selections.

        :rtype: OCC.wrapper.SelectMgr.SelectMgr_SequenceOfSelection

        """
        res = _QABugs.Handle_QABugs_PresentableObject_Selections(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_QABugs_PresentableObject self)

        Begins the iteration scanning for sensitive primitives.


        """
        return _QABugs.Handle_QABugs_PresentableObject_Init(self, *args)


    def More(self, *args):
        """
        More(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Continues the iteration scanning for sensitive primitives.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_More(self, *args)


    def Next(self, *args):
        """
        Next(Handle_QABugs_PresentableObject self)

        Continues the iteration scanning for sensitive primitives.


        """
        return _QABugs.Handle_QABugs_PresentableObject_Next(self, *args)


    def CurrentSelection(self, *args):
        """
        Returns the current selection in this framework.

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        res = _QABugs.Handle_QABugs_PresentableObject_CurrentSelection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ResetTransformation(self, *args):
        """
        ResetTransformation(Handle_QABugs_PresentableObject self)

        resets local transformation to identity.


        """
        return _QABugs.Handle_QABugs_PresentableObject_ResetTransformation(self, *args)


    def UpdateTransformation(self, *args):
        """
        UpdateTransformation(Handle_QABugs_PresentableObject self)

        Recomputes the location of the selection aSelection.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UpdateTransformation(self, *args)


    def UpdateTransformations(self, *args):
        """
        UpdateTransformations(Handle_QABugs_PresentableObject self, Handle_SelectMgr_Selection aSelection)

        Updates locations in all sensitive entities from <aSelection>
        and in corresponding entity owners.

        :type aSelection: OCC.wrapper.SelectMgr.Handle_SelectMgr_Selection

        """
        return _QABugs.Handle_QABugs_PresentableObject_UpdateTransformations(self, *args)


    def HilightSelected(self, *args):
        """
        HilightSelected(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentationManager PM, NCollection_Sequence_Handle_SelectMgr_EntityOwner Seq)

        Method which draws selected owners ( for fast presentation draw )

        :type PM: OCC.wrapper.SelectMgr.Handle_PrsMgr_PresentationManager3d
        :type Seq: OCC.wrapper.SelectMgr.SelectMgr_SequenceOfOwner

        """
        return _QABugs.Handle_QABugs_PresentableObject_HilightSelected(self, *args)


    def ClearSelected(self, *args):
        """
        ClearSelected(Handle_QABugs_PresentableObject self)

        Method which clear all selected owners belonging
        to this selectable object ( for fast presentation draw )


        """
        return _QABugs.Handle_QABugs_PresentableObject_ClearSelected(self, *args)


    def ClearDynamicHighlight(self, *args):
        """
        ClearDynamicHighlight(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentationManager theMgr)

        Method that needs to be implemented when the object
        manages selection and dynamic highlighting on its own.
        Clears or invalidates dynamic highlight presentation.
        By default it clears immediate draw of given presentation
        manager.

        :type theMgr: OCC.wrapper.SelectMgr.Handle_PrsMgr_PresentationManager3d

        """
        return _QABugs.Handle_QABugs_PresentableObject_ClearDynamicHighlight(self, *args)


    def HilightOwnerWithColor(self, *args):
        """
        HilightOwnerWithColor(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentationManager thePM, Handle_Prs3d_Drawer theStyle, Handle_SelectMgr_EntityOwner theOwner)

        Method which hilight an owner belonging to
        this selectable object  ( for fast presentation draw )

        :type thePM: OCC.wrapper.SelectMgr.Handle_PrsMgr_PresentationManager3d
        :type theStyle: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer
        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner

        """
        return _QABugs.Handle_QABugs_PresentableObject_HilightOwnerWithColor(self, *args)


    def IsAutoHilight(self, *args):
        """
        IsAutoHilight(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        If returns True, the old mechanism for highlighting
        selected objects is used (HilightSelected Method may be empty).
        If returns False, the HilightSelected method will be
        fully responsible for highlighting selected entity
        owners belonging to this selectable object.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsAutoHilight(self, *args)


    def SetAutoHilight(self, *args):
        """
        SetAutoHilight(Handle_QABugs_PresentableObject self, Standard_Boolean const newAutoHilight)

        Set AutoHilight property to true or false
        Sets  up  Transform  Persistence Mode  for  this  object

        :type newAutoHilight: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetAutoHilight(self, *args)


    def GetHilightPresentation(self, *args):
        """
        GetHilightPresentation(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentationManager TheMgr) -> Handle_Prs3d_Presentation

        :type TheMgr: OCC.wrapper.SelectMgr.Handle_PrsMgr_PresentationManager3d
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetHilightPresentation(self, *args)


    def GetSelectPresentation(self, *args):
        """
        GetSelectPresentation(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentationManager TheMgr) -> Handle_Prs3d_Presentation

        :type TheMgr: OCC.wrapper.SelectMgr.Handle_PrsMgr_PresentationManager3d
        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Presentation

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetSelectPresentation(self, *args)


    def ErasePresentations(self, *args):
        """
        ErasePresentations(Handle_QABugs_PresentableObject self, Standard_Boolean theToRemove)

        Removes presentations returned by GetHilightPresentation() and GetSelectPresentation().

        :type theToRemove: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_ErasePresentations(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_QABugs_PresentableObject self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID and update all presentations of the selectable object.
        The layers mechanism allows drawing objects in higher layers in overlay of objects in lower layers.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetZLayer(self, *args)


    def UpdateSelection(self, *args):
        """
        UpdateSelection(Handle_QABugs_PresentableObject self, Standard_Integer const theMode=-1)

        Sets update status FULL to selections of the object. Must be used as the only method of UpdateSelection
        from outer classes to prevent BVH structures from being outdated.

        :type theMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_UpdateSelection(self, *args)


    def SetAssemblyOwner(self, *args):
        """
        SetAssemblyOwner(Handle_QABugs_PresentableObject self, Handle_SelectMgr_EntityOwner theOwner, Standard_Integer const theMode=-1)

        Sets common entity owner for assembly sensitive object entities

        :type theOwner: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner
        :type theMode: int

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetAssemblyOwner(self, *args)


    def BndBoxOfSelected(self, *args):
        """
        BndBoxOfSelected(Handle_QABugs_PresentableObject self, opencascade::handle< SelectMgr_IndexedMapOfOwner > const & theOwners) -> Bnd_Box

        Returns a bounding box of sensitive entities with the owners given
        if they are a part of activated selection

        :type theOwners: OCC.wrapper.SelectMgr.Handle_SelectMgr_IndexedMapOfOwner
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _QABugs.Handle_QABugs_PresentableObject_BndBoxOfSelected(self, *args)


    def GlobalSelectionMode(self, *args):
        """
        GlobalSelectionMode(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Returns the mode for selection of object as a whole

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_GlobalSelectionMode(self, *args)


    def GlobalSelOwner(self, *args):
        """
        GlobalSelOwner(Handle_QABugs_PresentableObject self) -> Handle_SelectMgr_EntityOwner

        Returns the owner of mode for selection of object as a whole

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner

        """
        return _QABugs.Handle_QABugs_PresentableObject_GlobalSelOwner(self, *args)


    def GetAssemblyOwner(self, *args):
        """
        Returns common entity owner if the object is an assembly

        :rtype: OCC.wrapper.SelectMgr.Handle_SelectMgr_EntityOwner

        """
        res = _QABugs.Handle_QABugs_PresentableObject_GetAssemblyOwner(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Presentations(self, *args):
        """
        Presentations(Handle_QABugs_PresentableObject self) -> NCollection_Sequence_PrsMgr_ModedPresentation

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_Presentations

        """
        return _QABugs.Handle_QABugs_PresentableObject_Presentations(self, *args)


    def TypeOfPresentation3d(self, *args):
        """
        TypeOfPresentation3d(Handle_QABugs_PresentableObject self) -> PrsMgr_TypeOfPresentation3d

        Returns information on whether the object accepts display in HLR mode or not.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _QABugs.Handle_QABugs_PresentableObject_TypeOfPresentation3d(self, *args)


    def TransformPersistence(self, *args):
        """
        Returns Transformation Persistence defining a special Local Coordinate system where this presentable object is located or NULL handle if not defined.
        Position of the object having Transformation Persistence is mutable and depends on camera position.
        The same applies to a bounding box of the object.
        @sa Graphic3d_TransformPers class description

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _QABugs.Handle_QABugs_PresentableObject_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_QABugs_PresentableObject self, Handle_Graphic3d_TransformPers theTrsfPers)
        SetTransformPersistence(Handle_QABugs_PresentableObject self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePoint)

        Sets up Transform Persistence Mode for this object.
        This function used to lock in object position, rotation and / or zooming relative to camera position.
        Object will be drawn in the origin setted by thePoint parameter (except Graphic3d_TMF_TriedronPers flag
        - see description later). theMode should be:
        -   Graphic3d_TMF_None - no persistence attributes (reset);
        -   Graphic3d_TMF_ZoomPers - object doesn't resize;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_ZoomRotatePers - object doesn't resize and rotate;
        -   Graphic3d_TMF_RotatePers - object doesn't rotate;
        -   Graphic3d_TMF_TriedronPers - object behaves like trihedron.
        If Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d persistence mode selected thePoint coordinates X and Y means:
        -   X = 0.0, Y = 0.0 - center of view window;
        -   X > 0.0, Y > 0.0 - right upper corner of view window;
        -   X > 0.0, Y < 0.0 - right lower corner of view window;
        -   X < 0.0, Y > 0.0 - left  upper corner of view window;
        -   X < 0.0, Y < 0.0 - left  lower corner of view window.
        And Z coordinate defines the gap from border of view window (except center position).

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetTransformPersistence(self, *args)


    def GetTransformPersistenceMode(self, *args):
        """
        GetTransformPersistenceMode(Handle_QABugs_PresentableObject self) -> Graphic3d_TransModeFlags

        Gets  Transform  Persistence Mode  for  this  object

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetTransformPersistenceMode(self, *args)


    def GetTransformPersistencePoint(self, *args):
        """
        GetTransformPersistencePoint(Handle_QABugs_PresentableObject self) -> gp_Pnt

        Gets  point  of  transform  persistence for  this  object

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetTransformPersistencePoint(self, *args)


    def SetTypeOfPresentation(self, *args):
        """
        SetTypeOfPresentation(Handle_QABugs_PresentableObject self, PrsMgr_TypeOfPresentation3d const aType)

        :type aType: OCC.wrapper.PrsMgr.PrsMgr_TypeOfPresentation3d

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetTypeOfPresentation(self, *args)


    def SetToUpdate(self, *args):
        """
        SetToUpdate(Handle_QABugs_PresentableObject self, Standard_Integer const aMode)
        SetToUpdate(Handle_QABugs_PresentableObject self)

        flags all the Presentations to be Updated.


        """
        return _QABugs.Handle_QABugs_PresentableObject_SetToUpdate(self, *args)


    def ToBeUpdated(self, *args):
        """
        ToBeUpdated(Handle_QABugs_PresentableObject self, NCollection_List_Standard_Integer ListOfMode)

        gives the list of modes which are flagged "to be updated".

        :type ListOfMode: OCC.wrapper.TColStd.TColStd_ListOfInteger

        """
        return _QABugs.Handle_QABugs_PresentableObject_ToBeUpdated(self, *args)


    def LocalTransformationGeom(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _QABugs.Handle_QABugs_PresentableObject_LocalTransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLocalTransformation(self, *args):
        """
        SetLocalTransformation(Handle_QABugs_PresentableObject self, gp_Trsf theTrsf)
        SetLocalTransformation(Handle_QABugs_PresentableObject self, Handle_Geom_Transformation theTrsf)

        Sets local transformation to theTransformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetLocalTransformation(self, *args)


    def HasTransformation(self, *args):
        """
        HasTransformation(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if object has a transformation that is different from the identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasTransformation(self, *args)


    def TransformationGeom(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _QABugs.Handle_QABugs_PresentableObject_TransformationGeom(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def LocalTransformation(self, *args):
        """
        Return the local transformation.
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _QABugs.Handle_QABugs_PresentableObject_LocalTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return the transformation taking into account transformation of parent object(s).
        Note that the local transformation of the object having Transformation Persistence
        is applied within Local Coordinate system defined by this Persistence.

        :rtype: OCC.wrapper.gp.gp_Trsf

        """
        res = _QABugs.Handle_QABugs_PresentableObject_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InversedTransformation(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        res = _QABugs.Handle_QABugs_PresentableObject_InversedTransformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ZLayer(self, *args):
        """
        ZLayer(Handle_QABugs_PresentableObject self) -> Graphic3d_ZLayerId

        Get ID of Z layer.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _QABugs.Handle_QABugs_PresentableObject_ZLayer(self, *args)


    def AddClipPlane(self, *args):
        """
        AddClipPlane(Handle_QABugs_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Adds clip plane for graphical clipping for all display mode
        presentations. The composition of clip planes truncates the rendering
        space to convex volume. Please be aware that number of supported
        clip plane is limited. The planes which exceed the limit are ignored.
        Besides of this, some planes can be already set in view where the object
        is shown: the number of these planes should be substracted from limit
        to predict the maximum possible number of object clipping planes.
        @param thePlane [in] the clip plane to be appended to map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _QABugs.Handle_QABugs_PresentableObject_AddClipPlane(self, *args)


    def RemoveClipPlane(self, *args):
        """
        RemoveClipPlane(Handle_QABugs_PresentableObject self, Handle_Graphic3d_ClipPlane thePlane)

        Removes previously added clip plane.
        @param thePlane [in] the clip plane to be removed from map of clip planes.

        :type thePlane: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _QABugs.Handle_QABugs_PresentableObject_RemoveClipPlane(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_QABugs_PresentableObject self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)
        SetClipPlanes(Handle_QABugs_PresentableObject self, Graphic3d_SequenceOfHClipPlane thePlanes)

        :type thePlanes: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfHClipPlane

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes.
        @return set of previously added clip planes for all display mode presentations.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _QABugs.Handle_QABugs_PresentableObject_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_QABugs_PresentableObject self, Standard_Boolean const theIsMutable)

        Sets if the object has mutable nature (content or location will be changed regularly).
        This method should be called before object displaying to take effect.

        :type theIsMutable: bool

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if object has mutable nature (content or location are be changed regularly).
        Mutable object will be managed in different way than static onces (another optimizations).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsMutable(self, *args)


    def AddChild(self, *args):
        """
        AddChild(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Makes theObject child of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _QABugs.Handle_QABugs_PresentableObject_AddChild(self, *args)


    def RemoveChild(self, *args):
        """
        RemoveChild(Handle_QABugs_PresentableObject self, Handle_PrsMgr_PresentableObject theObject)

        Removes theObject from children of current object in scene hierarchy.

        :type theObject: OCC.wrapper.PrsMgr.Handle_PrsMgr_PresentableObject

        """
        return _QABugs.Handle_QABugs_PresentableObject_RemoveChild(self, *args)


    def Children(self, *args):
        """
        Returns children of the current object.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_ListOfPresentableObjects

        """
        res = _QABugs.Handle_QABugs_PresentableObject_Children(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasOwnPresentations(self, *args):
        """
        HasOwnPresentations(Handle_QABugs_PresentableObject self) -> Standard_Boolean

        Returns true if object should have own presentations.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_HasOwnPresentations(self, *args)


    def Parent(self, *args):
        """
        Parent(Handle_QABugs_PresentableObject self) -> PrsMgr_PresentableObject

        Returns parent of current object in scene hierarchy.

        :rtype: OCC.wrapper.PrsMgr.PrsMgr_PresentableObjectPointer

        """
        return _QABugs.Handle_QABugs_PresentableObject_Parent(self, *args)


    def SetAttributes(self, *args):
        """
        SetAttributes(Handle_QABugs_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetAttributes(self, *args)


    def Attributes(self, *args):
        """
        Returns the attributes settings.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _QABugs.Handle_QABugs_PresentableObject_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalSelected and Prs3d_TypeOfHighlight_Selected defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _QABugs.Handle_QABugs_PresentableObject_HilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHilightAttributes(self, *args):
        """
        SetHilightAttributes(Handle_QABugs_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the hilight drawing tool theDrawer.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetHilightAttributes(self, *args)


    def DynamicHilightAttributes(self, *args):
        """
        Returns the hilight attributes settings.
        When not NULL, overrides both Prs3d_TypeOfHighlight_LocalDynamic and Prs3d_TypeOfHighlight_Dynamic defined within AIS_InteractiveContext.

        :rtype: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        res = _QABugs.Handle_QABugs_PresentableObject_DynamicHilightAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDynamicHilightAttributes(self, *args):
        """
        SetDynamicHilightAttributes(Handle_QABugs_PresentableObject self, Handle_Prs3d_Drawer theDrawer)

        Initializes the dynamic hilight drawing tool.

        :type theDrawer: OCC.wrapper.Prs3d.Handle_Prs3d_Drawer

        """
        return _QABugs.Handle_QABugs_PresentableObject_SetDynamicHilightAttributes(self, *args)


    def UnsetHilightAttributes(self, *args):
        """
        UnsetHilightAttributes(Handle_QABugs_PresentableObject self)

        Clears settings provided by the hilight drawing tool theDrawer.


        """
        return _QABugs.Handle_QABugs_PresentableObject_UnsetHilightAttributes(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_QABugs_PresentableObject self)

        Memory deallocator for transient classes


        """
        return _QABugs.Handle_QABugs_PresentableObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_QABugs_PresentableObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_QABugs_PresentableObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_QABugs_PresentableObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_QABugs_PresentableObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _QABugs.Handle_QABugs_PresentableObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_QABugs_PresentableObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _QABugs.Handle_QABugs_PresentableObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_QABugs_PresentableObject self)

        Increments the reference counter of this object


        """
        return _QABugs.Handle_QABugs_PresentableObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_QABugs_PresentableObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _QABugs.Handle_QABugs_PresentableObject_DecrementRefCounter(self, *args)

Handle_QABugs_PresentableObject_swigregister = _QABugs.Handle_QABugs_PresentableObject_swigregister
Handle_QABugs_PresentableObject_swigregister(Handle_QABugs_PresentableObject)

def Handle_QABugs_PresentableObject_DownCast(thing):
    return _QABugs.Handle_QABugs_PresentableObject_DownCast(thing)
Handle_QABugs_PresentableObject_DownCast = _QABugs.Handle_QABugs_PresentableObject_DownCast



