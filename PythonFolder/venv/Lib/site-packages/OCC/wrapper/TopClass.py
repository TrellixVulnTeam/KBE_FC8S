# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopClass')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopClass')
    _TopClass = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopClass', [dirname(__file__)])
        except ImportError:
            import _TopClass
            return _TopClass
        try:
            _mod = imp.load_module('_TopClass', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopClass = swig_import_helper()
    del swig_import_helper
else:
    import _TopClass
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopClass.delete_SwigPyIterator

    def value(self):
        return _TopClass.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopClass.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopClass.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopClass.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopClass.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopClass.SwigPyIterator_copy(self)

    def next(self):
        return _TopClass.SwigPyIterator_next(self)

    def __next__(self):
        return _TopClass.SwigPyIterator___next__(self)

    def previous(self):
        return _TopClass.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopClass.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopClass.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopClass.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopClass.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopClass.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopClass.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopClass.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopClass.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopClass.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TopClass.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TopClass.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopClass.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopClass.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TopClass.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TopClass.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TopClass.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopClass.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TopClass.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TopClass.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopClass.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopClass.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TopClass.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TopClass.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TopClass.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TopClass.ptr_to_number(item)
ptr_to_number = _TopClass.ptr_to_number

def HashCode(*args):
    return _TopClass.HashCode(*args)
HashCode = _TopClass.HashCode

def ptr_equal(a, b):
    return _TopClass.ptr_equal(a, b)
ptr_equal = _TopClass.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
class TopClass_SolidExplorer(object):
    """
    Provide an   exploration of a  BRep Shape   for the
    classification. Defines the description of a solid for the
    SolidClassifier.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reject(self, *args):
        """
        Reject(TopClass_SolidExplorer self, gp_Pnt P) -> Standard_Boolean

        Should  return  True  if the  point  is  outside a
        bounding volume of the shape.

        :type P: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopClass.TopClass_SolidExplorer_Reject(self, *args)


    def Segment(self, *args):
        """
        Segment(TopClass_SolidExplorer self, gp_Pnt P, gp_Lin L)

        Returns  in <L>, <Par>  a segment having at least
        one  intersection  with  the  shape  boundary  to
        compute  intersections.

        :type P: OCC.wrapper.gp.gp_Pnt
        :type L: OCC.wrapper.gp.gp_Lin
        :type Par: float

        """
        return _TopClass.TopClass_SolidExplorer_Segment(self, *args)


    def OtherSegment(self, *args):
        """
        OtherSegment(TopClass_SolidExplorer self, gp_Pnt P, gp_Lin L)

        Returns  in <L>, <Par>  a segment having at least
        one  intersection  with  the  shape  boundary  to
        compute  intersections.

        The First Call to this method returns a line which
        point to a point of the first face of the shape.
        The Second Call provide a line to the second face
        and so on.

        if the method is called N times on a shape with F
        faces (N>F) the line point to other points on the
        face 1,2,3 ... N

        :type P: OCC.wrapper.gp.gp_Pnt
        :type L: OCC.wrapper.gp.gp_Lin
        :type Par: float

        """
        return _TopClass.TopClass_SolidExplorer_OtherSegment(self, *args)


    def InitShell(self, *args):
        """
        InitShell(TopClass_SolidExplorer self)

        Starts an exploration of the shells.


        """
        return _TopClass.TopClass_SolidExplorer_InitShell(self, *args)


    def MoreShells(self, *args):
        """
        MoreShells(TopClass_SolidExplorer self) -> Standard_Boolean

        Returns True if there is  a current shell.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopClass.TopClass_SolidExplorer_MoreShells(self, *args)


    def NextShell(self, *args):
        """
        NextShell(TopClass_SolidExplorer self)

        Sets the explorer  to the  next  shell and  returns
        False if there are no more wires.


        """
        return _TopClass.TopClass_SolidExplorer_NextShell(self, *args)


    def RejectShell(self, *args):
        """
        RejectShell(TopClass_SolidExplorer self, gp_Lin L, Standard_Real const Par) -> Standard_Boolean

        Returns True  if the shell  bounding volume does not
        intersect the segment.

        :type L: OCC.wrapper.gp.gp_Lin
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopClass.TopClass_SolidExplorer_RejectShell(self, *args)


    def InitFace(self, *args):
        """
        InitFace(TopClass_SolidExplorer self)

        Starts an exploration of the faces.


        """
        return _TopClass.TopClass_SolidExplorer_InitFace(self, *args)


    def MoreFaces(self, *args):
        """
        MoreFaces(TopClass_SolidExplorer self) -> Standard_Boolean

        Returns True if there is  a current face.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopClass.TopClass_SolidExplorer_MoreFaces(self, *args)


    def NextFace(self, *args):
        """
        NextFace(TopClass_SolidExplorer self)

        Sets the explorer  to the  next  face and  returns
        False if there are no more wires.


        """
        return _TopClass.TopClass_SolidExplorer_NextFace(self, *args)


    def CurrentFace(self, *args):
        """
        CurrentFace(TopClass_SolidExplorer self) -> TopoDS_Face

        Returns the current face.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TopClass.TopClass_SolidExplorer_CurrentFace(self, *args)


    def RejectFace(self, *args):
        """
        RejectFace(TopClass_SolidExplorer self, gp_Lin L, Standard_Real const Par) -> Standard_Boolean

        Returns True  if the face  bounding volume does not
        intersect the segment.

        :type L: OCC.wrapper.gp.gp_Lin
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TopClass.TopClass_SolidExplorer_RejectFace(self, *args)

    __swig_destroy__ = _TopClass.delete_TopClass_SolidExplorer
TopClass_SolidExplorer_swigregister = _TopClass.TopClass_SolidExplorer_swigregister
TopClass_SolidExplorer_swigregister(TopClass_SolidExplorer)



