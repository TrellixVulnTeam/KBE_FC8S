# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stdlib')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stdlib')
    _stdlib = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stdlib', [dirname(__file__)])
        except ImportError:
            import _stdlib
            return _stdlib
        try:
            _mod = imp.load_module('_stdlib', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stdlib = swig_import_helper()
    del swig_import_helper
else:
    import _stdlib
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _stdlib.delete_SwigPyIterator

    def value(self):
        return _stdlib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _stdlib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _stdlib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _stdlib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _stdlib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _stdlib.SwigPyIterator_copy(self)

    def next(self):
        return _stdlib.SwigPyIterator_next(self)

    def __next__(self):
        return _stdlib.SwigPyIterator___next__(self)

    def previous(self):
        return _stdlib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _stdlib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _stdlib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _stdlib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _stdlib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _stdlib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _stdlib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _stdlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _stdlib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _stdlib.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_stdlib.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _stdlib.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _stdlib.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stdlib.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _stdlib.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _stdlib.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _stdlib.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _stdlib.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_stdlib.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _stdlib.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _stdlib.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stdlib.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _stdlib.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _stdlib.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _stdlib.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _stdlib.ptr_to_number(item)
ptr_to_number = _stdlib.ptr_to_number

def HashCode(*args):
    return _stdlib.HashCode(*args)
HashCode = _stdlib.HashCode

def ptr_equal(a, b):
    return _stdlib.ptr_equal(a, b)
ptr_equal = _stdlib.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESHDS
else:
    import SMESHDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDSAbs
else:
    import SMDSAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMESH
else:
    import SMESH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepMesh
else:
    import BRepMesh
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeAnalysis
else:
    import ShapeAnalysis
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAPI
else:
    import GeomAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MeshVS
else:
    import MeshVS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectBasics
else:
    import SelectBasics
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Select3D
else:
    import Select3D
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SelectMgr
else:
    import SelectMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PrsMgr
else:
    import PrsMgr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import V3d
else:
    import V3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Prs3d
else:
    import Prs3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AIS
else:
    import AIS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DsgPrs
else:
    import DsgPrs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StdSelect
else:
    import StdSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDS
else:
    import SMDS
del _swig_python_version_info
class list_gp_XYZcp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_gp_XYZcp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_gp_XYZcp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_gp_XYZcp___bool__(self)

    def __len__(self):
        return _stdlib.list_gp_XYZcp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_gp_XYZcp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_gp_XYZcp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_gp_XYZcp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_gp_XYZcp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_gp_XYZcp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_gp_XYZcp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_gp_XYZcp_pop(self)

    def append(self, x):
        return _stdlib.list_gp_XYZcp_append(self, x)

    def empty(self):
        return _stdlib.list_gp_XYZcp_empty(self)

    def size(self):
        return _stdlib.list_gp_XYZcp_size(self)

    def swap(self, v):
        return _stdlib.list_gp_XYZcp_swap(self, v)

    def begin(self):
        return _stdlib.list_gp_XYZcp_begin(self)

    def end(self):
        return _stdlib.list_gp_XYZcp_end(self)

    def rbegin(self):
        return _stdlib.list_gp_XYZcp_rbegin(self)

    def rend(self):
        return _stdlib.list_gp_XYZcp_rend(self)

    def clear(self):
        return _stdlib.list_gp_XYZcp_clear(self)

    def get_allocator(self):
        return _stdlib.list_gp_XYZcp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_gp_XYZcp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_gp_XYZcp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_gp_XYZcp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_gp_XYZcp_push_back(self, x)

    def front(self):
        return _stdlib.list_gp_XYZcp_front(self)

    def back(self):
        return _stdlib.list_gp_XYZcp_back(self)

    def assign(self, n, x):
        return _stdlib.list_gp_XYZcp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_gp_XYZcp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_gp_XYZcp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_gp_XYZcp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_gp_XYZcp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_gp_XYZcp_remove(self, x)

    def unique(self):
        return _stdlib.list_gp_XYZcp_unique(self)

    def reverse(self):
        return _stdlib.list_gp_XYZcp_reverse(self)

    def sort(self):
        return _stdlib.list_gp_XYZcp_sort(self)

    def merge(self, x):
        return _stdlib.list_gp_XYZcp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_gp_XYZcp
list_gp_XYZcp_swigregister = _stdlib.list_gp_XYZcp_swigregister
list_gp_XYZcp_swigregister(list_gp_XYZcp)

class list_SMDS_MeshElementcp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMDS_MeshElementcp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMDS_MeshElementcp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMDS_MeshElementcp___bool__(self)

    def __len__(self):
        return _stdlib.list_SMDS_MeshElementcp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMDS_MeshElementcp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMDS_MeshElementcp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMDS_MeshElementcp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMDS_MeshElementcp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMDS_MeshElementcp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMDS_MeshElementcp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMDS_MeshElementcp_pop(self)

    def append(self, x):
        return _stdlib.list_SMDS_MeshElementcp_append(self, x)

    def empty(self):
        return _stdlib.list_SMDS_MeshElementcp_empty(self)

    def size(self):
        return _stdlib.list_SMDS_MeshElementcp_size(self)

    def swap(self, v):
        return _stdlib.list_SMDS_MeshElementcp_swap(self, v)

    def begin(self):
        return _stdlib.list_SMDS_MeshElementcp_begin(self)

    def end(self):
        return _stdlib.list_SMDS_MeshElementcp_end(self)

    def rbegin(self):
        return _stdlib.list_SMDS_MeshElementcp_rbegin(self)

    def rend(self):
        return _stdlib.list_SMDS_MeshElementcp_rend(self)

    def clear(self):
        return _stdlib.list_SMDS_MeshElementcp_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMDS_MeshElementcp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMDS_MeshElementcp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMDS_MeshElementcp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMDS_MeshElementcp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMDS_MeshElementcp_push_back(self, x)

    def front(self):
        return _stdlib.list_SMDS_MeshElementcp_front(self)

    def back(self):
        return _stdlib.list_SMDS_MeshElementcp_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMDS_MeshElementcp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMDS_MeshElementcp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMDS_MeshElementcp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMDS_MeshElementcp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMDS_MeshElementcp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMDS_MeshElementcp_remove(self, x)

    def unique(self):
        return _stdlib.list_SMDS_MeshElementcp_unique(self)

    def reverse(self):
        return _stdlib.list_SMDS_MeshElementcp_reverse(self)

    def sort(self):
        return _stdlib.list_SMDS_MeshElementcp_sort(self)

    def merge(self, x):
        return _stdlib.list_SMDS_MeshElementcp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMDS_MeshElementcp
list_SMDS_MeshElementcp_swigregister = _stdlib.list_SMDS_MeshElementcp_swigregister
list_SMDS_MeshElementcp_swigregister(list_SMDS_MeshElementcp)

class list_SMDS_MeshNodecp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMDS_MeshNodecp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMDS_MeshNodecp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMDS_MeshNodecp___bool__(self)

    def __len__(self):
        return _stdlib.list_SMDS_MeshNodecp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMDS_MeshNodecp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMDS_MeshNodecp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMDS_MeshNodecp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMDS_MeshNodecp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMDS_MeshNodecp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMDS_MeshNodecp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMDS_MeshNodecp_pop(self)

    def append(self, x):
        return _stdlib.list_SMDS_MeshNodecp_append(self, x)

    def empty(self):
        return _stdlib.list_SMDS_MeshNodecp_empty(self)

    def size(self):
        return _stdlib.list_SMDS_MeshNodecp_size(self)

    def swap(self, v):
        return _stdlib.list_SMDS_MeshNodecp_swap(self, v)

    def begin(self):
        return _stdlib.list_SMDS_MeshNodecp_begin(self)

    def end(self):
        return _stdlib.list_SMDS_MeshNodecp_end(self)

    def rbegin(self):
        return _stdlib.list_SMDS_MeshNodecp_rbegin(self)

    def rend(self):
        return _stdlib.list_SMDS_MeshNodecp_rend(self)

    def clear(self):
        return _stdlib.list_SMDS_MeshNodecp_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMDS_MeshNodecp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMDS_MeshNodecp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMDS_MeshNodecp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMDS_MeshNodecp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMDS_MeshNodecp_push_back(self, x)

    def front(self):
        return _stdlib.list_SMDS_MeshNodecp_front(self)

    def back(self):
        return _stdlib.list_SMDS_MeshNodecp_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMDS_MeshNodecp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMDS_MeshNodecp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMDS_MeshNodecp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMDS_MeshNodecp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMDS_MeshNodecp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMDS_MeshNodecp_remove(self, x)

    def unique(self):
        return _stdlib.list_SMDS_MeshNodecp_unique(self)

    def reverse(self):
        return _stdlib.list_SMDS_MeshNodecp_reverse(self)

    def sort(self):
        return _stdlib.list_SMDS_MeshNodecp_sort(self)

    def merge(self, x):
        return _stdlib.list_SMDS_MeshNodecp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMDS_MeshNodecp
list_SMDS_MeshNodecp_swigregister = _stdlib.list_SMDS_MeshNodecp_swigregister
list_SMDS_MeshNodecp_swigregister(list_SMDS_MeshNodecp)

class list_TAlgoStateError(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_TAlgoStateError_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_TAlgoStateError___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_TAlgoStateError___bool__(self)

    def __len__(self):
        return _stdlib.list_TAlgoStateError___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_TAlgoStateError___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_TAlgoStateError___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_TAlgoStateError___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_TAlgoStateError___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_TAlgoStateError___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_TAlgoStateError___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_TAlgoStateError_pop(self)

    def append(self, x):
        return _stdlib.list_TAlgoStateError_append(self, x)

    def empty(self):
        return _stdlib.list_TAlgoStateError_empty(self)

    def size(self):
        return _stdlib.list_TAlgoStateError_size(self)

    def swap(self, v):
        return _stdlib.list_TAlgoStateError_swap(self, v)

    def begin(self):
        return _stdlib.list_TAlgoStateError_begin(self)

    def end(self):
        return _stdlib.list_TAlgoStateError_end(self)

    def rbegin(self):
        return _stdlib.list_TAlgoStateError_rbegin(self)

    def rend(self):
        return _stdlib.list_TAlgoStateError_rend(self)

    def clear(self):
        return _stdlib.list_TAlgoStateError_clear(self)

    def get_allocator(self):
        return _stdlib.list_TAlgoStateError_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_TAlgoStateError_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_TAlgoStateError_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_TAlgoStateError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_TAlgoStateError_push_back(self, x)

    def front(self):
        return _stdlib.list_TAlgoStateError_front(self)

    def back(self):
        return _stdlib.list_TAlgoStateError_back(self)

    def assign(self, n, x):
        return _stdlib.list_TAlgoStateError_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_TAlgoStateError_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_TAlgoStateError_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_TAlgoStateError_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_TAlgoStateError_push_front(self, x)

    def reverse(self):
        return _stdlib.list_TAlgoStateError_reverse(self)
    __swig_destroy__ = _stdlib.delete_list_TAlgoStateError
list_TAlgoStateError_swigregister = _stdlib.list_TAlgoStateError_swigregister
list_TAlgoStateError_swigregister(list_TAlgoStateError)

class list_SMESH_subMeshp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMESH_subMeshp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMESH_subMeshp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMESH_subMeshp___bool__(self)

    def __len__(self):
        return _stdlib.list_SMESH_subMeshp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMESH_subMeshp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMESH_subMeshp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMESH_subMeshp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMESH_subMeshp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMESH_subMeshp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMESH_subMeshp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMESH_subMeshp_pop(self)

    def append(self, x):
        return _stdlib.list_SMESH_subMeshp_append(self, x)

    def empty(self):
        return _stdlib.list_SMESH_subMeshp_empty(self)

    def size(self):
        return _stdlib.list_SMESH_subMeshp_size(self)

    def swap(self, v):
        return _stdlib.list_SMESH_subMeshp_swap(self, v)

    def begin(self):
        return _stdlib.list_SMESH_subMeshp_begin(self)

    def end(self):
        return _stdlib.list_SMESH_subMeshp_end(self)

    def rbegin(self):
        return _stdlib.list_SMESH_subMeshp_rbegin(self)

    def rend(self):
        return _stdlib.list_SMESH_subMeshp_rend(self)

    def clear(self):
        return _stdlib.list_SMESH_subMeshp_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMESH_subMeshp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMESH_subMeshp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMESH_subMeshp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMESH_subMeshp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMESH_subMeshp_push_back(self, x)

    def front(self):
        return _stdlib.list_SMESH_subMeshp_front(self)

    def back(self):
        return _stdlib.list_SMESH_subMeshp_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMESH_subMeshp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMESH_subMeshp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMESH_subMeshp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMESH_subMeshp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMESH_subMeshp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMESH_subMeshp_remove(self, x)

    def unique(self):
        return _stdlib.list_SMESH_subMeshp_unique(self)

    def reverse(self):
        return _stdlib.list_SMESH_subMeshp_reverse(self)

    def sort(self):
        return _stdlib.list_SMESH_subMeshp_sort(self)

    def merge(self, x):
        return _stdlib.list_SMESH_subMeshp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMESH_subMeshp
list_SMESH_subMeshp_swigregister = _stdlib.list_SMESH_subMeshp_swigregister
list_SMESH_subMeshp_swigregister(list_SMESH_subMeshp)

class list_SMESHDS_Commandp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMESHDS_Commandp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMESHDS_Commandp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMESHDS_Commandp___bool__(self)

    def __len__(self):
        return _stdlib.list_SMESHDS_Commandp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMESHDS_Commandp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMESHDS_Commandp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMESHDS_Commandp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMESHDS_Commandp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMESHDS_Commandp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMESHDS_Commandp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMESHDS_Commandp_pop(self)

    def append(self, x):
        return _stdlib.list_SMESHDS_Commandp_append(self, x)

    def empty(self):
        return _stdlib.list_SMESHDS_Commandp_empty(self)

    def size(self):
        return _stdlib.list_SMESHDS_Commandp_size(self)

    def swap(self, v):
        return _stdlib.list_SMESHDS_Commandp_swap(self, v)

    def begin(self):
        return _stdlib.list_SMESHDS_Commandp_begin(self)

    def end(self):
        return _stdlib.list_SMESHDS_Commandp_end(self)

    def rbegin(self):
        return _stdlib.list_SMESHDS_Commandp_rbegin(self)

    def rend(self):
        return _stdlib.list_SMESHDS_Commandp_rend(self)

    def clear(self):
        return _stdlib.list_SMESHDS_Commandp_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMESHDS_Commandp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMESHDS_Commandp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMESHDS_Commandp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMESHDS_Commandp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMESHDS_Commandp_push_back(self, x)

    def front(self):
        return _stdlib.list_SMESHDS_Commandp_front(self)

    def back(self):
        return _stdlib.list_SMESHDS_Commandp_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMESHDS_Commandp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMESHDS_Commandp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMESHDS_Commandp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMESHDS_Commandp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMESHDS_Commandp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMESHDS_Commandp_remove(self, x)

    def unique(self):
        return _stdlib.list_SMESHDS_Commandp_unique(self)

    def reverse(self):
        return _stdlib.list_SMESHDS_Commandp_reverse(self)

    def sort(self):
        return _stdlib.list_SMESHDS_Commandp_sort(self)

    def merge(self, x):
        return _stdlib.list_SMESHDS_Commandp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMESHDS_Commandp
list_SMESHDS_Commandp_swigregister = _stdlib.list_SMESHDS_Commandp_swigregister
list_SMESHDS_Commandp_swigregister(list_SMESHDS_Commandp)

class list_SMESHDS_GroupBasep(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMESHDS_GroupBasep_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMESHDS_GroupBasep___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMESHDS_GroupBasep___bool__(self)

    def __len__(self):
        return _stdlib.list_SMESHDS_GroupBasep___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMESHDS_GroupBasep___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMESHDS_GroupBasep___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMESHDS_GroupBasep_pop(self)

    def append(self, x):
        return _stdlib.list_SMESHDS_GroupBasep_append(self, x)

    def empty(self):
        return _stdlib.list_SMESHDS_GroupBasep_empty(self)

    def size(self):
        return _stdlib.list_SMESHDS_GroupBasep_size(self)

    def swap(self, v):
        return _stdlib.list_SMESHDS_GroupBasep_swap(self, v)

    def begin(self):
        return _stdlib.list_SMESHDS_GroupBasep_begin(self)

    def end(self):
        return _stdlib.list_SMESHDS_GroupBasep_end(self)

    def rbegin(self):
        return _stdlib.list_SMESHDS_GroupBasep_rbegin(self)

    def rend(self):
        return _stdlib.list_SMESHDS_GroupBasep_rend(self)

    def clear(self):
        return _stdlib.list_SMESHDS_GroupBasep_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMESHDS_GroupBasep_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMESHDS_GroupBasep_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMESHDS_GroupBasep(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMESHDS_GroupBasep_push_back(self, x)

    def front(self):
        return _stdlib.list_SMESHDS_GroupBasep_front(self)

    def back(self):
        return _stdlib.list_SMESHDS_GroupBasep_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMESHDS_GroupBasep_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMESHDS_GroupBasep_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMESHDS_GroupBasep_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMESHDS_GroupBasep_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMESHDS_GroupBasep_remove(self, x)

    def unique(self):
        return _stdlib.list_SMESHDS_GroupBasep_unique(self)

    def reverse(self):
        return _stdlib.list_SMESHDS_GroupBasep_reverse(self)

    def sort(self):
        return _stdlib.list_SMESHDS_GroupBasep_sort(self)

    def merge(self, x):
        return _stdlib.list_SMESHDS_GroupBasep_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMESHDS_GroupBasep
list_SMESHDS_GroupBasep_swigregister = _stdlib.list_SMESHDS_GroupBasep_swigregister
list_SMESHDS_GroupBasep_swigregister(list_SMESHDS_GroupBasep)

class list_SMESHDS_Hypothesiscp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_SMESHDS_Hypothesiscp___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_SMESHDS_Hypothesiscp___bool__(self)

    def __len__(self):
        return _stdlib.list_SMESHDS_Hypothesiscp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_SMESHDS_Hypothesiscp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_SMESHDS_Hypothesiscp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_pop(self)

    def append(self, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_append(self, x)

    def empty(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_empty(self)

    def size(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_size(self)

    def swap(self, v):
        return _stdlib.list_SMESHDS_Hypothesiscp_swap(self, v)

    def begin(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_begin(self)

    def end(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_end(self)

    def rbegin(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_rbegin(self)

    def rend(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_rend(self)

    def clear(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_clear(self)

    def get_allocator(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_SMESHDS_Hypothesiscp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_push_back(self, x)

    def front(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_front(self)

    def back(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_back(self)

    def assign(self, n, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_SMESHDS_Hypothesiscp_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_push_front(self, x)

    def remove(self, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_remove(self, x)

    def unique(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_unique(self)

    def reverse(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_reverse(self)

    def sort(self):
        return _stdlib.list_SMESHDS_Hypothesiscp_sort(self)

    def merge(self, x):
        return _stdlib.list_SMESHDS_Hypothesiscp_merge(self, x)
    __swig_destroy__ = _stdlib.delete_list_SMESHDS_Hypothesiscp
list_SMESHDS_Hypothesiscp_swigregister = _stdlib.list_SMESHDS_Hypothesiscp_swigregister
list_SMESHDS_Hypothesiscp_swigregister(list_SMESHDS_Hypothesiscp)

class list_TopoDS_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_TopoDS_Edge_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_TopoDS_Edge___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_TopoDS_Edge___bool__(self)

    def __len__(self):
        return _stdlib.list_TopoDS_Edge___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_TopoDS_Edge___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_TopoDS_Edge___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_TopoDS_Edge___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_TopoDS_Edge___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_TopoDS_Edge___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_TopoDS_Edge___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_TopoDS_Edge_pop(self)

    def append(self, x):
        return _stdlib.list_TopoDS_Edge_append(self, x)

    def empty(self):
        return _stdlib.list_TopoDS_Edge_empty(self)

    def size(self):
        return _stdlib.list_TopoDS_Edge_size(self)

    def swap(self, v):
        return _stdlib.list_TopoDS_Edge_swap(self, v)

    def begin(self):
        return _stdlib.list_TopoDS_Edge_begin(self)

    def end(self):
        return _stdlib.list_TopoDS_Edge_end(self)

    def rbegin(self):
        return _stdlib.list_TopoDS_Edge_rbegin(self)

    def rend(self):
        return _stdlib.list_TopoDS_Edge_rend(self)

    def clear(self):
        return _stdlib.list_TopoDS_Edge_clear(self)

    def get_allocator(self):
        return _stdlib.list_TopoDS_Edge_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_TopoDS_Edge_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_TopoDS_Edge_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_TopoDS_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_TopoDS_Edge_push_back(self, x)

    def front(self):
        return _stdlib.list_TopoDS_Edge_front(self)

    def back(self):
        return _stdlib.list_TopoDS_Edge_back(self)

    def assign(self, n, x):
        return _stdlib.list_TopoDS_Edge_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_TopoDS_Edge_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_TopoDS_Edge_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_TopoDS_Edge_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_TopoDS_Edge_push_front(self, x)

    def reverse(self):
        return _stdlib.list_TopoDS_Edge_reverse(self)
    __swig_destroy__ = _stdlib.delete_list_TopoDS_Edge
list_TopoDS_Edge_swigregister = _stdlib.list_TopoDS_Edge_swigregister
list_TopoDS_Edge_swigregister(list_TopoDS_Edge)

class list_TopoDS_Shape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_TopoDS_Shape_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_TopoDS_Shape___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_TopoDS_Shape___bool__(self)

    def __len__(self):
        return _stdlib.list_TopoDS_Shape___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_TopoDS_Shape___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_TopoDS_Shape___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_TopoDS_Shape___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_TopoDS_Shape___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_TopoDS_Shape___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_TopoDS_Shape___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_TopoDS_Shape_pop(self)

    def append(self, x):
        return _stdlib.list_TopoDS_Shape_append(self, x)

    def empty(self):
        return _stdlib.list_TopoDS_Shape_empty(self)

    def size(self):
        return _stdlib.list_TopoDS_Shape_size(self)

    def swap(self, v):
        return _stdlib.list_TopoDS_Shape_swap(self, v)

    def begin(self):
        return _stdlib.list_TopoDS_Shape_begin(self)

    def end(self):
        return _stdlib.list_TopoDS_Shape_end(self)

    def rbegin(self):
        return _stdlib.list_TopoDS_Shape_rbegin(self)

    def rend(self):
        return _stdlib.list_TopoDS_Shape_rend(self)

    def clear(self):
        return _stdlib.list_TopoDS_Shape_clear(self)

    def get_allocator(self):
        return _stdlib.list_TopoDS_Shape_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_TopoDS_Shape_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_TopoDS_Shape_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_TopoDS_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_TopoDS_Shape_push_back(self, x)

    def front(self):
        return _stdlib.list_TopoDS_Shape_front(self)

    def back(self):
        return _stdlib.list_TopoDS_Shape_back(self)

    def assign(self, n, x):
        return _stdlib.list_TopoDS_Shape_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_TopoDS_Shape_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_TopoDS_Shape_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_TopoDS_Shape_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_TopoDS_Shape_push_front(self, x)

    def reverse(self):
        return _stdlib.list_TopoDS_Shape_reverse(self)
    __swig_destroy__ = _stdlib.delete_list_TopoDS_Shape
list_TopoDS_Shape_swigregister = _stdlib.list_TopoDS_Shape_swigregister
list_TopoDS_Shape_swigregister(list_TopoDS_Shape)

class list_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_double___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_double___bool__(self)

    def __len__(self):
        return _stdlib.list_double___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_double___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_double_pop(self)

    def append(self, x):
        return _stdlib.list_double_append(self, x)

    def empty(self):
        return _stdlib.list_double_empty(self)

    def size(self):
        return _stdlib.list_double_size(self)

    def swap(self, v):
        return _stdlib.list_double_swap(self, v)

    def begin(self):
        return _stdlib.list_double_begin(self)

    def end(self):
        return _stdlib.list_double_end(self)

    def rbegin(self):
        return _stdlib.list_double_rbegin(self)

    def rend(self):
        return _stdlib.list_double_rend(self)

    def clear(self):
        return _stdlib.list_double_clear(self)

    def get_allocator(self):
        return _stdlib.list_double_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_double_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_double_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_double_push_back(self, x)

    def front(self):
        return _stdlib.list_double_front(self)

    def back(self):
        return _stdlib.list_double_back(self)

    def assign(self, n, x):
        return _stdlib.list_double_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_double_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_double_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_double_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_double_push_front(self, x)

    def reverse(self):
        return _stdlib.list_double_reverse(self)
    __swig_destroy__ = _stdlib.delete_list_double
list_double_swigregister = _stdlib.list_double_swigregister
list_double_swigregister(list_double)

class list_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.list_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.list_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.list_int___bool__(self)

    def __len__(self):
        return _stdlib.list_int___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.list_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.list_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.list_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.list_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.list_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.list_int___setitem__(self, *args)

    def pop(self):
        return _stdlib.list_int_pop(self)

    def append(self, x):
        return _stdlib.list_int_append(self, x)

    def empty(self):
        return _stdlib.list_int_empty(self)

    def size(self):
        return _stdlib.list_int_size(self)

    def swap(self, v):
        return _stdlib.list_int_swap(self, v)

    def begin(self):
        return _stdlib.list_int_begin(self)

    def end(self):
        return _stdlib.list_int_end(self)

    def rbegin(self):
        return _stdlib.list_int_rbegin(self)

    def rend(self):
        return _stdlib.list_int_rend(self)

    def clear(self):
        return _stdlib.list_int_clear(self)

    def get_allocator(self):
        return _stdlib.list_int_get_allocator(self)

    def pop_back(self):
        return _stdlib.list_int_pop_back(self)

    def erase(self, *args):
        return _stdlib.list_int_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_list_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.list_int_push_back(self, x)

    def front(self):
        return _stdlib.list_int_front(self)

    def back(self):
        return _stdlib.list_int_back(self)

    def assign(self, n, x):
        return _stdlib.list_int_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.list_int_resize(self, *args)

    def insert(self, *args):
        return _stdlib.list_int_insert(self, *args)

    def pop_front(self):
        return _stdlib.list_int_pop_front(self)

    def push_front(self, x):
        return _stdlib.list_int_push_front(self, x)

    def reverse(self):
        return _stdlib.list_int_reverse(self)
    __swig_destroy__ = _stdlib.delete_list_int
list_int_swigregister = _stdlib.list_int_swigregister
list_int_swigregister(list_int)

class map_double_SMDS_MeshNodecp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_double_SMDS_MeshNodecp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_double_SMDS_MeshNodecp___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_double_SMDS_MeshNodecp___bool__(self)

    def __len__(self):
        return _stdlib.map_double_SMDS_MeshNodecp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_double_SMDS_MeshNodecp___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_double_SMDS_MeshNodecp___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_double_SMDS_MeshNodecp_has_key(self, key)

    def keys(self):
        return _stdlib.map_double_SMDS_MeshNodecp_keys(self)

    def values(self):
        return _stdlib.map_double_SMDS_MeshNodecp_values(self)

    def items(self):
        return _stdlib.map_double_SMDS_MeshNodecp_items(self)

    def __contains__(self, key):
        return _stdlib.map_double_SMDS_MeshNodecp___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_double_SMDS_MeshNodecp_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_double_SMDS_MeshNodecp_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_double_SMDS_MeshNodecp___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_double_SMDS_MeshNodecp_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_double_SMDS_MeshNodecp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_double_SMDS_MeshNodecp_empty(self)

    def size(self):
        return _stdlib.map_double_SMDS_MeshNodecp_size(self)

    def swap(self, v):
        return _stdlib.map_double_SMDS_MeshNodecp_swap(self, v)

    def begin(self):
        return _stdlib.map_double_SMDS_MeshNodecp_begin(self)

    def end(self):
        return _stdlib.map_double_SMDS_MeshNodecp_end(self)

    def rbegin(self):
        return _stdlib.map_double_SMDS_MeshNodecp_rbegin(self)

    def rend(self):
        return _stdlib.map_double_SMDS_MeshNodecp_rend(self)

    def clear(self):
        return _stdlib.map_double_SMDS_MeshNodecp_clear(self)

    def get_allocator(self):
        return _stdlib.map_double_SMDS_MeshNodecp_get_allocator(self)

    def count(self, x):
        return _stdlib.map_double_SMDS_MeshNodecp_count(self, x)

    def erase(self, *args):
        return _stdlib.map_double_SMDS_MeshNodecp_erase(self, *args)

    def find(self, x):
        return _stdlib.map_double_SMDS_MeshNodecp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_double_SMDS_MeshNodecp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_double_SMDS_MeshNodecp_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_double_SMDS_MeshNodecp
map_double_SMDS_MeshNodecp_swigregister = _stdlib.map_double_SMDS_MeshNodecp_swigregister
map_double_SMDS_MeshNodecp_swigregister(map_double_SMDS_MeshNodecp)

class map_int_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_int_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_int_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_int_int___bool__(self)

    def __len__(self):
        return _stdlib.map_int_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_int_int___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_int_int___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_int_int_has_key(self, key)

    def keys(self):
        return _stdlib.map_int_int_keys(self)

    def values(self):
        return _stdlib.map_int_int_values(self)

    def items(self):
        return _stdlib.map_int_int_items(self)

    def __contains__(self, key):
        return _stdlib.map_int_int___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_int_int_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_int_int_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_int_int___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_int_int_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_int_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_int_int_empty(self)

    def size(self):
        return _stdlib.map_int_int_size(self)

    def swap(self, v):
        return _stdlib.map_int_int_swap(self, v)

    def begin(self):
        return _stdlib.map_int_int_begin(self)

    def end(self):
        return _stdlib.map_int_int_end(self)

    def rbegin(self):
        return _stdlib.map_int_int_rbegin(self)

    def rend(self):
        return _stdlib.map_int_int_rend(self)

    def clear(self):
        return _stdlib.map_int_int_clear(self)

    def get_allocator(self):
        return _stdlib.map_int_int_get_allocator(self)

    def count(self, x):
        return _stdlib.map_int_int_count(self, x)

    def erase(self, *args):
        return _stdlib.map_int_int_erase(self, *args)

    def find(self, x):
        return _stdlib.map_int_int_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_int_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_int_int_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_int_int
map_int_int_swigregister = _stdlib.map_int_int_swigregister
map_int_int_swigregister(map_int_int)

class map_int_SMESHDS_SubMeshp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_int_SMESHDS_SubMeshp___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_int_SMESHDS_SubMeshp___bool__(self)

    def __len__(self):
        return _stdlib.map_int_SMESHDS_SubMeshp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_int_SMESHDS_SubMeshp___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_int_SMESHDS_SubMeshp___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_int_SMESHDS_SubMeshp_has_key(self, key)

    def keys(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_keys(self)

    def values(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_values(self)

    def items(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_items(self)

    def __contains__(self, key):
        return _stdlib.map_int_SMESHDS_SubMeshp___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_int_SMESHDS_SubMeshp___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_int_SMESHDS_SubMeshp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_empty(self)

    def size(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_size(self)

    def swap(self, v):
        return _stdlib.map_int_SMESHDS_SubMeshp_swap(self, v)

    def begin(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_begin(self)

    def end(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_end(self)

    def rbegin(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_rbegin(self)

    def rend(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_rend(self)

    def clear(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_clear(self)

    def get_allocator(self):
        return _stdlib.map_int_SMESHDS_SubMeshp_get_allocator(self)

    def count(self, x):
        return _stdlib.map_int_SMESHDS_SubMeshp_count(self, x)

    def erase(self, *args):
        return _stdlib.map_int_SMESHDS_SubMeshp_erase(self, *args)

    def find(self, x):
        return _stdlib.map_int_SMESHDS_SubMeshp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_int_SMESHDS_SubMeshp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_int_SMESHDS_SubMeshp_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_int_SMESHDS_SubMeshp
map_int_SMESHDS_SubMeshp_swigregister = _stdlib.map_int_SMESHDS_SubMeshp_swigregister
map_int_SMESHDS_SubMeshp_swigregister(map_int_SMESHDS_SubMeshp)

class map_long_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_long_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_long_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_long_int___bool__(self)

    def __len__(self):
        return _stdlib.map_long_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_long_int___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_long_int___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_long_int_has_key(self, key)

    def keys(self):
        return _stdlib.map_long_int_keys(self)

    def values(self):
        return _stdlib.map_long_int_values(self)

    def items(self):
        return _stdlib.map_long_int_items(self)

    def __contains__(self, key):
        return _stdlib.map_long_int___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_long_int_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_long_int_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_long_int___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_long_int_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_long_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_long_int_empty(self)

    def size(self):
        return _stdlib.map_long_int_size(self)

    def swap(self, v):
        return _stdlib.map_long_int_swap(self, v)

    def begin(self):
        return _stdlib.map_long_int_begin(self)

    def end(self):
        return _stdlib.map_long_int_end(self)

    def rbegin(self):
        return _stdlib.map_long_int_rbegin(self)

    def rend(self):
        return _stdlib.map_long_int_rend(self)

    def clear(self):
        return _stdlib.map_long_int_clear(self)

    def get_allocator(self):
        return _stdlib.map_long_int_get_allocator(self)

    def count(self, x):
        return _stdlib.map_long_int_count(self, x)

    def erase(self, *args):
        return _stdlib.map_long_int_erase(self, *args)

    def find(self, x):
        return _stdlib.map_long_int_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_long_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_long_int_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_long_int
map_long_int_swigregister = _stdlib.map_long_int_swigregister
map_long_int_swigregister(map_long_int)

class map_SMDS_MeshElementcp_int_TIDComp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___bool__(self)

    def __len__(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_has_key(self, key)

    def keys(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_keys(self)

    def values(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_values(self)

    def items(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_items(self)

    def __contains__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_SMDS_MeshElementcp_int_TIDComp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_empty(self)

    def size(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_size(self)

    def swap(self, v):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_swap(self, v)

    def begin(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_begin(self)

    def end(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_end(self)

    def rbegin(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_rbegin(self)

    def rend(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_rend(self)

    def clear(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_clear(self)

    def get_allocator(self):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_get_allocator(self)

    def count(self, x):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_count(self, x)

    def erase(self, *args):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_erase(self, *args)

    def find(self, x):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_SMDS_MeshElementcp_int_TIDComp_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_SMDS_MeshElementcp_int_TIDComp
map_SMDS_MeshElementcp_int_TIDComp_swigregister = _stdlib.map_SMDS_MeshElementcp_int_TIDComp_swigregister
map_SMDS_MeshElementcp_int_TIDComp_swigregister(map_SMDS_MeshElementcp_int_TIDComp)

class map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___bool__(self)

    def __len__(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_has_key(self, key)

    def keys(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_keys(self)

    def values(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_values(self)

    def items(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_items(self)

    def __contains__(self, key):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_empty(self)

    def size(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_size(self)

    def swap(self, v):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_swap(self, v)

    def begin(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_begin(self)

    def end(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_end(self)

    def rbegin(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_rbegin(self)

    def rend(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_rend(self)

    def clear(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_clear(self)

    def get_allocator(self):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_get_allocator(self)

    def count(self, x):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_count(self, x)

    def erase(self, *args):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_erase(self, *args)

    def find(self, x):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp
map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_swigregister = _stdlib.map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_swigregister
map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp_swigregister(map_SMDS_MeshElementcp_SMDS_MeshElementcp_TIDcomp)

class map_SMDS_MeshGroupp_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_SMDS_MeshGroupp_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_SMDS_MeshGroupp_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_SMDS_MeshGroupp_int___bool__(self)

    def __len__(self):
        return _stdlib.map_SMDS_MeshGroupp_int___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_SMDS_MeshGroupp_int___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_SMDS_MeshGroupp_int___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_SMDS_MeshGroupp_int_has_key(self, key)

    def keys(self):
        return _stdlib.map_SMDS_MeshGroupp_int_keys(self)

    def values(self):
        return _stdlib.map_SMDS_MeshGroupp_int_values(self)

    def items(self):
        return _stdlib.map_SMDS_MeshGroupp_int_items(self)

    def __contains__(self, key):
        return _stdlib.map_SMDS_MeshGroupp_int___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_SMDS_MeshGroupp_int_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_SMDS_MeshGroupp_int_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_SMDS_MeshGroupp_int___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_SMDS_MeshGroupp_int_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_SMDS_MeshGroupp_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_SMDS_MeshGroupp_int_empty(self)

    def size(self):
        return _stdlib.map_SMDS_MeshGroupp_int_size(self)

    def swap(self, v):
        return _stdlib.map_SMDS_MeshGroupp_int_swap(self, v)

    def begin(self):
        return _stdlib.map_SMDS_MeshGroupp_int_begin(self)

    def end(self):
        return _stdlib.map_SMDS_MeshGroupp_int_end(self)

    def rbegin(self):
        return _stdlib.map_SMDS_MeshGroupp_int_rbegin(self)

    def rend(self):
        return _stdlib.map_SMDS_MeshGroupp_int_rend(self)

    def clear(self):
        return _stdlib.map_SMDS_MeshGroupp_int_clear(self)

    def get_allocator(self):
        return _stdlib.map_SMDS_MeshGroupp_int_get_allocator(self)

    def count(self, x):
        return _stdlib.map_SMDS_MeshGroupp_int_count(self, x)

    def erase(self, *args):
        return _stdlib.map_SMDS_MeshGroupp_int_erase(self, *args)

    def find(self, x):
        return _stdlib.map_SMDS_MeshGroupp_int_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_SMDS_MeshGroupp_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_SMDS_MeshGroupp_int_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_SMDS_MeshGroupp_int
map_SMDS_MeshGroupp_int_swigregister = _stdlib.map_SMDS_MeshGroupp_int_swigregister
map_SMDS_MeshGroupp_int_swigregister(map_SMDS_MeshGroupp_int)

class map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___nonzero__(self)

    def __bool__(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___bool__(self)

    def __len__(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___getitem__(self, key)

    def __delitem__(self, key):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___delitem__(self, key)

    def has_key(self, key):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_has_key(self, key)

    def keys(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_keys(self)

    def values(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_values(self)

    def items(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_items(self)

    def __contains__(self, key):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___contains__(self, key)

    def key_iterator(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_key_iterator(self)

    def value_iterator(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_value_iterator(self)

    def __setitem__(self, *args):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp___setitem__(self, *args)

    def asdict(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_asdict(self)

    def __init__(self, *args):
        this = _stdlib.new_map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_empty(self)

    def size(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_size(self)

    def swap(self, v):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_swap(self, v)

    def begin(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_begin(self)

    def end(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_end(self)

    def rbegin(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_rbegin(self)

    def rend(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_rend(self)

    def clear(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_clear(self)

    def get_allocator(self):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_get_allocator(self)

    def count(self, x):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_count(self, x)

    def erase(self, *args):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_erase(self, *args)

    def find(self, x):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_upper_bound(self, x)
    __swig_destroy__ = _stdlib.delete_map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp
map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_swigregister = _stdlib.map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_swigregister
map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp_swigregister(map_SMDS_MeshNodecp_SMDS_MeshNodecp_TIDcomp)

class pair_int_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _stdlib.new_pair_int_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    first = _swig_property(_stdlib.pair_int_int_first_get, _stdlib.pair_int_int_first_set)
    second = _swig_property(_stdlib.pair_int_int_second_get, _stdlib.pair_int_int_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _stdlib.delete_pair_int_int
pair_int_int_swigregister = _stdlib.pair_int_int_swigregister
pair_int_int_swigregister(pair_int_int)

class pair_int_TopAbs_ShapeEnum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _stdlib.new_pair_int_TopAbs_ShapeEnum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    first = _swig_property(_stdlib.pair_int_TopAbs_ShapeEnum_first_get, _stdlib.pair_int_TopAbs_ShapeEnum_first_set)
    second = _swig_property(_stdlib.pair_int_TopAbs_ShapeEnum_second_get, _stdlib.pair_int_TopAbs_ShapeEnum_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _stdlib.delete_pair_int_TopAbs_ShapeEnum
pair_int_TopAbs_ShapeEnum_swigregister = _stdlib.pair_int_TopAbs_ShapeEnum_swigregister
pair_int_TopAbs_ShapeEnum_swigregister(pair_int_TopAbs_ShapeEnum)

class set_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_int___bool__(self)

    def __len__(self):
        return _stdlib.set_int___len__(self)

    def append(self, x):
        return _stdlib.set_int_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_int___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_int___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_int_add(self, x)

    def discard(self, x):
        return _stdlib.set_int_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_int_empty(self)

    def size(self):
        return _stdlib.set_int_size(self)

    def clear(self):
        return _stdlib.set_int_clear(self)

    def swap(self, v):
        return _stdlib.set_int_swap(self, v)

    def count(self, x):
        return _stdlib.set_int_count(self, x)

    def begin(self):
        return _stdlib.set_int_begin(self)

    def end(self):
        return _stdlib.set_int_end(self)

    def rbegin(self):
        return _stdlib.set_int_rbegin(self)

    def rend(self):
        return _stdlib.set_int_rend(self)

    def erase(self, *args):
        return _stdlib.set_int_erase(self, *args)

    def find(self, x):
        return _stdlib.set_int_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_int_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_int_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_int_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_int_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_int
set_int_swigregister = _stdlib.set_int_swigregister
set_int_swigregister(set_int)

class set_SMDS_MeshElementcp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_SMDS_MeshElementcp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_SMDS_MeshElementcp___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_SMDS_MeshElementcp___bool__(self)

    def __len__(self):
        return _stdlib.set_SMDS_MeshElementcp___len__(self)

    def append(self, x):
        return _stdlib.set_SMDS_MeshElementcp_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_SMDS_MeshElementcp___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_SMDS_MeshElementcp___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_SMDS_MeshElementcp_add(self, x)

    def discard(self, x):
        return _stdlib.set_SMDS_MeshElementcp_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_SMDS_MeshElementcp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_SMDS_MeshElementcp_empty(self)

    def size(self):
        return _stdlib.set_SMDS_MeshElementcp_size(self)

    def clear(self):
        return _stdlib.set_SMDS_MeshElementcp_clear(self)

    def swap(self, v):
        return _stdlib.set_SMDS_MeshElementcp_swap(self, v)

    def count(self, x):
        return _stdlib.set_SMDS_MeshElementcp_count(self, x)

    def begin(self):
        return _stdlib.set_SMDS_MeshElementcp_begin(self)

    def end(self):
        return _stdlib.set_SMDS_MeshElementcp_end(self)

    def rbegin(self):
        return _stdlib.set_SMDS_MeshElementcp_rbegin(self)

    def rend(self):
        return _stdlib.set_SMDS_MeshElementcp_rend(self)

    def erase(self, *args):
        return _stdlib.set_SMDS_MeshElementcp_erase(self, *args)

    def find(self, x):
        return _stdlib.set_SMDS_MeshElementcp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_SMDS_MeshElementcp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_SMDS_MeshElementcp_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_SMDS_MeshElementcp_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_SMDS_MeshElementcp_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_SMDS_MeshElementcp
set_SMDS_MeshElementcp_swigregister = _stdlib.set_SMDS_MeshElementcp_swigregister
set_SMDS_MeshElementcp_swigregister(set_SMDS_MeshElementcp)

class set_SMDS_MeshElementcp_TIDcmp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp___bool__(self)

    def __len__(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp___len__(self)

    def append(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_add(self, x)

    def discard(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_SMDS_MeshElementcp_TIDcmp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_empty(self)

    def size(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_size(self)

    def clear(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_clear(self)

    def swap(self, v):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_swap(self, v)

    def count(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_count(self, x)

    def begin(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_begin(self)

    def end(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_end(self)

    def rbegin(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_rbegin(self)

    def rend(self):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_rend(self)

    def erase(self, *args):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_erase(self, *args)

    def find(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_SMDS_MeshElementcp_TIDcmp_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_SMDS_MeshElementcp_TIDcmp
set_SMDS_MeshElementcp_TIDcmp_swigregister = _stdlib.set_SMDS_MeshElementcp_TIDcmp_swigregister
set_SMDS_MeshElementcp_TIDcmp_swigregister(set_SMDS_MeshElementcp_TIDcmp)

class set_SMDS_MeshNodecp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_SMDS_MeshNodecp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_SMDS_MeshNodecp___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_SMDS_MeshNodecp___bool__(self)

    def __len__(self):
        return _stdlib.set_SMDS_MeshNodecp___len__(self)

    def append(self, x):
        return _stdlib.set_SMDS_MeshNodecp_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_SMDS_MeshNodecp___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_SMDS_MeshNodecp___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_SMDS_MeshNodecp_add(self, x)

    def discard(self, x):
        return _stdlib.set_SMDS_MeshNodecp_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_SMDS_MeshNodecp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_SMDS_MeshNodecp_empty(self)

    def size(self):
        return _stdlib.set_SMDS_MeshNodecp_size(self)

    def clear(self):
        return _stdlib.set_SMDS_MeshNodecp_clear(self)

    def swap(self, v):
        return _stdlib.set_SMDS_MeshNodecp_swap(self, v)

    def count(self, x):
        return _stdlib.set_SMDS_MeshNodecp_count(self, x)

    def begin(self):
        return _stdlib.set_SMDS_MeshNodecp_begin(self)

    def end(self):
        return _stdlib.set_SMDS_MeshNodecp_end(self)

    def rbegin(self):
        return _stdlib.set_SMDS_MeshNodecp_rbegin(self)

    def rend(self):
        return _stdlib.set_SMDS_MeshNodecp_rend(self)

    def erase(self, *args):
        return _stdlib.set_SMDS_MeshNodecp_erase(self, *args)

    def find(self, x):
        return _stdlib.set_SMDS_MeshNodecp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_SMDS_MeshNodecp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_SMDS_MeshNodecp_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_SMDS_MeshNodecp_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_SMDS_MeshNodecp_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_SMDS_MeshNodecp
set_SMDS_MeshNodecp_swigregister = _stdlib.set_SMDS_MeshNodecp_swigregister
set_SMDS_MeshNodecp_swigregister(set_SMDS_MeshNodecp)

class set_SMDS_MeshNodecp_TIDcomp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp___bool__(self)

    def __len__(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp___len__(self)

    def append(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_add(self, x)

    def discard(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_SMDS_MeshNodecp_TIDcomp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_empty(self)

    def size(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_size(self)

    def clear(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_clear(self)

    def swap(self, v):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_swap(self, v)

    def count(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_count(self, x)

    def begin(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_begin(self)

    def end(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_end(self)

    def rbegin(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_rbegin(self)

    def rend(self):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_rend(self)

    def erase(self, *args):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_erase(self, *args)

    def find(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_SMDS_MeshNodecp_TIDcomp_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_SMDS_MeshNodecp_TIDcomp
set_SMDS_MeshNodecp_TIDcomp_swigregister = _stdlib.set_SMDS_MeshNodecp_TIDcomp_swigregister
set_SMDS_MeshNodecp_TIDcomp_swigregister(set_SMDS_MeshNodecp_TIDcomp)

class set_SMESH_subMeshcp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.set_SMESH_subMeshcp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.set_SMESH_subMeshcp___nonzero__(self)

    def __bool__(self):
        return _stdlib.set_SMESH_subMeshcp___bool__(self)

    def __len__(self):
        return _stdlib.set_SMESH_subMeshcp___len__(self)

    def append(self, x):
        return _stdlib.set_SMESH_subMeshcp_append(self, x)

    def __contains__(self, x):
        return _stdlib.set_SMESH_subMeshcp___contains__(self, x)

    def __getitem__(self, i):
        return _stdlib.set_SMESH_subMeshcp___getitem__(self, i)

    def add(self, x):
        return _stdlib.set_SMESH_subMeshcp_add(self, x)

    def discard(self, x):
        return _stdlib.set_SMESH_subMeshcp_discard(self, x)

    def __init__(self, *args):
        this = _stdlib.new_set_SMESH_subMeshcp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _stdlib.set_SMESH_subMeshcp_empty(self)

    def size(self):
        return _stdlib.set_SMESH_subMeshcp_size(self)

    def clear(self):
        return _stdlib.set_SMESH_subMeshcp_clear(self)

    def swap(self, v):
        return _stdlib.set_SMESH_subMeshcp_swap(self, v)

    def count(self, x):
        return _stdlib.set_SMESH_subMeshcp_count(self, x)

    def begin(self):
        return _stdlib.set_SMESH_subMeshcp_begin(self)

    def end(self):
        return _stdlib.set_SMESH_subMeshcp_end(self)

    def rbegin(self):
        return _stdlib.set_SMESH_subMeshcp_rbegin(self)

    def rend(self):
        return _stdlib.set_SMESH_subMeshcp_rend(self)

    def erase(self, *args):
        return _stdlib.set_SMESH_subMeshcp_erase(self, *args)

    def find(self, x):
        return _stdlib.set_SMESH_subMeshcp_find(self, x)

    def lower_bound(self, x):
        return _stdlib.set_SMESH_subMeshcp_lower_bound(self, x)

    def upper_bound(self, x):
        return _stdlib.set_SMESH_subMeshcp_upper_bound(self, x)

    def equal_range(self, x):
        return _stdlib.set_SMESH_subMeshcp_equal_range(self, x)

    def insert(self, __x):
        return _stdlib.set_SMESH_subMeshcp_insert(self, __x)
    __swig_destroy__ = _stdlib.delete_set_SMESH_subMeshcp
set_SMESH_subMeshcp_swigregister = _stdlib.set_SMESH_subMeshcp_swigregister
set_SMESH_subMeshcp_swigregister(set_SMESH_subMeshcp)

class vector_gp_Pnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_gp_Pnt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_gp_Pnt___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_gp_Pnt___bool__(self)

    def __len__(self):
        return _stdlib.vector_gp_Pnt___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_gp_Pnt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_gp_Pnt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_gp_Pnt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_gp_Pnt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_gp_Pnt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_gp_Pnt___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_gp_Pnt_pop(self)

    def append(self, x):
        return _stdlib.vector_gp_Pnt_append(self, x)

    def empty(self):
        return _stdlib.vector_gp_Pnt_empty(self)

    def size(self):
        return _stdlib.vector_gp_Pnt_size(self)

    def swap(self, v):
        return _stdlib.vector_gp_Pnt_swap(self, v)

    def begin(self):
        return _stdlib.vector_gp_Pnt_begin(self)

    def end(self):
        return _stdlib.vector_gp_Pnt_end(self)

    def rbegin(self):
        return _stdlib.vector_gp_Pnt_rbegin(self)

    def rend(self):
        return _stdlib.vector_gp_Pnt_rend(self)

    def clear(self):
        return _stdlib.vector_gp_Pnt_clear(self)

    def get_allocator(self):
        return _stdlib.vector_gp_Pnt_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_gp_Pnt_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_gp_Pnt_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_gp_Pnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_gp_Pnt_push_back(self, x)

    def front(self):
        return _stdlib.vector_gp_Pnt_front(self)

    def back(self):
        return _stdlib.vector_gp_Pnt_back(self)

    def assign(self, n, x):
        return _stdlib.vector_gp_Pnt_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_gp_Pnt_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_gp_Pnt_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_gp_Pnt_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_gp_Pnt_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_gp_Pnt
vector_gp_Pnt_swigregister = _stdlib.vector_gp_Pnt_swigregister
vector_gp_Pnt_swigregister(vector_gp_Pnt)

class vector_SMDS_MeshElementcp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMDS_MeshElementcp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMDS_MeshElementcp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMDS_MeshElementcp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMDS_MeshElementcp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshElementcp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshElementcp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMDS_MeshElementcp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMDS_MeshElementcp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMDS_MeshElementcp_empty(self)

    def size(self):
        return _stdlib.vector_SMDS_MeshElementcp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMDS_MeshElementcp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMDS_MeshElementcp_begin(self)

    def end(self):
        return _stdlib.vector_SMDS_MeshElementcp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMDS_MeshElementcp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMDS_MeshElementcp_rend(self)

    def clear(self):
        return _stdlib.vector_SMDS_MeshElementcp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMDS_MeshElementcp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMDS_MeshElementcp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMDS_MeshElementcp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMDS_MeshElementcp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMDS_MeshElementcp_front(self)

    def back(self):
        return _stdlib.vector_SMDS_MeshElementcp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMDS_MeshElementcp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMDS_MeshElementcp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMDS_MeshElementcp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMDS_MeshElementcp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMDS_MeshElementcp
vector_SMDS_MeshElementcp_swigregister = _stdlib.vector_SMDS_MeshElementcp_swigregister
vector_SMDS_MeshElementcp_swigregister(vector_SMDS_MeshElementcp)

class vector_SMDS_MeshNodecp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMDS_MeshNodecp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMDS_MeshNodecp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMDS_MeshNodecp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMDS_MeshNodecp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshNodecp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshNodecp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMDS_MeshNodecp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMDS_MeshNodecp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMDS_MeshNodecp_empty(self)

    def size(self):
        return _stdlib.vector_SMDS_MeshNodecp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMDS_MeshNodecp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMDS_MeshNodecp_begin(self)

    def end(self):
        return _stdlib.vector_SMDS_MeshNodecp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMDS_MeshNodecp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMDS_MeshNodecp_rend(self)

    def clear(self):
        return _stdlib.vector_SMDS_MeshNodecp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMDS_MeshNodecp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMDS_MeshNodecp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMDS_MeshNodecp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMDS_MeshNodecp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMDS_MeshNodecp_front(self)

    def back(self):
        return _stdlib.vector_SMDS_MeshNodecp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMDS_MeshNodecp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMDS_MeshNodecp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMDS_MeshNodecp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMDS_MeshNodecp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMDS_MeshNodecp
vector_SMDS_MeshNodecp_swigregister = _stdlib.vector_SMDS_MeshNodecp_swigregister
vector_SMDS_MeshNodecp_swigregister(vector_SMDS_MeshNodecp)

class vector_TopoDS_Shape(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_TopoDS_Shape_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_TopoDS_Shape___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_TopoDS_Shape___bool__(self)

    def __len__(self):
        return _stdlib.vector_TopoDS_Shape___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_TopoDS_Shape___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_TopoDS_Shape___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_TopoDS_Shape___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_TopoDS_Shape___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_TopoDS_Shape___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_TopoDS_Shape___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_TopoDS_Shape_pop(self)

    def append(self, x):
        return _stdlib.vector_TopoDS_Shape_append(self, x)

    def empty(self):
        return _stdlib.vector_TopoDS_Shape_empty(self)

    def size(self):
        return _stdlib.vector_TopoDS_Shape_size(self)

    def swap(self, v):
        return _stdlib.vector_TopoDS_Shape_swap(self, v)

    def begin(self):
        return _stdlib.vector_TopoDS_Shape_begin(self)

    def end(self):
        return _stdlib.vector_TopoDS_Shape_end(self)

    def rbegin(self):
        return _stdlib.vector_TopoDS_Shape_rbegin(self)

    def rend(self):
        return _stdlib.vector_TopoDS_Shape_rend(self)

    def clear(self):
        return _stdlib.vector_TopoDS_Shape_clear(self)

    def get_allocator(self):
        return _stdlib.vector_TopoDS_Shape_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_TopoDS_Shape_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_TopoDS_Shape_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_TopoDS_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_TopoDS_Shape_push_back(self, x)

    def front(self):
        return _stdlib.vector_TopoDS_Shape_front(self)

    def back(self):
        return _stdlib.vector_TopoDS_Shape_back(self)

    def assign(self, n, x):
        return _stdlib.vector_TopoDS_Shape_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_TopoDS_Shape_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_TopoDS_Shape_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_TopoDS_Shape_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_TopoDS_Shape_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_TopoDS_Shape
vector_TopoDS_Shape_swigregister = _stdlib.vector_TopoDS_Shape_swigregister
vector_TopoDS_Shape_swigregister(vector_TopoDS_Shape)

class vector_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_double___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_double___bool__(self)

    def __len__(self):
        return _stdlib.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_double___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_double_pop(self)

    def append(self, x):
        return _stdlib.vector_double_append(self, x)

    def empty(self):
        return _stdlib.vector_double_empty(self)

    def size(self):
        return _stdlib.vector_double_size(self)

    def swap(self, v):
        return _stdlib.vector_double_swap(self, v)

    def begin(self):
        return _stdlib.vector_double_begin(self)

    def end(self):
        return _stdlib.vector_double_end(self)

    def rbegin(self):
        return _stdlib.vector_double_rbegin(self)

    def rend(self):
        return _stdlib.vector_double_rend(self)

    def clear(self):
        return _stdlib.vector_double_clear(self)

    def get_allocator(self):
        return _stdlib.vector_double_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_double_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_double_push_back(self, x)

    def front(self):
        return _stdlib.vector_double_front(self)

    def back(self):
        return _stdlib.vector_double_back(self)

    def assign(self, n, x):
        return _stdlib.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_double_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_double_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_double_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_double_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_double
vector_double_swigregister = _stdlib.vector_double_swigregister
vector_double_swigregister(vector_double)

class vector_gp_Trsf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_gp_Trsf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_gp_Trsf___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_gp_Trsf___bool__(self)

    def __len__(self):
        return _stdlib.vector_gp_Trsf___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_gp_Trsf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_gp_Trsf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_gp_Trsf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_gp_Trsf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_gp_Trsf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_gp_Trsf___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_gp_Trsf_pop(self)

    def append(self, x):
        return _stdlib.vector_gp_Trsf_append(self, x)

    def empty(self):
        return _stdlib.vector_gp_Trsf_empty(self)

    def size(self):
        return _stdlib.vector_gp_Trsf_size(self)

    def swap(self, v):
        return _stdlib.vector_gp_Trsf_swap(self, v)

    def begin(self):
        return _stdlib.vector_gp_Trsf_begin(self)

    def end(self):
        return _stdlib.vector_gp_Trsf_end(self)

    def rbegin(self):
        return _stdlib.vector_gp_Trsf_rbegin(self)

    def rend(self):
        return _stdlib.vector_gp_Trsf_rend(self)

    def clear(self):
        return _stdlib.vector_gp_Trsf_clear(self)

    def get_allocator(self):
        return _stdlib.vector_gp_Trsf_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_gp_Trsf_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_gp_Trsf_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_gp_Trsf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_gp_Trsf_push_back(self, x)

    def front(self):
        return _stdlib.vector_gp_Trsf_front(self)

    def back(self):
        return _stdlib.vector_gp_Trsf_back(self)

    def assign(self, n, x):
        return _stdlib.vector_gp_Trsf_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_gp_Trsf_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_gp_Trsf_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_gp_Trsf_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_gp_Trsf_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_gp_Trsf
vector_gp_Trsf_swigregister = _stdlib.vector_gp_Trsf_swigregister
vector_gp_Trsf_swigregister(vector_gp_Trsf)

class vector_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_int___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_int___bool__(self)

    def __len__(self):
        return _stdlib.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_int___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_int_pop(self)

    def append(self, x):
        return _stdlib.vector_int_append(self, x)

    def empty(self):
        return _stdlib.vector_int_empty(self)

    def size(self):
        return _stdlib.vector_int_size(self)

    def swap(self, v):
        return _stdlib.vector_int_swap(self, v)

    def begin(self):
        return _stdlib.vector_int_begin(self)

    def end(self):
        return _stdlib.vector_int_end(self)

    def rbegin(self):
        return _stdlib.vector_int_rbegin(self)

    def rend(self):
        return _stdlib.vector_int_rend(self)

    def clear(self):
        return _stdlib.vector_int_clear(self)

    def get_allocator(self):
        return _stdlib.vector_int_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_int_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_int_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_int_push_back(self, x)

    def front(self):
        return _stdlib.vector_int_front(self)

    def back(self):
        return _stdlib.vector_int_back(self)

    def assign(self, n, x):
        return _stdlib.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_int_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_int_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_int_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_int_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_int
vector_int_swigregister = _stdlib.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_SMDS_MeshCellp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMDS_MeshCellp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMDS_MeshCellp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMDS_MeshCellp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMDS_MeshCellp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshCellp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMDS_MeshCellp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMDS_MeshCellp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMDS_MeshCellp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMDS_MeshCellp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMDS_MeshCellp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMDS_MeshCellp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMDS_MeshCellp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMDS_MeshCellp_empty(self)

    def size(self):
        return _stdlib.vector_SMDS_MeshCellp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMDS_MeshCellp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMDS_MeshCellp_begin(self)

    def end(self):
        return _stdlib.vector_SMDS_MeshCellp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMDS_MeshCellp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMDS_MeshCellp_rend(self)

    def clear(self):
        return _stdlib.vector_SMDS_MeshCellp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMDS_MeshCellp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMDS_MeshCellp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMDS_MeshCellp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMDS_MeshCellp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMDS_MeshCellp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMDS_MeshCellp_front(self)

    def back(self):
        return _stdlib.vector_SMDS_MeshCellp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMDS_MeshCellp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMDS_MeshCellp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMDS_MeshCellp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMDS_MeshCellp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMDS_MeshCellp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMDS_MeshCellp
vector_SMDS_MeshCellp_swigregister = _stdlib.vector_SMDS_MeshCellp_swigregister
vector_SMDS_MeshCellp_swigregister(vector_SMDS_MeshCellp)

class vector_SMESH_Groupp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMESH_Groupp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMESH_Groupp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMESH_Groupp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMESH_Groupp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMESH_Groupp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMESH_Groupp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMESH_Groupp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMESH_Groupp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMESH_Groupp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMESH_Groupp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMESH_Groupp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMESH_Groupp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMESH_Groupp_empty(self)

    def size(self):
        return _stdlib.vector_SMESH_Groupp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMESH_Groupp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMESH_Groupp_begin(self)

    def end(self):
        return _stdlib.vector_SMESH_Groupp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMESH_Groupp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMESH_Groupp_rend(self)

    def clear(self):
        return _stdlib.vector_SMESH_Groupp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMESH_Groupp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMESH_Groupp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMESH_Groupp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMESH_Groupp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMESH_Groupp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMESH_Groupp_front(self)

    def back(self):
        return _stdlib.vector_SMESH_Groupp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMESH_Groupp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMESH_Groupp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMESH_Groupp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMESH_Groupp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMESH_Groupp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMESH_Groupp
vector_SMESH_Groupp_swigregister = _stdlib.vector_SMESH_Groupp_swigregister
vector_SMESH_Groupp_swigregister(vector_SMESH_Groupp)

class vector_SMESH_Meshp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMESH_Meshp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMESH_Meshp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMESH_Meshp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMESH_Meshp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMESH_Meshp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMESH_Meshp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMESH_Meshp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMESH_Meshp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMESH_Meshp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMESH_Meshp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMESH_Meshp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMESH_Meshp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMESH_Meshp_empty(self)

    def size(self):
        return _stdlib.vector_SMESH_Meshp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMESH_Meshp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMESH_Meshp_begin(self)

    def end(self):
        return _stdlib.vector_SMESH_Meshp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMESH_Meshp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMESH_Meshp_rend(self)

    def clear(self):
        return _stdlib.vector_SMESH_Meshp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMESH_Meshp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMESH_Meshp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMESH_Meshp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMESH_Meshp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMESH_Meshp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMESH_Meshp_front(self)

    def back(self):
        return _stdlib.vector_SMESH_Meshp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMESH_Meshp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMESH_Meshp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMESH_Meshp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMESH_Meshp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMESH_Meshp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMESH_Meshp
vector_SMESH_Meshp_swigregister = _stdlib.vector_SMESH_Meshp_swigregister
vector_SMESH_Meshp_swigregister(vector_SMESH_Meshp)

class vector_SMESH_subMeshp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_SMESH_subMeshp_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_SMESH_subMeshp___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_SMESH_subMeshp___bool__(self)

    def __len__(self):
        return _stdlib.vector_SMESH_subMeshp___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_SMESH_subMeshp___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_SMESH_subMeshp___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_SMESH_subMeshp___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_SMESH_subMeshp___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_SMESH_subMeshp___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_SMESH_subMeshp___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_SMESH_subMeshp_pop(self)

    def append(self, x):
        return _stdlib.vector_SMESH_subMeshp_append(self, x)

    def empty(self):
        return _stdlib.vector_SMESH_subMeshp_empty(self)

    def size(self):
        return _stdlib.vector_SMESH_subMeshp_size(self)

    def swap(self, v):
        return _stdlib.vector_SMESH_subMeshp_swap(self, v)

    def begin(self):
        return _stdlib.vector_SMESH_subMeshp_begin(self)

    def end(self):
        return _stdlib.vector_SMESH_subMeshp_end(self)

    def rbegin(self):
        return _stdlib.vector_SMESH_subMeshp_rbegin(self)

    def rend(self):
        return _stdlib.vector_SMESH_subMeshp_rend(self)

    def clear(self):
        return _stdlib.vector_SMESH_subMeshp_clear(self)

    def get_allocator(self):
        return _stdlib.vector_SMESH_subMeshp_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_SMESH_subMeshp_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_SMESH_subMeshp_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_SMESH_subMeshp(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_SMESH_subMeshp_push_back(self, x)

    def front(self):
        return _stdlib.vector_SMESH_subMeshp_front(self)

    def back(self):
        return _stdlib.vector_SMESH_subMeshp_back(self)

    def assign(self, n, x):
        return _stdlib.vector_SMESH_subMeshp_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_SMESH_subMeshp_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_SMESH_subMeshp_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_SMESH_subMeshp_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_SMESH_subMeshp_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_SMESH_subMeshp
vector_SMESH_subMeshp_swigregister = _stdlib.vector_SMESH_subMeshp_swigregister
vector_SMESH_subMeshp_swigregister(vector_SMESH_subMeshp)

class vector_TopoDS_Vertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _stdlib.vector_TopoDS_Vertex_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _stdlib.vector_TopoDS_Vertex___nonzero__(self)

    def __bool__(self):
        return _stdlib.vector_TopoDS_Vertex___bool__(self)

    def __len__(self):
        return _stdlib.vector_TopoDS_Vertex___len__(self)

    def __getslice__(self, i, j):
        return _stdlib.vector_TopoDS_Vertex___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _stdlib.vector_TopoDS_Vertex___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _stdlib.vector_TopoDS_Vertex___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _stdlib.vector_TopoDS_Vertex___delitem__(self, *args)

    def __getitem__(self, *args):
        return _stdlib.vector_TopoDS_Vertex___getitem__(self, *args)

    def __setitem__(self, *args):
        return _stdlib.vector_TopoDS_Vertex___setitem__(self, *args)

    def pop(self):
        return _stdlib.vector_TopoDS_Vertex_pop(self)

    def append(self, x):
        return _stdlib.vector_TopoDS_Vertex_append(self, x)

    def empty(self):
        return _stdlib.vector_TopoDS_Vertex_empty(self)

    def size(self):
        return _stdlib.vector_TopoDS_Vertex_size(self)

    def swap(self, v):
        return _stdlib.vector_TopoDS_Vertex_swap(self, v)

    def begin(self):
        return _stdlib.vector_TopoDS_Vertex_begin(self)

    def end(self):
        return _stdlib.vector_TopoDS_Vertex_end(self)

    def rbegin(self):
        return _stdlib.vector_TopoDS_Vertex_rbegin(self)

    def rend(self):
        return _stdlib.vector_TopoDS_Vertex_rend(self)

    def clear(self):
        return _stdlib.vector_TopoDS_Vertex_clear(self)

    def get_allocator(self):
        return _stdlib.vector_TopoDS_Vertex_get_allocator(self)

    def pop_back(self):
        return _stdlib.vector_TopoDS_Vertex_pop_back(self)

    def erase(self, *args):
        return _stdlib.vector_TopoDS_Vertex_erase(self, *args)

    def __init__(self, *args):
        this = _stdlib.new_vector_TopoDS_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _stdlib.vector_TopoDS_Vertex_push_back(self, x)

    def front(self):
        return _stdlib.vector_TopoDS_Vertex_front(self)

    def back(self):
        return _stdlib.vector_TopoDS_Vertex_back(self)

    def assign(self, n, x):
        return _stdlib.vector_TopoDS_Vertex_assign(self, n, x)

    def resize(self, *args):
        return _stdlib.vector_TopoDS_Vertex_resize(self, *args)

    def insert(self, *args):
        return _stdlib.vector_TopoDS_Vertex_insert(self, *args)

    def reserve(self, n):
        return _stdlib.vector_TopoDS_Vertex_reserve(self, n)

    def capacity(self):
        return _stdlib.vector_TopoDS_Vertex_capacity(self)
    __swig_destroy__ = _stdlib.delete_vector_TopoDS_Vertex
vector_TopoDS_Vertex_swigregister = _stdlib.vector_TopoDS_Vertex_swigregister
vector_TopoDS_Vertex_swigregister(vector_TopoDS_Vertex)



