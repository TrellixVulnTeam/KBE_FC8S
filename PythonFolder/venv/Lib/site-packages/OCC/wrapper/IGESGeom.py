# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESGeom')
    _IGESGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESGeom', [dirname(__file__)])
        except ImportError:
            import _IGESGeom
            return _IGESGeom
        try:
            _mod = imp.load_module('_IGESGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESGeom = swig_import_helper()
    del swig_import_helper
else:
    import _IGESGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESGeom.delete_SwigPyIterator

    def value(self):
        return _IGESGeom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESGeom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESGeom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESGeom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESGeom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESGeom.SwigPyIterator_copy(self)

    def next(self):
        return _IGESGeom.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESGeom.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESGeom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESGeom.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESGeom.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESGeom.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESGeom.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGeom.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESGeom.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESGeom.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESGeom.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESGeom.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESGeom.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESGeom.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESGeom.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGeom.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESGeom.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESGeom.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESGeom.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESGeom.ptr_to_number(item)
ptr_to_number = _IGESGeom.ptr_to_number

def HashCode(*args):
    return _IGESGeom.HashCode(*args)
HashCode = _IGESGeom.HashCode

def ptr_equal(a, b):
    return _IGESGeom.ptr_equal(a, b)
ptr_equal = _IGESGeom.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
class IGESGeom_Flash(IGESData.IGESData_IGESEntity):
    """
    defines IGESFlash, Type <125> Form <0 - 4>
    in package IGESGeom
    A flash entity is a point in the ZT=0 plane that locates
    a particular closed area. That closed area can be defined
    in one of two ways. First, it can be an arbitrary closed
    area defined by any entity capable of defining a closed
    area. The points of this entity must all lie in the ZT=0
    plane. Second, it can be a member of a predefined set of
    flash shapes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Flash
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Flash(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Flash self) -> IGESGeom_Flash

        defines IGESFlash, Type <125> Form <0 - 4>
        in package IGESGeom
        A flash entity is a point in the ZT=0 plane that locates
        a particular closed area. That closed area can be defined
        in one of two ways. First, it can be an arbitrary closed
        area defined by any entity capable of defining a closed
        area. The points of this entity must all lie in the ZT=0
        plane. Second, it can be a member of a predefined set of
        flash shapes.
        """
        this = _IGESGeom.new_IGESGeom_Flash(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Flash self, gp_XY aPoint, Standard_Real const aDim, Standard_Real const anotherDim, Standard_Real const aRotation, Handle_IGESData_IGESEntity aReference)

        This method is used to set the fields of the class Flash
        - aPoint     : Reference of flash
        - aDim       : First flash sizing parameter
        - anotherDim : Second flash sizing parameter
        - aRotation  : Rotation of flash about reference point
        in radians
        - aReference : Pointer to the referenced entity or Null

        :type aPoint: OCC.wrapper.gp.gp_XY
        :type aDim: float
        :type anotherDim: float
        :type aRotation: float
        :type aReference: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Flash_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESGeom_Flash self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Flash :
        0 Unspecified, then given by Reference, 1->4 various
        Specialisations (Circle,Rectangle, etc...) )
        Error if not in range [0-4]

        :type form: int

        """
        return _IGESGeom.IGESGeom_Flash_SetFormNumber(self, *args)


    def ReferencePoint(self, *args):
        """
        ReferencePoint(IGESGeom_Flash self) -> gp_Pnt2d

        returns the referenced point, Z = 0 always

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_Flash_ReferencePoint(self, *args)


    def TransformedReferencePoint(self, *args):
        """
        TransformedReferencePoint(IGESGeom_Flash self) -> gp_Pnt

        returns the referenced point after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Flash_TransformedReferencePoint(self, *args)


    def Dimension1(self, *args):
        """
        Dimension1(IGESGeom_Flash self) -> Standard_Real

        returns first flash sizing parameter

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_Flash_Dimension1(self, *args)


    def Dimension2(self, *args):
        """
        Dimension2(IGESGeom_Flash self) -> Standard_Real

        returns second flash sizing parameter

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_Flash_Dimension2(self, *args)


    def Rotation(self, *args):
        """
        Rotation(IGESGeom_Flash self) -> Standard_Real

        returns the angle in radians of the rotation of flash about the
        reference point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_Flash_Rotation(self, *args)


    def ReferenceEntity(self, *args):
        """
        ReferenceEntity(IGESGeom_Flash self) -> Handle_IGESData_IGESEntity

        returns the referenced entity or Null handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Flash_ReferenceEntity(self, *args)


    def HasReferenceEntity(self, *args):
        """
        HasReferenceEntity(IGESGeom_Flash self) -> Standard_Boolean

        returns True if referenced entity is present.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_Flash_HasReferenceEntity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Flash_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Flash_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Flash_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Flash
IGESGeom_Flash_swigregister = _IGESGeom.IGESGeom_Flash_swigregister
IGESGeom_Flash_swigregister(IGESGeom_Flash)

def IGESGeom_Flash_get_type_name(*args):
    """
    IGESGeom_Flash_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Flash_get_type_name(*args)

def IGESGeom_Flash_get_type_descriptor(*args):
    """
    IGESGeom_Flash_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Flash_get_type_descriptor(*args)

class IGESGeom_BSplineSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESBSplineSurface, Type <128> Form <0-9>
    in package IGESGeom
    A parametric equation obtained by dividing two summations
    involving weights (which are real numbers), the control
    points, and B-Spline basis functions
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_BSplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_BSplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_BSplineSurface self) -> IGESGeom_BSplineSurface

        defines IGESBSplineSurface, Type <128> Form <0-9>
        in package IGESGeom
        A parametric equation obtained by dividing two summations
        involving weights (which are real numbers), the control
        points, and B-Spline basis functions
        """
        this = _IGESGeom.new_IGESGeom_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_BSplineSurface self, Standard_Integer const anIndexU, Standard_Integer const anIndexV, Standard_Integer const aDegU, Standard_Integer const aDegV, Standard_Boolean const aCloseU, Standard_Boolean const aCloseV, Standard_Boolean const aPolynom, Standard_Boolean const aPeriodU, Standard_Boolean const aPeriodV, Handle_TColStd_HArray1OfReal allKnotsU, Handle_TColStd_HArray1OfReal allKnotsV, Handle_TColStd_HArray2OfReal allWeights, Handle_TColgp_HArray2OfXYZ allPoles, Standard_Real const aUmin, Standard_Real const aUmax, Standard_Real const aVmin, Standard_Real const aVmax)

        This method is used to set the fields of the class
        BSplineSurface
        - anIndexU             : Upper index of first sum
        - anIndexV             : Upper index of second sum
        - aDegU, aDegV         : Degrees of first and second sets
        of basis functions
        - aCloseU, aCloseV     : 1 = Closed in U, V directions
        0 = open in U, V directions
        - aPolynom             : 0 = Rational, 1 = polynomial
        - aPeriodU, aPeriodV   : 0 = Non periodic in U or V direction
        1 = Periodic in U or V direction
        - allKnotsU, allKnotsV : Knots in U and V directions
        - allWeights           : Array of weights
        - allPoles             : XYZ coordinates of all control points
        - aUmin                : Starting value of U direction
        - aUmax                : Ending value of U direction
        - aVmin                : Starting value of V direction
        - aVmax                : Ending value of V direction
        raises exception if allWeights & allPoles are not of same size.

        :type anIndexU: int
        :type anIndexV: int
        :type aDegU: int
        :type aDegV: int
        :type aCloseU: bool
        :type aCloseV: bool
        :type aPolynom: bool
        :type aPeriodU: bool
        :type aPeriodV: bool
        :type allKnotsU: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allKnotsV: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allPoles: OCC.wrapper.TColgp.Handle_TColgp_HArray2OfXYZ
        :type aUmin: float
        :type aUmax: float
        :type aVmin: float
        :type aVmax: float

        """
        return _IGESGeom.IGESGeom_BSplineSurface_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESGeom_BSplineSurface self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Surface)
        Error if not in range [0-9]

        :type form: int

        """
        return _IGESGeom.IGESGeom_BSplineSurface_SetFormNumber(self, *args)


    def UpperIndexU(self, *args):
        """
        UpperIndexU(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns the upper index of the first sum (U)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_UpperIndexU(self, *args)


    def UpperIndexV(self, *args):
        """
        UpperIndexV(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns the upper index of the second sum (V)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_UpperIndexV(self, *args)


    def DegreeU(self, *args):
        """
        DegreeU(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns degree of first set of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_DegreeU(self, *args)


    def DegreeV(self, *args):
        """
        DegreeV(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns degree of second set of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_DegreeV(self, *args)


    def IsClosedU(self, *args):
        """
        IsClosedU(IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if closed in U direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineSurface_IsClosedU(self, *args)


    def IsClosedV(self, *args):
        """
        IsClosedV(IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if closed in V direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineSurface_IsClosedV(self, *args)


    def IsPolynomial(self, *args):
        """
        IsPolynomial(IGESGeom_BSplineSurface self, Standard_Boolean const flag) -> Standard_Boolean

        True if polynomial, False if rational
        <flag> False (D) : computed from Weights
        <flag> True : recorded

        :type flag: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineSurface_IsPolynomial(self, *args)


    def IsPeriodicU(self, *args):
        """
        IsPeriodicU(IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if periodic in U direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineSurface_IsPeriodicU(self, *args)


    def IsPeriodicV(self, *args):
        """
        IsPeriodicV(IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if periodic in V direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineSurface_IsPeriodicV(self, *args)


    def NbKnotsU(self, *args):
        """
        NbKnotsU(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of knots in U direction
        KnotsU are numbered from -DegreeU

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_NbKnotsU(self, *args)


    def NbKnotsV(self, *args):
        """
        NbKnotsV(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of knots in V direction
        KnotsV are numbered from -DegreeV

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_NbKnotsV(self, *args)


    def KnotU(self, *args):
        """
        KnotU(IGESGeom_BSplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns the value of knot referred to by anIndex in U direction
        raises exception if
        anIndex < -DegreeU() or anIndex > (NbKnotsU() - DegreeU())

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_KnotU(self, *args)


    def KnotV(self, *args):
        """
        KnotV(IGESGeom_BSplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns the value of knot referred to by anIndex in V direction
        raises exception if
        anIndex < -DegreeV() or anIndex > (NbKnotsV() - DegreeV())

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_KnotV(self, *args)


    def NbPolesU(self, *args):
        """
        NbPolesU(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of poles in U direction

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_NbPolesU(self, *args)


    def NbPolesV(self, *args):
        """
        NbPolesV(IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of poles in V direction

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineSurface_NbPolesV(self, *args)


    def Weight(self, *args):
        """
        Weight(IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Standard_Real

        returns the weight referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_Weight(self, *args)


    def Pole(self, *args):
        """
        Pole(IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> gp_Pnt

        returns the control point referenced by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_BSplineSurface_Pole(self, *args)


    def TransformedPole(self, *args):
        """
        TransformedPole(IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> gp_Pnt

        returns the control point referenced by anIndex1, anIndex2
        after applying the Transf.Matrix
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_BSplineSurface_TransformedPole(self, *args)


    def UMin(self, *args):
        """
        UMin(IGESGeom_BSplineSurface self) -> Standard_Real

        returns starting value in the U direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_UMin(self, *args)


    def UMax(self, *args):
        """
        UMax(IGESGeom_BSplineSurface self) -> Standard_Real

        returns ending value in the U direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_UMax(self, *args)


    def VMin(self, *args):
        """
        VMin(IGESGeom_BSplineSurface self) -> Standard_Real

        returns starting value in the V direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_VMin(self, *args)


    def VMax(self, *args):
        """
        VMax(IGESGeom_BSplineSurface self) -> Standard_Real

        returns ending value in the V direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineSurface_VMax(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_BSplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_BSplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_BSplineSurface
IGESGeom_BSplineSurface_swigregister = _IGESGeom.IGESGeom_BSplineSurface_swigregister
IGESGeom_BSplineSurface_swigregister(IGESGeom_BSplineSurface)

def IGESGeom_BSplineSurface_get_type_name(*args):
    """
    IGESGeom_BSplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_BSplineSurface_get_type_name(*args)

def IGESGeom_BSplineSurface_get_type_descriptor(*args):
    """
    IGESGeom_BSplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_BSplineSurface_get_type_descriptor(*args)

class IGESGeom_HArray1OfBoundary(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_HArray1OfBoundary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_HArray1OfBoundary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_HArray1OfBoundary self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGeom_HArray1OfBoundary
        __init__(IGESGeom_HArray1OfBoundary self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGeom_Boundary theValue) -> IGESGeom_HArray1OfBoundary
        __init__(IGESGeom_HArray1OfBoundary self, NCollection_Array1_Handle_IGESGeom_Boundary theOther) -> IGESGeom_HArray1OfBoundary

        :type theOther: OCC.wrapper.IGESGeom.IGESGeom_Array1OfBoundary

        """
        this = _IGESGeom.new_IGESGeom_HArray1OfBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfBoundary

        """
        res = _IGESGeom.IGESGeom_HArray1OfBoundary_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGeom_HArray1OfBoundary self) -> NCollection_Array1_Handle_IGESGeom_Boundary

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfBoundary

        """
        return _IGESGeom.IGESGeom_HArray1OfBoundary_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_HArray1OfBoundary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_HArray1OfBoundary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_HArray1OfBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_HArray1OfBoundary
IGESGeom_HArray1OfBoundary_swigregister = _IGESGeom.IGESGeom_HArray1OfBoundary_swigregister
IGESGeom_HArray1OfBoundary_swigregister(IGESGeom_HArray1OfBoundary)

def IGESGeom_HArray1OfBoundary_get_type_name(*args):
    """
    IGESGeom_HArray1OfBoundary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_HArray1OfBoundary_get_type_name(*args)

def IGESGeom_HArray1OfBoundary_get_type_descriptor(*args):
    """
    IGESGeom_HArray1OfBoundary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_HArray1OfBoundary_get_type_descriptor(*args)

class IGESGeom_Point(IGESData.IGESData_IGESEntity):
    """
    defines IGESPoint, Type <116> Form <0>
    in package IGESGeom
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Point
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Point(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Point self) -> IGESGeom_Point

        defines IGESPoint, Type <116> Form <0>
        in package IGESGeom
        """
        this = _IGESGeom.new_IGESGeom_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Point self, gp_XYZ aPoint, Handle_IGESBasic_SubfigureDef aSymbol)

        This method is used to set the fields of the class Point
        - aPoint  : Coordinates of point
        - aSymbol : SubfigureDefinition entity specifying the
        display symbol if there exists one, or zero

        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aSymbol: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGeom.IGESGeom_Point_Init(self, *args)


    def Value(self, *args):
        """
        Value(IGESGeom_Point self) -> gp_Pnt

        returns co-ordinates of the point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Point_Value(self, *args)


    def TransformedValue(self, *args):
        """
        TransformedValue(IGESGeom_Point self) -> gp_Pnt

        returns co-ordinates of the point after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Point_TransformedValue(self, *args)


    def HasDisplaySymbol(self, *args):
        """
        HasDisplaySymbol(IGESGeom_Point self) -> Standard_Boolean

        returns True if symbol exists

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_Point_HasDisplaySymbol(self, *args)


    def DisplaySymbol(self, *args):
        """
        DisplaySymbol(IGESGeom_Point self) -> Handle_IGESBasic_SubfigureDef

        returns display symbol entity if it exists

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGeom.IGESGeom_Point_DisplaySymbol(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Point_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Point_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Point
IGESGeom_Point_swigregister = _IGESGeom.IGESGeom_Point_swigregister
IGESGeom_Point_swigregister(IGESGeom_Point)

def IGESGeom_Point_get_type_name(*args):
    """
    IGESGeom_Point_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Point_get_type_name(*args)

def IGESGeom_Point_get_type_descriptor(*args):
    """
    IGESGeom_Point_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Point_get_type_descriptor(*args)

class IGESGeom_SurfaceOfRevolution(IGESData.IGESData_IGESEntity):
    """
    defines IGESSurfaceOfRevolution, Type <120> Form <0>
    in package IGESGeom
    A surface of revolution is defined by an axis of rotation
    a generatrix, and start and terminate rotation angles. The
    surface is created by rotating the generatrix about the axis
    of rotation through the start and terminate rotation angles.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_SurfaceOfRevolution
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_SurfaceOfRevolution(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_SurfaceOfRevolution self) -> IGESGeom_SurfaceOfRevolution

        defines IGESSurfaceOfRevolution, Type <120> Form <0>
        in package IGESGeom
        A surface of revolution is defined by an axis of rotation
        a generatrix, and start and terminate rotation angles. The
        surface is created by rotating the generatrix about the axis
        of rotation through the start and terminate rotation angles.
        """
        this = _IGESGeom.new_IGESGeom_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_SurfaceOfRevolution self, Handle_IGESGeom_Line anAxis, Handle_IGESData_IGESEntity aGeneratrix, Standard_Real const aStartAngle, Standard_Real const anEndAngle)

        This method is used to set the fields of the class Line
        - anAxis      : Axis of revolution
        - aGeneratrix : The curve which is revolved about the axis
        - aStartAngle : Start angle of the surface of revolution
        - anEndAngle  : End angle of the surface of revolution

        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type aGeneratrix: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aStartAngle: float
        :type anEndAngle: float

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_Init(self, *args)


    def AxisOfRevolution(self, *args):
        """
        AxisOfRevolution(IGESGeom_SurfaceOfRevolution self) -> Handle_IGESGeom_Line

        returns the axis of revolution

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_AxisOfRevolution(self, *args)


    def Generatrix(self, *args):
        """
        Generatrix(IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_IGESEntity

        returns the curve which is revolved about the axis

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_Generatrix(self, *args)


    def StartAngle(self, *args):
        """
        StartAngle(IGESGeom_SurfaceOfRevolution self) -> Standard_Real

        returns start angle of revolution

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_StartAngle(self, *args)


    def EndAngle(self, *args):
        """
        EndAngle(IGESGeom_SurfaceOfRevolution self) -> Standard_Real

        returns end angle of revolution

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_EndAngle(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_SurfaceOfRevolution_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_SurfaceOfRevolution
IGESGeom_SurfaceOfRevolution_swigregister = _IGESGeom.IGESGeom_SurfaceOfRevolution_swigregister
IGESGeom_SurfaceOfRevolution_swigregister(IGESGeom_SurfaceOfRevolution)

def IGESGeom_SurfaceOfRevolution_get_type_name(*args):
    """
    IGESGeom_SurfaceOfRevolution_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_SurfaceOfRevolution_get_type_name(*args)

def IGESGeom_SurfaceOfRevolution_get_type_descriptor(*args):
    """
    IGESGeom_SurfaceOfRevolution_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_SurfaceOfRevolution_get_type_descriptor(*args)

class IGESGeom_TrimmedSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESTrimmedSurface, Type <144> Form <0>
    in package IGESGeom
    A simple closed curve  in Euclidean plane  divides the
    plane in to two disjoint, open connected components; one
    bounded, one unbounded. The bounded one is called the
    interior region to the curve. Unbounded component is called
    exterior region to the curve. The domain of the trimmed
    surface is defined as the interior of the outer boundaries
    and exterior of the inner boundaries and includes the
    boundary curves.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_TrimmedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_TrimmedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_TrimmedSurface self) -> IGESGeom_TrimmedSurface

        defines IGESTrimmedSurface, Type <144> Form <0>
        in package IGESGeom
        A simple closed curve  in Euclidean plane  divides the
        plane in to two disjoint, open connected components; one
        bounded, one unbounded. The bounded one is called the
        interior region to the curve. Unbounded component is called
        exterior region to the curve. The domain of the trimmed
        surface is defined as the interior of the outer boundaries
        and exterior of the inner boundaries and includes the
        boundary curves.
        """
        this = _IGESGeom.new_IGESGeom_TrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity aSurface, Standard_Integer const aFlag, Handle_IGESGeom_CurveOnSurface anOuter, Handle_IGESGeom_HArray1OfCurveOnSurface allInners)

        This method is used to set the fields of the class
        TrimmedSurface
        - aSurface  : Surface to be trimmed
        - aFlag     : Outer boundary type
        False = The outer boundary is the boundary of
        rectangle D which is the domain of the
        surface to be trimmed
        True  = otherwise
        - anOuter   : Closed curve which constitutes outer boundary
        - allInners : Array of closed curves which constitute the
        inner boundary

        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFlag: int
        :type anOuter: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type allInners: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_Init(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESGeom_TrimmedSurface self) -> Handle_IGESData_IGESEntity

        returns the surface to be trimmed

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_Surface(self, *args)


    def HasOuterContour(self, *args):
        """
        HasOuterContour(IGESGeom_TrimmedSurface self) -> Standard_Boolean

        returns True if outer contour exists

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_HasOuterContour(self, *args)


    def OuterContour(self, *args):
        """
        OuterContour(IGESGeom_TrimmedSurface self) -> Handle_IGESGeom_CurveOnSurface

        returns the outer contour of the trimmed surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_OuterContour(self, *args)


    def OuterBoundaryType(self, *args):
        """
        OuterBoundaryType(IGESGeom_TrimmedSurface self) -> Standard_Integer

        returns the outer contour type of the trimmed surface
        0  : The outer boundary is the boundary of D
        1  : otherwise

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_OuterBoundaryType(self, *args)


    def NbInnerContours(self, *args):
        """
        NbInnerContours(IGESGeom_TrimmedSurface self) -> Standard_Integer

        returns the number of inner boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_NbInnerContours(self, *args)


    def InnerContour(self, *args):
        """
        InnerContour(IGESGeom_TrimmedSurface self, Standard_Integer const Index) -> Handle_IGESGeom_CurveOnSurface

        returns the Index'th inner contour
        raises exception if Index <= 0 or Index > NbInnerContours()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_InnerContour(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_TrimmedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_TrimmedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_TrimmedSurface
IGESGeom_TrimmedSurface_swigregister = _IGESGeom.IGESGeom_TrimmedSurface_swigregister
IGESGeom_TrimmedSurface_swigregister(IGESGeom_TrimmedSurface)

def IGESGeom_TrimmedSurface_get_type_name(*args):
    """
    IGESGeom_TrimmedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_TrimmedSurface_get_type_name(*args)

def IGESGeom_TrimmedSurface_get_type_descriptor(*args):
    """
    IGESGeom_TrimmedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_TrimmedSurface_get_type_descriptor(*args)

class IGESGeom_Line(IGESData.IGESData_IGESEntity):
    """
    defines IGESLine, Type <110> Form <0>
    in package IGESGeom
    A line is a bounded, connected portion of a parent straight
    line which consists of more than one point. A line is
    defined by its end points.

    From IGES-5.3, two other Forms are admitted (same params) :
    0 remains for standard limited line (the default)
    1 for semi-infinite line (End is just a passing point)
    2 for full infinite Line (both Start and End are abitrary)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Line
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Line(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Line self) -> IGESGeom_Line

        defines IGESLine, Type <110> Form <0>
        in package IGESGeom
        A line is a bounded, connected portion of a parent straight
        line which consists of more than one point. A line is
        defined by its end points.

        From IGES-5.3, two other Forms are admitted (same params) :
        0 remains for standard limited line (the default)
        1 for semi-infinite line (End is just a passing point)
        2 for full infinite Line (both Start and End are abitrary)
        """
        this = _IGESGeom.new_IGESGeom_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Line self, gp_XYZ aStart, gp_XYZ anEnd)

        This method is used to set the fields of the class Line
        - aStart : Start point of the line
        - anEnd  : End point of the line

        :type aStart: OCC.wrapper.gp.gp_XYZ
        :type anEnd: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.IGESGeom_Line_Init(self, *args)


    def Infinite(self, *args):
        """
        Infinite(IGESGeom_Line self) -> Standard_Integer

        Returns the Infinite status i.e. the Form Number : 0 1 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Line_Infinite(self, *args)


    def SetInfinite(self, *args):
        """
        SetInfinite(IGESGeom_Line self, Standard_Integer const status)

        Sets the Infinite status
        Does nothing if <status> is not 0 1 or 2

        :type status: int

        """
        return _IGESGeom.IGESGeom_Line_SetInfinite(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(IGESGeom_Line self) -> gp_Pnt

        returns the start point of the line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Line_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(IGESGeom_Line self) -> gp_Pnt

        returns the start point of the line after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Line_TransformedStartPoint(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(IGESGeom_Line self) -> gp_Pnt

        returns the end point of the line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Line_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(IGESGeom_Line self) -> gp_Pnt

        returns the end point of the line after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Line_TransformedEndPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Line_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Line_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Line_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Line
IGESGeom_Line_swigregister = _IGESGeom.IGESGeom_Line_swigregister
IGESGeom_Line_swigregister(IGESGeom_Line)

def IGESGeom_Line_get_type_name(*args):
    """
    IGESGeom_Line_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Line_get_type_name(*args)

def IGESGeom_Line_get_type_descriptor(*args):
    """
    IGESGeom_Line_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Line_get_type_descriptor(*args)

class IGESGeom_Boundary(IGESData.IGESData_IGESEntity):
    """
    defines IGESBoundary, Type <141> Form <0>
    in package IGESGeom
    A boundary entity identifies a surface boundary consisting
    of a set of curves lying on the surface
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Boundary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Boundary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Boundary self) -> IGESGeom_Boundary

        defines IGESBoundary, Type <141> Form <0>
        in package IGESGeom
        A boundary entity identifies a surface boundary consisting
        of a set of curves lying on the surface
        """
        this = _IGESGeom.new_IGESGeom_Boundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Boundary self, Standard_Integer const aType, Standard_Integer const aPreference, Handle_IGESData_IGESEntity aSurface, Handle_IGESData_HArray1OfIGESEntity allModelCurves, Handle_TColStd_HArray1OfInteger allSenses, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity allParameterCurves)

        This method is used to set the fields of the class
        Boundary
        - aType              : Type of bounded surface representation
        - aPreference        : Preferred representation of
        Trimming Curve
        - aSurface           : Untrimmed surface to be bounded
        - allModelCurves     : Model Space Curves
        - allSenses          : Orientation flags of all Model Space
        Curves
        - allParameterCurves : Parameter Space Curves
        raises exception if allSenses, allModelCurves and
        allParameterCurves do not have same dimensions

        :type aType: int
        :type aPreference: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allModelCurves: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allSenses: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allParameterCurves: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

        """
        return _IGESGeom.IGESGeom_Boundary_Init(self, *args)


    def BoundaryType(self, *args):
        """
        BoundaryType(IGESGeom_Boundary self) -> Standard_Integer

        returns type of bounded surface representation
        0 = Boundary entities may only reference model space trimming
        curves. Associated surface representation may be parametric
        1 = Boundary entities must reference model space curves and
        associated parameter space curve collections. Associated
        surface must be a parametric representation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Boundary_BoundaryType(self, *args)


    def PreferenceType(self, *args):
        """
        PreferenceType(IGESGeom_Boundary self) -> Standard_Integer

        returns preferred representation of trimming curves
        0 = Unspecified
        1 = Model space
        2 = Parameter space
        3 = Representations are of equal preference

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Boundary_PreferenceType(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESGeom_Boundary self) -> Handle_IGESData_IGESEntity

        returns the surface to be bounded

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Boundary_Surface(self, *args)


    def NbModelSpaceCurves(self, *args):
        """
        NbModelSpaceCurves(IGESGeom_Boundary self) -> Standard_Integer

        returns the number of model space curves

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Boundary_NbModelSpaceCurves(self, *args)


    def ModelSpaceCurve(self, *args):
        """
        ModelSpaceCurve(IGESGeom_Boundary self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Model Space Curve
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Boundary_ModelSpaceCurve(self, *args)


    def Sense(self, *args):
        """
        Sense(IGESGeom_Boundary self, Standard_Integer const Index) -> Standard_Integer

        returns the sense of a particular model space curve
        1 = model curve direction does not need reversal
        2 = model curve direction needs to be reversed
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Boundary_Sense(self, *args)


    def NbParameterCurves(self, *args):
        """
        NbParameterCurves(IGESGeom_Boundary self, Standard_Integer const Index) -> Standard_Integer

        returns the number of parameter curves associated with one
        model space curve referred to by Index
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Boundary_NbParameterCurves(self, *args)


    def ParameterCurves(self, *args):
        """
        ParameterCurves(IGESGeom_Boundary self, Standard_Integer const Index) -> Handle_IGESData_HArray1OfIGESEntity

        returns an array of parameter space curves associated with
        a model space curve referred to by the Index
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESGeom.IGESGeom_Boundary_ParameterCurves(self, *args)


    def ParameterCurve(self, *args):
        """
        ParameterCurve(IGESGeom_Boundary self, Standard_Integer const Index, Standard_Integer const Num) -> Handle_IGESData_IGESEntity

        returns an individual parameter curve
        raises exception if Index or Num is out of range

        :type Index: int
        :type Num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Boundary_ParameterCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Boundary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Boundary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Boundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Boundary
IGESGeom_Boundary_swigregister = _IGESGeom.IGESGeom_Boundary_swigregister
IGESGeom_Boundary_swigregister(IGESGeom_Boundary)

def IGESGeom_Boundary_get_type_name(*args):
    """
    IGESGeom_Boundary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Boundary_get_type_name(*args)

def IGESGeom_Boundary_get_type_descriptor(*args):
    """
    IGESGeom_Boundary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Boundary_get_type_descriptor(*args)

class IGESGeom_CurveOnSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESCurveOnSurface, Type <142> Form <0>
    in package IGESGeom
    A curve on a parametric surface entity associates a given
    curve with a surface and identifies the curve as lying on
    the surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_CurveOnSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_CurveOnSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_CurveOnSurface self) -> IGESGeom_CurveOnSurface

        defines IGESCurveOnSurface, Type <142> Form <0>
        in package IGESGeom
        A curve on a parametric surface entity associates a given
        curve with a surface and identifies the curve as lying on
        the surface.
        """
        this = _IGESGeom.new_IGESGeom_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_CurveOnSurface self, Standard_Integer const aMode, Handle_IGESData_IGESEntity aSurface, Handle_IGESData_IGESEntity aCurveUV, Handle_IGESData_IGESEntity aCurve3D, Standard_Integer const aPreference)

        This method is used to set the fields of the class
        CurveOnSurface
        - aMode       : Way the curve on the surface has been created
        - aSurface    : Surface on which the curve lies
        - aCurveUV    : Curve S (UV)
        - aCurve3D    : Curve C (3D)
        - aPreference : 0 = Unspecified
        1 = S o B is preferred
        2 = C is preferred
        3 = C and S o B are equally preferred

        :type aMode: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aCurveUV: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aCurve3D: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aPreference: int

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_Init(self, *args)


    def CreationMode(self, *args):
        """
        CreationMode(IGESGeom_CurveOnSurface self) -> Standard_Integer

        returns the mode in which the curve is created on the surface
        0 = Unspecified
        1 = Projection of a given curve on the surface
        2 = Intersection of two surfaces
        3 = Isoparametric curve, i.e:- either a `u` parametric
        or a `v` parametric curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_CreationMode(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns the surface on which the curve lies

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_Surface(self, *args)


    def CurveUV(self, *args):
        """
        CurveUV(IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns curve S

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_CurveUV(self, *args)


    def Curve3D(self, *args):
        """
        Curve3D(IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns curve C

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_Curve3D(self, *args)


    def PreferenceMode(self, *args):
        """
        PreferenceMode(IGESGeom_CurveOnSurface self) -> Standard_Integer

        returns preference mode
        0 = Unspecified
        1 = S o B is preferred
        2 = C is preferred
        3 = C and S o B are equally preferred

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_PreferenceMode(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_CurveOnSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_CurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_CurveOnSurface
IGESGeom_CurveOnSurface_swigregister = _IGESGeom.IGESGeom_CurveOnSurface_swigregister
IGESGeom_CurveOnSurface_swigregister(IGESGeom_CurveOnSurface)

def IGESGeom_CurveOnSurface_get_type_name(*args):
    """
    IGESGeom_CurveOnSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_CurveOnSurface_get_type_name(*args)

def IGESGeom_CurveOnSurface_get_type_descriptor(*args):
    """
    IGESGeom_CurveOnSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_CurveOnSurface_get_type_descriptor(*args)

class IGESGeom_OffsetSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESOffsetSurface, Type <140> Form <0>
    in package IGESGeom
    An offset surface is a surface defined in terms of an
    already existing surface.If S(u, v) is a parametrised
    regular surface and N(u, v) is a differential field of
    unit normal vectors defined on the whole surface, and
    "d" a fixed non zero real number, then offset surface
    to S is a parametrised surface S(u, v) given by
    O(u, v) = S(u, v) + d * N(u, v);
    u1 <= u <= u2; v1 <= v <= v2;
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_OffsetSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_OffsetSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_OffsetSurface self) -> IGESGeom_OffsetSurface

        defines IGESOffsetSurface, Type <140> Form <0>
        in package IGESGeom
        An offset surface is a surface defined in terms of an
        already existing surface.If S(u, v) is a parametrised
        regular surface and N(u, v) is a differential field of
        unit normal vectors defined on the whole surface, and
        "d" a fixed non zero real number, then offset surface
        to S is a parametrised surface S(u, v) given by
        O(u, v) = S(u, v) + d * N(u, v);
        u1 <= u <= u2; v1 <= v <= v2;
        """
        this = _IGESGeom.new_IGESGeom_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_OffsetSurface self, gp_XYZ anIndicatoR, Standard_Real const aDistance, Handle_IGESData_IGESEntity aSurface)

        This method is used to set the fields of the class
        OffsetSurface
        - anIndicator : Offset indicator
        - aDistance   : Offset distance
        - aSurface    : Surface that is offset

        :type anIndicatoR: OCC.wrapper.gp.gp_XYZ
        :type aDistance: float
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_OffsetSurface_Init(self, *args)


    def OffsetIndicator(self, *args):
        """
        OffsetIndicator(IGESGeom_OffsetSurface self) -> gp_Vec

        returns the offset indicator

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_OffsetSurface_OffsetIndicator(self, *args)


    def TransformedOffsetIndicator(self, *args):
        """
        TransformedOffsetIndicator(IGESGeom_OffsetSurface self) -> gp_Vec

        returns the offset indicator after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_OffsetSurface_TransformedOffsetIndicator(self, *args)


    def Distance(self, *args):
        """
        Distance(IGESGeom_OffsetSurface self) -> Standard_Real

        returns the distance by which surface is offset

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetSurface_Distance(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESGeom_OffsetSurface self) -> Handle_IGESData_IGESEntity

        returns the surface that has been offset

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_OffsetSurface_Surface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_OffsetSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_OffsetSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_OffsetSurface
IGESGeom_OffsetSurface_swigregister = _IGESGeom.IGESGeom_OffsetSurface_swigregister
IGESGeom_OffsetSurface_swigregister(IGESGeom_OffsetSurface)

def IGESGeom_OffsetSurface_get_type_name(*args):
    """
    IGESGeom_OffsetSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_OffsetSurface_get_type_name(*args)

def IGESGeom_OffsetSurface_get_type_descriptor(*args):
    """
    IGESGeom_OffsetSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_OffsetSurface_get_type_descriptor(*args)

class IGESGeom_HArray1OfTransformationMatrix(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_HArray1OfTransformationMatrix
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_HArray1OfTransformationMatrix(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_HArray1OfTransformationMatrix self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGeom_HArray1OfTransformationMatrix
        __init__(IGESGeom_HArray1OfTransformationMatrix self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGeom_TransformationMatrix theValue) -> IGESGeom_HArray1OfTransformationMatrix
        __init__(IGESGeom_HArray1OfTransformationMatrix self, NCollection_Array1_Handle_IGESGeom_TransformationMatrix theOther) -> IGESGeom_HArray1OfTransformationMatrix

        :type theOther: OCC.wrapper.IGESGeom.IGESGeom_Array1OfTransformationMatrix

        """
        this = _IGESGeom.new_IGESGeom_HArray1OfTransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfTransformationMatrix

        """
        res = _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGeom_HArray1OfTransformationMatrix self) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfTransformationMatrix

        """
        return _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_HArray1OfTransformationMatrix
IGESGeom_HArray1OfTransformationMatrix_swigregister = _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_swigregister
IGESGeom_HArray1OfTransformationMatrix_swigregister(IGESGeom_HArray1OfTransformationMatrix)

def IGESGeom_HArray1OfTransformationMatrix_get_type_name(*args):
    """
    IGESGeom_HArray1OfTransformationMatrix_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_get_type_name(*args)

def IGESGeom_HArray1OfTransformationMatrix_get_type_descriptor(*args):
    """
    IGESGeom_HArray1OfTransformationMatrix_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_HArray1OfTransformationMatrix_get_type_descriptor(*args)

class IGESGeom_OffsetCurve(IGESData.IGESData_IGESEntity):
    """
    defines IGESOffsetCurve, Type <130> Form <0>
    in package IGESGeom
    An OffsetCurve entity contains the data necessary to
    determine the offset of a given curve C. This entity
    points to the base curve to be offset and contains
    offset distance and other pertinent information.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_OffsetCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_OffsetCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_OffsetCurve self) -> IGESGeom_OffsetCurve

        defines IGESOffsetCurve, Type <130> Form <0>
        in package IGESGeom
        An OffsetCurve entity contains the data necessary to
        determine the offset of a given curve C. This entity
        points to the base curve to be offset and contains
        offset distance and other pertinent information.
        """
        this = _IGESGeom.new_IGESGeom_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity aBaseCurve, Standard_Integer const anOffsetType, Handle_IGESData_IGESEntity aFunction, Standard_Integer const aFunctionCoord, Standard_Integer const aTaperedOffsetType, Standard_Real const offDistance1, Standard_Real const arcLength1, Standard_Real const offDistance2, Standard_Real const arcLength2, gp_XYZ aNormalVec, Standard_Real const anOffsetParam, Standard_Real const anotherOffsetParam)

        This method is used to set the fields of the class
        OffsetCurve
        - aBaseCurve         : The curve entity to be offset
        - anOffsetType       : Offset distance flag
        1 = Single value, uniform distance
        2 = Varying linearly
        3 = As a specified function
        - aFunction          : Curve entity, one coordinate of which
        describes offset as a function of its
        parameter (0 unless OffsetType = 3)
        - aFunctionCoord     : Particular coordinate of curve
        describing offset as function of its
        parameters. (used if OffsetType = 3)
        - aTaperedOffsetType : Tapered offset type flag
        1 = Function of arc length
        2 = Function of parameter
        (Only used if OffsetType = 2 or 3)
        - offDistance1       : First offset distance
        (Only used if OffsetType = 1 or 2)
        - arcLength1         : Arc length or parameter value of
        first offset distance
        (Only used if OffsetType = 2)
        - offDistance2       : Second offset distance
        - arcLength2         : Arc length or parameter value of
        second offset distance
        (Only used if OffsetType = 2)
        - aNormalVec         : Unit vector normal to plane containing
        curve to be offset
        - anOffsetParam      : Start parameter value of offset curve
        - anotherOffsetParam : End parameter value of offset curve

        :type aBaseCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anOffsetType: int
        :type aFunction: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFunctionCoord: int
        :type aTaperedOffsetType: int
        :type offDistance1: float
        :type arcLength1: float
        :type offDistance2: float
        :type arcLength2: float
        :type aNormalVec: OCC.wrapper.gp.gp_XYZ
        :type anOffsetParam: float
        :type anotherOffsetParam: float

        """
        return _IGESGeom.IGESGeom_OffsetCurve_Init(self, *args)


    def BaseCurve(self, *args):
        """
        BaseCurve(IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        returns the curve to be offset

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_OffsetCurve_BaseCurve(self, *args)


    def OffsetType(self, *args):
        """
        OffsetType(IGESGeom_OffsetCurve self) -> Standard_Integer

        returns the offset distance flag
        1 = Single value offset (uniform distance)
        2 = Offset distance varying linearly
        3 = Offset distance specified as a function

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_OffsetCurve_OffsetType(self, *args)


    def Function(self, *args):
        """
        Function(IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        returns the function defining the offset if at all the offset
        is described as a function or Null Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_OffsetCurve_Function(self, *args)


    def HasFunction(self, *args):
        """
        HasFunction(IGESGeom_OffsetCurve self) -> Standard_Boolean

        returns True if function defining the offset is present.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_OffsetCurve_HasFunction(self, *args)


    def FunctionParameter(self, *args):
        """
        FunctionParameter(IGESGeom_OffsetCurve self) -> Standard_Integer

        returns particular coordinate of the curve which describes offset
        as a function of its parameters. (only used if OffsetType() = 3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_OffsetCurve_FunctionParameter(self, *args)


    def TaperedOffsetType(self, *args):
        """
        TaperedOffsetType(IGESGeom_OffsetCurve self) -> Standard_Integer

        returns tapered offset type flag (only used if OffsetType() = 2 or 3)
        1 = Function of arc length
        2 = Function of parameter

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_OffsetCurve_TaperedOffsetType(self, *args)


    def FirstOffsetDistance(self, *args):
        """
        FirstOffsetDistance(IGESGeom_OffsetCurve self) -> Standard_Real

        returns first offset distance (only used if OffsetType() = 1 or 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_FirstOffsetDistance(self, *args)


    def ArcLength1(self, *args):
        """
        ArcLength1(IGESGeom_OffsetCurve self) -> Standard_Real

        returns arc length or parameter value (depending on value of
        offset distance flag) of first offset distance
        (only used if OffsetType() = 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_ArcLength1(self, *args)


    def SecondOffsetDistance(self, *args):
        """
        SecondOffsetDistance(IGESGeom_OffsetCurve self) -> Standard_Real

        returns the second offset distance

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_SecondOffsetDistance(self, *args)


    def ArcLength2(self, *args):
        """
        ArcLength2(IGESGeom_OffsetCurve self) -> Standard_Real

        returns arc length or parameter value (depending on value of
        offset distance flag) of second offset distance
        (only used if OffsetType() = 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_ArcLength2(self, *args)


    def NormalVector(self, *args):
        """
        NormalVector(IGESGeom_OffsetCurve self) -> gp_Vec

        returns unit vector normal to plane containing curve to be offset

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_OffsetCurve_NormalVector(self, *args)


    def TransformedNormalVector(self, *args):
        """
        TransformedNormalVector(IGESGeom_OffsetCurve self) -> gp_Vec

        returns unit vector normal to plane containing curve to be offset
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_OffsetCurve_TransformedNormalVector(self, *args)


    def Parameters(self, *args):
        """
        Parameters(IGESGeom_OffsetCurve self)

        :type StartParam: float
        :type EndParam: float

        """
        return _IGESGeom.IGESGeom_OffsetCurve_Parameters(self, *args)


    def StartParameter(self, *args):
        """
        StartParameter(IGESGeom_OffsetCurve self) -> Standard_Real

        returns Start Parameter value of the offset curve

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_StartParameter(self, *args)


    def EndParameter(self, *args):
        """
        EndParameter(IGESGeom_OffsetCurve self) -> Standard_Real

        returns End   Parameter value of the offset curve

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_OffsetCurve_EndParameter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_OffsetCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_OffsetCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_OffsetCurve
IGESGeom_OffsetCurve_swigregister = _IGESGeom.IGESGeom_OffsetCurve_swigregister
IGESGeom_OffsetCurve_swigregister(IGESGeom_OffsetCurve)

def IGESGeom_OffsetCurve_get_type_name(*args):
    """
    IGESGeom_OffsetCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_OffsetCurve_get_type_name(*args)

def IGESGeom_OffsetCurve_get_type_descriptor(*args):
    """
    IGESGeom_OffsetCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_OffsetCurve_get_type_descriptor(*args)

class IGESGeom_BoundedSurface(IGESData.IGESData_IGESEntity):
    """
    defines BoundedSurface, Type <143> Form <0>
    in package IGESGeom
    A bounded surface is used to communicate trimmed
    surfaces. The surface and trimming curves are assumed
    to be represented parametrically.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_BoundedSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_BoundedSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_BoundedSurface self) -> IGESGeom_BoundedSurface

        defines BoundedSurface, Type <143> Form <0>
        in package IGESGeom
        A bounded surface is used to communicate trimmed
        surfaces. The surface and trimming curves are assumed
        to be represented parametrically.
        """
        this = _IGESGeom.new_IGESGeom_BoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_BoundedSurface self, Standard_Integer const aType, Handle_IGESData_IGESEntity aSurface, Handle_IGESGeom_HArray1OfBoundary allBounds)

        This method is used to set the fields of the class
        BoundedSurface
        - aType     : Type of bounded surface representation
        - aSurface  : Surface entity to be bounded
        - allBounds : Array of boundary entities

        :type aType: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allBounds: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfBoundary

        """
        return _IGESGeom.IGESGeom_BoundedSurface_Init(self, *args)


    def RepresentationType(self, *args):
        """
        RepresentationType(IGESGeom_BoundedSurface self) -> Standard_Integer

        returns the type of Bounded surface representation
        0 = The boundary entities may only reference model space curves
        1 = The boundary entities may reference both model space curves
        and associated parameter space curve representations

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BoundedSurface_RepresentationType(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESGeom_BoundedSurface self) -> Handle_IGESData_IGESEntity

        returns the bounded surface

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_BoundedSurface_Surface(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(IGESGeom_BoundedSurface self) -> Standard_Integer

        returns the number of boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BoundedSurface_NbBoundaries(self, *args)


    def Boundary(self, *args):
        """
        Boundary(IGESGeom_BoundedSurface self, Standard_Integer const Index) -> Handle_IGESGeom_Boundary

        returns boundary entity
        raises exception if Index <= 0 or Index > NbBoundaries()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary

        """
        return _IGESGeom.IGESGeom_BoundedSurface_Boundary(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_BoundedSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_BoundedSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_BoundedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_BoundedSurface
IGESGeom_BoundedSurface_swigregister = _IGESGeom.IGESGeom_BoundedSurface_swigregister
IGESGeom_BoundedSurface_swigregister(IGESGeom_BoundedSurface)

def IGESGeom_BoundedSurface_get_type_name(*args):
    """
    IGESGeom_BoundedSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_BoundedSurface_get_type_name(*args)

def IGESGeom_BoundedSurface_get_type_descriptor(*args):
    """
    IGESGeom_BoundedSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_BoundedSurface_get_type_descriptor(*args)

class IGESGeom_ConicArc(IGESData.IGESData_IGESEntity):
    """
    defines IGESConicArc, Type <104> Form <0-3>  in package IGESGeom
    A conic arc is a bounded connected portion of a parent
    conic curve which consists of more than one point. The
    parent conic curve is either an ellipse, a parabola, or
    a hyperbola. The definition space coordinate system is
    always chosen so that the conic arc lies in a plane either
    coincident with or parallel to XT, YT plane. Within such
    a plane a conic is defined by the six coefficients in the
    following equation.
    A*XT^2 + B*XT*YT + C*YT^2 + D*XT + E*YT + F = 0
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_ConicArc
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_ConicArc(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_ConicArc self) -> IGESGeom_ConicArc

        defines IGESConicArc, Type <104> Form <0-3>  in package IGESGeom
        A conic arc is a bounded connected portion of a parent
        conic curve which consists of more than one point. The
        parent conic curve is either an ellipse, a parabola, or
        a hyperbola. The definition space coordinate system is
        always chosen so that the conic arc lies in a plane either
        coincident with or parallel to XT, YT plane. Within such
        a plane a conic is defined by the six coefficients in the
        following equation.
        A*XT^2 + B*XT*YT + C*YT^2 + D*XT + E*YT + F = 0
        """
        this = _IGESGeom.new_IGESGeom_ConicArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_ConicArc self, Standard_Real const A, Standard_Real const B, Standard_Real const C, Standard_Real const D, Standard_Real const E, Standard_Real const F, Standard_Real const ZT, gp_XY aStart, gp_XY anEnd)

        This method is used to set the fields of the class
        ConicalArc
        - A, B, C, D, E, F : Coefficients of the equation
        defining conic arc
        - ZT               : Parallel ZT displacement of the arc
        from XT, YT plane.
        - aStart           : Starting point of the conic arc
        - anEnd            : End point of the conic arc

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type E: float
        :type F: float
        :type ZT: float
        :type aStart: OCC.wrapper.gp.gp_XY
        :type anEnd: OCC.wrapper.gp.gp_XY

        """
        return _IGESGeom.IGESGeom_ConicArc_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ConicArc self) -> Standard_Boolean

        sets the Form Number equal to ComputedFormNumber,
        returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ConicArc_OwnCorrect(self, *args)


    def ComputedFormNumber(self, *args):
        """
        ComputedFormNumber(IGESGeom_ConicArc self) -> Standard_Integer

        Computes the Form Number according to the equation
        1 for Ellipse, 2 for Hyperbola, 3 for Parabola

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_ConicArc_ComputedFormNumber(self, *args)


    def Equation(self, *args):
        """
        Equation(IGESGeom_ConicArc self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type E: float
        :type F: float

        """
        return _IGESGeom.IGESGeom_ConicArc_Equation(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(IGESGeom_ConicArc self) -> Standard_Real

        returns the Z displacement of the arc from XT, YT plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_ConicArc_ZPlane(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(IGESGeom_ConicArc self) -> gp_Pnt2d

        returns the starting point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_ConicArc_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(IGESGeom_ConicArc self) -> gp_Pnt

        returns the starting point of the arc after applying
        Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_ConicArc_TransformedStartPoint(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(IGESGeom_ConicArc self) -> gp_Pnt2d

        returns the end point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_ConicArc_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(IGESGeom_ConicArc self) -> gp_Pnt

        returns the end point of the arc after applying
        Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_ConicArc_TransformedEndPoint(self, *args)


    def IsFromEllipse(self, *args):
        """
        IsFromEllipse(IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is an ellipse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ConicArc_IsFromEllipse(self, *args)


    def IsFromParabola(self, *args):
        """
        IsFromParabola(IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is a parabola

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ConicArc_IsFromParabola(self, *args)


    def IsFromHyperbola(self, *args):
        """
        IsFromHyperbola(IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is a hyperbola

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ConicArc_IsFromHyperbola(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if StartPoint = EndPoint

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ConicArc_IsClosed(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESGeom_ConicArc self) -> gp_Dir

        Z-Axis of conic (i.e. [0,0,1])

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.IGESGeom_ConicArc_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESGeom_ConicArc self) -> gp_Dir

        Z-Axis after applying Trans. Matrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.IGESGeom_ConicArc_TransformedAxis(self, *args)


    def Definition(self, *args):
        """
        Definition(IGESGeom_ConicArc self, gp_Pnt Center, gp_Dir MainAxis)

        Returns a Definition computed from equation, easier to use
        <Center> : the center of the the conic (meaningless for
        a parabola) (defined with Z displacement)
        <MainAxis> : the Main Axis of the conic (for a Circle,
        arbitrary the X Axis)
        <Rmin,Rmax> : Minor and Major Radii of the conic
        For a Circle, Rmin = Rmax,
        For a Parabola, Rmin = Rmax = the Focal
        Warning : the basic definition (by equation) is not very stable,
        limit cases may be approximative

        :type Center: OCC.wrapper.gp.gp_Pnt
        :type MainAxis: OCC.wrapper.gp.gp_Dir
        :type rmin: float
        :type rmax: float

        """
        return _IGESGeom.IGESGeom_ConicArc_Definition(self, *args)


    def TransformedDefinition(self, *args):
        """
        TransformedDefinition(IGESGeom_ConicArc self, gp_Pnt Center, gp_Dir MainAxis)

        Same as Definition, but the Location is applied on the
        Center and the MainAxis

        :type Center: OCC.wrapper.gp.gp_Pnt
        :type MainAxis: OCC.wrapper.gp.gp_Dir
        :type rmin: float
        :type rmax: float

        """
        return _IGESGeom.IGESGeom_ConicArc_TransformedDefinition(self, *args)


    def ComputedDefinition(self, *args):
        """
        ComputedDefinition(IGESGeom_ConicArc self)

        Computes and returns the coordinates of the definition of
        a comic from its equation. Used by Definition &
        TransformedDefinition, or may be called directly if needed

        :type Xcen: float
        :type Ycen: float
        :type Xax: float
        :type Yax: float
        :type Rmin: float
        :type Rmax: float

        """
        return _IGESGeom.IGESGeom_ConicArc_ComputedDefinition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_ConicArc_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_ConicArc_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_ConicArc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ConicArc
IGESGeom_ConicArc_swigregister = _IGESGeom.IGESGeom_ConicArc_swigregister
IGESGeom_ConicArc_swigregister(IGESGeom_ConicArc)

def IGESGeom_ConicArc_get_type_name(*args):
    """
    IGESGeom_ConicArc_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_ConicArc_get_type_name(*args)

def IGESGeom_ConicArc_get_type_descriptor(*args):
    """
    IGESGeom_ConicArc_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_ConicArc_get_type_descriptor(*args)

class IGESGeom_Direction(IGESData.IGESData_IGESEntity):
    """
    defines IGESDirection, Type <123> Form <0>
    in package IGESGeom
    A direction entity is a non-zero vector in Euclidean 3-space
    that is defined by its three components (direction ratios)
    with respect to the coordinate axes. If x, y, z are the
    direction ratios then (x^2 + y^2 + z^2) > 0
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Direction
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Direction(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Direction self) -> IGESGeom_Direction

        defines IGESDirection, Type <123> Form <0>
        in package IGESGeom
        A direction entity is a non-zero vector in Euclidean 3-space
        that is defined by its three components (direction ratios)
        with respect to the coordinate axes. If x, y, z are the
        direction ratios then (x^2 + y^2 + z^2) > 0
        """
        this = _IGESGeom.new_IGESGeom_Direction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Direction self, gp_XYZ aDirection)

        This method is used to set the fields of the class
        Direction
        - aDirection : Direction ratios, Z is 0 by default

        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.IGESGeom_Direction_Init(self, *args)


    def Value(self, *args):
        """
        Value(IGESGeom_Direction self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_Direction_Value(self, *args)


    def TransformedValue(self, *args):
        """
        TransformedValue(IGESGeom_Direction self) -> gp_Vec

        returns the Direction value after applying Transformation matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_Direction_TransformedValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Direction_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Direction_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Direction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Direction
IGESGeom_Direction_swigregister = _IGESGeom.IGESGeom_Direction_swigregister
IGESGeom_Direction_swigregister(IGESGeom_Direction)

def IGESGeom_Direction_get_type_name(*args):
    """
    IGESGeom_Direction_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Direction_get_type_name(*args)

def IGESGeom_Direction_get_type_descriptor(*args):
    """
    IGESGeom_Direction_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Direction_get_type_descriptor(*args)

class IGESGeom_TabulatedCylinder(IGESData.IGESData_IGESEntity):
    """
    defines IGESTabulatedCylinder, Type <122> Form <0>
    in package IGESGeom
    A tabulated cylinder is a surface formed by moving a line
    segment called generatrix parallel to itself along a curve
    called directrix. The curve may be a line, circular arc,
    conic arc, parametric spline curve, rational B-spline
    curve or composite curve.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_TabulatedCylinder
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_TabulatedCylinder(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_TabulatedCylinder self) -> IGESGeom_TabulatedCylinder

        defines IGESTabulatedCylinder, Type <122> Form <0>
        in package IGESGeom
        A tabulated cylinder is a surface formed by moving a line
        segment called generatrix parallel to itself along a curve
        called directrix. The curve may be a line, circular arc,
        conic arc, parametric spline curve, rational B-spline
        curve or composite curve.
        """
        this = _IGESGeom.new_IGESGeom_TabulatedCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity aDirectrix, gp_XYZ anEnd)

        This method is used to set the fields of the class
        TabulatedCylinder
        - aDirectrix : Directrix Curve of the tabulated cylinder
        - anEnd      : Coordinates of the terminate point of the
        generatrix
        The start point of the directrix is identical to the start
        point of the generatrix

        :type aDirectrix: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anEnd: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_Init(self, *args)


    def Directrix(self, *args):
        """
        Directrix(IGESGeom_TabulatedCylinder self) -> Handle_IGESData_IGESEntity

        returns the directrix curve of the tabulated cylinder

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_Directrix(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(IGESGeom_TabulatedCylinder self) -> gp_Pnt

        returns end point of generatrix of the tabulated cylinder

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(IGESGeom_TabulatedCylinder self) -> gp_Pnt

        returns end point of generatrix of the tabulated cylinder
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_TransformedEndPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_TabulatedCylinder_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_TabulatedCylinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_TabulatedCylinder
IGESGeom_TabulatedCylinder_swigregister = _IGESGeom.IGESGeom_TabulatedCylinder_swigregister
IGESGeom_TabulatedCylinder_swigregister(IGESGeom_TabulatedCylinder)

def IGESGeom_TabulatedCylinder_get_type_name(*args):
    """
    IGESGeom_TabulatedCylinder_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_TabulatedCylinder_get_type_name(*args)

def IGESGeom_TabulatedCylinder_get_type_descriptor(*args):
    """
    IGESGeom_TabulatedCylinder_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_TabulatedCylinder_get_type_descriptor(*args)

class IGESGeom_BSplineCurve(IGESData.IGESData_IGESEntity):
    """
    defines IGESBSplineCurve, Type <126> Form <0-5>
    in package IGESGeom
    A parametric equation obtained by dividing two summations
    involving weights (which are real numbers), the control
    points, and B-Spline basis functions
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_BSplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_BSplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_BSplineCurve self) -> IGESGeom_BSplineCurve

        defines IGESBSplineCurve, Type <126> Form <0-5>
        in package IGESGeom
        A parametric equation obtained by dividing two summations
        involving weights (which are real numbers), the control
        points, and B-Spline basis functions
        """
        this = _IGESGeom.new_IGESGeom_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_BSplineCurve self, Standard_Integer const anIndex, Standard_Integer const aDegree, Standard_Boolean const aPlanar, Standard_Boolean const aClosed, Standard_Boolean const aPolynom, Standard_Boolean const aPeriodic, Handle_TColStd_HArray1OfReal allKnots, Handle_TColStd_HArray1OfReal allWeights, Handle_TColgp_HArray1OfXYZ allPoles, Standard_Real const aUmin, Standard_Real const aUmax, gp_XYZ aNorm)

        This method is used to set the fields of the class
        BSplineCurve. Beware about indexation of arrays
        - anIndex      : Upper index of the sum
        - aDegree      : Degree of basis functions
        - aPlanar      : 0 = nonplanar curve, 1 = planar curve
        - aClosed      : 0 = open curve, 1 = closed curve
        - aPolynom     : 0 = rational, 1 = polynomial
        - aPeriodic    : 0 = nonperiodic, 1 = periodic
        - allKnots     : Knot sequence values [-Degree,Index+1]
        - allWeights   : Array of weights     [0,Index]
        - allPoles     : X, Y, Z coordinates of all control points
        [0,Index]
        - aUmin, aUmax : Starting and ending parameter values
        - aNorm        : Unit normal (if the curve is planar)
        raises exception if allWeights & allPoles are not of same size.

        :type anIndex: int
        :type aDegree: int
        :type aPlanar: bool
        :type aClosed: bool
        :type aPolynom: bool
        :type aPeriodic: bool
        :type allKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allPoles: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type aUmin: float
        :type aUmax: float
        :type aNorm: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESGeom_BSplineCurve self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Curve)
        Error if not in range [0-5]

        :type form: int

        """
        return _IGESGeom.IGESGeom_BSplineCurve_SetFormNumber(self, *args)


    def UpperIndex(self, *args):
        """
        UpperIndex(IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the upper index of the sum (see Knots,Poles)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineCurve_UpperIndex(self, *args)


    def Degree(self, *args):
        """
        Degree(IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the degree of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Degree(self, *args)


    def IsPlanar(self, *args):
        """
        IsPlanar(IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is Planar, False if non-planar

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineCurve_IsPlanar(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is closed, False if open

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineCurve_IsClosed(self, *args)


    def IsPolynomial(self, *args):
        """
        IsPolynomial(IGESGeom_BSplineCurve self, Standard_Boolean const flag) -> Standard_Boolean

        returns True if the curve is polynomial, False if rational
        <flag> False (D) : computed from the list of weights
        (all must be equal)
        <flag> True : as recorded

        :type flag: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineCurve_IsPolynomial(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is periodic, False otherwise

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_BSplineCurve_IsPeriodic(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the number of knots (i.e. Degree + UpperIndex + 2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineCurve_NbKnots(self, *args)


    def Knot(self, *args):
        """
        Knot(IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> Standard_Real

        returns the knot referred to by anIndex,
        inside the range [-Degree,UpperIndex+1]
        raises exception if
        anIndex < -Degree() or anIndex > (NbKnots() - Degree())
        Note : Knots are numbered from -Degree (not from 1)

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Knot(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(IGESGeom_BSplineCurve self) -> Standard_Integer

        returns number of poles (i.e. UpperIndex + 1)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_BSplineCurve_NbPoles(self, *args)


    def Weight(self, *args):
        """
        Weight(IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> Standard_Real

        returns the weight referred to by anIndex, in [0,UpperIndex]
        raises exception if anIndex < 0 or anIndex > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Weight(self, *args)


    def Pole(self, *args):
        """
        Pole(IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> gp_Pnt

        returns the pole referred to by anIndex, in [0,UpperIndex]
        raises exception if anIndex < 0 or anIndex > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Pole(self, *args)


    def TransformedPole(self, *args):
        """
        TransformedPole(IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> gp_Pnt

        returns the anIndex'th pole after applying Transf. Matrix
        raises exception if an Index < 0 or an Index > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_BSplineCurve_TransformedPole(self, *args)


    def UMin(self, *args):
        """
        UMin(IGESGeom_BSplineCurve self) -> Standard_Real

        returns starting parameter value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineCurve_UMin(self, *args)


    def UMax(self, *args):
        """
        UMax(IGESGeom_BSplineCurve self) -> Standard_Real

        returns ending parameter value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_BSplineCurve_UMax(self, *args)


    def Normal(self, *args):
        """
        Normal(IGESGeom_BSplineCurve self) -> gp_XYZ

        if the curve is nonplanar then (0, 0, 0) is returned

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.IGESGeom_BSplineCurve_Normal(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_BSplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_BSplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_BSplineCurve
IGESGeom_BSplineCurve_swigregister = _IGESGeom.IGESGeom_BSplineCurve_swigregister
IGESGeom_BSplineCurve_swigregister(IGESGeom_BSplineCurve)

def IGESGeom_BSplineCurve_get_type_name(*args):
    """
    IGESGeom_BSplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_BSplineCurve_get_type_name(*args)

def IGESGeom_BSplineCurve_get_type_descriptor(*args):
    """
    IGESGeom_BSplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_BSplineCurve_get_type_descriptor(*args)

class IGESGeom_SplineCurve(IGESData.IGESData_IGESEntity):
    """
    Defines IGESSplineCurve, Type <112> Form <0>
    in package IGESGeom
    The parametric spline is a sequence of parametric
    polynomial segments. The curve could be of the type
    Linear, Quadratic, Cubic, Wilson-Fowler, Modified
    Wilson-Fowler, B-Spline. The N polynomial segments
    are delimited by the break points  T(1), T(2), T(3),
    ..., T(N+1).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_SplineCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_SplineCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_SplineCurve self) -> IGESGeom_SplineCurve

        Defines IGESSplineCurve, Type <112> Form <0>
        in package IGESGeom
        The parametric spline is a sequence of parametric
        polynomial segments. The curve could be of the type
        Linear, Quadratic, Cubic, Wilson-Fowler, Modified
        Wilson-Fowler, B-Spline. The N polynomial segments
        are delimited by the break points  T(1), T(2), T(3),
        ..., T(N+1).
        """
        this = _IGESGeom.new_IGESGeom_SplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_SplineCurve self, Standard_Integer const aType, Standard_Integer const aDegree, Standard_Integer const nbDimensions, Handle_TColStd_HArray1OfReal allBreakPoints, Handle_TColStd_HArray2OfReal allXPolynomials, Handle_TColStd_HArray2OfReal allYPolynomials, Handle_TColStd_HArray2OfReal allZPolynomials, Handle_TColStd_HArray1OfReal allXvalues, Handle_TColStd_HArray1OfReal allYvalues, Handle_TColStd_HArray1OfReal allZvalues)

        This method is used to set the fields of the class
        SplineCurve
        - aType           : Spline Type
        1 = Linear
        2 = Quadratic
        3 = Cubic
        4 = Wilson-Fowler
        5 = Modified Wilson-Fowler
        6 = B Spline
        - aDegree         : Degree of continuity w.r.t. arc length
        - nbDimensions    : Number of dimensions
        2 = Planar
        3 = Non-planar
        - allBreakPoints  : Array of break points
        - allXPolynomials : X coordinate polynomials of segments
        - allYPolynomials : Y coordinate polynomials of segments
        - allZPolynomials : Z coordinate polynomials of segments
        - allXValues      : Values of 1st, 2nd, 3rd derivatives of
        X polynomials at the terminate point
        and values of X at terminate point
        - allYValues      : Values of 1st, 2nd, 3rd derivatives of
        Y polynomials at the terminate point
        and values of Y at terminate point
        - allZvalues      : Values of 1st, 2nd, 3rd derivatives of
        Z polynomials at the terminate point
        and values of Z at terminate point
        raises exception if allXPolynomials, allYPolynomials
        & allZPolynomials are not of same size OR allXValues, allYValues
        & allZValues are not of size 4

        :type aType: int
        :type aDegree: int
        :type nbDimensions: int
        :type allBreakPoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allXPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allYPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allZPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allXvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allYvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allZvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineCurve_Init(self, *args)


    def SplineType(self, *args):
        """
        SplineType(IGESGeom_SplineCurve self) -> Standard_Integer

        returns the type of Spline curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineCurve_SplineType(self, *args)


    def Degree(self, *args):
        """
        Degree(IGESGeom_SplineCurve self) -> Standard_Integer

        returns the degree of the curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineCurve_Degree(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(IGESGeom_SplineCurve self) -> Standard_Integer

        returns the number of dimensions
        2 = Planar
        3 = Non-planar

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineCurve_NbDimensions(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(IGESGeom_SplineCurve self) -> Standard_Integer

        returns the number of segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineCurve_NbSegments(self, *args)


    def BreakPoint(self, *args):
        """
        BreakPoint(IGESGeom_SplineCurve self, Standard_Integer const Index) -> Standard_Real

        returns breakpoint of piecewise polynomial
        raises exception if Index <= 0 or Index > NbSegments() + 1

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_SplineCurve_BreakPoint(self, *args)


    def XCoordPolynomial(self, *args):
        """
        XCoordPolynomial(IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns X coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AX: float
        :type BX: float
        :type CX: float
        :type DX: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_XCoordPolynomial(self, *args)


    def YCoordPolynomial(self, *args):
        """
        YCoordPolynomial(IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns Y coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AY: float
        :type BY: float
        :type CY: float
        :type DY: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_YCoordPolynomial(self, *args)


    def ZCoordPolynomial(self, *args):
        """
        ZCoordPolynomial(IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns Z coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AZ: float
        :type BZ: float
        :type CZ: float
        :type DZ: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_ZCoordPolynomial(self, *args)


    def XValues(self, *args):
        """
        XValues(IGESGeom_SplineCurve self)

        returns the value of X polynomial, the values of 1st, 2nd and
        3rd derivatives of the X polynomial at the terminate point

        :type TPX0: float
        :type TPX1: float
        :type TPX2: float
        :type TPX3: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_XValues(self, *args)


    def YValues(self, *args):
        """
        YValues(IGESGeom_SplineCurve self)

        returns the value of Y polynomial, the values of 1st, 2nd and
        3rd derivatives of the Y polynomial at the termminate point

        :type TPY0: float
        :type TPY1: float
        :type TPY2: float
        :type TPY3: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_YValues(self, *args)


    def ZValues(self, *args):
        """
        ZValues(IGESGeom_SplineCurve self)

        returns the value of Z polynomial, the values of 1st, 2nd and
        3rd derivatives of the Z polynomial at the termminate point

        :type TPZ0: float
        :type TPZ1: float
        :type TPZ2: float
        :type TPZ3: float

        """
        return _IGESGeom.IGESGeom_SplineCurve_ZValues(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_SplineCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_SplineCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_SplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_SplineCurve
IGESGeom_SplineCurve_swigregister = _IGESGeom.IGESGeom_SplineCurve_swigregister
IGESGeom_SplineCurve_swigregister(IGESGeom_SplineCurve)

def IGESGeom_SplineCurve_get_type_name(*args):
    """
    IGESGeom_SplineCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_SplineCurve_get_type_name(*args)

def IGESGeom_SplineCurve_get_type_descriptor(*args):
    """
    IGESGeom_SplineCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_SplineCurve_get_type_descriptor(*args)

class IGESGeom_ToolCurveOnSurface(object):
    """
    Tool to work on a CurveOnSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolCurveOnSurface self) -> IGESGeom_ToolCurveOnSurface

        Returns a ToolCurveOnSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CurveOnSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a CurveOnSurface
        (its CurveUV must have UseFlag at 5)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface entfrom, Handle_IGESGeom_CurveOnSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolCurveOnSurface self, Handle_IGESGeom_CurveOnSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolCurveOnSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolCurveOnSurface
IGESGeom_ToolCurveOnSurface_swigregister = _IGESGeom.IGESGeom_ToolCurveOnSurface_swigregister
IGESGeom_ToolCurveOnSurface_swigregister(IGESGeom_ToolCurveOnSurface)

class Handle_IGESGeom_OffsetSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_OffsetSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_OffsetSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_OffsetSurface self, IGESGeom_OffsetSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_OffsetSurface self, Handle_IGESGeom_OffsetSurface theHandle) -> Handle_IGESGeom_OffsetSurface
        assign(Handle_IGESGeom_OffsetSurface self, IGESGeom_OffsetSurface thePtr) -> Handle_IGESGeom_OffsetSurface
        assign(Handle_IGESGeom_OffsetSurface self, Handle_IGESGeom_OffsetSurface theHandle) -> Handle_IGESGeom_OffsetSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_OffsetSurface self) -> IGESGeom_OffsetSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_OffsetSurface self) -> IGESGeom_OffsetSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_OffsetSurface self) -> IGESGeom_OffsetSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_OffsetSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_OffsetSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_OffsetSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_OffsetSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_OffsetSurface self, gp_XYZ anIndicatoR, Standard_Real const aDistance, Handle_IGESData_IGESEntity aSurface)

        This method is used to set the fields of the class
        OffsetSurface
        - anIndicator : Offset indicator
        - aDistance   : Offset distance
        - aSurface    : Surface that is offset

        :type anIndicatoR: OCC.wrapper.gp.gp_XYZ
        :type aDistance: float
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Init(self, *args)


    def OffsetIndicator(self, *args):
        """
        OffsetIndicator(Handle_IGESGeom_OffsetSurface self) -> gp_Vec

        returns the offset indicator

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_OffsetIndicator(self, *args)


    def TransformedOffsetIndicator(self, *args):
        """
        TransformedOffsetIndicator(Handle_IGESGeom_OffsetSurface self) -> gp_Vec

        returns the offset indicator after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_TransformedOffsetIndicator(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_IGESGeom_OffsetSurface self) -> Standard_Real

        returns the distance by which surface is offset

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Distance(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_IGESEntity

        returns the surface that has been offset

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Surface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_OffsetSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_OffsetSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_OffsetSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_OffsetSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_OffsetSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_OffsetSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_OffsetSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_OffsetSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_OffsetSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_OffsetSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_OffsetSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_OffsetSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_OffsetSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_OffsetSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_OffsetSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_OffsetSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_OffsetSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_OffsetSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_OffsetSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_OffsetSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_OffsetSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_OffsetSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_OffsetSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_OffsetSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_OffsetSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_OffsetSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_OffsetSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_OffsetSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_OffsetSurface_swigregister = _IGESGeom.Handle_IGESGeom_OffsetSurface_swigregister
Handle_IGESGeom_OffsetSurface_swigregister(Handle_IGESGeom_OffsetSurface)

def Handle_IGESGeom_OffsetSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_OffsetSurface_DownCast(thing)
Handle_IGESGeom_OffsetSurface_DownCast = _IGESGeom.Handle_IGESGeom_OffsetSurface_DownCast

class NCollection_Array1_Handle_IGESGeom_Boundary(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGeom_Boundary self) -> NCollection_Array1< opencascade::handle< IGESGeom_Boundary > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGeom_Boundary self) -> NCollection_Array1< opencascade::handle< IGESGeom_Boundary > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGeom_Boundary self) -> NCollection_Array1< opencascade::handle< IGESGeom_Boundary > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGeom_Boundary self) -> NCollection_Array1< opencascade::handle< IGESGeom_Boundary > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGeom.new_NCollection_Array1_Handle_IGESGeom_Boundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGeom_Boundary self, Handle_IGESGeom_Boundary theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGeom_Boundary self, NCollection_Array1_Handle_IGESGeom_Boundary theOther) -> NCollection_Array1_Handle_IGESGeom_Boundary

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGeom_Boundary self, NCollection_Array1_Handle_IGESGeom_Boundary theOther) -> NCollection_Array1_Handle_IGESGeom_Boundary

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGeom_Boundary self, NCollection_Array1_Handle_IGESGeom_Boundary theOther) -> NCollection_Array1_Handle_IGESGeom_Boundary
        assign(NCollection_Array1_Handle_IGESGeom_Boundary self, NCollection_Array1_Handle_IGESGeom_Boundary theOther) -> NCollection_Array1_Handle_IGESGeom_Boundary

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Handle_IGESGeom_Boundary

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGeom_Boundary self) -> Handle_IGESGeom_Boundary

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGeom_Boundary self, Standard_Integer const theIndex) -> Handle_IGESGeom_Boundary

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGeom_Boundary self, Standard_Integer const theIndex, Handle_IGESGeom_Boundary theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGeom_Boundary self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_Resize(self, *args)

    __swig_destroy__ = _IGESGeom.delete_NCollection_Array1_Handle_IGESGeom_Boundary
NCollection_Array1_Handle_IGESGeom_Boundary_swigregister = _IGESGeom.NCollection_Array1_Handle_IGESGeom_Boundary_swigregister
NCollection_Array1_Handle_IGESGeom_Boundary_swigregister(NCollection_Array1_Handle_IGESGeom_Boundary)


try:
	IGESGeom_Array1OfBoundary = NCollection_Array1_Handle_IGESGeom_Boundary
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESGeom_BSplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_BSplineSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_BSplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_BSplineSurface self, IGESGeom_BSplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_BSplineSurface self, Handle_IGESGeom_BSplineSurface theHandle) -> Handle_IGESGeom_BSplineSurface
        assign(Handle_IGESGeom_BSplineSurface self, IGESGeom_BSplineSurface thePtr) -> Handle_IGESGeom_BSplineSurface
        assign(Handle_IGESGeom_BSplineSurface self, Handle_IGESGeom_BSplineSurface theHandle) -> Handle_IGESGeom_BSplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_BSplineSurface self) -> IGESGeom_BSplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_BSplineSurface self) -> IGESGeom_BSplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_BSplineSurface self) -> IGESGeom_BSplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_BSplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_BSplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_BSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_BSplineSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_BSplineSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndexU, Standard_Integer const anIndexV, Standard_Integer const aDegU, Standard_Integer const aDegV, Standard_Boolean const aCloseU, Standard_Boolean const aCloseV, Standard_Boolean const aPolynom, Standard_Boolean const aPeriodU, Standard_Boolean const aPeriodV, Handle_TColStd_HArray1OfReal allKnotsU, Handle_TColStd_HArray1OfReal allKnotsV, Handle_TColStd_HArray2OfReal allWeights, Handle_TColgp_HArray2OfXYZ allPoles, Standard_Real const aUmin, Standard_Real const aUmax, Standard_Real const aVmin, Standard_Real const aVmax)

        This method is used to set the fields of the class
        BSplineSurface
        - anIndexU             : Upper index of first sum
        - anIndexV             : Upper index of second sum
        - aDegU, aDegV         : Degrees of first and second sets
        of basis functions
        - aCloseU, aCloseV     : 1 = Closed in U, V directions
        0 = open in U, V directions
        - aPolynom             : 0 = Rational, 1 = polynomial
        - aPeriodU, aPeriodV   : 0 = Non periodic in U or V direction
        1 = Periodic in U or V direction
        - allKnotsU, allKnotsV : Knots in U and V directions
        - allWeights           : Array of weights
        - allPoles             : XYZ coordinates of all control points
        - aUmin                : Starting value of U direction
        - aUmax                : Ending value of U direction
        - aVmin                : Starting value of V direction
        - aVmax                : Ending value of V direction
        raises exception if allWeights & allPoles are not of same size.

        :type anIndexU: int
        :type anIndexV: int
        :type aDegU: int
        :type aDegV: int
        :type aCloseU: bool
        :type aCloseV: bool
        :type aPolynom: bool
        :type aPeriodU: bool
        :type aPeriodV: bool
        :type allKnotsU: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allKnotsV: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allPoles: OCC.wrapper.TColgp.Handle_TColgp_HArray2OfXYZ
        :type aUmin: float
        :type aUmax: float
        :type aVmin: float
        :type aVmax: float

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESGeom_BSplineSurface self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Surface)
        Error if not in range [0-9]

        :type form: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SetFormNumber(self, *args)


    def UpperIndexU(self, *args):
        """
        UpperIndexU(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns the upper index of the first sum (U)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UpperIndexU(self, *args)


    def UpperIndexV(self, *args):
        """
        UpperIndexV(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns the upper index of the second sum (V)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UpperIndexV(self, *args)


    def DegreeU(self, *args):
        """
        DegreeU(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns degree of first set of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DegreeU(self, *args)


    def DegreeV(self, *args):
        """
        DegreeV(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns degree of second set of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DegreeV(self, *args)


    def IsClosedU(self, *args):
        """
        IsClosedU(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if closed in U direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsClosedU(self, *args)


    def IsClosedV(self, *args):
        """
        IsClosedV(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if closed in V direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsClosedV(self, *args)


    def IsPolynomial(self, *args):
        """
        IsPolynomial(Handle_IGESGeom_BSplineSurface self, Standard_Boolean const flag) -> Standard_Boolean

        True if polynomial, False if rational
        <flag> False (D) : computed from Weights
        <flag> True : recorded

        :type flag: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsPolynomial(self, *args)


    def IsPeriodicU(self, *args):
        """
        IsPeriodicU(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if periodic in U direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsPeriodicU(self, *args)


    def IsPeriodicV(self, *args):
        """
        IsPeriodicV(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        True if periodic in V direction else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsPeriodicV(self, *args)


    def NbKnotsU(self, *args):
        """
        NbKnotsU(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of knots in U direction
        KnotsU are numbered from -DegreeU

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbKnotsU(self, *args)


    def NbKnotsV(self, *args):
        """
        NbKnotsV(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of knots in V direction
        KnotsV are numbered from -DegreeV

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbKnotsV(self, *args)


    def KnotU(self, *args):
        """
        KnotU(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns the value of knot referred to by anIndex in U direction
        raises exception if
        anIndex < -DegreeU() or anIndex > (NbKnotsU() - DegreeU())

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_KnotU(self, *args)


    def KnotV(self, *args):
        """
        KnotV(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns the value of knot referred to by anIndex in V direction
        raises exception if
        anIndex < -DegreeV() or anIndex > (NbKnotsV() - DegreeV())

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_KnotV(self, *args)


    def NbPolesU(self, *args):
        """
        NbPolesU(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of poles in U direction

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbPolesU(self, *args)


    def NbPolesV(self, *args):
        """
        NbPolesV(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        returns number of poles in V direction

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbPolesV(self, *args)


    def Weight(self, *args):
        """
        Weight(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Standard_Real

        returns the weight referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Weight(self, *args)


    def Pole(self, *args):
        """
        Pole(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> gp_Pnt

        returns the control point referenced by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Pole(self, *args)


    def TransformedPole(self, *args):
        """
        TransformedPole(Handle_IGESGeom_BSplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> gp_Pnt

        returns the control point referenced by anIndex1, anIndex2
        after applying the Transf.Matrix
        raises exception if anIndex1 <= 0 or anIndex1 > NbPolesU()
        or if anIndex2 <= 0 or anIndex2 > NbPolesV()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_TransformedPole(self, *args)


    def UMin(self, *args):
        """
        UMin(Handle_IGESGeom_BSplineSurface self) -> Standard_Real

        returns starting value in the U direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UMin(self, *args)


    def UMax(self, *args):
        """
        UMax(Handle_IGESGeom_BSplineSurface self) -> Standard_Real

        returns ending value in the U direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UMax(self, *args)


    def VMin(self, *args):
        """
        VMin(Handle_IGESGeom_BSplineSurface self) -> Standard_Real

        returns starting value in the V direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_VMin(self, *args)


    def VMax(self, *args):
        """
        VMax(Handle_IGESGeom_BSplineSurface self) -> Standard_Real

        returns ending value in the V direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_VMax(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_BSplineSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BSplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BSplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_BSplineSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_BSplineSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_BSplineSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_BSplineSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_BSplineSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_BSplineSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_BSplineSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_BSplineSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_BSplineSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_BSplineSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_BSplineSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_BSplineSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_BSplineSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_BSplineSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_BSplineSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_BSplineSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_BSplineSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_BSplineSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_BSplineSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_BSplineSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_BSplineSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_BSplineSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_BSplineSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_BSplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_BSplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_BSplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_BSplineSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_BSplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_BSplineSurface_swigregister = _IGESGeom.Handle_IGESGeom_BSplineSurface_swigregister
Handle_IGESGeom_BSplineSurface_swigregister(Handle_IGESGeom_BSplineSurface)

def Handle_IGESGeom_BSplineSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_BSplineSurface_DownCast(thing)
Handle_IGESGeom_BSplineSurface_DownCast = _IGESGeom.Handle_IGESGeom_BSplineSurface_DownCast

class Handle_IGESGeom_TrimmedSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_TrimmedSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_TrimmedSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_TrimmedSurface self, IGESGeom_TrimmedSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_TrimmedSurface self, Handle_IGESGeom_TrimmedSurface theHandle) -> Handle_IGESGeom_TrimmedSurface
        assign(Handle_IGESGeom_TrimmedSurface self, IGESGeom_TrimmedSurface thePtr) -> Handle_IGESGeom_TrimmedSurface
        assign(Handle_IGESGeom_TrimmedSurface self, Handle_IGESGeom_TrimmedSurface theHandle) -> Handle_IGESGeom_TrimmedSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_TrimmedSurface self) -> IGESGeom_TrimmedSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_TrimmedSurface self) -> IGESGeom_TrimmedSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_TrimmedSurface self) -> IGESGeom_TrimmedSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_TrimmedSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_TrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_TrimmedSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_TrimmedSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity aSurface, Standard_Integer const aFlag, Handle_IGESGeom_CurveOnSurface anOuter, Handle_IGESGeom_HArray1OfCurveOnSurface allInners)

        This method is used to set the fields of the class
        TrimmedSurface
        - aSurface  : Surface to be trimmed
        - aFlag     : Outer boundary type
        False = The outer boundary is the boundary of
        rectangle D which is the domain of the
        surface to be trimmed
        True  = otherwise
        - anOuter   : Closed curve which constitutes outer boundary
        - allInners : Array of closed curves which constitute the
        inner boundary

        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFlag: int
        :type anOuter: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type allInners: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Init(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_IGESEntity

        returns the surface to be trimmed

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Surface(self, *args)


    def HasOuterContour(self, *args):
        """
        HasOuterContour(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        returns True if outer contour exists

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasOuterContour(self, *args)


    def OuterContour(self, *args):
        """
        OuterContour(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESGeom_CurveOnSurface

        returns the outer contour of the trimmed surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_OuterContour(self, *args)


    def OuterBoundaryType(self, *args):
        """
        OuterBoundaryType(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        returns the outer contour type of the trimmed surface
        0  : The outer boundary is the boundary of D
        1  : otherwise

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_OuterBoundaryType(self, *args)


    def NbInnerContours(self, *args):
        """
        NbInnerContours(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        returns the number of inner boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NbInnerContours(self, *args)


    def InnerContour(self, *args):
        """
        InnerContour(Handle_IGESGeom_TrimmedSurface self, Standard_Integer const Index) -> Handle_IGESGeom_CurveOnSurface

        returns the Index'th inner contour
        raises exception if Index <= 0 or Index > NbInnerContours()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InnerContour(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_TrimmedSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TrimmedSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TrimmedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_TrimmedSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_TrimmedSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_TrimmedSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_TrimmedSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_TrimmedSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_TrimmedSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_TrimmedSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_TrimmedSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_TrimmedSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_TrimmedSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_TrimmedSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_TrimmedSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_TrimmedSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_TrimmedSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_TrimmedSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_TrimmedSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_TrimmedSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_TrimmedSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_TrimmedSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_TrimmedSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_TrimmedSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_TrimmedSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_TrimmedSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_TrimmedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_TrimmedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_TrimmedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_TrimmedSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_TrimmedSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_TrimmedSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_TrimmedSurface_swigregister = _IGESGeom.Handle_IGESGeom_TrimmedSurface_swigregister
Handle_IGESGeom_TrimmedSurface_swigregister(Handle_IGESGeom_TrimmedSurface)

def Handle_IGESGeom_TrimmedSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_TrimmedSurface_DownCast(thing)
Handle_IGESGeom_TrimmedSurface_DownCast = _IGESGeom.Handle_IGESGeom_TrimmedSurface_DownCast

class IGESGeom_ToolConicArc(object):
    """
    Tool to work on a ConicArc. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolConicArc self) -> IGESGeom_ToolConicArc

        Returns a ToolConicArc, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolConicArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolConicArc_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolConicArc_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ConicArc <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolConicArc_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a ConicArc
        (FormNumber recomputed according case Ellips-Parab-Hyperb)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolConicArc_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolConicArc_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolConicArc_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc entfrom, Handle_IGESGeom_ConicArc entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolConicArc_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolConicArc self, Handle_IGESGeom_ConicArc ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolConicArc_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolConicArc
IGESGeom_ToolConicArc_swigregister = _IGESGeom.IGESGeom_ToolConicArc_swigregister
IGESGeom_ToolConicArc_swigregister(IGESGeom_ToolConicArc)

class Handle_IGESGeom_Flash(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Flash self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Flash_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Flash self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Flash_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Flash self, IGESGeom_Flash thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Flash_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Flash self, Handle_IGESGeom_Flash theHandle) -> Handle_IGESGeom_Flash
        assign(Handle_IGESGeom_Flash self, IGESGeom_Flash thePtr) -> Handle_IGESGeom_Flash
        assign(Handle_IGESGeom_Flash self, Handle_IGESGeom_Flash theHandle) -> Handle_IGESGeom_Flash

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Flash_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Flash self) -> IGESGeom_Flash

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Flash_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Flash self) -> IGESGeom_Flash

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Flash___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Flash self) -> IGESGeom_Flash

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Flash___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Flash___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Flash___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Flash(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Flash_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Flash

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Flash self, gp_XY aPoint, Standard_Real const aDim, Standard_Real const anotherDim, Standard_Real const aRotation, Handle_IGESData_IGESEntity aReference)

        This method is used to set the fields of the class Flash
        - aPoint     : Reference of flash
        - aDim       : First flash sizing parameter
        - anotherDim : Second flash sizing parameter
        - aRotation  : Rotation of flash about reference point
        in radians
        - aReference : Pointer to the referenced entity or Null

        :type aPoint: OCC.wrapper.gp.gp_XY
        :type aDim: float
        :type anotherDim: float
        :type aRotation: float
        :type aReference: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESGeom_Flash self, Standard_Integer const form)

        Changes FormNumber (indicates the Nature of the Flash :
        0 Unspecified, then given by Reference, 1->4 various
        Specialisations (Circle,Rectangle, etc...) )
        Error if not in range [0-4]

        :type form: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SetFormNumber(self, *args)


    def ReferencePoint(self, *args):
        """
        ReferencePoint(Handle_IGESGeom_Flash self) -> gp_Pnt2d

        returns the referenced point, Z = 0 always

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ReferencePoint(self, *args)


    def TransformedReferencePoint(self, *args):
        """
        TransformedReferencePoint(Handle_IGESGeom_Flash self) -> gp_Pnt

        returns the referenced point after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Flash_TransformedReferencePoint(self, *args)


    def Dimension1(self, *args):
        """
        Dimension1(Handle_IGESGeom_Flash self) -> Standard_Real

        returns first flash sizing parameter

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Dimension1(self, *args)


    def Dimension2(self, *args):
        """
        Dimension2(Handle_IGESGeom_Flash self) -> Standard_Real

        returns second flash sizing parameter

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Dimension2(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Handle_IGESGeom_Flash self) -> Standard_Real

        returns the angle in radians of the rotation of flash about the
        reference point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Rotation(self, *args)


    def ReferenceEntity(self, *args):
        """
        ReferenceEntity(Handle_IGESGeom_Flash self) -> Handle_IGESData_IGESEntity

        returns the referenced entity or Null handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ReferenceEntity(self, *args)


    def HasReferenceEntity(self, *args):
        """
        HasReferenceEntity(Handle_IGESGeom_Flash self) -> Standard_Boolean

        returns True if referenced entity is present.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasReferenceEntity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Flash self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Flash_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Flash_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Flash_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Flash self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Flash_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Flash self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Flash self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Flash self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Flash self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Flash self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Flash self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Flash self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Flash self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Flash self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Flash self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Flash self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Flash self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Flash self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Flash self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Flash_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Flash self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Flash self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Flash self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Flash self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Flash self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Flash self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Flash self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Flash self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Flash self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Flash self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Flash self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Flash self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Flash self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Flash self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Flash self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Flash self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Flash self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Flash_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Flash self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Flash_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Flash self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Flash self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Flash_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Flash self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Flash self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Flash self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Flash self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Flash self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Flash self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Flash self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Flash self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Flash self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Flash_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Flash self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Flash self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Flash self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Flash self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Flash_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Flash self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Flash_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Flash self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Flash_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Flash self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Flash self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Flash self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Flash self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Flash_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Flash self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Flash_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Flash self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Flash self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Flash_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Flash self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Flash_DecrementRefCounter(self, *args)

Handle_IGESGeom_Flash_swigregister = _IGESGeom.Handle_IGESGeom_Flash_swigregister
Handle_IGESGeom_Flash_swigregister(Handle_IGESGeom_Flash)

def Handle_IGESGeom_Flash_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Flash_DownCast(thing)
Handle_IGESGeom_Flash_DownCast = _IGESGeom.Handle_IGESGeom_Flash_DownCast

class Handle_IGESGeom_Point(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Point self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Point_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Point self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Point_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Point self, IGESGeom_Point thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Point_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Point self, Handle_IGESGeom_Point theHandle) -> Handle_IGESGeom_Point
        assign(Handle_IGESGeom_Point self, IGESGeom_Point thePtr) -> Handle_IGESGeom_Point
        assign(Handle_IGESGeom_Point self, Handle_IGESGeom_Point theHandle) -> Handle_IGESGeom_Point

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Point_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Point self) -> IGESGeom_Point

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Point_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Point self) -> IGESGeom_Point

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Point___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Point self) -> IGESGeom_Point

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Point___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Point___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Point___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Point_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Point

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Point self, gp_XYZ aPoint, Handle_IGESBasic_SubfigureDef aSymbol)

        This method is used to set the fields of the class Point
        - aPoint  : Coordinates of point
        - aSymbol : SubfigureDefinition entity specifying the
        display symbol if there exists one, or zero

        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type aSymbol: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGeom.Handle_IGESGeom_Point_Init(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESGeom_Point self) -> gp_Pnt

        returns co-ordinates of the point

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Point_Value(self, *args)


    def TransformedValue(self, *args):
        """
        TransformedValue(Handle_IGESGeom_Point self) -> gp_Pnt

        returns co-ordinates of the point after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Point_TransformedValue(self, *args)


    def HasDisplaySymbol(self, *args):
        """
        HasDisplaySymbol(Handle_IGESGeom_Point self) -> Standard_Boolean

        returns True if symbol exists

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasDisplaySymbol(self, *args)


    def DisplaySymbol(self, *args):
        """
        DisplaySymbol(Handle_IGESGeom_Point self) -> Handle_IGESBasic_SubfigureDef

        returns display symbol entity if it exists

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGeom.Handle_IGESGeom_Point_DisplaySymbol(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Point self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Point_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Point_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Point self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Point_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Point self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Point self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Point self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Point self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Point self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Point_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Point self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Point self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Point_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Point self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Point self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Point_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Point self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Point self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Point self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Point self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Point self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Point self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Point self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Point self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Point self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Point self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Point_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Point self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Point_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Point self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Point self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Point self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Point_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Point self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Point self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Point self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Point self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Point self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Point self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Point self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Point self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Point self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Point self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Point self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Point self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Point_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Point self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Point_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Point self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Point_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Point self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Point self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Point_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Point self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Point self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Point_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Point self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Point self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Point self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Point self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Point self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Point self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Point self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Point_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Point self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Point self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Point self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Point self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Point_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Point self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Point_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Point self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Point_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Point_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Point self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Point_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Point self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Point self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Point_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Point self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Point_DecrementRefCounter(self, *args)

Handle_IGESGeom_Point_swigregister = _IGESGeom.Handle_IGESGeom_Point_swigregister
Handle_IGESGeom_Point_swigregister(Handle_IGESGeom_Point)

def Handle_IGESGeom_Point_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Point_DownCast(thing)
Handle_IGESGeom_Point_DownCast = _IGESGeom.Handle_IGESGeom_Point_DownCast

class IGESGeom_RuledSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESRuledSurface, Type <118> Form <0-1>
    in package IGESGeom
    A ruled surface is formed by moving a line connecting points
    of equal relative arc length or equal relative parametric
    value on two parametric curves from a start point to a
    terminate point on the curves. The parametric curves may be
    points, lines, circles, conics, rational B-splines,
    parametric splines or any parametric curve defined in
    the IGES specification.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_RuledSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_RuledSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_RuledSurface self) -> IGESGeom_RuledSurface

        defines IGESRuledSurface, Type <118> Form <0-1>
        in package IGESGeom
        A ruled surface is formed by moving a line connecting points
        of equal relative arc length or equal relative parametric
        value on two parametric curves from a start point to a
        terminate point on the curves. The parametric curves may be
        points, lines, circles, conics, rational B-splines,
        parametric splines or any parametric curve defined in
        the IGES specification.
        """
        this = _IGESGeom.new_IGESGeom_RuledSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity aCurve, Handle_IGESData_IGESEntity anotherCurve, Standard_Integer const aDirFlag, Standard_Integer const aDevFlag)

        This method is used to set the fields of the class
        RuledSurface
        - aCurve       : First parametric curve
        - anotherCurve : Second parametric curve
        - aDirFlag     : Direction Flag
        0 = Join first to first, last to last
        1 = Join first to last, last to first
        - aDevFlag     : Developable Surface Flag
        1 = Developable
        0 = Possibly not

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anotherCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aDirFlag: int
        :type aDevFlag: int

        """
        return _IGESGeom.IGESGeom_RuledSurface_Init(self, *args)


    def SetRuledByParameter(self, *args):
        """
        SetRuledByParameter(IGESGeom_RuledSurface self, Standard_Boolean const mode)

        Sets <me> to be Ruled by Parameter (Form 1) if <mode> is
        True, or Ruled by Length (Form 0) else

        :type mode: bool

        """
        return _IGESGeom.IGESGeom_RuledSurface_SetRuledByParameter(self, *args)


    def IsRuledByParameter(self, *args):
        """
        IsRuledByParameter(IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if Form is 1

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_RuledSurface_IsRuledByParameter(self, *args)


    def FirstCurve(self, *args):
        """
        FirstCurve(IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        returns the first curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_RuledSurface_FirstCurve(self, *args)


    def SecondCurve(self, *args):
        """
        SecondCurve(IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        returns the second curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_RuledSurface_SecondCurve(self, *args)


    def DirectionFlag(self, *args):
        """
        DirectionFlag(IGESGeom_RuledSurface self) -> Standard_Integer

        return the sense of direction
        0 = Join first to first, last to last
        1 = Join first to last, last to first

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_RuledSurface_DirectionFlag(self, *args)


    def IsDevelopable(self, *args):
        """
        IsDevelopable(IGESGeom_RuledSurface self) -> Standard_Boolean

        returns True if developable else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_RuledSurface_IsDevelopable(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_RuledSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_RuledSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_RuledSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_RuledSurface
IGESGeom_RuledSurface_swigregister = _IGESGeom.IGESGeom_RuledSurface_swigregister
IGESGeom_RuledSurface_swigregister(IGESGeom_RuledSurface)

def IGESGeom_RuledSurface_get_type_name(*args):
    """
    IGESGeom_RuledSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_RuledSurface_get_type_name(*args)

def IGESGeom_RuledSurface_get_type_descriptor(*args):
    """
    IGESGeom_RuledSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_RuledSurface_get_type_descriptor(*args)

class IGESGeom_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESGeom (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_GeneralModule self) -> IGESGeom_GeneralModule

        Creates a GeneralModule from IGESGeom and puts it into GeneralLib


        """
        this = _IGESGeom.new_IGESGeom_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Shape for all, but Drawing for :
        Flash;  Point with a symbol;  Plane with a symbol

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_GeneralModule
IGESGeom_GeneralModule_swigregister = _IGESGeom.IGESGeom_GeneralModule_swigregister
IGESGeom_GeneralModule_swigregister(IGESGeom_GeneralModule)

def IGESGeom_GeneralModule_get_type_name(*args):
    """
    IGESGeom_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_GeneralModule_get_type_name(*args)

def IGESGeom_GeneralModule_get_type_descriptor(*args):
    """
    IGESGeom_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_GeneralModule_get_type_descriptor(*args)

class Handle_IGESGeom_BSplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_BSplineCurve self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_BSplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_BSplineCurve self, IGESGeom_BSplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_BSplineCurve self, Handle_IGESGeom_BSplineCurve theHandle) -> Handle_IGESGeom_BSplineCurve
        assign(Handle_IGESGeom_BSplineCurve self, IGESGeom_BSplineCurve thePtr) -> Handle_IGESGeom_BSplineCurve
        assign(Handle_IGESGeom_BSplineCurve self, Handle_IGESGeom_BSplineCurve theHandle) -> Handle_IGESGeom_BSplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_BSplineCurve self) -> IGESGeom_BSplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_BSplineCurve self) -> IGESGeom_BSplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_BSplineCurve self) -> IGESGeom_BSplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_BSplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_BSplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_BSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_BSplineCurve_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_BSplineCurve

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_BSplineCurve self, Standard_Integer const anIndex, Standard_Integer const aDegree, Standard_Boolean const aPlanar, Standard_Boolean const aClosed, Standard_Boolean const aPolynom, Standard_Boolean const aPeriodic, Handle_TColStd_HArray1OfReal allKnots, Handle_TColStd_HArray1OfReal allWeights, Handle_TColgp_HArray1OfXYZ allPoles, Standard_Real const aUmin, Standard_Real const aUmax, gp_XYZ aNorm)

        This method is used to set the fields of the class
        BSplineCurve. Beware about indexation of arrays
        - anIndex      : Upper index of the sum
        - aDegree      : Degree of basis functions
        - aPlanar      : 0 = nonplanar curve, 1 = planar curve
        - aClosed      : 0 = open curve, 1 = closed curve
        - aPolynom     : 0 = rational, 1 = polynomial
        - aPeriodic    : 0 = nonperiodic, 1 = periodic
        - allKnots     : Knot sequence values [-Degree,Index+1]
        - allWeights   : Array of weights     [0,Index]
        - allPoles     : X, Y, Z coordinates of all control points
        [0,Index]
        - aUmin, aUmax : Starting and ending parameter values
        - aNorm        : Unit normal (if the curve is planar)
        raises exception if allWeights & allPoles are not of same size.

        :type anIndex: int
        :type aDegree: int
        :type aPlanar: bool
        :type aClosed: bool
        :type aPolynom: bool
        :type aPeriodic: bool
        :type allKnots: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allWeights: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allPoles: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ
        :type aUmin: float
        :type aUmax: float
        :type aNorm: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESGeom_BSplineCurve self, Standard_Integer const form)

        Changes FormNumber (indicates the Shape of the Curve)
        Error if not in range [0-5]

        :type form: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SetFormNumber(self, *args)


    def UpperIndex(self, *args):
        """
        UpperIndex(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the upper index of the sum (see Knots,Poles)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_UpperIndex(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the degree of basis functions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Degree(self, *args)


    def IsPlanar(self, *args):
        """
        IsPlanar(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is Planar, False if non-planar

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsPlanar(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is closed, False if open

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsClosed(self, *args)


    def IsPolynomial(self, *args):
        """
        IsPolynomial(Handle_IGESGeom_BSplineCurve self, Standard_Boolean const flag) -> Standard_Boolean

        returns True if the curve is polynomial, False if rational
        <flag> False (D) : computed from the list of weights
        (all must be equal)
        <flag> True : as recorded

        :type flag: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsPolynomial(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if the curve is periodic, False otherwise

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsPeriodic(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        returns the number of knots (i.e. Degree + UpperIndex + 2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbKnots(self, *args)


    def Knot(self, *args):
        """
        Knot(Handle_IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> Standard_Real

        returns the knot referred to by anIndex,
        inside the range [-Degree,UpperIndex+1]
        raises exception if
        anIndex < -Degree() or anIndex > (NbKnots() - Degree())
        Note : Knots are numbered from -Degree (not from 1)

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Knot(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        returns number of poles (i.e. UpperIndex + 1)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbPoles(self, *args)


    def Weight(self, *args):
        """
        Weight(Handle_IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> Standard_Real

        returns the weight referred to by anIndex, in [0,UpperIndex]
        raises exception if anIndex < 0 or anIndex > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Weight(self, *args)


    def Pole(self, *args):
        """
        Pole(Handle_IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> gp_Pnt

        returns the pole referred to by anIndex, in [0,UpperIndex]
        raises exception if anIndex < 0 or anIndex > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Pole(self, *args)


    def TransformedPole(self, *args):
        """
        TransformedPole(Handle_IGESGeom_BSplineCurve self, Standard_Integer const anIndex) -> gp_Pnt

        returns the anIndex'th pole after applying Transf. Matrix
        raises exception if an Index < 0 or an Index > UpperIndex()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_TransformedPole(self, *args)


    def UMin(self, *args):
        """
        UMin(Handle_IGESGeom_BSplineCurve self) -> Standard_Real

        returns starting parameter value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_UMin(self, *args)


    def UMax(self, *args):
        """
        UMax(Handle_IGESGeom_BSplineCurve self) -> Standard_Real

        returns ending parameter value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_UMax(self, *args)


    def Normal(self, *args):
        """
        Normal(Handle_IGESGeom_BSplineCurve self) -> gp_XYZ

        if the curve is nonplanar then (0, 0, 0) is returned

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Normal(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_BSplineCurve self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BSplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BSplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_BSplineCurve self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_BSplineCurve self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_BSplineCurve self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_BSplineCurve self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_BSplineCurve self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_BSplineCurve self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_BSplineCurve self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_BSplineCurve self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_BSplineCurve self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_BSplineCurve self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_BSplineCurve self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_BSplineCurve self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_BSplineCurve self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_BSplineCurve self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_BSplineCurve self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_BSplineCurve self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_BSplineCurve self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_BSplineCurve self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_BSplineCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_BSplineCurve self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_BSplineCurve self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_BSplineCurve self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_BSplineCurve self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_BSplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_BSplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_BSplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_BSplineCurve self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_BSplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BSplineCurve_DecrementRefCounter(self, *args)

Handle_IGESGeom_BSplineCurve_swigregister = _IGESGeom.Handle_IGESGeom_BSplineCurve_swigregister
Handle_IGESGeom_BSplineCurve_swigregister(Handle_IGESGeom_BSplineCurve)

def Handle_IGESGeom_BSplineCurve_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_BSplineCurve_DownCast(thing)
Handle_IGESGeom_BSplineCurve_DownCast = _IGESGeom.Handle_IGESGeom_BSplineCurve_DownCast

class Handle_IGESGeom_RuledSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_RuledSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_RuledSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_RuledSurface self, IGESGeom_RuledSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_RuledSurface self, Handle_IGESGeom_RuledSurface theHandle) -> Handle_IGESGeom_RuledSurface
        assign(Handle_IGESGeom_RuledSurface self, IGESGeom_RuledSurface thePtr) -> Handle_IGESGeom_RuledSurface
        assign(Handle_IGESGeom_RuledSurface self, Handle_IGESGeom_RuledSurface theHandle) -> Handle_IGESGeom_RuledSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_RuledSurface self) -> IGESGeom_RuledSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_RuledSurface self) -> IGESGeom_RuledSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_RuledSurface self) -> IGESGeom_RuledSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_RuledSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_RuledSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_RuledSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_RuledSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_RuledSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity aCurve, Handle_IGESData_IGESEntity anotherCurve, Standard_Integer const aDirFlag, Standard_Integer const aDevFlag)

        This method is used to set the fields of the class
        RuledSurface
        - aCurve       : First parametric curve
        - anotherCurve : Second parametric curve
        - aDirFlag     : Direction Flag
        0 = Join first to first, last to last
        1 = Join first to last, last to first
        - aDevFlag     : Developable Surface Flag
        1 = Developable
        0 = Possibly not

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anotherCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aDirFlag: int
        :type aDevFlag: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Init(self, *args)


    def SetRuledByParameter(self, *args):
        """
        SetRuledByParameter(Handle_IGESGeom_RuledSurface self, Standard_Boolean const mode)

        Sets <me> to be Ruled by Parameter (Form 1) if <mode> is
        True, or Ruled by Length (Form 0) else

        :type mode: bool

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SetRuledByParameter(self, *args)


    def IsRuledByParameter(self, *args):
        """
        IsRuledByParameter(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if Form is 1

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IsRuledByParameter(self, *args)


    def FirstCurve(self, *args):
        """
        FirstCurve(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        returns the first curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_FirstCurve(self, *args)


    def SecondCurve(self, *args):
        """
        SecondCurve(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        returns the second curve

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SecondCurve(self, *args)


    def DirectionFlag(self, *args):
        """
        DirectionFlag(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        return the sense of direction
        0 = Join first to first, last to last
        1 = Join first to last, last to first

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DirectionFlag(self, *args)


    def IsDevelopable(self, *args):
        """
        IsDevelopable(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        returns True if developable else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IsDevelopable(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_RuledSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_RuledSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_RuledSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_RuledSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_RuledSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_RuledSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_RuledSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_RuledSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_RuledSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_RuledSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_RuledSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_RuledSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_RuledSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_RuledSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_RuledSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_RuledSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_RuledSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_RuledSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_RuledSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_RuledSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_RuledSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_RuledSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_RuledSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_RuledSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_RuledSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_RuledSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_RuledSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_RuledSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_RuledSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_RuledSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_RuledSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_RuledSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_RuledSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_RuledSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_RuledSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_RuledSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_RuledSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_RuledSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_RuledSurface_swigregister = _IGESGeom.Handle_IGESGeom_RuledSurface_swigregister
Handle_IGESGeom_RuledSurface_swigregister(Handle_IGESGeom_RuledSurface)

def Handle_IGESGeom_RuledSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_RuledSurface_DownCast(thing)
Handle_IGESGeom_RuledSurface_DownCast = _IGESGeom.Handle_IGESGeom_RuledSurface_DownCast

class IGESGeom_CircularArc(IGESData.IGESData_IGESEntity):
    """
    defines IGESCircularArc, Type <100> Form <0>
    in package IGESGeom
    A circular arc is a connected portion of a parent circle
    which consists of more than one point. The definition space
    coordinate system is always chosen so that the circular arc
    remains in a plane either coincident with or parallel to
    the XT, YT plane.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_CircularArc
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_CircularArc(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_CircularArc self) -> IGESGeom_CircularArc

        defines IGESCircularArc, Type <100> Form <0>
        in package IGESGeom
        A circular arc is a connected portion of a parent circle
        which consists of more than one point. The definition space
        coordinate system is always chosen so that the circular arc
        remains in a plane either coincident with or parallel to
        the XT, YT plane.
        """
        this = _IGESGeom.new_IGESGeom_CircularArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_CircularArc self, Standard_Real const aZT, gp_XY aCenter, gp_XY aStart, gp_XY anEnd)

        This method is used to set the fields of the class
        CircularArc
        - aZT     : Shift above the Z plane
        - aCenter : Center of the circle of which the arc forms a part
        - aStart  : Starting point of the circular arc
        - anEnd   : Ending point of the circular arc

        :type aZT: float
        :type aCenter: OCC.wrapper.gp.gp_XY
        :type aStart: OCC.wrapper.gp.gp_XY
        :type anEnd: OCC.wrapper.gp.gp_XY

        """
        return _IGESGeom.IGESGeom_CircularArc_Init(self, *args)


    def Center(self, *args):
        """
        Center(IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the center of the circle of which arc forms a part

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_CircularArc_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESGeom_CircularArc self) -> gp_Pnt

        returns the center of the circle of which arc forms a part
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_CircularArc_TransformedCenter(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the start point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_CircularArc_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(IGESGeom_CircularArc self) -> gp_Pnt

        returns the start point of the arc after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_CircularArc_TransformedStartPoint(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(IGESGeom_CircularArc self) -> Standard_Real

        returns the parallel displacement of the plane containing the
        arc from the XT, YT plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_CircularArc_ZPlane(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the end point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.IGESGeom_CircularArc_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(IGESGeom_CircularArc self) -> gp_Pnt

        returns the end point of the arc after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_CircularArc_TransformedEndPoint(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESGeom_CircularArc self) -> Standard_Real

        returns the radius of the circle of which arc forms a part

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_CircularArc_Radius(self, *args)


    def Angle(self, *args):
        """
        Angle(IGESGeom_CircularArc self) -> Standard_Real

        returns the angle subtended by the arc at the center in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_CircularArc_Angle(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESGeom_CircularArc self) -> gp_Dir

        Z-Axis of circle (i.e. [0,0,1])

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.IGESGeom_CircularArc_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESGeom_CircularArc self) -> gp_Dir

        Z-Axis after applying Trans. Matrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.IGESGeom_CircularArc_TransformedAxis(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(IGESGeom_CircularArc self) -> Standard_Boolean

        True if StartPoint = EndPoint

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_CircularArc_IsClosed(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_CircularArc_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_CircularArc_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_CircularArc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_CircularArc
IGESGeom_CircularArc_swigregister = _IGESGeom.IGESGeom_CircularArc_swigregister
IGESGeom_CircularArc_swigregister(IGESGeom_CircularArc)

def IGESGeom_CircularArc_get_type_name(*args):
    """
    IGESGeom_CircularArc_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_CircularArc_get_type_name(*args)

def IGESGeom_CircularArc_get_type_descriptor(*args):
    """
    IGESGeom_CircularArc_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_CircularArc_get_type_descriptor(*args)

class Handle_IGESGeom_Direction(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Direction self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Direction_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Direction self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Direction_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Direction self, IGESGeom_Direction thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Direction_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Direction self, Handle_IGESGeom_Direction theHandle) -> Handle_IGESGeom_Direction
        assign(Handle_IGESGeom_Direction self, IGESGeom_Direction thePtr) -> Handle_IGESGeom_Direction
        assign(Handle_IGESGeom_Direction self, Handle_IGESGeom_Direction theHandle) -> Handle_IGESGeom_Direction

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Direction_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Direction self) -> IGESGeom_Direction

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Direction_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Direction self) -> IGESGeom_Direction

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Direction___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Direction self) -> IGESGeom_Direction

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Direction___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Direction___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Direction___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Direction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Direction_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Direction

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Direction self, gp_XYZ aDirection)

        This method is used to set the fields of the class
        Direction
        - aDirection : Direction ratios, Z is 0 by default

        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Init(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESGeom_Direction self) -> gp_Vec

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Value(self, *args)


    def TransformedValue(self, *args):
        """
        TransformedValue(Handle_IGESGeom_Direction self) -> gp_Vec

        returns the Direction value after applying Transformation matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_Direction_TransformedValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Direction self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Direction_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Direction_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Direction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Direction self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Direction_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Direction self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Direction self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Direction self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Direction self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Direction self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Direction self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Direction self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Direction self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Direction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Direction self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Direction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Direction self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Direction self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Direction self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Direction_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Direction self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Direction self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Direction self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Direction self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Direction_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Direction self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Direction self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Direction self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Direction self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Direction self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Direction self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Direction self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Direction self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Direction self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Direction self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Direction self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Direction self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Direction self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Direction_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Direction self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Direction_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Direction self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Direction self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Direction_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Direction self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Direction self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Direction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Direction self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Direction self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Direction self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Direction self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Direction self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Direction self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Direction_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Direction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Direction self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Direction self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Direction self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Direction_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Direction self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Direction_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Direction self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Direction_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Direction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Direction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Direction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Direction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Direction_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Direction self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Direction_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Direction self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Direction self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Direction_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Direction self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Direction_DecrementRefCounter(self, *args)

Handle_IGESGeom_Direction_swigregister = _IGESGeom.Handle_IGESGeom_Direction_swigregister
Handle_IGESGeom_Direction_swigregister(Handle_IGESGeom_Direction)

def Handle_IGESGeom_Direction_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Direction_DownCast(thing)
Handle_IGESGeom_Direction_DownCast = _IGESGeom.Handle_IGESGeom_Direction_DownCast

class IGESGeom_ToolBSplineCurve(object):
    """
    Tool to work on a BSplineCurve. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolBSplineCurve self) -> IGESGeom_ToolBSplineCurve

        Returns a ToolBSplineCurve, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent, Interface_EntityIterator iter)

        Lists the Entities shared by a BSplineCurve <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve entfrom, Handle_IGESGeom_BSplineCurve entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolBSplineCurve self, Handle_IGESGeom_BSplineCurve ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolBSplineCurve_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolBSplineCurve
IGESGeom_ToolBSplineCurve_swigregister = _IGESGeom.IGESGeom_ToolBSplineCurve_swigregister
IGESGeom_ToolBSplineCurve_swigregister(IGESGeom_ToolBSplineCurve)

class Handle_IGESGeom_SplineCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_SplineCurve self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_SplineCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_SplineCurve self, IGESGeom_SplineCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_SplineCurve self, Handle_IGESGeom_SplineCurve theHandle) -> Handle_IGESGeom_SplineCurve
        assign(Handle_IGESGeom_SplineCurve self, IGESGeom_SplineCurve thePtr) -> Handle_IGESGeom_SplineCurve
        assign(Handle_IGESGeom_SplineCurve self, Handle_IGESGeom_SplineCurve theHandle) -> Handle_IGESGeom_SplineCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_SplineCurve self) -> IGESGeom_SplineCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_SplineCurve self) -> IGESGeom_SplineCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_SplineCurve self) -> IGESGeom_SplineCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_SplineCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_SplineCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_SplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_SplineCurve_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_SplineCurve

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_SplineCurve self, Standard_Integer const aType, Standard_Integer const aDegree, Standard_Integer const nbDimensions, Handle_TColStd_HArray1OfReal allBreakPoints, Handle_TColStd_HArray2OfReal allXPolynomials, Handle_TColStd_HArray2OfReal allYPolynomials, Handle_TColStd_HArray2OfReal allZPolynomials, Handle_TColStd_HArray1OfReal allXvalues, Handle_TColStd_HArray1OfReal allYvalues, Handle_TColStd_HArray1OfReal allZvalues)

        This method is used to set the fields of the class
        SplineCurve
        - aType           : Spline Type
        1 = Linear
        2 = Quadratic
        3 = Cubic
        4 = Wilson-Fowler
        5 = Modified Wilson-Fowler
        6 = B Spline
        - aDegree         : Degree of continuity w.r.t. arc length
        - nbDimensions    : Number of dimensions
        2 = Planar
        3 = Non-planar
        - allBreakPoints  : Array of break points
        - allXPolynomials : X coordinate polynomials of segments
        - allYPolynomials : Y coordinate polynomials of segments
        - allZPolynomials : Z coordinate polynomials of segments
        - allXValues      : Values of 1st, 2nd, 3rd derivatives of
        X polynomials at the terminate point
        and values of X at terminate point
        - allYValues      : Values of 1st, 2nd, 3rd derivatives of
        Y polynomials at the terminate point
        and values of Y at terminate point
        - allZvalues      : Values of 1st, 2nd, 3rd derivatives of
        Z polynomials at the terminate point
        and values of Z at terminate point
        raises exception if allXPolynomials, allYPolynomials
        & allZPolynomials are not of same size OR allXValues, allYValues
        & allZValues are not of size 4

        :type aType: int
        :type aDegree: int
        :type nbDimensions: int
        :type allBreakPoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allXPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allYPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allZPolynomials: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal
        :type allXvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allYvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allZvalues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Init(self, *args)


    def SplineType(self, *args):
        """
        SplineType(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        returns the type of Spline curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SplineType(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        returns the degree of the curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Degree(self, *args)


    def NbDimensions(self, *args):
        """
        NbDimensions(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        returns the number of dimensions
        2 = Planar
        3 = Non-planar

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbDimensions(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        returns the number of segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbSegments(self, *args)


    def BreakPoint(self, *args):
        """
        BreakPoint(Handle_IGESGeom_SplineCurve self, Standard_Integer const Index) -> Standard_Real

        returns breakpoint of piecewise polynomial
        raises exception if Index <= 0 or Index > NbSegments() + 1

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_BreakPoint(self, *args)


    def XCoordPolynomial(self, *args):
        """
        XCoordPolynomial(Handle_IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns X coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AX: float
        :type BX: float
        :type CX: float
        :type DX: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_XCoordPolynomial(self, *args)


    def YCoordPolynomial(self, *args):
        """
        YCoordPolynomial(Handle_IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns Y coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AY: float
        :type BY: float
        :type CY: float
        :type DY: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_YCoordPolynomial(self, *args)


    def ZCoordPolynomial(self, *args):
        """
        ZCoordPolynomial(Handle_IGESGeom_SplineCurve self, Standard_Integer const Index)

        returns Z coordinate polynomial for segment referred to by Index
        raises exception if Index <= 0 or Index > NbSegments()

        :type Index: int
        :type AZ: float
        :type BZ: float
        :type CZ: float
        :type DZ: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ZCoordPolynomial(self, *args)


    def XValues(self, *args):
        """
        XValues(Handle_IGESGeom_SplineCurve self)

        returns the value of X polynomial, the values of 1st, 2nd and
        3rd derivatives of the X polynomial at the terminate point

        :type TPX0: float
        :type TPX1: float
        :type TPX2: float
        :type TPX3: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_XValues(self, *args)


    def YValues(self, *args):
        """
        YValues(Handle_IGESGeom_SplineCurve self)

        returns the value of Y polynomial, the values of 1st, 2nd and
        3rd derivatives of the Y polynomial at the termminate point

        :type TPY0: float
        :type TPY1: float
        :type TPY2: float
        :type TPY3: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_YValues(self, *args)


    def ZValues(self, *args):
        """
        ZValues(Handle_IGESGeom_SplineCurve self)

        returns the value of Z polynomial, the values of 1st, 2nd and
        3rd derivatives of the Z polynomial at the termminate point

        :type TPZ0: float
        :type TPZ1: float
        :type TPZ2: float
        :type TPZ3: float

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ZValues(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_SplineCurve self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SplineCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SplineCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_SplineCurve self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_SplineCurve self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_SplineCurve self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_SplineCurve self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_SplineCurve self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_SplineCurve self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_SplineCurve self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_SplineCurve self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_SplineCurve self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_SplineCurve self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_SplineCurve self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_SplineCurve self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_SplineCurve self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_SplineCurve self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_SplineCurve self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_SplineCurve self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_SplineCurve self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_SplineCurve self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_SplineCurve self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_SplineCurve self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_SplineCurve self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_SplineCurve self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_SplineCurve self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_SplineCurve self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_SplineCurve self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_SplineCurve self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_SplineCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_SplineCurve self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_SplineCurve self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_SplineCurve self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_SplineCurve self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_SplineCurve self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_SplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_SplineCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_SplineCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_SplineCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_SplineCurve self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_SplineCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineCurve_DecrementRefCounter(self, *args)

Handle_IGESGeom_SplineCurve_swigregister = _IGESGeom.Handle_IGESGeom_SplineCurve_swigregister
Handle_IGESGeom_SplineCurve_swigregister(Handle_IGESGeom_SplineCurve)

def Handle_IGESGeom_SplineCurve_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_SplineCurve_DownCast(thing)
Handle_IGESGeom_SplineCurve_DownCast = _IGESGeom.Handle_IGESGeom_SplineCurve_DownCast

class Handle_IGESGeom_SurfaceOfRevolution(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_SurfaceOfRevolution self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_SurfaceOfRevolution self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_SurfaceOfRevolution self, IGESGeom_SurfaceOfRevolution thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution theHandle) -> Handle_IGESGeom_SurfaceOfRevolution
        assign(Handle_IGESGeom_SurfaceOfRevolution self, IGESGeom_SurfaceOfRevolution thePtr) -> Handle_IGESGeom_SurfaceOfRevolution
        assign(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution theHandle) -> Handle_IGESGeom_SurfaceOfRevolution

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESGeom_SurfaceOfRevolution

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESGeom_SurfaceOfRevolution

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESGeom_SurfaceOfRevolution

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_SurfaceOfRevolution

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESGeom_Line anAxis, Handle_IGESData_IGESEntity aGeneratrix, Standard_Real const aStartAngle, Standard_Real const anEndAngle)

        This method is used to set the fields of the class Line
        - anAxis      : Axis of revolution
        - aGeneratrix : The curve which is revolved about the axis
        - aStartAngle : Start angle of the surface of revolution
        - anEndAngle  : End angle of the surface of revolution

        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type aGeneratrix: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aStartAngle: float
        :type anEndAngle: float

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Init(self, *args)


    def AxisOfRevolution(self, *args):
        """
        AxisOfRevolution(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESGeom_Line

        returns the axis of revolution

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_AxisOfRevolution(self, *args)


    def Generatrix(self, *args):
        """
        Generatrix(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_IGESEntity

        returns the curve which is revolved about the axis

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Generatrix(self, *args)


    def StartAngle(self, *args):
        """
        StartAngle(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Real

        returns start angle of revolution

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_StartAngle(self, *args)


    def EndAngle(self, *args):
        """
        EndAngle(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Real

        returns end angle of revolution

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_EndAngle(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_SurfaceOfRevolution self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_SurfaceOfRevolution self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_SurfaceOfRevolution self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_SurfaceOfRevolution self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_SurfaceOfRevolution self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_SurfaceOfRevolution self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_SurfaceOfRevolution self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_SurfaceOfRevolution self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_SurfaceOfRevolution self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_SurfaceOfRevolution self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_SurfaceOfRevolution self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_SurfaceOfRevolution self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_SurfaceOfRevolution self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_SurfaceOfRevolution self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_SurfaceOfRevolution self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_SurfaceOfRevolution self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_SurfaceOfRevolution self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_SurfaceOfRevolution self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DecrementRefCounter(self, *args)

Handle_IGESGeom_SurfaceOfRevolution_swigregister = _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_swigregister
Handle_IGESGeom_SurfaceOfRevolution_swigregister(Handle_IGESGeom_SurfaceOfRevolution)

def Handle_IGESGeom_SurfaceOfRevolution_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DownCast(thing)
Handle_IGESGeom_SurfaceOfRevolution_DownCast = _IGESGeom.Handle_IGESGeom_SurfaceOfRevolution_DownCast

class Handle_IGESGeom_Line(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Line self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Line_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Line self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Line_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Line self, IGESGeom_Line thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Line_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Line self, Handle_IGESGeom_Line theHandle) -> Handle_IGESGeom_Line
        assign(Handle_IGESGeom_Line self, IGESGeom_Line thePtr) -> Handle_IGESGeom_Line
        assign(Handle_IGESGeom_Line self, Handle_IGESGeom_Line theHandle) -> Handle_IGESGeom_Line

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Line_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Line self) -> IGESGeom_Line

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Line_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Line self) -> IGESGeom_Line

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Line___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Line self) -> IGESGeom_Line

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Line___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Line___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Line___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Line(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Line_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Line

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Line self, gp_XYZ aStart, gp_XYZ anEnd)

        This method is used to set the fields of the class Line
        - aStart : Start point of the line
        - anEnd  : End point of the line

        :type aStart: OCC.wrapper.gp.gp_XYZ
        :type anEnd: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.Handle_IGESGeom_Line_Init(self, *args)


    def Infinite(self, *args):
        """
        Infinite(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the Infinite status i.e. the Form Number : 0 1 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_Infinite(self, *args)


    def SetInfinite(self, *args):
        """
        SetInfinite(Handle_IGESGeom_Line self, Standard_Integer const status)

        Sets the Infinite status
        Does nothing if <status> is not 0 1 or 2

        :type status: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_SetInfinite(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(Handle_IGESGeom_Line self) -> gp_Pnt

        returns the start point of the line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Line_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(Handle_IGESGeom_Line self) -> gp_Pnt

        returns the start point of the line after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Line_TransformedStartPoint(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(Handle_IGESGeom_Line self) -> gp_Pnt

        returns the end point of the line

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Line_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(Handle_IGESGeom_Line self) -> gp_Pnt

        returns the end point of the line after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Line_TransformedEndPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Line self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Line_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Line_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Line_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Line self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Line_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Line self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Line self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Line self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Line self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Line self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Line_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Line self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Line self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Line_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Line self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Line self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Line_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Line self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Line self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Line self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Line self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Line self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Line self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Line self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Line self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Line self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Line self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Line_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Line self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Line_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Line self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Line self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Line self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Line_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Line self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Line self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Line self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Line self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Line self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Line self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Line self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Line self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Line self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Line self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Line self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Line self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Line_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Line self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Line_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Line self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Line_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Line self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Line self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Line_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Line self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Line self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Line_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Line self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Line self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Line self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Line self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Line self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Line self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Line self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Line_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Line self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Line self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Line self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Line self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Line_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Line self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Line_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Line self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Line_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Line self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Line self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Line self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Line self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Line_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Line self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Line_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Line self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Line self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Line_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Line self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Line_DecrementRefCounter(self, *args)

Handle_IGESGeom_Line_swigregister = _IGESGeom.Handle_IGESGeom_Line_swigregister
Handle_IGESGeom_Line_swigregister(Handle_IGESGeom_Line)

def Handle_IGESGeom_Line_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Line_DownCast(thing)
Handle_IGESGeom_Line_DownCast = _IGESGeom.Handle_IGESGeom_Line_DownCast

class IGESGeom_ToolLine(object):
    """
    Tool to work on a Line. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolLine self) -> IGESGeom_ToolLine

        Returns a ToolLine, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolLine_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolLine_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Line <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolLine_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolLine_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolLine_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolLine self, Handle_IGESGeom_Line entfrom, Handle_IGESGeom_Line entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolLine_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolLine self, Handle_IGESGeom_Line ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolLine_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolLine
IGESGeom_ToolLine_swigregister = _IGESGeom.IGESGeom_ToolLine_swigregister
IGESGeom_ToolLine_swigregister(IGESGeom_ToolLine)

class IGESGeom_Plane(IGESData.IGESData_IGESEntity):
    """
    defines IGESPlane, Type <108> Form <-1,0,1>
    in package IGESGeom
    A plane entity can be used to represent unbounded plane,
    as well as bounded portion of a plane. In either of the
    above cases the plane is defined within definition space
    by means of coefficients A, B, C, D where at least one of
    A, B, C is non-zero and  A * XT + B * YT + C * ZT = D
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Plane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Plane(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Plane self) -> IGESGeom_Plane

        defines IGESPlane, Type <108> Form <-1,0,1>
        in package IGESGeom
        A plane entity can be used to represent unbounded plane,
        as well as bounded portion of a plane. In either of the
        above cases the plane is defined within definition space
        by means of coefficients A, B, C, D where at least one of
        A, B, C is non-zero and  A * XT + B * YT + C * ZT = D
        """
        this = _IGESGeom.new_IGESGeom_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_Plane self, Standard_Real const A, Standard_Real const B, Standard_Real const C, Standard_Real const D, Handle_IGESData_IGESEntity aCurve, gp_XYZ attach, Standard_Real const aSize)

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type attach: OCC.wrapper.gp.gp_XYZ
        :type aSize: float

        """
        return _IGESGeom.IGESGeom_Plane_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESGeom_Plane self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of Bound :
        0 no Bound, 1 (External) Bound, -1 Hole)
        Remark that Init keeps this Value and must be consistent :
        aCurve Null if FormNumber = 0, Non-Null else
        Error if not in ranges [0-1] or [10-12]

        :type form: int

        """
        return _IGESGeom.IGESGeom_Plane_SetFormNumber(self, *args)


    def Equation(self, *args):
        """
        Equation(IGESGeom_Plane self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _IGESGeom.IGESGeom_Plane_Equation(self, *args)


    def TransformedEquation(self, *args):
        """
        TransformedEquation(IGESGeom_Plane self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _IGESGeom.IGESGeom_Plane_TransformedEquation(self, *args)


    def HasBoundingCurve(self, *args):
        """
        HasBoundingCurve(IGESGeom_Plane self) -> Standard_Boolean

        returns True if there exists a bounding curve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_Plane_HasBoundingCurve(self, *args)


    def HasBoundingCurveHole(self, *args):
        """
        HasBoundingCurveHole(IGESGeom_Plane self) -> Standard_Boolean

        returns True if bounding curve exists and bounded portion is negative

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_Plane_HasBoundingCurveHole(self, *args)


    def BoundingCurve(self, *args):
        """
        BoundingCurve(IGESGeom_Plane self) -> Handle_IGESData_IGESEntity

        returns Optional Bounding Curve, can be positive (normal clipping)
        or negative (hole) according to Form Number

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_Plane_BoundingCurve(self, *args)


    def HasSymbolAttach(self, *args):
        """
        HasSymbolAttach(IGESGeom_Plane self) -> Standard_Boolean

        returns True if SymbolSize() > 0, False if SymbolSize() = 0

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_Plane_HasSymbolAttach(self, *args)


    def SymbolAttach(self, *args):
        """
        SymbolAttach(IGESGeom_Plane self) -> gp_Pnt

        returns (X, Y, Z) if symbol exists else returns (0, 0, 0)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Plane_SymbolAttach(self, *args)


    def TransformedSymbolAttach(self, *args):
        """
        TransformedSymbolAttach(IGESGeom_Plane self) -> gp_Pnt

        returns (X, Y, Z) if symbol exists after applying Transf. Matrix
        else returns (0, 0, 0)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_Plane_TransformedSymbolAttach(self, *args)


    def SymbolSize(self, *args):
        """
        SymbolSize(IGESGeom_Plane self) -> Standard_Real

        Size of optional display symbol

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_Plane_SymbolSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Plane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Plane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Plane
IGESGeom_Plane_swigregister = _IGESGeom.IGESGeom_Plane_swigregister
IGESGeom_Plane_swigregister(IGESGeom_Plane)

def IGESGeom_Plane_get_type_name(*args):
    """
    IGESGeom_Plane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Plane_get_type_name(*args)

def IGESGeom_Plane_get_type_descriptor(*args):
    """
    IGESGeom_Plane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Plane_get_type_descriptor(*args)

class IGESGeom_CompositeCurve(IGESData.IGESData_IGESEntity):
    """
    defines IGESCompositeCurve, Type <102> Form <0>
    in package IGESGeom
    A composite curve is defined as an ordered list of entities
    consisting of a point, connect point and parametrised curve
    entities (excluding the CompositeCurve entity).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_CompositeCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_CompositeCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_CompositeCurve self) -> IGESGeom_CompositeCurve

        defines IGESCompositeCurve, Type <102> Form <0>
        in package IGESGeom
        A composite curve is defined as an ordered list of entities
        consisting of a point, connect point and parametrised curve
        entities (excluding the CompositeCurve entity).
        """
        this = _IGESGeom.new_IGESGeom_CompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_CompositeCurve self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class
        CompositeCurve
        - allEntities : Constituent Entities of the composite curve

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESGeom.IGESGeom_CompositeCurve_Init(self, *args)


    def NbCurves(self, *args):
        """
        NbCurves(IGESGeom_CompositeCurve self) -> Standard_Integer

        returns the number of curves contained in the CompositeCurve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_CompositeCurve_NbCurves(self, *args)


    def Curve(self, *args):
        """
        Curve(IGESGeom_CompositeCurve self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Component of the CompositeCurve (a curve or a point)
        raises exception if Index <= 0 or Index > NbCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.IGESGeom_CompositeCurve_Curve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_CompositeCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_CompositeCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_CompositeCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_CompositeCurve
IGESGeom_CompositeCurve_swigregister = _IGESGeom.IGESGeom_CompositeCurve_swigregister
IGESGeom_CompositeCurve_swigregister(IGESGeom_CompositeCurve)

def IGESGeom_CompositeCurve_get_type_name(*args):
    """
    IGESGeom_CompositeCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_CompositeCurve_get_type_name(*args)

def IGESGeom_CompositeCurve_get_type_descriptor(*args):
    """
    IGESGeom_CompositeCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_CompositeCurve_get_type_descriptor(*args)

class IGESGeom_ToolFlash(object):
    """
    Tool to work on a Flash. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolFlash self) -> IGESGeom_ToolFlash

        Returns a ToolFlash, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolFlash(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolFlash_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolFlash_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Flash <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolFlash_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Flash
        (LineFont in Directory Entry forced to Rank = 1)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolFlash_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolFlash_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolFlash_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash entfrom, Handle_IGESGeom_Flash entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolFlash_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolFlash self, Handle_IGESGeom_Flash ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Flash
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolFlash_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolFlash
IGESGeom_ToolFlash_swigregister = _IGESGeom.IGESGeom_ToolFlash_swigregister
IGESGeom_ToolFlash_swigregister(IGESGeom_ToolFlash)

class IGESGeom_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Geom File Access Module for IGESGeom (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_ReadWriteModule self) -> IGESGeom_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESGeom.new_IGESGeom_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESGeom_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESGeom

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESGeom

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ReadWriteModule
IGESGeom_ReadWriteModule_swigregister = _IGESGeom.IGESGeom_ReadWriteModule_swigregister
IGESGeom_ReadWriteModule_swigregister(IGESGeom_ReadWriteModule)

def IGESGeom_ReadWriteModule_get_type_name(*args):
    """
    IGESGeom_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_ReadWriteModule_get_type_name(*args)

def IGESGeom_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESGeom_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_ReadWriteModule_get_type_descriptor(*args)

class Handle_IGESGeom_OffsetCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_OffsetCurve self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_OffsetCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_OffsetCurve self, IGESGeom_OffsetCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_OffsetCurve self, Handle_IGESGeom_OffsetCurve theHandle) -> Handle_IGESGeom_OffsetCurve
        assign(Handle_IGESGeom_OffsetCurve self, IGESGeom_OffsetCurve thePtr) -> Handle_IGESGeom_OffsetCurve
        assign(Handle_IGESGeom_OffsetCurve self, Handle_IGESGeom_OffsetCurve theHandle) -> Handle_IGESGeom_OffsetCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_OffsetCurve self) -> IGESGeom_OffsetCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_OffsetCurve self) -> IGESGeom_OffsetCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_OffsetCurve self) -> IGESGeom_OffsetCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_OffsetCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_OffsetCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_OffsetCurve_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_OffsetCurve

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity aBaseCurve, Standard_Integer const anOffsetType, Handle_IGESData_IGESEntity aFunction, Standard_Integer const aFunctionCoord, Standard_Integer const aTaperedOffsetType, Standard_Real const offDistance1, Standard_Real const arcLength1, Standard_Real const offDistance2, Standard_Real const arcLength2, gp_XYZ aNormalVec, Standard_Real const anOffsetParam, Standard_Real const anotherOffsetParam)

        This method is used to set the fields of the class
        OffsetCurve
        - aBaseCurve         : The curve entity to be offset
        - anOffsetType       : Offset distance flag
        1 = Single value, uniform distance
        2 = Varying linearly
        3 = As a specified function
        - aFunction          : Curve entity, one coordinate of which
        describes offset as a function of its
        parameter (0 unless OffsetType = 3)
        - aFunctionCoord     : Particular coordinate of curve
        describing offset as function of its
        parameters. (used if OffsetType = 3)
        - aTaperedOffsetType : Tapered offset type flag
        1 = Function of arc length
        2 = Function of parameter
        (Only used if OffsetType = 2 or 3)
        - offDistance1       : First offset distance
        (Only used if OffsetType = 1 or 2)
        - arcLength1         : Arc length or parameter value of
        first offset distance
        (Only used if OffsetType = 2)
        - offDistance2       : Second offset distance
        - arcLength2         : Arc length or parameter value of
        second offset distance
        (Only used if OffsetType = 2)
        - aNormalVec         : Unit vector normal to plane containing
        curve to be offset
        - anOffsetParam      : Start parameter value of offset curve
        - anotherOffsetParam : End parameter value of offset curve

        :type aBaseCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anOffsetType: int
        :type aFunction: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFunctionCoord: int
        :type aTaperedOffsetType: int
        :type offDistance1: float
        :type arcLength1: float
        :type offDistance2: float
        :type arcLength2: float
        :type aNormalVec: OCC.wrapper.gp.gp_XYZ
        :type anOffsetParam: float
        :type anotherOffsetParam: float

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Init(self, *args)


    def BaseCurve(self, *args):
        """
        BaseCurve(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        returns the curve to be offset

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_BaseCurve(self, *args)


    def OffsetType(self, *args):
        """
        OffsetType(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        returns the offset distance flag
        1 = Single value offset (uniform distance)
        2 = Offset distance varying linearly
        3 = Offset distance specified as a function

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_OffsetType(self, *args)


    def Function(self, *args):
        """
        Function(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        returns the function defining the offset if at all the offset
        is described as a function or Null Handle.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Function(self, *args)


    def HasFunction(self, *args):
        """
        HasFunction(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        returns True if function defining the offset is present.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasFunction(self, *args)


    def FunctionParameter(self, *args):
        """
        FunctionParameter(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        returns particular coordinate of the curve which describes offset
        as a function of its parameters. (only used if OffsetType() = 3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_FunctionParameter(self, *args)


    def TaperedOffsetType(self, *args):
        """
        TaperedOffsetType(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        returns tapered offset type flag (only used if OffsetType() = 2 or 3)
        1 = Function of arc length
        2 = Function of parameter

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_TaperedOffsetType(self, *args)


    def FirstOffsetDistance(self, *args):
        """
        FirstOffsetDistance(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns first offset distance (only used if OffsetType() = 1 or 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_FirstOffsetDistance(self, *args)


    def ArcLength1(self, *args):
        """
        ArcLength1(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns arc length or parameter value (depending on value of
        offset distance flag) of first offset distance
        (only used if OffsetType() = 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ArcLength1(self, *args)


    def SecondOffsetDistance(self, *args):
        """
        SecondOffsetDistance(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns the second offset distance

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SecondOffsetDistance(self, *args)


    def ArcLength2(self, *args):
        """
        ArcLength2(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns arc length or parameter value (depending on value of
        offset distance flag) of second offset distance
        (only used if OffsetType() = 2)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ArcLength2(self, *args)


    def NormalVector(self, *args):
        """
        NormalVector(Handle_IGESGeom_OffsetCurve self) -> gp_Vec

        returns unit vector normal to plane containing curve to be offset

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NormalVector(self, *args)


    def TransformedNormalVector(self, *args):
        """
        TransformedNormalVector(Handle_IGESGeom_OffsetCurve self) -> gp_Vec

        returns unit vector normal to plane containing curve to be offset
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_TransformedNormalVector(self, *args)


    def Parameters(self, *args):
        """
        Parameters(Handle_IGESGeom_OffsetCurve self)

        :type StartParam: float
        :type EndParam: float

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Parameters(self, *args)


    def StartParameter(self, *args):
        """
        StartParameter(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns Start Parameter value of the offset curve

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_StartParameter(self, *args)


    def EndParameter(self, *args):
        """
        EndParameter(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        returns End   Parameter value of the offset curve

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_EndParameter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_OffsetCurve self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_OffsetCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_OffsetCurve self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_OffsetCurve self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_OffsetCurve self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_OffsetCurve self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_OffsetCurve self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_OffsetCurve self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_OffsetCurve self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_OffsetCurve self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_OffsetCurve self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_OffsetCurve self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_OffsetCurve self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_OffsetCurve self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_OffsetCurve self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_OffsetCurve self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_OffsetCurve self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_OffsetCurve self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_OffsetCurve self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_OffsetCurve self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_OffsetCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_OffsetCurve self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_OffsetCurve self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_OffsetCurve self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_OffsetCurve self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_OffsetCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_OffsetCurve self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_OffsetCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_OffsetCurve_DecrementRefCounter(self, *args)

Handle_IGESGeom_OffsetCurve_swigregister = _IGESGeom.Handle_IGESGeom_OffsetCurve_swigregister
Handle_IGESGeom_OffsetCurve_swigregister(Handle_IGESGeom_OffsetCurve)

def Handle_IGESGeom_OffsetCurve_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_OffsetCurve_DownCast(thing)
Handle_IGESGeom_OffsetCurve_DownCast = _IGESGeom.Handle_IGESGeom_OffsetCurve_DownCast

class IGESGeom_ToolTrimmedSurface(object):
    """
    Tool to work on a TrimmedSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolTrimmedSurface self) -> IGESGeom_ToolTrimmedSurface

        Returns a ToolTrimmedSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TrimmedSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface entfrom, Handle_IGESGeom_TrimmedSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolTrimmedSurface self, Handle_IGESGeom_TrimmedSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolTrimmedSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolTrimmedSurface
IGESGeom_ToolTrimmedSurface_swigregister = _IGESGeom.IGESGeom_ToolTrimmedSurface_swigregister
IGESGeom_ToolTrimmedSurface_swigregister(IGESGeom_ToolTrimmedSurface)

class Handle_IGESGeom_HArray1OfBoundary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_HArray1OfBoundary self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_HArray1OfBoundary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_HArray1OfBoundary self, IGESGeom_HArray1OfBoundary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_HArray1OfBoundary self, Handle_IGESGeom_HArray1OfBoundary theHandle) -> Handle_IGESGeom_HArray1OfBoundary
        assign(Handle_IGESGeom_HArray1OfBoundary self, IGESGeom_HArray1OfBoundary thePtr) -> Handle_IGESGeom_HArray1OfBoundary
        assign(Handle_IGESGeom_HArray1OfBoundary self, Handle_IGESGeom_HArray1OfBoundary theHandle) -> Handle_IGESGeom_HArray1OfBoundary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_HArray1OfBoundary self) -> IGESGeom_HArray1OfBoundary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_HArray1OfBoundary self) -> IGESGeom_HArray1OfBoundary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_HArray1OfBoundary self) -> IGESGeom_HArray1OfBoundary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_HArray1OfBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_HArray1OfBoundary_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_HArray1OfBoundary

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfBoundary

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGeom_HArray1OfBoundary self) -> NCollection_Array1_Handle_IGESGeom_Boundary

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfBoundary

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_HArray1OfBoundary self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_HArray1OfBoundary self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_HArray1OfBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_HArray1OfBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_HArray1OfBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_HArray1OfBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_HArray1OfBoundary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_HArray1OfBoundary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_HArray1OfBoundary self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_HArray1OfBoundary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_DecrementRefCounter(self, *args)

Handle_IGESGeom_HArray1OfBoundary_swigregister = _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_swigregister
Handle_IGESGeom_HArray1OfBoundary_swigregister(Handle_IGESGeom_HArray1OfBoundary)

def Handle_IGESGeom_HArray1OfBoundary_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_DownCast(thing)
Handle_IGESGeom_HArray1OfBoundary_DownCast = _IGESGeom.Handle_IGESGeom_HArray1OfBoundary_DownCast

class NCollection_Array1_Handle_IGESGeom_CurveOnSurface(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGeom.new_NCollection_Array1_Handle_IGESGeom_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, Handle_IGESGeom_CurveOnSurface theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface
        assign(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESGeom_CurveOnSurface

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESGeom_CurveOnSurface

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, Standard_Integer const theIndex) -> Handle_IGESGeom_CurveOnSurface

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, Standard_Integer const theIndex, Handle_IGESGeom_CurveOnSurface theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGeom_CurveOnSurface self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_Resize(self, *args)

    __swig_destroy__ = _IGESGeom.delete_NCollection_Array1_Handle_IGESGeom_CurveOnSurface
NCollection_Array1_Handle_IGESGeom_CurveOnSurface_swigregister = _IGESGeom.NCollection_Array1_Handle_IGESGeom_CurveOnSurface_swigregister
NCollection_Array1_Handle_IGESGeom_CurveOnSurface_swigregister(NCollection_Array1_Handle_IGESGeom_CurveOnSurface)


try:
	IGESGeom_Array1OfCurveOnSurface = NCollection_Array1_Handle_IGESGeom_CurveOnSurface
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESGeom_TabulatedCylinder(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_TabulatedCylinder self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_TabulatedCylinder self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_TabulatedCylinder self, IGESGeom_TabulatedCylinder thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder theHandle) -> Handle_IGESGeom_TabulatedCylinder
        assign(Handle_IGESGeom_TabulatedCylinder self, IGESGeom_TabulatedCylinder thePtr) -> Handle_IGESGeom_TabulatedCylinder
        assign(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder theHandle) -> Handle_IGESGeom_TabulatedCylinder

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_TabulatedCylinder self) -> IGESGeom_TabulatedCylinder

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_TabulatedCylinder self) -> IGESGeom_TabulatedCylinder

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_TabulatedCylinder self) -> IGESGeom_TabulatedCylinder

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_TabulatedCylinder___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_TabulatedCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_TabulatedCylinder_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_TabulatedCylinder

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity aDirectrix, gp_XYZ anEnd)

        This method is used to set the fields of the class
        TabulatedCylinder
        - aDirectrix : Directrix Curve of the tabulated cylinder
        - anEnd      : Coordinates of the terminate point of the
        generatrix
        The start point of the directrix is identical to the start
        point of the generatrix

        :type aDirectrix: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type anEnd: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Init(self, *args)


    def Directrix(self, *args):
        """
        Directrix(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_IGESEntity

        returns the directrix curve of the tabulated cylinder

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Directrix(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(Handle_IGESGeom_TabulatedCylinder self) -> gp_Pnt

        returns end point of generatrix of the tabulated cylinder

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(Handle_IGESGeom_TabulatedCylinder self) -> gp_Pnt

        returns end point of generatrix of the tabulated cylinder
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_TransformedEndPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_TabulatedCylinder self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TabulatedCylinder_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_TabulatedCylinder self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_TabulatedCylinder self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_TabulatedCylinder self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_TabulatedCylinder self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_TabulatedCylinder self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_TabulatedCylinder self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_TabulatedCylinder self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_TabulatedCylinder self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_TabulatedCylinder self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_TabulatedCylinder self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_TabulatedCylinder self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_TabulatedCylinder self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_TabulatedCylinder self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_TabulatedCylinder self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_TabulatedCylinder self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_TabulatedCylinder self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_TabulatedCylinder self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_TabulatedCylinder self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_TabulatedCylinder self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_TabulatedCylinder self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_TabulatedCylinder self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_TabulatedCylinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_TabulatedCylinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_TabulatedCylinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_TabulatedCylinder self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_TabulatedCylinder self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DecrementRefCounter(self, *args)

Handle_IGESGeom_TabulatedCylinder_swigregister = _IGESGeom.Handle_IGESGeom_TabulatedCylinder_swigregister
Handle_IGESGeom_TabulatedCylinder_swigregister(Handle_IGESGeom_TabulatedCylinder)

def Handle_IGESGeom_TabulatedCylinder_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DownCast(thing)
Handle_IGESGeom_TabulatedCylinder_DownCast = _IGESGeom.Handle_IGESGeom_TabulatedCylinder_DownCast

class Handle_IGESGeom_HArray1OfTransformationMatrix(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_HArray1OfTransformationMatrix self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_HArray1OfTransformationMatrix self, IGESGeom_HArray1OfTransformationMatrix thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_HArray1OfTransformationMatrix self, Handle_IGESGeom_HArray1OfTransformationMatrix theHandle) -> Handle_IGESGeom_HArray1OfTransformationMatrix
        assign(Handle_IGESGeom_HArray1OfTransformationMatrix self, IGESGeom_HArray1OfTransformationMatrix thePtr) -> Handle_IGESGeom_HArray1OfTransformationMatrix
        assign(Handle_IGESGeom_HArray1OfTransformationMatrix self, Handle_IGESGeom_HArray1OfTransformationMatrix theHandle) -> Handle_IGESGeom_HArray1OfTransformationMatrix

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> IGESGeom_HArray1OfTransformationMatrix

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> IGESGeom_HArray1OfTransformationMatrix

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> IGESGeom_HArray1OfTransformationMatrix

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_HArray1OfTransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_HArray1OfTransformationMatrix

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfTransformationMatrix

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfTransformationMatrix

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_HArray1OfTransformationMatrix self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_HArray1OfTransformationMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_HArray1OfTransformationMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_HArray1OfTransformationMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_HArray1OfTransformationMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_HArray1OfTransformationMatrix self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_HArray1OfTransformationMatrix self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_DecrementRefCounter(self, *args)

Handle_IGESGeom_HArray1OfTransformationMatrix_swigregister = _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_swigregister
Handle_IGESGeom_HArray1OfTransformationMatrix_swigregister(Handle_IGESGeom_HArray1OfTransformationMatrix)

def Handle_IGESGeom_HArray1OfTransformationMatrix_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_DownCast(thing)
Handle_IGESGeom_HArray1OfTransformationMatrix_DownCast = _IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix_DownCast

class Handle_IGESGeom_ConicArc(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_ConicArc self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_ConicArc self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_ConicArc self, IGESGeom_ConicArc thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_ConicArc self, Handle_IGESGeom_ConicArc theHandle) -> Handle_IGESGeom_ConicArc
        assign(Handle_IGESGeom_ConicArc self, IGESGeom_ConicArc thePtr) -> Handle_IGESGeom_ConicArc
        assign(Handle_IGESGeom_ConicArc self, Handle_IGESGeom_ConicArc theHandle) -> Handle_IGESGeom_ConicArc

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_ConicArc self) -> IGESGeom_ConicArc

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_ConicArc self) -> IGESGeom_ConicArc

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_ConicArc self) -> IGESGeom_ConicArc

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_ConicArc___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_ConicArc___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_ConicArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_ConicArc_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_ConicArc

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_ConicArc self, Standard_Real const A, Standard_Real const B, Standard_Real const C, Standard_Real const D, Standard_Real const E, Standard_Real const F, Standard_Real const ZT, gp_XY aStart, gp_XY anEnd)

        This method is used to set the fields of the class
        ConicalArc
        - A, B, C, D, E, F : Coefficients of the equation
        defining conic arc
        - ZT               : Parallel ZT displacement of the arc
        from XT, YT plane.
        - aStart           : Starting point of the conic arc
        - anEnd            : End point of the conic arc

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type E: float
        :type F: float
        :type ZT: float
        :type aStart: OCC.wrapper.gp.gp_XY
        :type anEnd: OCC.wrapper.gp.gp_XY

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        sets the Form Number equal to ComputedFormNumber,
        returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_OwnCorrect(self, *args)


    def ComputedFormNumber(self, *args):
        """
        ComputedFormNumber(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Computes the Form Number according to the equation
        1 for Ellipse, 2 for Hyperbola, 3 for Parabola

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ComputedFormNumber(self, *args)


    def Equation(self, *args):
        """
        Equation(Handle_IGESGeom_ConicArc self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type E: float
        :type F: float

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Equation(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(Handle_IGESGeom_ConicArc self) -> Standard_Real

        returns the Z displacement of the arc from XT, YT plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ZPlane(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(Handle_IGESGeom_ConicArc self) -> gp_Pnt2d

        returns the starting point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(Handle_IGESGeom_ConicArc self) -> gp_Pnt

        returns the starting point of the arc after applying
        Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TransformedStartPoint(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(Handle_IGESGeom_ConicArc self) -> gp_Pnt2d

        returns the end point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(Handle_IGESGeom_ConicArc self) -> gp_Pnt

        returns the end point of the arc after applying
        Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TransformedEndPoint(self, *args)


    def IsFromEllipse(self, *args):
        """
        IsFromEllipse(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is an ellipse

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsFromEllipse(self, *args)


    def IsFromParabola(self, *args):
        """
        IsFromParabola(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is a parabola

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsFromParabola(self, *args)


    def IsFromHyperbola(self, *args):
        """
        IsFromHyperbola(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if parent conic curve is a hyperbola

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsFromHyperbola(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if StartPoint = EndPoint

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsClosed(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESGeom_ConicArc self) -> gp_Dir

        Z-Axis of conic (i.e. [0,0,1])

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESGeom_ConicArc self) -> gp_Dir

        Z-Axis after applying Trans. Matrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TransformedAxis(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_IGESGeom_ConicArc self, gp_Pnt Center, gp_Dir MainAxis)

        Returns a Definition computed from equation, easier to use
        <Center> : the center of the the conic (meaningless for
        a parabola) (defined with Z displacement)
        <MainAxis> : the Main Axis of the conic (for a Circle,
        arbitrary the X Axis)
        <Rmin,Rmax> : Minor and Major Radii of the conic
        For a Circle, Rmin = Rmax,
        For a Parabola, Rmin = Rmax = the Focal
        Warning : the basic definition (by equation) is not very stable,
        limit cases may be approximative

        :type Center: OCC.wrapper.gp.gp_Pnt
        :type MainAxis: OCC.wrapper.gp.gp_Dir
        :type rmin: float
        :type rmax: float

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Definition(self, *args)


    def TransformedDefinition(self, *args):
        """
        TransformedDefinition(Handle_IGESGeom_ConicArc self, gp_Pnt Center, gp_Dir MainAxis)

        Same as Definition, but the Location is applied on the
        Center and the MainAxis

        :type Center: OCC.wrapper.gp.gp_Pnt
        :type MainAxis: OCC.wrapper.gp.gp_Dir
        :type rmin: float
        :type rmax: float

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TransformedDefinition(self, *args)


    def ComputedDefinition(self, *args):
        """
        ComputedDefinition(Handle_IGESGeom_ConicArc self)

        Computes and returns the coordinates of the definition of
        a comic from its equation. Used by Definition &
        TransformedDefinition, or may be called directly if needed

        :type Xcen: float
        :type Ycen: float
        :type Xax: float
        :type Yax: float
        :type Rmin: float
        :type Rmax: float

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ComputedDefinition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_ConicArc self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_ConicArc_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_ConicArc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_ConicArc self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_ConicArc self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_ConicArc self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_ConicArc self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_ConicArc self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_ConicArc self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_ConicArc self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_ConicArc self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_ConicArc self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_ConicArc self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_ConicArc self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_ConicArc self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_ConicArc self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_ConicArc self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_ConicArc self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_ConicArc self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_ConicArc self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_ConicArc self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_ConicArc self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_ConicArc self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_ConicArc self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_ConicArc self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_ConicArc self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_ConicArc self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_ConicArc self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_ConicArc self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_ConicArc self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_ConicArc self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_ConicArc self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_ConicArc self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_ConicArc self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_ConicArc self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_ConicArc self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_ConicArc self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_ConicArc self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_ConicArc self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_ConicArc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_ConicArc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_ConicArc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_ConicArc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_ConicArc self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_ConicArc self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_ConicArc self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ConicArc_DecrementRefCounter(self, *args)

Handle_IGESGeom_ConicArc_swigregister = _IGESGeom.Handle_IGESGeom_ConicArc_swigregister
Handle_IGESGeom_ConicArc_swigregister(Handle_IGESGeom_ConicArc)

def Handle_IGESGeom_ConicArc_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_ConicArc_DownCast(thing)
Handle_IGESGeom_ConicArc_DownCast = _IGESGeom.Handle_IGESGeom_ConicArc_DownCast

class IGESGeom_HArray1OfCurveOnSurface(NCollection_Array1_Handle_IGESGeom_CurveOnSurface, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_HArray1OfCurveOnSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_HArray1OfCurveOnSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_HArray1OfCurveOnSurface self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGeom_HArray1OfCurveOnSurface
        __init__(IGESGeom_HArray1OfCurveOnSurface self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGeom_CurveOnSurface theValue) -> IGESGeom_HArray1OfCurveOnSurface
        __init__(IGESGeom_HArray1OfCurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> IGESGeom_HArray1OfCurveOnSurface

        :type theOther: OCC.wrapper.IGESGeom.IGESGeom_Array1OfCurveOnSurface

        """
        this = _IGESGeom.new_IGESGeom_HArray1OfCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfCurveOnSurface

        """
        res = _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfCurveOnSurface

        """
        return _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_HArray1OfCurveOnSurface
IGESGeom_HArray1OfCurveOnSurface_swigregister = _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_swigregister
IGESGeom_HArray1OfCurveOnSurface_swigregister(IGESGeom_HArray1OfCurveOnSurface)

def IGESGeom_HArray1OfCurveOnSurface_get_type_name(*args):
    """
    IGESGeom_HArray1OfCurveOnSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_get_type_name(*args)

def IGESGeom_HArray1OfCurveOnSurface_get_type_descriptor(*args):
    """
    IGESGeom_HArray1OfCurveOnSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_HArray1OfCurveOnSurface_get_type_descriptor(*args)

class IGESGeom_ToolCircularArc(object):
    """
    Tool to work on a CircularArc. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolCircularArc self) -> IGESGeom_ToolCircularArc

        Returns a ToolCircularArc, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolCircularArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CircularArc <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc entfrom, Handle_IGESGeom_CircularArc entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolCircularArc self, Handle_IGESGeom_CircularArc ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolCircularArc_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolCircularArc
IGESGeom_ToolCircularArc_swigregister = _IGESGeom.IGESGeom_ToolCircularArc_swigregister
IGESGeom_ToolCircularArc_swigregister(IGESGeom_ToolCircularArc)

class Handle_IGESGeom_CurveOnSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_CurveOnSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_CurveOnSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_CurveOnSurface self, IGESGeom_CurveOnSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_CurveOnSurface self, Handle_IGESGeom_CurveOnSurface theHandle) -> Handle_IGESGeom_CurveOnSurface
        assign(Handle_IGESGeom_CurveOnSurface self, IGESGeom_CurveOnSurface thePtr) -> Handle_IGESGeom_CurveOnSurface
        assign(Handle_IGESGeom_CurveOnSurface self, Handle_IGESGeom_CurveOnSurface theHandle) -> Handle_IGESGeom_CurveOnSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_CurveOnSurface self) -> IGESGeom_CurveOnSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_CurveOnSurface self) -> IGESGeom_CurveOnSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_CurveOnSurface self) -> IGESGeom_CurveOnSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_CurveOnSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_CurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_CurveOnSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_CurveOnSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_CurveOnSurface self, Standard_Integer const aMode, Handle_IGESData_IGESEntity aSurface, Handle_IGESData_IGESEntity aCurveUV, Handle_IGESData_IGESEntity aCurve3D, Standard_Integer const aPreference)

        This method is used to set the fields of the class
        CurveOnSurface
        - aMode       : Way the curve on the surface has been created
        - aSurface    : Surface on which the curve lies
        - aCurveUV    : Curve S (UV)
        - aCurve3D    : Curve C (3D)
        - aPreference : 0 = Unspecified
        1 = S o B is preferred
        2 = C is preferred
        3 = C and S o B are equally preferred

        :type aMode: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aCurveUV: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aCurve3D: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aPreference: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Init(self, *args)


    def CreationMode(self, *args):
        """
        CreationMode(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        returns the mode in which the curve is created on the surface
        0 = Unspecified
        1 = Projection of a given curve on the surface
        2 = Intersection of two surfaces
        3 = Isoparametric curve, i.e:- either a `u` parametric
        or a `v` parametric curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_CreationMode(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns the surface on which the curve lies

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Surface(self, *args)


    def CurveUV(self, *args):
        """
        CurveUV(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns curve S

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_CurveUV(self, *args)


    def Curve3D(self, *args):
        """
        Curve3D(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        returns curve C

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Curve3D(self, *args)


    def PreferenceMode(self, *args):
        """
        PreferenceMode(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        returns preference mode
        0 = Unspecified
        1 = S o B is preferred
        2 = C is preferred
        3 = C and S o B are equally preferred

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_PreferenceMode(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_CurveOnSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CurveOnSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_CurveOnSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_CurveOnSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_CurveOnSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_CurveOnSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_CurveOnSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_CurveOnSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_CurveOnSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_CurveOnSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_CurveOnSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_CurveOnSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_CurveOnSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_CurveOnSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_CurveOnSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_CurveOnSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_CurveOnSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_CurveOnSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_CurveOnSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_CurveOnSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_CurveOnSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_CurveOnSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_CurveOnSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_CurveOnSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_CurveOnSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_CurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_CurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_CurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_CurveOnSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_CurveOnSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_CurveOnSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_CurveOnSurface_swigregister = _IGESGeom.Handle_IGESGeom_CurveOnSurface_swigregister
Handle_IGESGeom_CurveOnSurface_swigregister(Handle_IGESGeom_CurveOnSurface)

def Handle_IGESGeom_CurveOnSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_CurveOnSurface_DownCast(thing)
Handle_IGESGeom_CurveOnSurface_DownCast = _IGESGeom.Handle_IGESGeom_CurveOnSurface_DownCast

class IGESGeom_TransformationMatrix(IGESData.IGESData_TransfEntity):
    """
    defines IGESTransformationMatrix, Type <124> Form <0>
    in package IGESGeom
    The transformation matrix entity transforms three-row column
    vectors by means of matrix multiplication and then a vector
    addition. This entity can be considered as an "operator"
    entity in that it starts with the input vector, operates on
    it as described above, and produces the output vector.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_TransformationMatrix
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_TransformationMatrix(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_TransformationMatrix self) -> IGESGeom_TransformationMatrix

        defines IGESTransformationMatrix, Type <124> Form <0>
        in package IGESGeom
        The transformation matrix entity transforms three-row column
        vectors by means of matrix multiplication and then a vector
        addition. This entity can be considered as an "operator"
        entity in that it starts with the input vector, operates on
        it as described above, and produces the output vector.
        """
        this = _IGESGeom.new_IGESGeom_TransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_TransformationMatrix self, Handle_TColStd_HArray2OfReal aMatrix)

        This method is used to set the fields of the class
        TransformationMatrix
        - aMatrix : 3 x 4 array containing elements of the
        transformation matrix
        raises exception if aMatrix is not 3 x 4 array

        :type aMatrix: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESGeom_TransformationMatrix self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of Transf :
        Transformation 0-1 or Coordinate System 10-11-12)
        Error if not in ranges [0-1] or [10-12]

        :type form: int

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_SetFormNumber(self, *args)


    def Data(self, *args):
        """
        Data(IGESGeom_TransformationMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real

        returns individual Data
        Errro if I not in [1-3] or J not in [1-4]

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_Data(self, *args)


    def Value(self, *args):
        """
        Value(IGESGeom_TransformationMatrix self) -> gp_GTrsf

        returns the transformation matrix
        4th row elements of GTrsf will always be 0, 0, 0, 1 (not defined)

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_TransformationMatrix_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_TransformationMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_TransformationMatrix
IGESGeom_TransformationMatrix_swigregister = _IGESGeom.IGESGeom_TransformationMatrix_swigregister
IGESGeom_TransformationMatrix_swigregister(IGESGeom_TransformationMatrix)

def IGESGeom_TransformationMatrix_get_type_name(*args):
    """
    IGESGeom_TransformationMatrix_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_TransformationMatrix_get_type_name(*args)

def IGESGeom_TransformationMatrix_get_type_descriptor(*args):
    """
    IGESGeom_TransformationMatrix_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_TransformationMatrix_get_type_descriptor(*args)

class Handle_IGESGeom_BoundedSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_BoundedSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_BoundedSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_BoundedSurface self, IGESGeom_BoundedSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_BoundedSurface self, Handle_IGESGeom_BoundedSurface theHandle) -> Handle_IGESGeom_BoundedSurface
        assign(Handle_IGESGeom_BoundedSurface self, IGESGeom_BoundedSurface thePtr) -> Handle_IGESGeom_BoundedSurface
        assign(Handle_IGESGeom_BoundedSurface self, Handle_IGESGeom_BoundedSurface theHandle) -> Handle_IGESGeom_BoundedSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_BoundedSurface self) -> IGESGeom_BoundedSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_BoundedSurface self) -> IGESGeom_BoundedSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_BoundedSurface self) -> IGESGeom_BoundedSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_BoundedSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_BoundedSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_BoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_BoundedSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_BoundedSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_BoundedSurface self, Standard_Integer const aType, Handle_IGESData_IGESEntity aSurface, Handle_IGESGeom_HArray1OfBoundary allBounds)

        This method is used to set the fields of the class
        BoundedSurface
        - aType     : Type of bounded surface representation
        - aSurface  : Surface entity to be bounded
        - allBounds : Array of boundary entities

        :type aType: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allBounds: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfBoundary

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Init(self, *args)


    def RepresentationType(self, *args):
        """
        RepresentationType(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        returns the type of Bounded surface representation
        0 = The boundary entities may only reference model space curves
        1 = The boundary entities may reference both model space curves
        and associated parameter space curve representations

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_RepresentationType(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_IGESEntity

        returns the bounded surface

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Surface(self, *args)


    def NbBoundaries(self, *args):
        """
        NbBoundaries(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        returns the number of boundaries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NbBoundaries(self, *args)


    def Boundary(self, *args):
        """
        Boundary(Handle_IGESGeom_BoundedSurface self, Standard_Integer const Index) -> Handle_IGESGeom_Boundary

        returns boundary entity
        raises exception if Index <= 0 or Index > NbBoundaries()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Boundary(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_BoundedSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BoundedSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_BoundedSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_BoundedSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_BoundedSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_BoundedSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_BoundedSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_BoundedSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_BoundedSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_BoundedSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_BoundedSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_BoundedSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_BoundedSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_BoundedSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_BoundedSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_BoundedSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_BoundedSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_BoundedSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_BoundedSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_BoundedSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_BoundedSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_BoundedSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_BoundedSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_BoundedSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_BoundedSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_BoundedSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_BoundedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_BoundedSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_BoundedSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_BoundedSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_BoundedSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_BoundedSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_BoundedSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_BoundedSurface_swigregister = _IGESGeom.Handle_IGESGeom_BoundedSurface_swigregister
Handle_IGESGeom_BoundedSurface_swigregister(Handle_IGESGeom_BoundedSurface)

def Handle_IGESGeom_BoundedSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_BoundedSurface_DownCast(thing)
Handle_IGESGeom_BoundedSurface_DownCast = _IGESGeom.Handle_IGESGeom_BoundedSurface_DownCast

class IGESGeom_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESGeom"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_Protocol self) -> IGESGeom_Protocol

        Description of Protocol for IGESGeom
        """
        this = _IGESGeom.new_IGESGeom_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESGeom_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESBasic)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESGeom_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGeom.IGESGeom_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESGeom_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_Protocol
IGESGeom_Protocol_swigregister = _IGESGeom.IGESGeom_Protocol_swigregister
IGESGeom_Protocol_swigregister(IGESGeom_Protocol)

def IGESGeom_Protocol_get_type_name(*args):
    """
    IGESGeom_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_Protocol_get_type_name(*args)

def IGESGeom_Protocol_get_type_descriptor(*args):
    """
    IGESGeom_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_Protocol_get_type_descriptor(*args)

class IGESGeom_SplineSurface(IGESData.IGESData_IGESEntity):
    """
    defines IGESSplineSurface, Type <114> Form <0>
    in package IGESGeom
    A parametric spline surface is a grid of polynomial
    patches. Patch could be of the type Linear, Quadratic,
    Cubic, Wilson-Fowler, Modified Wilson-Fowler, B-Spline
    The M * N grid of patches is defined by the 'u' break
    points TU(1), TU(2), ..., TU(M+1) and the 'v' break
    points TV(1), TV(2), TV(3) ..., TV(N+1).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_SplineSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_SplineSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_SplineSurface self) -> IGESGeom_SplineSurface

        defines IGESSplineSurface, Type <114> Form <0>
        in package IGESGeom
        A parametric spline surface is a grid of polynomial
        patches. Patch could be of the type Linear, Quadratic,
        Cubic, Wilson-Fowler, Modified Wilson-Fowler, B-Spline
        The M * N grid of patches is defined by the 'u' break
        points TU(1), TU(2), ..., TU(M+1) and the 'v' break
        points TV(1), TV(2), TV(3) ..., TV(N+1).
        """
        this = _IGESGeom.new_IGESGeom_SplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_SplineSurface self, Standard_Integer const aBoundaryType, Standard_Integer const aPatchType, Handle_TColStd_HArray1OfReal allUBreakpoints, Handle_TColStd_HArray1OfReal allVBreakpoints, Handle_IGESBasic_HArray2OfHArray1OfReal allXCoeffs, Handle_IGESBasic_HArray2OfHArray1OfReal allYCoeffs, Handle_IGESBasic_HArray2OfHArray1OfReal allZCoeffs)

        This method is used to set the fields of the class
        SplineSurface
        - aBoundaryType   : Type of Spline boundary
        1 = Linear
        2 = Quadratic
        3 = Cubic
        4 = Wilson-Fowler
        5 = Modified Wilson-Fowler
        6 = B-spline
        - aPatchType      : Type of patch contained in the grid
        1 = Cartesian Product
        0 = Unspecified
        - allUBreakpoints : u values of grid lines
        - allVBreakpoints : v values of grid lines
        - allXCoeffs      : X coefficients of M x N patches
        - allYCoeffs      : Y coefficients of M x N patches
        - allZCoeffs      : Z coefficients of M x N patches
        raises exception if allXCoeffs, allYCoeffs & allZCoeffs are not
        of the same size.
        or if the size of each element of the double array is not 16

        :type aBoundaryType: int
        :type aPatchType: int
        :type allUBreakpoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allVBreakpoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allXCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type allYCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type allZCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineSurface_Init(self, *args)


    def NbUSegments(self, *args):
        """
        NbUSegments(IGESGeom_SplineSurface self) -> Standard_Integer

        returns the number of U segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineSurface_NbUSegments(self, *args)


    def NbVSegments(self, *args):
        """
        NbVSegments(IGESGeom_SplineSurface self) -> Standard_Integer

        returns the number of V segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineSurface_NbVSegments(self, *args)


    def BoundaryType(self, *args):
        """
        BoundaryType(IGESGeom_SplineSurface self) -> Standard_Integer

        returns boundary type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineSurface_BoundaryType(self, *args)


    def PatchType(self, *args):
        """
        PatchType(IGESGeom_SplineSurface self) -> Standard_Integer

        returns patch type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_SplineSurface_PatchType(self, *args)


    def UBreakPoint(self, *args):
        """
        UBreakPoint(IGESGeom_SplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns U break point of the grid line referred to by anIndex
        raises exception if anIndex <= 0 or anIndex > NbUSegments() + 1

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_SplineSurface_UBreakPoint(self, *args)


    def VBreakPoint(self, *args):
        """
        VBreakPoint(IGESGeom_SplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns V break point of the grid line referred to by anIndex
        raises exception if anIndex <= 0 or anIndex > NbVSegments() + 1

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_SplineSurface_VBreakPoint(self, *args)


    def XPolynomial(self, *args):
        """
        XPolynomial(IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns X polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineSurface_XPolynomial(self, *args)


    def YPolynomial(self, *args):
        """
        YPolynomial(IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns Y polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineSurface_YPolynomial(self, *args)


    def ZPolynomial(self, *args):
        """
        ZPolynomial(IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns Z polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineSurface_ZPolynomial(self, *args)


    def Polynomials(self, *args):
        """
        Polynomials(IGESGeom_SplineSurface self, Handle_IGESBasic_HArray2OfHArray1OfReal XCoef, Handle_IGESBasic_HArray2OfHArray1OfReal YCoef, Handle_IGESBasic_HArray2OfHArray1OfReal ZCoef)

        returns in one all the polynomial values "in bulk"
        usefull for massive treatements

        :type XCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type YCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type ZCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal

        """
        return _IGESGeom.IGESGeom_SplineSurface_Polynomials(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_SplineSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_SplineSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_SplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_SplineSurface
IGESGeom_SplineSurface_swigregister = _IGESGeom.IGESGeom_SplineSurface_swigregister
IGESGeom_SplineSurface_swigregister(IGESGeom_SplineSurface)

def IGESGeom_SplineSurface_get_type_name(*args):
    """
    IGESGeom_SplineSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_SplineSurface_get_type_name(*args)

def IGESGeom_SplineSurface_get_type_descriptor(*args):
    """
    IGESGeom_SplineSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_SplineSurface_get_type_descriptor(*args)

class IGESGeom_ToolPlane(object):
    """
    Tool to work on a Plane. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolPlane self) -> IGESGeom_ToolPlane

        Returns a ToolPlane, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolPlane_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolPlane_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Plane <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolPlane_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolPlane_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolPlane_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane entfrom, Handle_IGESGeom_Plane entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolPlane_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolPlane self, Handle_IGESGeom_Plane ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolPlane_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolPlane
IGESGeom_ToolPlane_swigregister = _IGESGeom.IGESGeom_ToolPlane_swigregister
IGESGeom_ToolPlane_swigregister(IGESGeom_ToolPlane)

class IGESGeom_ToolTransformationMatrix(object):
    """
    Tool to work on a TransformationMatrix. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolTransformationMatrix self) -> IGESGeom_ToolTransformationMatrix

        Returns a ToolTransformationMatrix, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolTransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TransformationMatrix <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a TransformationMatrix
        (FormNumber if 0 or 1, recomputed according Positive/Negative)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix entfrom, Handle_IGESGeom_TransformationMatrix entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolTransformationMatrix self, Handle_IGESGeom_TransformationMatrix ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolTransformationMatrix_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolTransformationMatrix
IGESGeom_ToolTransformationMatrix_swigregister = _IGESGeom.IGESGeom_ToolTransformationMatrix_swigregister
IGESGeom_ToolTransformationMatrix_swigregister(IGESGeom_ToolTransformationMatrix)

class IGESGeom_ToolSplineSurface(object):
    """
    Tool to work on a SplineSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolSplineSurface self) -> IGESGeom_ToolSplineSurface

        Returns a ToolSplineSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SplineSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface entfrom, Handle_IGESGeom_SplineSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolSplineSurface self, Handle_IGESGeom_SplineSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolSplineSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolSplineSurface
IGESGeom_ToolSplineSurface_swigregister = _IGESGeom.IGESGeom_ToolSplineSurface_swigregister
IGESGeom_ToolSplineSurface_swigregister(IGESGeom_ToolSplineSurface)

class IGESGeom_ToolPoint(object):
    """
    Tool to work on a Point. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolPoint self) -> IGESGeom_ToolPoint

        Returns a ToolPoint, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolPoint_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolPoint_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Point <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolPoint_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolPoint_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolPoint_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolPoint self, Handle_IGESGeom_Point entfrom, Handle_IGESGeom_Point entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolPoint_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolPoint self, Handle_IGESGeom_Point ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolPoint_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolPoint
IGESGeom_ToolPoint_swigregister = _IGESGeom.IGESGeom_ToolPoint_swigregister
IGESGeom_ToolPoint_swigregister(IGESGeom_ToolPoint)

class IGESGeom_ToolBoundedSurface(object):
    """
    Tool to work on a BoundedSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolBoundedSurface self) -> IGESGeom_ToolBoundedSurface

        Returns a ToolBoundedSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a BoundedSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface entfrom, Handle_IGESGeom_BoundedSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolBoundedSurface self, Handle_IGESGeom_BoundedSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolBoundedSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolBoundedSurface
IGESGeom_ToolBoundedSurface_swigregister = _IGESGeom.IGESGeom_ToolBoundedSurface_swigregister
IGESGeom_ToolBoundedSurface_swigregister(IGESGeom_ToolBoundedSurface)

class IGESGeom_ToolOffsetCurve(object):
    """
    Tool to work on a OffsetCurve. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolOffsetCurve self) -> IGESGeom_ToolOffsetCurve

        Returns a ToolOffsetCurve, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolOffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent, Interface_EntityIterator iter)

        Lists the Entities shared by a OffsetCurve <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a OffsetCurve
        (if OffsetType is not 3, OffsetFunction is cleared)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve entfrom, Handle_IGESGeom_OffsetCurve entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolOffsetCurve self, Handle_IGESGeom_OffsetCurve ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolOffsetCurve_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolOffsetCurve
IGESGeom_ToolOffsetCurve_swigregister = _IGESGeom.IGESGeom_ToolOffsetCurve_swigregister
IGESGeom_ToolOffsetCurve_swigregister(IGESGeom_ToolOffsetCurve)

class IGESGeom_ToolDirection(object):
    """
    Tool to work on a Direction. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolDirection self) -> IGESGeom_ToolDirection

        Returns a ToolDirection, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolDirection_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolDirection_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Direction <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolDirection_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolDirection_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolDirection_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction entfrom, Handle_IGESGeom_Direction entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolDirection_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolDirection self, Handle_IGESGeom_Direction ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolDirection_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolDirection
IGESGeom_ToolDirection_swigregister = _IGESGeom.IGESGeom_ToolDirection_swigregister
IGESGeom_ToolDirection_swigregister(IGESGeom_ToolDirection)

class IGESGeom_ToolBSplineSurface(object):
    """
    Tool to work on a BSplineSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolBSplineSurface self) -> IGESGeom_ToolBSplineSurface

        Returns a ToolBSplineSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a BSplineSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface entfrom, Handle_IGESGeom_BSplineSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolBSplineSurface self, Handle_IGESGeom_BSplineSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolBSplineSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolBSplineSurface
IGESGeom_ToolBSplineSurface_swigregister = _IGESGeom.IGESGeom_ToolBSplineSurface_swigregister
IGESGeom_ToolBSplineSurface_swigregister(IGESGeom_ToolBSplineSurface)

class Handle_IGESGeom_CompositeCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_CompositeCurve self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_CompositeCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_CompositeCurve self, IGESGeom_CompositeCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_CompositeCurve self, Handle_IGESGeom_CompositeCurve theHandle) -> Handle_IGESGeom_CompositeCurve
        assign(Handle_IGESGeom_CompositeCurve self, IGESGeom_CompositeCurve thePtr) -> Handle_IGESGeom_CompositeCurve
        assign(Handle_IGESGeom_CompositeCurve self, Handle_IGESGeom_CompositeCurve theHandle) -> Handle_IGESGeom_CompositeCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_CompositeCurve self) -> IGESGeom_CompositeCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_CompositeCurve self) -> IGESGeom_CompositeCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_CompositeCurve self) -> IGESGeom_CompositeCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_CompositeCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_CompositeCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_CompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_CompositeCurve_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_CompositeCurve

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class
        CompositeCurve
        - allEntities : Constituent Entities of the composite curve

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Init(self, *args)


    def NbCurves(self, *args):
        """
        NbCurves(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        returns the number of curves contained in the CompositeCurve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NbCurves(self, *args)


    def Curve(self, *args):
        """
        Curve(Handle_IGESGeom_CompositeCurve self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Component of the CompositeCurve (a curve or a point)
        raises exception if Index <= 0 or Index > NbCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Curve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_CompositeCurve self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CompositeCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CompositeCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_CompositeCurve self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_CompositeCurve self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_CompositeCurve self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_CompositeCurve self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_CompositeCurve self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_CompositeCurve self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_CompositeCurve self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_CompositeCurve self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_CompositeCurve self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_CompositeCurve self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_CompositeCurve self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_CompositeCurve self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_CompositeCurve self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_CompositeCurve self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_CompositeCurve self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_CompositeCurve self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_CompositeCurve self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_CompositeCurve self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_CompositeCurve self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_CompositeCurve self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_CompositeCurve self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_CompositeCurve self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_CompositeCurve self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_CompositeCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_CompositeCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_CompositeCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_CompositeCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_CompositeCurve self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_CompositeCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CompositeCurve_DecrementRefCounter(self, *args)

Handle_IGESGeom_CompositeCurve_swigregister = _IGESGeom.Handle_IGESGeom_CompositeCurve_swigregister
Handle_IGESGeom_CompositeCurve_swigregister(Handle_IGESGeom_CompositeCurve)

def Handle_IGESGeom_CompositeCurve_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_CompositeCurve_DownCast(thing)
Handle_IGESGeom_CompositeCurve_DownCast = _IGESGeom.Handle_IGESGeom_CompositeCurve_DownCast

class Handle_IGESGeom_CircularArc(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_CircularArc self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_CircularArc self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_CircularArc self, IGESGeom_CircularArc thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_CircularArc self, Handle_IGESGeom_CircularArc theHandle) -> Handle_IGESGeom_CircularArc
        assign(Handle_IGESGeom_CircularArc self, IGESGeom_CircularArc thePtr) -> Handle_IGESGeom_CircularArc
        assign(Handle_IGESGeom_CircularArc self, Handle_IGESGeom_CircularArc theHandle) -> Handle_IGESGeom_CircularArc

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_CircularArc self) -> IGESGeom_CircularArc

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_CircularArc self) -> IGESGeom_CircularArc

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_CircularArc self) -> IGESGeom_CircularArc

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_CircularArc___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_CircularArc___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_CircularArc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_CircularArc_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_CircularArc

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_CircularArc self, Standard_Real const aZT, gp_XY aCenter, gp_XY aStart, gp_XY anEnd)

        This method is used to set the fields of the class
        CircularArc
        - aZT     : Shift above the Z plane
        - aCenter : Center of the circle of which the arc forms a part
        - aStart  : Starting point of the circular arc
        - anEnd   : Ending point of the circular arc

        :type aZT: float
        :type aCenter: OCC.wrapper.gp.gp_XY
        :type aStart: OCC.wrapper.gp.gp_XY
        :type anEnd: OCC.wrapper.gp.gp_XY

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Init(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the center of the circle of which arc forms a part

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESGeom_CircularArc self) -> gp_Pnt

        returns the center of the circle of which arc forms a part
        after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TransformedCenter(self, *args)


    def StartPoint(self, *args):
        """
        StartPoint(Handle_IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the start point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_StartPoint(self, *args)


    def TransformedStartPoint(self, *args):
        """
        TransformedStartPoint(Handle_IGESGeom_CircularArc self) -> gp_Pnt

        returns the start point of the arc after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TransformedStartPoint(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(Handle_IGESGeom_CircularArc self) -> Standard_Real

        returns the parallel displacement of the plane containing the
        arc from the XT, YT plane

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_ZPlane(self, *args)


    def EndPoint(self, *args):
        """
        EndPoint(Handle_IGESGeom_CircularArc self) -> gp_Pnt2d

        returns the end point of the arc

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_EndPoint(self, *args)


    def TransformedEndPoint(self, *args):
        """
        TransformedEndPoint(Handle_IGESGeom_CircularArc self) -> gp_Pnt

        returns the end point of the arc after applying Transf. Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TransformedEndPoint(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESGeom_CircularArc self) -> Standard_Real

        returns the radius of the circle of which arc forms a part

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Radius(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_IGESGeom_CircularArc self) -> Standard_Real

        returns the angle subtended by the arc at the center in radians

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Angle(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESGeom_CircularArc self) -> gp_Dir

        Z-Axis of circle (i.e. [0,0,1])

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESGeom_CircularArc self) -> gp_Dir

        Z-Axis after applying Trans. Matrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TransformedAxis(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        True if StartPoint = EndPoint

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IsClosed(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_CircularArc self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CircularArc_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CircularArc_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_CircularArc self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_CircularArc self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_CircularArc self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_CircularArc self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_CircularArc self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_CircularArc self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_CircularArc self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_CircularArc self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_CircularArc self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_CircularArc self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_CircularArc self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_CircularArc self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_CircularArc self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_CircularArc self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_CircularArc self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_CircularArc self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_CircularArc self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_CircularArc self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_CircularArc self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_CircularArc self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_CircularArc self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_CircularArc self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_CircularArc self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_CircularArc self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_CircularArc self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_CircularArc self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_CircularArc self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_CircularArc self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_CircularArc self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_CircularArc self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_CircularArc self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_CircularArc self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_CircularArc self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_CircularArc self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_CircularArc self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_CircularArc self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_CircularArc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_CircularArc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_CircularArc self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_CircularArc self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_CircularArc self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_CircularArc self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_CircularArc self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CircularArc_DecrementRefCounter(self, *args)

Handle_IGESGeom_CircularArc_swigregister = _IGESGeom.Handle_IGESGeom_CircularArc_swigregister
Handle_IGESGeom_CircularArc_swigregister(Handle_IGESGeom_CircularArc)

def Handle_IGESGeom_CircularArc_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_CircularArc_DownCast(thing)
Handle_IGESGeom_CircularArc_DownCast = _IGESGeom.Handle_IGESGeom_CircularArc_DownCast

class IGESGeom_ToolRuledSurface(object):
    """
    Tool to work on a RuledSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolRuledSurface self) -> IGESGeom_ToolRuledSurface

        Returns a ToolRuledSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolRuledSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a RuledSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface entfrom, Handle_IGESGeom_RuledSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolRuledSurface self, Handle_IGESGeom_RuledSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolRuledSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolRuledSurface
IGESGeom_ToolRuledSurface_swigregister = _IGESGeom.IGESGeom_ToolRuledSurface_swigregister
IGESGeom_ToolRuledSurface_swigregister(IGESGeom_ToolRuledSurface)

class Handle_IGESGeom_Boundary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Boundary self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Boundary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Boundary self, IGESGeom_Boundary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Boundary self, Handle_IGESGeom_Boundary theHandle) -> Handle_IGESGeom_Boundary
        assign(Handle_IGESGeom_Boundary self, IGESGeom_Boundary thePtr) -> Handle_IGESGeom_Boundary
        assign(Handle_IGESGeom_Boundary self, Handle_IGESGeom_Boundary theHandle) -> Handle_IGESGeom_Boundary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Boundary self) -> IGESGeom_Boundary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Boundary self) -> IGESGeom_Boundary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Boundary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Boundary self) -> IGESGeom_Boundary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Boundary___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Boundary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Boundary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Boundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Boundary_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Boundary

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Boundary self, Standard_Integer const aType, Standard_Integer const aPreference, Handle_IGESData_IGESEntity aSurface, Handle_IGESData_HArray1OfIGESEntity allModelCurves, Handle_TColStd_HArray1OfInteger allSenses, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity allParameterCurves)

        This method is used to set the fields of the class
        Boundary
        - aType              : Type of bounded surface representation
        - aPreference        : Preferred representation of
        Trimming Curve
        - aSurface           : Untrimmed surface to be bounded
        - allModelCurves     : Model Space Curves
        - allSenses          : Orientation flags of all Model Space
        Curves
        - allParameterCurves : Parameter Space Curves
        raises exception if allSenses, allModelCurves and
        allParameterCurves do not have same dimensions

        :type aType: int
        :type aPreference: int
        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allModelCurves: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allSenses: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allParameterCurves: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Init(self, *args)


    def BoundaryType(self, *args):
        """
        BoundaryType(Handle_IGESGeom_Boundary self) -> Standard_Integer

        returns type of bounded surface representation
        0 = Boundary entities may only reference model space trimming
        curves. Associated surface representation may be parametric
        1 = Boundary entities must reference model space curves and
        associated parameter space curve collections. Associated
        surface must be a parametric representation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_BoundaryType(self, *args)


    def PreferenceType(self, *args):
        """
        PreferenceType(Handle_IGESGeom_Boundary self) -> Standard_Integer

        returns preferred representation of trimming curves
        0 = Unspecified
        1 = Model space
        2 = Parameter space
        3 = Representations are of equal preference

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_PreferenceType(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESGeom_Boundary self) -> Handle_IGESData_IGESEntity

        returns the surface to be bounded

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Surface(self, *args)


    def NbModelSpaceCurves(self, *args):
        """
        NbModelSpaceCurves(Handle_IGESGeom_Boundary self) -> Standard_Integer

        returns the number of model space curves

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbModelSpaceCurves(self, *args)


    def ModelSpaceCurve(self, *args):
        """
        ModelSpaceCurve(Handle_IGESGeom_Boundary self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Model Space Curve
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ModelSpaceCurve(self, *args)


    def Sense(self, *args):
        """
        Sense(Handle_IGESGeom_Boundary self, Standard_Integer const Index) -> Standard_Integer

        returns the sense of a particular model space curve
        1 = model curve direction does not need reversal
        2 = model curve direction needs to be reversed
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Sense(self, *args)


    def NbParameterCurves(self, *args):
        """
        NbParameterCurves(Handle_IGESGeom_Boundary self, Standard_Integer const Index) -> Standard_Integer

        returns the number of parameter curves associated with one
        model space curve referred to by Index
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbParameterCurves(self, *args)


    def ParameterCurves(self, *args):
        """
        ParameterCurves(Handle_IGESGeom_Boundary self, Standard_Integer const Index) -> Handle_IGESData_HArray1OfIGESEntity

        returns an array of parameter space curves associated with
        a model space curve referred to by the Index
        raises exception if Index <= 0 or Index > NbModelSpaceCurves()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ParameterCurves(self, *args)


    def ParameterCurve(self, *args):
        """
        ParameterCurve(Handle_IGESGeom_Boundary self, Standard_Integer const Index, Standard_Integer const Num) -> Handle_IGESData_IGESEntity

        returns an individual parameter curve
        raises exception if Index or Num is out of range

        :type Index: int
        :type Num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ParameterCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Boundary self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Boundary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Boundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Boundary self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Boundary self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Boundary self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Boundary self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Boundary self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Boundary self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Boundary self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Boundary self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Boundary self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Boundary self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Boundary self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Boundary self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Boundary self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Boundary self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Boundary self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Boundary self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Boundary self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Boundary self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Boundary self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Boundary self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Boundary self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Boundary self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Boundary self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Boundary self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Boundary self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Boundary self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Boundary self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Boundary self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Boundary self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Boundary self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Boundary self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Boundary self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Boundary self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Boundary self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Boundary self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Boundary self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Boundary self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Boundary self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Boundary self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Boundary self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Boundary self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Boundary self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Boundary self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Boundary self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Boundary self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Boundary self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Boundary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Boundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Boundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Boundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Boundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Boundary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Boundary self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Boundary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Boundary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Boundary_DecrementRefCounter(self, *args)

Handle_IGESGeom_Boundary_swigregister = _IGESGeom.Handle_IGESGeom_Boundary_swigregister
Handle_IGESGeom_Boundary_swigregister(Handle_IGESGeom_Boundary)

def Handle_IGESGeom_Boundary_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Boundary_DownCast(thing)
Handle_IGESGeom_Boundary_DownCast = _IGESGeom.Handle_IGESGeom_Boundary_DownCast

class IGESGeom_ToolOffsetSurface(object):
    """
    Tool to work on a OffsetSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolOffsetSurface self) -> IGESGeom_ToolOffsetSurface

        Returns a ToolOffsetSurface, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolOffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a OffsetSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface entfrom, Handle_IGESGeom_OffsetSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolOffsetSurface self, Handle_IGESGeom_OffsetSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolOffsetSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolOffsetSurface
IGESGeom_ToolOffsetSurface_swigregister = _IGESGeom.IGESGeom_ToolOffsetSurface_swigregister
IGESGeom_ToolOffsetSurface_swigregister(IGESGeom_ToolOffsetSurface)

class Handle_IGESGeom_HArray1OfCurveOnSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_HArray1OfCurveOnSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_HArray1OfCurveOnSurface self, IGESGeom_HArray1OfCurveOnSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_HArray1OfCurveOnSurface self, Handle_IGESGeom_HArray1OfCurveOnSurface theHandle) -> Handle_IGESGeom_HArray1OfCurveOnSurface
        assign(Handle_IGESGeom_HArray1OfCurveOnSurface self, IGESGeom_HArray1OfCurveOnSurface thePtr) -> Handle_IGESGeom_HArray1OfCurveOnSurface
        assign(Handle_IGESGeom_HArray1OfCurveOnSurface self, Handle_IGESGeom_HArray1OfCurveOnSurface theHandle) -> Handle_IGESGeom_HArray1OfCurveOnSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> IGESGeom_HArray1OfCurveOnSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> IGESGeom_HArray1OfCurveOnSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> IGESGeom_HArray1OfCurveOnSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_HArray1OfCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_HArray1OfCurveOnSurface

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfCurveOnSurface

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        :rtype: OCC.wrapper.IGESGeom.IGESGeom_Array1OfCurveOnSurface

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> NCollection_Array1< opencascade::handle< IGESGeom_CurveOnSurface > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_IGESGeom_HArray1OfCurveOnSurface self, Handle_IGESGeom_CurveOnSurface theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_IGESGeom_HArray1OfCurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_IGESGeom_HArray1OfCurveOnSurface self, NCollection_Array1_Handle_IGESGeom_CurveOnSurface theOther) -> NCollection_Array1_Handle_IGESGeom_CurveOnSurface

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Handle_IGESGeom_CurveOnSurface

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Handle_IGESGeom_CurveOnSurface

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_IGESGeom_HArray1OfCurveOnSurface self, Standard_Integer const theIndex) -> Handle_IGESGeom_CurveOnSurface

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESGeom_HArray1OfCurveOnSurface self, Standard_Integer const theIndex, Handle_IGESGeom_CurveOnSurface theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_IGESGeom_HArray1OfCurveOnSurface self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_HArray1OfCurveOnSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_HArray1OfCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_HArray1OfCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_HArray1OfCurveOnSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_HArray1OfCurveOnSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_HArray1OfCurveOnSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_HArray1OfCurveOnSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_HArray1OfCurveOnSurface_swigregister = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_swigregister
Handle_IGESGeom_HArray1OfCurveOnSurface_swigregister(Handle_IGESGeom_HArray1OfCurveOnSurface)

def Handle_IGESGeom_HArray1OfCurveOnSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_DownCast(thing)
Handle_IGESGeom_HArray1OfCurveOnSurface_DownCast = _IGESGeom.Handle_IGESGeom_HArray1OfCurveOnSurface_DownCast

class IGESGeom_CopiousData(IGESData.IGESData_IGESEntity):
    """
    defines IGESCopiousData, Type <106> Form <1-3,11-13,63>
    in package IGESGeom
    This entity stores data points in the form of pairs,
    triples, or sextuples. An interpretation flag value
    signifies which of these forms is being used.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_CopiousData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_CopiousData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_CopiousData self) -> IGESGeom_CopiousData

        defines IGESCopiousData, Type <106> Form <1-3,11-13,63>
        in package IGESGeom
        This entity stores data points in the form of pairs,
        triples, or sextuples. An interpretation flag value
        signifies which of these forms is being used.
        """
        this = _IGESGeom.new_IGESGeom_CopiousData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGeom_CopiousData self, Standard_Integer const aDataType, Standard_Real const aZPlane, Handle_TColStd_HArray1OfReal allData)

        This method is used to set the fields of the class
        CopiousData
        - aDataType : Specifies whether data is a pair or a triple
        or a sextuple.
        - aZPlane   : Common Z value for all points if datatype = 1
        - allData   : Data to be read in groups of 2, 3 or 6

        :type aDataType: int
        :type aZPlane: float
        :type allData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.IGESGeom_CopiousData_Init(self, *args)


    def SetPolyline(self, *args):
        """
        SetPolyline(IGESGeom_CopiousData self, Standard_Boolean const mode)

        Sets Copious Data to be a Polyline if <mode> is True
        (Form = 11-12-13) or a Set of Points else (Form 1-2-3)

        :type mode: bool

        """
        return _IGESGeom.IGESGeom_CopiousData_SetPolyline(self, *args)


    def SetClosedPath2D(self, *args):
        """
        SetClosedPath2D(IGESGeom_CopiousData self)

        Sets Copious Data to be a Closed Path 2D (Form 63)
        Warning : DataType is not checked and must be set to ONE by Init


        """
        return _IGESGeom.IGESGeom_CopiousData_SetClosedPath2D(self, *args)


    def IsPointSet(self, *args):
        """
        IsPointSet(IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Set of Points (Form 1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_CopiousData_IsPointSet(self, *args)


    def IsPolyline(self, *args):
        """
        IsPolyline(IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Polyline (Form 11-12-13)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_CopiousData_IsPolyline(self, *args)


    def IsClosedPath2D(self, *args):
        """
        IsClosedPath2D(IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Closed Path 2D (Form 63)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_CopiousData_IsClosedPath2D(self, *args)


    def DataType(self, *args):
        """
        DataType(IGESGeom_CopiousData self) -> Standard_Integer

        returns data type
        1 = XY ( with common Z given by plane)
        2 = XYZ ( point)
        3 = XYZ + Vec(XYZ) (point + normal vector)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_CopiousData_DataType(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(IGESGeom_CopiousData self) -> Standard_Integer

        returns the number of tuples

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.IGESGeom_CopiousData_NbPoints(self, *args)


    def Data(self, *args):
        """
        Data(IGESGeom_CopiousData self, Standard_Integer const NumPoint, Standard_Integer const NumData) -> Standard_Real

        Returns an individual Data, given the N0 of the Point
        and the B0 of the Coordinate (according DataType)

        :type NumPoint: int
        :type NumData: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_CopiousData_Data(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(IGESGeom_CopiousData self) -> Standard_Real

        If datatype = 1, then returns common z value for all data
        else returns 0

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.IGESGeom_CopiousData_ZPlane(self, *args)


    def Point(self, *args):
        """
        Point(IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Pnt

        returns the coordinates of the point specified by the anIndex
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_CopiousData_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Pnt

        returns the coordinates of the point specified by the anIndex
        after applying Transf. Matrix
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.IGESGeom_CopiousData_TransformedPoint(self, *args)


    def Vector(self, *args):
        """
        Vector(IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Vec

        returns i, j, k values if 3-tuple else returns (0, 0, 0)
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_CopiousData_Vector(self, *args)


    def TransformedVector(self, *args):
        """
        TransformedVector(IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Vec

        returns transformed vector if 3-tuple else returns (0, 0, 0)
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.IGESGeom_CopiousData_TransformedVector(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_CopiousData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_CopiousData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_CopiousData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_CopiousData
IGESGeom_CopiousData_swigregister = _IGESGeom.IGESGeom_CopiousData_swigregister
IGESGeom_CopiousData_swigregister(IGESGeom_CopiousData)

def IGESGeom_CopiousData_get_type_name(*args):
    """
    IGESGeom_CopiousData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_CopiousData_get_type_name(*args)

def IGESGeom_CopiousData_get_type_descriptor(*args):
    """
    IGESGeom_CopiousData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_CopiousData_get_type_descriptor(*args)

class IGESGeom_ToolSurfaceOfRevolution(object):
    """
    Tool to work on a SurfaceOfRevolution. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolSurfaceOfRevolution self) -> IGESGeom_ToolSurfaceOfRevolution

        Returns a ToolSurfaceOfRevolution, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SurfaceOfRevolution <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution entfrom, Handle_IGESGeom_SurfaceOfRevolution entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolSurfaceOfRevolution self, Handle_IGESGeom_SurfaceOfRevolution ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolSurfaceOfRevolution
IGESGeom_ToolSurfaceOfRevolution_swigregister = _IGESGeom.IGESGeom_ToolSurfaceOfRevolution_swigregister
IGESGeom_ToolSurfaceOfRevolution_swigregister(IGESGeom_ToolSurfaceOfRevolution)

class Handle_IGESGeom_CopiousData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_CopiousData self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_CopiousData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_CopiousData self, IGESGeom_CopiousData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_CopiousData self, Handle_IGESGeom_CopiousData theHandle) -> Handle_IGESGeom_CopiousData
        assign(Handle_IGESGeom_CopiousData self, IGESGeom_CopiousData thePtr) -> Handle_IGESGeom_CopiousData
        assign(Handle_IGESGeom_CopiousData self, Handle_IGESGeom_CopiousData theHandle) -> Handle_IGESGeom_CopiousData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_CopiousData self) -> IGESGeom_CopiousData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_CopiousData self) -> IGESGeom_CopiousData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_CopiousData self) -> IGESGeom_CopiousData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_CopiousData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_CopiousData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_CopiousData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_CopiousData_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_CopiousData

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_CopiousData self, Standard_Integer const aDataType, Standard_Real const aZPlane, Handle_TColStd_HArray1OfReal allData)

        This method is used to set the fields of the class
        CopiousData
        - aDataType : Specifies whether data is a pair or a triple
        or a sextuple.
        - aZPlane   : Common Z value for all points if datatype = 1
        - allData   : Data to be read in groups of 2, 3 or 6

        :type aDataType: int
        :type aZPlane: float
        :type allData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Init(self, *args)


    def SetPolyline(self, *args):
        """
        SetPolyline(Handle_IGESGeom_CopiousData self, Standard_Boolean const mode)

        Sets Copious Data to be a Polyline if <mode> is True
        (Form = 11-12-13) or a Set of Points else (Form 1-2-3)

        :type mode: bool

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SetPolyline(self, *args)


    def SetClosedPath2D(self, *args):
        """
        SetClosedPath2D(Handle_IGESGeom_CopiousData self)

        Sets Copious Data to be a Closed Path 2D (Form 63)
        Warning : DataType is not checked and must be set to ONE by Init


        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SetClosedPath2D(self, *args)


    def IsPointSet(self, *args):
        """
        IsPointSet(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Set of Points (Form 1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsPointSet(self, *args)


    def IsPolyline(self, *args):
        """
        IsPolyline(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Polyline (Form 11-12-13)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsPolyline(self, *args)


    def IsClosedPath2D(self, *args):
        """
        IsClosedPath2D(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if <me> is a Closed Path 2D (Form 63)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsClosedPath2D(self, *args)


    def DataType(self, *args):
        """
        DataType(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        returns data type
        1 = XY ( with common Z given by plane)
        2 = XYZ ( point)
        3 = XYZ + Vec(XYZ) (point + normal vector)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DataType(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        returns the number of tuples

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NbPoints(self, *args)


    def Data(self, *args):
        """
        Data(Handle_IGESGeom_CopiousData self, Standard_Integer const NumPoint, Standard_Integer const NumData) -> Standard_Real

        Returns an individual Data, given the N0 of the Point
        and the B0 of the Coordinate (according DataType)

        :type NumPoint: int
        :type NumData: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Data(self, *args)


    def ZPlane(self, *args):
        """
        ZPlane(Handle_IGESGeom_CopiousData self) -> Standard_Real

        If datatype = 1, then returns common z value for all data
        else returns 0

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_ZPlane(self, *args)


    def Point(self, *args):
        """
        Point(Handle_IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Pnt

        returns the coordinates of the point specified by the anIndex
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Point(self, *args)


    def TransformedPoint(self, *args):
        """
        TransformedPoint(Handle_IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Pnt

        returns the coordinates of the point specified by the anIndex
        after applying Transf. Matrix
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_TransformedPoint(self, *args)


    def Vector(self, *args):
        """
        Vector(Handle_IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Vec

        returns i, j, k values if 3-tuple else returns (0, 0, 0)
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Vector(self, *args)


    def TransformedVector(self, *args):
        """
        TransformedVector(Handle_IGESGeom_CopiousData self, Standard_Integer const anIndex) -> gp_Vec

        returns transformed vector if 3-tuple else returns (0, 0, 0)
        raises exception if anIndex <= 0 or anIndex > NbPoints()

        :type anIndex: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_TransformedVector(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_CopiousData self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CopiousData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_CopiousData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_CopiousData self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_CopiousData self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_CopiousData self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_CopiousData self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_CopiousData self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_CopiousData self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_CopiousData self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_CopiousData self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_CopiousData self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_CopiousData self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_CopiousData self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_CopiousData self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_CopiousData self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_CopiousData self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_CopiousData self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_CopiousData self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_CopiousData self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_CopiousData self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_CopiousData self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_CopiousData self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_CopiousData self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_CopiousData self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_CopiousData self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_CopiousData self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_CopiousData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_CopiousData self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_CopiousData self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_CopiousData self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_CopiousData self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_CopiousData self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_CopiousData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_CopiousData self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_CopiousData self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_CopiousData self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_CopiousData self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_CopiousData self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_CopiousData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_CopiousData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_CopiousData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_CopiousData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_CopiousData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_CopiousData self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_CopiousData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_CopiousData_DecrementRefCounter(self, *args)

Handle_IGESGeom_CopiousData_swigregister = _IGESGeom.Handle_IGESGeom_CopiousData_swigregister
Handle_IGESGeom_CopiousData_swigregister(Handle_IGESGeom_CopiousData)

def Handle_IGESGeom_CopiousData_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_CopiousData_DownCast(thing)
Handle_IGESGeom_CopiousData_DownCast = _IGESGeom.Handle_IGESGeom_CopiousData_DownCast

class IGESGeom_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESGeom
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGeom_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGeom_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGeom_SpecificModule self) -> IGESGeom_SpecificModule

        Creates a SpecificModule from IGESGeom & puts it into SpecificLib


        """
        this = _IGESGeom.new_IGESGeom_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESGeom

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Correction on Entities which support
        them (Boundary,ConicArc,Flash,OffsetCurve,TransformationMatrix)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGeom.IGESGeom_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.IGESGeom_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.IGESGeom_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGeom.delete_IGESGeom_SpecificModule
IGESGeom_SpecificModule_swigregister = _IGESGeom.IGESGeom_SpecificModule_swigregister
IGESGeom_SpecificModule_swigregister(IGESGeom_SpecificModule)

def IGESGeom_SpecificModule_get_type_name(*args):
    """
    IGESGeom_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGeom.IGESGeom_SpecificModule_get_type_name(*args)

def IGESGeom_SpecificModule_get_type_descriptor(*args):
    """
    IGESGeom_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGeom.IGESGeom_SpecificModule_get_type_descriptor(*args)

class IGESGeom_ToolBoundary(object):
    """
    Tool to work on a Boundary. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolBoundary self) -> IGESGeom_ToolBoundary

        Returns a ToolBoundary, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolBoundary_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolBoundary_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Boundary <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolBoundary_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Boundary
        (if BoundaryType = 0, Nullify all ParameterCurves)

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.IGESGeom_ToolBoundary_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolBoundary_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolBoundary_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary entfrom, Handle_IGESGeom_Boundary entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolBoundary_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolBoundary self, Handle_IGESGeom_Boundary ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolBoundary_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolBoundary
IGESGeom_ToolBoundary_swigregister = _IGESGeom.IGESGeom_ToolBoundary_swigregister
IGESGeom_ToolBoundary_swigregister(IGESGeom_ToolBoundary)

class NCollection_Array1_Handle_IGESGeom_TransformationMatrix(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> NCollection_Array1< opencascade::handle< IGESGeom_TransformationMatrix > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> NCollection_Array1< opencascade::handle< IGESGeom_TransformationMatrix > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> NCollection_Array1< opencascade::handle< IGESGeom_TransformationMatrix > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> NCollection_Array1< opencascade::handle< IGESGeom_TransformationMatrix > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGeom.new_NCollection_Array1_Handle_IGESGeom_TransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, Handle_IGESGeom_TransformationMatrix theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, NCollection_Array1_Handle_IGESGeom_TransformationMatrix theOther) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, NCollection_Array1_Handle_IGESGeom_TransformationMatrix theOther) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, NCollection_Array1_Handle_IGESGeom_TransformationMatrix theOther) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix
        assign(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, NCollection_Array1_Handle_IGESGeom_TransformationMatrix theOther) -> NCollection_Array1_Handle_IGESGeom_TransformationMatrix

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESGeom_TransformationMatrix

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESGeom_TransformationMatrix

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, Standard_Integer const theIndex) -> Handle_IGESGeom_TransformationMatrix

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, Standard_Integer const theIndex, Handle_IGESGeom_TransformationMatrix theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGeom_TransformationMatrix self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_Resize(self, *args)

    __swig_destroy__ = _IGESGeom.delete_NCollection_Array1_Handle_IGESGeom_TransformationMatrix
NCollection_Array1_Handle_IGESGeom_TransformationMatrix_swigregister = _IGESGeom.NCollection_Array1_Handle_IGESGeom_TransformationMatrix_swigregister
NCollection_Array1_Handle_IGESGeom_TransformationMatrix_swigregister(NCollection_Array1_Handle_IGESGeom_TransformationMatrix)


try:
	IGESGeom_Array1OfTransformationMatrix = NCollection_Array1_Handle_IGESGeom_TransformationMatrix
except NameError:
	pass # does not exist, probably ignored

class IGESGeom_ToolCompositeCurve(object):
    """
    Tool to work on a CompositeCurve. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolCompositeCurve self) -> IGESGeom_ToolCompositeCurve

        Returns a ToolCompositeCurve, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolCompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CompositeCurve <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve entfrom, Handle_IGESGeom_CompositeCurve entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolCompositeCurve self, Handle_IGESGeom_CompositeCurve ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolCompositeCurve_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolCompositeCurve
IGESGeom_ToolCompositeCurve_swigregister = _IGESGeom.IGESGeom_ToolCompositeCurve_swigregister
IGESGeom_ToolCompositeCurve_swigregister(IGESGeom_ToolCompositeCurve)

class Handle_IGESGeom_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_SpecificModule self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_SpecificModule self, IGESGeom_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_SpecificModule self, Handle_IGESGeom_SpecificModule theHandle) -> Handle_IGESGeom_SpecificModule
        assign(Handle_IGESGeom_SpecificModule self, IGESGeom_SpecificModule thePtr) -> Handle_IGESGeom_SpecificModule
        assign(Handle_IGESGeom_SpecificModule self, Handle_IGESGeom_SpecificModule theHandle) -> Handle_IGESGeom_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_SpecificModule self) -> IGESGeom_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_SpecificModule self) -> IGESGeom_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_SpecificModule self) -> IGESGeom_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_SpecificModule_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESGeom_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESGeom

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESGeom_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Correction on Entities which support
        them (Boundary,ConicArc,Flash,OffsetCurve,TransformationMatrix)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESGeom_SpecificModule_swigregister = _IGESGeom.Handle_IGESGeom_SpecificModule_swigregister
Handle_IGESGeom_SpecificModule_swigregister(Handle_IGESGeom_SpecificModule)

def Handle_IGESGeom_SpecificModule_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_SpecificModule_DownCast(thing)
Handle_IGESGeom_SpecificModule_DownCast = _IGESGeom.Handle_IGESGeom_SpecificModule_DownCast

class Handle_IGESGeom_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Protocol self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Protocol self, IGESGeom_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Protocol self, Handle_IGESGeom_Protocol theHandle) -> Handle_IGESGeom_Protocol
        assign(Handle_IGESGeom_Protocol self, IGESGeom_Protocol thePtr) -> Handle_IGESGeom_Protocol
        assign(Handle_IGESGeom_Protocol self, Handle_IGESGeom_Protocol theHandle) -> Handle_IGESGeom_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Protocol self) -> IGESGeom_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Protocol self) -> IGESGeom_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Protocol self) -> IGESGeom_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Protocol_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESGeom_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESBasic)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESGeom_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESGeom_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESGeom_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESGeom_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESGeom_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESGeom_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESGeom_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESGeom_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESGeom.Handle_IGESGeom_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESGeom_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESGeom_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESGeom_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESGeom_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESGeom_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Protocol_DecrementRefCounter(self, *args)

Handle_IGESGeom_Protocol_swigregister = _IGESGeom.Handle_IGESGeom_Protocol_swigregister
Handle_IGESGeom_Protocol_swigregister(Handle_IGESGeom_Protocol)

def Handle_IGESGeom_Protocol_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Protocol_DownCast(thing)
Handle_IGESGeom_Protocol_DownCast = _IGESGeom.Handle_IGESGeom_Protocol_DownCast

class IGESGeom_ToolCopiousData(object):
    """
    Tool to work on a CopiousData. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolCopiousData self) -> IGESGeom_ToolCopiousData

        Returns a ToolCopiousData, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolCopiousData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CopiousData <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData entfrom, Handle_IGESGeom_CopiousData entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolCopiousData self, Handle_IGESGeom_CopiousData ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolCopiousData_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolCopiousData
IGESGeom_ToolCopiousData_swigregister = _IGESGeom.IGESGeom_ToolCopiousData_swigregister
IGESGeom_ToolCopiousData_swigregister(IGESGeom_ToolCopiousData)

class Handle_IGESGeom_SplineSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_SplineSurface self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_SplineSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_SplineSurface self, IGESGeom_SplineSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_SplineSurface self, Handle_IGESGeom_SplineSurface theHandle) -> Handle_IGESGeom_SplineSurface
        assign(Handle_IGESGeom_SplineSurface self, IGESGeom_SplineSurface thePtr) -> Handle_IGESGeom_SplineSurface
        assign(Handle_IGESGeom_SplineSurface self, Handle_IGESGeom_SplineSurface theHandle) -> Handle_IGESGeom_SplineSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_SplineSurface self) -> IGESGeom_SplineSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_SplineSurface self) -> IGESGeom_SplineSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_SplineSurface self) -> IGESGeom_SplineSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_SplineSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_SplineSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_SplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_SplineSurface_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_SplineSurface

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_SplineSurface self, Standard_Integer const aBoundaryType, Standard_Integer const aPatchType, Handle_TColStd_HArray1OfReal allUBreakpoints, Handle_TColStd_HArray1OfReal allVBreakpoints, Handle_IGESBasic_HArray2OfHArray1OfReal allXCoeffs, Handle_IGESBasic_HArray2OfHArray1OfReal allYCoeffs, Handle_IGESBasic_HArray2OfHArray1OfReal allZCoeffs)

        This method is used to set the fields of the class
        SplineSurface
        - aBoundaryType   : Type of Spline boundary
        1 = Linear
        2 = Quadratic
        3 = Cubic
        4 = Wilson-Fowler
        5 = Modified Wilson-Fowler
        6 = B-spline
        - aPatchType      : Type of patch contained in the grid
        1 = Cartesian Product
        0 = Unspecified
        - allUBreakpoints : u values of grid lines
        - allVBreakpoints : v values of grid lines
        - allXCoeffs      : X coefficients of M x N patches
        - allYCoeffs      : Y coefficients of M x N patches
        - allZCoeffs      : Z coefficients of M x N patches
        raises exception if allXCoeffs, allYCoeffs & allZCoeffs are not
        of the same size.
        or if the size of each element of the double array is not 16

        :type aBoundaryType: int
        :type aPatchType: int
        :type allUBreakpoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allVBreakpoints: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type allXCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type allYCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type allZCoeffs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Init(self, *args)


    def NbUSegments(self, *args):
        """
        NbUSegments(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        returns the number of U segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbUSegments(self, *args)


    def NbVSegments(self, *args):
        """
        NbVSegments(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        returns the number of V segments

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbVSegments(self, *args)


    def BoundaryType(self, *args):
        """
        BoundaryType(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        returns boundary type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_BoundaryType(self, *args)


    def PatchType(self, *args):
        """
        PatchType(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        returns patch type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_PatchType(self, *args)


    def UBreakPoint(self, *args):
        """
        UBreakPoint(Handle_IGESGeom_SplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns U break point of the grid line referred to by anIndex
        raises exception if anIndex <= 0 or anIndex > NbUSegments() + 1

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_UBreakPoint(self, *args)


    def VBreakPoint(self, *args):
        """
        VBreakPoint(Handle_IGESGeom_SplineSurface self, Standard_Integer const anIndex) -> Standard_Real

        returns V break point of the grid line referred to by anIndex
        raises exception if anIndex <= 0 or anIndex > NbVSegments() + 1

        :type anIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_VBreakPoint(self, *args)


    def XPolynomial(self, *args):
        """
        XPolynomial(Handle_IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns X polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_XPolynomial(self, *args)


    def YPolynomial(self, *args):
        """
        YPolynomial(Handle_IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns Y polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_YPolynomial(self, *args)


    def ZPolynomial(self, *args):
        """
        ZPolynomial(Handle_IGESGeom_SplineSurface self, Standard_Integer const anIndex1, Standard_Integer const anIndex2) -> Handle_TColStd_HArray1OfReal

        returns Z polynomial of patch referred to by anIndex1, anIndex2
        raises exception if anIndex1 <= 0 or anIndex1 > NbUSegments()
        or anIndex2 <= 0 or anIndex2 > NbVSegments()

        :type anIndex1: int
        :type anIndex2: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_ZPolynomial(self, *args)


    def Polynomials(self, *args):
        """
        Polynomials(Handle_IGESGeom_SplineSurface self, Handle_IGESBasic_HArray2OfHArray1OfReal XCoef, Handle_IGESBasic_HArray2OfHArray1OfReal YCoef, Handle_IGESBasic_HArray2OfHArray1OfReal ZCoef)

        returns in one all the polynomial values "in bulk"
        usefull for massive treatements

        :type XCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type YCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal
        :type ZCoef: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Polynomials(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_SplineSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SplineSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_SplineSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_SplineSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_SplineSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_SplineSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_SplineSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_SplineSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_SplineSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_SplineSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_SplineSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_SplineSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_SplineSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_SplineSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_SplineSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_SplineSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_SplineSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_SplineSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_SplineSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_SplineSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_SplineSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_SplineSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_SplineSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_SplineSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_SplineSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_SplineSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_SplineSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_SplineSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_SplineSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_SplineSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_SplineSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_SplineSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_SplineSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_SplineSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_SplineSurface self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_SplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_SplineSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_SplineSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_SplineSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_SplineSurface self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_SplineSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_SplineSurface_DecrementRefCounter(self, *args)

Handle_IGESGeom_SplineSurface_swigregister = _IGESGeom.Handle_IGESGeom_SplineSurface_swigregister
Handle_IGESGeom_SplineSurface_swigregister(Handle_IGESGeom_SplineSurface)

def Handle_IGESGeom_SplineSurface_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_SplineSurface_DownCast(thing)
Handle_IGESGeom_SplineSurface_DownCast = _IGESGeom.Handle_IGESGeom_SplineSurface_DownCast

class Handle_IGESGeom_Plane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_Plane self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_Plane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_Plane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_Plane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_Plane self, IGESGeom_Plane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_Plane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_Plane self, Handle_IGESGeom_Plane theHandle) -> Handle_IGESGeom_Plane
        assign(Handle_IGESGeom_Plane self, IGESGeom_Plane thePtr) -> Handle_IGESGeom_Plane
        assign(Handle_IGESGeom_Plane self, Handle_IGESGeom_Plane theHandle) -> Handle_IGESGeom_Plane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_Plane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_Plane self) -> IGESGeom_Plane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Plane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_Plane self) -> IGESGeom_Plane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_Plane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_Plane self) -> IGESGeom_Plane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_Plane___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_Plane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_Plane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_Plane_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_Plane

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_Plane self, Standard_Real const A, Standard_Real const B, Standard_Real const C, Standard_Real const D, Handle_IGESData_IGESEntity aCurve, gp_XYZ attach, Standard_Real const aSize)

        :type A: float
        :type B: float
        :type C: float
        :type D: float
        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type attach: OCC.wrapper.gp.gp_XYZ
        :type aSize: float

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESGeom_Plane self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of Bound :
        0 no Bound, 1 (External) Bound, -1 Hole)
        Remark that Init keeps this Value and must be consistent :
        aCurve Null if FormNumber = 0, Non-Null else
        Error if not in ranges [0-1] or [10-12]

        :type form: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SetFormNumber(self, *args)


    def Equation(self, *args):
        """
        Equation(Handle_IGESGeom_Plane self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Equation(self, *args)


    def TransformedEquation(self, *args):
        """
        TransformedEquation(Handle_IGESGeom_Plane self)

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _IGESGeom.Handle_IGESGeom_Plane_TransformedEquation(self, *args)


    def HasBoundingCurve(self, *args):
        """
        HasBoundingCurve(Handle_IGESGeom_Plane self) -> Standard_Boolean

        returns True if there exists a bounding curve

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasBoundingCurve(self, *args)


    def HasBoundingCurveHole(self, *args):
        """
        HasBoundingCurveHole(Handle_IGESGeom_Plane self) -> Standard_Boolean

        returns True if bounding curve exists and bounded portion is negative

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasBoundingCurveHole(self, *args)


    def BoundingCurve(self, *args):
        """
        BoundingCurve(Handle_IGESGeom_Plane self) -> Handle_IGESData_IGESEntity

        returns Optional Bounding Curve, can be positive (normal clipping)
        or negative (hole) according to Form Number

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_BoundingCurve(self, *args)


    def HasSymbolAttach(self, *args):
        """
        HasSymbolAttach(Handle_IGESGeom_Plane self) -> Standard_Boolean

        returns True if SymbolSize() > 0, False if SymbolSize() = 0

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasSymbolAttach(self, *args)


    def SymbolAttach(self, *args):
        """
        SymbolAttach(Handle_IGESGeom_Plane self) -> gp_Pnt

        returns (X, Y, Z) if symbol exists else returns (0, 0, 0)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SymbolAttach(self, *args)


    def TransformedSymbolAttach(self, *args):
        """
        TransformedSymbolAttach(Handle_IGESGeom_Plane self) -> gp_Pnt

        returns (X, Y, Z) if symbol exists after applying Transf. Matrix
        else returns (0, 0, 0)

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGeom.Handle_IGESGeom_Plane_TransformedSymbolAttach(self, *args)


    def SymbolSize(self, *args):
        """
        SymbolSize(Handle_IGESGeom_Plane self) -> Standard_Real

        Size of optional display symbol

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SymbolSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_Plane self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_Plane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Plane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_Plane self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_Plane_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_Plane self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_Plane self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_Plane self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_Plane self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_Plane self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_Plane self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_Plane self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_Plane self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_Plane self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_Plane self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_Plane self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_Plane self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_Plane self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_Plane self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_Plane_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_Plane self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_Plane self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_Plane self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_Plane self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Plane_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_Plane self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_Plane self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_Plane self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_Plane self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_Plane self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_Plane self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_Plane self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_Plane self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_Plane self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_Plane self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_Plane self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_Plane self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_Plane self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Plane_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_Plane self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_Plane_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_Plane self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_Plane self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_Plane_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_Plane self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_Plane self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_Plane self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_Plane self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_Plane self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_Plane self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_Plane self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_Plane self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_Plane self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_Plane_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_Plane self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_Plane self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_Plane self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_Plane self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_Plane_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_Plane self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_Plane_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_Plane self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_Plane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_Plane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_Plane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_Plane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_Plane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_Plane self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_Plane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_Plane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_Plane_DecrementRefCounter(self, *args)

Handle_IGESGeom_Plane_swigregister = _IGESGeom.Handle_IGESGeom_Plane_swigregister
Handle_IGESGeom_Plane_swigregister(Handle_IGESGeom_Plane)

def Handle_IGESGeom_Plane_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_Plane_DownCast(thing)
Handle_IGESGeom_Plane_DownCast = _IGESGeom.Handle_IGESGeom_Plane_DownCast

class Handle_IGESGeom_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_GeneralModule self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_GeneralModule self, IGESGeom_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_GeneralModule self, Handle_IGESGeom_GeneralModule theHandle) -> Handle_IGESGeom_GeneralModule
        assign(Handle_IGESGeom_GeneralModule self, IGESGeom_GeneralModule thePtr) -> Handle_IGESGeom_GeneralModule
        assign(Handle_IGESGeom_GeneralModule self, Handle_IGESGeom_GeneralModule theHandle) -> Handle_IGESGeom_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_GeneralModule self) -> IGESGeom_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_GeneralModule self) -> IGESGeom_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_GeneralModule self) -> IGESGeom_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_GeneralModule_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Shape for all, but Drawing for :
        Flash;  Point with a symbol;  Plane with a symbol

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESGeom_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESGeom_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESGeom_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESGeom_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESGeom_GeneralModule_swigregister = _IGESGeom.Handle_IGESGeom_GeneralModule_swigregister
Handle_IGESGeom_GeneralModule_swigregister(Handle_IGESGeom_GeneralModule)

def Handle_IGESGeom_GeneralModule_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_GeneralModule_DownCast(thing)
Handle_IGESGeom_GeneralModule_DownCast = _IGESGeom.Handle_IGESGeom_GeneralModule_DownCast

class IGESGeom_ToolTabulatedCylinder(object):
    """
    Tool to work on a TabulatedCylinder. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolTabulatedCylinder self) -> IGESGeom_ToolTabulatedCylinder

        Returns a ToolTabulatedCylinder, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolTabulatedCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TabulatedCylinder <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder entfrom, Handle_IGESGeom_TabulatedCylinder entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolTabulatedCylinder self, Handle_IGESGeom_TabulatedCylinder ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolTabulatedCylinder_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolTabulatedCylinder
IGESGeom_ToolTabulatedCylinder_swigregister = _IGESGeom.IGESGeom_ToolTabulatedCylinder_swigregister
IGESGeom_ToolTabulatedCylinder_swigregister(IGESGeom_ToolTabulatedCylinder)

class Handle_IGESGeom_TransformationMatrix(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_TransformationMatrix self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_TransformationMatrix self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_TransformationMatrix self, IGESGeom_TransformationMatrix thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_TransformationMatrix self, Handle_IGESGeom_TransformationMatrix theHandle) -> Handle_IGESGeom_TransformationMatrix
        assign(Handle_IGESGeom_TransformationMatrix self, IGESGeom_TransformationMatrix thePtr) -> Handle_IGESGeom_TransformationMatrix
        assign(Handle_IGESGeom_TransformationMatrix self, Handle_IGESGeom_TransformationMatrix theHandle) -> Handle_IGESGeom_TransformationMatrix

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_TransformationMatrix self) -> IGESGeom_TransformationMatrix

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_TransformationMatrix self) -> IGESGeom_TransformationMatrix

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_TransformationMatrix self) -> IGESGeom_TransformationMatrix

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_TransformationMatrix___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_TransformationMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_TransformationMatrix_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_TransformationMatrix

    def Init(self, *args):
        """
        Init(Handle_IGESGeom_TransformationMatrix self, Handle_TColStd_HArray2OfReal aMatrix)

        This method is used to set the fields of the class
        TransformationMatrix
        - aMatrix : 3 x 4 array containing elements of the
        transformation matrix
        raises exception if aMatrix is not 3 x 4 array

        :type aMatrix: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESGeom_TransformationMatrix self, Standard_Integer const form)

        Changes FormNumber (indicates the Type of Transf :
        Transformation 0-1 or Coordinate System 10-11-12)
        Error if not in ranges [0-1] or [10-12]

        :type form: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SetFormNumber(self, *args)


    def Data(self, *args):
        """
        Data(Handle_IGESGeom_TransformationMatrix self, Standard_Integer const I, Standard_Integer const J) -> Standard_Real

        returns individual Data
        Errro if I not in [1-3] or J not in [1-4]

        :type I: int
        :type J: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Data(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESGeom_TransformationMatrix self) -> gp_GTrsf

        returns the transformation matrix
        4th row elements of GTrsf will always be 0, 0, 0, 1 (not defined)

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_TransformationMatrix self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TransformationMatrix_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_TransformationMatrix_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGeom_TransformationMatrix self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGeom_TransformationMatrix self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGeom_TransformationMatrix self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGeom_TransformationMatrix self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGeom_TransformationMatrix self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGeom_TransformationMatrix self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGeom_TransformationMatrix self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGeom_TransformationMatrix self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGeom_TransformationMatrix self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGeom_TransformationMatrix self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGeom_TransformationMatrix self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGeom_TransformationMatrix self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGeom_TransformationMatrix self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGeom_TransformationMatrix self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGeom_TransformationMatrix self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGeom_TransformationMatrix self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGeom_TransformationMatrix self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGeom_TransformationMatrix self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGeom_TransformationMatrix self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGeom_TransformationMatrix self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGeom_TransformationMatrix self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGeom_TransformationMatrix self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_TransformationMatrix self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_TransformationMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_TransformationMatrix self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_TransformationMatrix self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_TransformationMatrix self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_TransformationMatrix self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_TransformationMatrix self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DecrementRefCounter(self, *args)

Handle_IGESGeom_TransformationMatrix_swigregister = _IGESGeom.Handle_IGESGeom_TransformationMatrix_swigregister
Handle_IGESGeom_TransformationMatrix_swigregister(Handle_IGESGeom_TransformationMatrix)

def Handle_IGESGeom_TransformationMatrix_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_TransformationMatrix_DownCast(thing)
Handle_IGESGeom_TransformationMatrix_DownCast = _IGESGeom.Handle_IGESGeom_TransformationMatrix_DownCast

class IGESGeom_(object):
    """This package consists of B-Rep and CSG Solid entities"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dymanic data (Protocol, Modules) for this package


        """
        return _IGESGeom.IGESGeom__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESGeom_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Protocol

        """
        return _IGESGeom.IGESGeom__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """This package consists of B-Rep and CSG Solid entities"""
        this = _IGESGeom.new_IGESGeom_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGeom.delete_IGESGeom_
IGESGeom__swigregister = _IGESGeom.IGESGeom__swigregister
IGESGeom__swigregister(IGESGeom_)

def IGESGeom__Init(*args):
    """
    IGESGeom__Init()

    Prepares dymanic data (Protocol, Modules) for this package


    """
    return _IGESGeom.IGESGeom__Init(*args)

def IGESGeom__Protocol(*args):
    """
    IGESGeom__Protocol() -> Handle_IGESGeom_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Protocol

    """
    return _IGESGeom.IGESGeom__Protocol(*args)

class IGESGeom_ToolSplineCurve(object):
    """
    Tool to work on a SplineCurve. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGeom_ToolSplineCurve self) -> IGESGeom_ToolSplineCurve

        Returns a ToolSplineCurve, ready to work


        """
        this = _IGESGeom.new_IGESGeom_ToolSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SplineCurve <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve entfrom, Handle_IGESGeom_SplineCurve entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type entto: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGeom_ToolSplineCurve self, Handle_IGESGeom_SplineCurve ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGeom.IGESGeom_ToolSplineCurve_OwnDump(self, *args)

    __swig_destroy__ = _IGESGeom.delete_IGESGeom_ToolSplineCurve
IGESGeom_ToolSplineCurve_swigregister = _IGESGeom.IGESGeom_ToolSplineCurve_swigregister
IGESGeom_ToolSplineCurve_swigregister(IGESGeom_ToolSplineCurve)

class Handle_IGESGeom_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGeom_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGeom_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGeom_ReadWriteModule self, IGESGeom_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGeom_ReadWriteModule self, Handle_IGESGeom_ReadWriteModule theHandle) -> Handle_IGESGeom_ReadWriteModule
        assign(Handle_IGESGeom_ReadWriteModule self, IGESGeom_ReadWriteModule thePtr) -> Handle_IGESGeom_ReadWriteModule
        assign(Handle_IGESGeom_ReadWriteModule self, Handle_IGESGeom_ReadWriteModule theHandle) -> Handle_IGESGeom_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGeom_ReadWriteModule self) -> IGESGeom_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGeom_ReadWriteModule self) -> IGESGeom_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGeom_ReadWriteModule self) -> IGESGeom_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGeom.Handle_IGESGeom_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGeom.new_Handle_IGESGeom_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGeom.Handle_IGESGeom_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESGeom.delete_Handle_IGESGeom_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESGeom_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESGeom

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESGeom_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESGeom

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESGeom_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGeom_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGeom.Handle_IGESGeom_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESGeom_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESGeom_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESGeom_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGeom_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGeom_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGeom_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGeom_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGeom_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGeom_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGeom_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGeom_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGeom_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGeom.Handle_IGESGeom_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESGeom_ReadWriteModule_swigregister = _IGESGeom.Handle_IGESGeom_ReadWriteModule_swigregister
Handle_IGESGeom_ReadWriteModule_swigregister(Handle_IGESGeom_ReadWriteModule)

def Handle_IGESGeom_ReadWriteModule_DownCast(thing):
    return _IGESGeom.Handle_IGESGeom_ReadWriteModule_DownCast(thing)
Handle_IGESGeom_ReadWriteModule_DownCast = _IGESGeom.Handle_IGESGeom_ReadWriteModule_DownCast



