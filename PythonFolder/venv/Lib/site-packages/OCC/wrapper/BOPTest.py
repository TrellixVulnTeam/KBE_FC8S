# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BOPTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BOPTest')
    _BOPTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BOPTest', [dirname(__file__)])
        except ImportError:
            import _BOPTest
            return _BOPTest
        try:
            _mod = imp.load_module('_BOPTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BOPTest = swig_import_helper()
    del swig_import_helper
else:
    import _BOPTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BOPTest.delete_SwigPyIterator

    def value(self):
        return _BOPTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BOPTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BOPTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BOPTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BOPTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BOPTest.SwigPyIterator_copy(self)

    def next(self):
        return _BOPTest.SwigPyIterator_next(self)

    def __next__(self):
        return _BOPTest.SwigPyIterator___next__(self)

    def previous(self):
        return _BOPTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BOPTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BOPTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BOPTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BOPTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BOPTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BOPTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BOPTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BOPTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BOPTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BOPTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BOPTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BOPTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BOPTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BOPTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BOPTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BOPTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BOPTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BOPTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BOPTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BOPTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BOPTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BOPTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BOPTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BOPTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BOPTest.ptr_to_number(item)
ptr_to_number = _BOPTest.ptr_to_number

def HashCode(*args):
    return _BOPTest.HashCode(*args)
HashCode = _BOPTest.HashCode

def ptr_equal(a, b):
    return _BOPTest.ptr_equal(a, b)
ptr_equal = _BOPTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BOPAlgo
else:
    import BOPAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BOPTools
else:
    import BOPTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntTools
else:
    import IntTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAPI
else:
    import GeomAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dHatch
else:
    import Geom2dHatch
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HatchGen
else:
    import HatchGen
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dInt
else:
    import Geom2dInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurve
else:
    import IntCurve
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntPatch
else:
    import IntPatch
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntWalk
else:
    import IntWalk
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntImp
else:
    import IntImp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomInt
else:
    import GeomInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ApproxInt
else:
    import ApproxInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BOPDS
else:
    import BOPDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DBRep
else:
    import DBRep
del _swig_python_version_info
class BOPTest_DrawableShape(DBRep.DBRep_DrawableShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BOPTest_DrawableShape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BOPTest_DrawableShape(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BOPTest_DrawableShape self, TopoDS_Shape S, Draw_Color FreeCol, Draw_Color ConnCol, Draw_Color EdgeCol, Draw_Color IsosCol, Standard_Real const size, Standard_Integer const nbisos, Standard_Integer const discret, Standard_CString const Text, Draw_Color TextColor) -> BOPTest_DrawableShape
        __init__(BOPTest_DrawableShape self, TopoDS_Shape S, Standard_CString const Text, Draw_Color TextColor) -> BOPTest_DrawableShape

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Text: OCC.wrapper.Standard.Standard_CString
        :type TextColor: OCC.wrapper.Draw.Draw_Color

        """
        this = _BOPTest.new_BOPTest_DrawableShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(BOPTest_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _BOPTest.BOPTest_DrawableShape_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BOPTest.BOPTest_DrawableShape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BOPTest.BOPTest_DrawableShape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BOPTest.BOPTest_DrawableShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BOPTest.delete_BOPTest_DrawableShape
BOPTest_DrawableShape_swigregister = _BOPTest.BOPTest_DrawableShape_swigregister
BOPTest_DrawableShape_swigregister(BOPTest_DrawableShape)

def BOPTest_DrawableShape_get_type_name(*args):
    """
    BOPTest_DrawableShape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BOPTest.BOPTest_DrawableShape_get_type_name(*args)

def BOPTest_DrawableShape_get_type_descriptor(*args):
    """
    BOPTest_DrawableShape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BOPTest.BOPTest_DrawableShape_get_type_descriptor(*args)

class BOPTest_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def BOPCommands(*args):
        """
        BOPCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__BOPCommands(*args)

    BOPCommands = staticmethod(BOPCommands)

    def CheckCommands(*args):
        """
        CheckCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__CheckCommands(*args)

    CheckCommands = staticmethod(CheckCommands)

    def TolerCommands(*args):
        """
        TolerCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__TolerCommands(*args)

    TolerCommands = staticmethod(TolerCommands)

    def LowCommands(*args):
        """
        LowCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__LowCommands(*args)

    LowCommands = staticmethod(LowCommands)

    def ObjCommands(*args):
        """
        ObjCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__ObjCommands(*args)

    ObjCommands = staticmethod(ObjCommands)

    def PartitionCommands(*args):
        """
        PartitionCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__PartitionCommands(*args)

    PartitionCommands = staticmethod(PartitionCommands)

    def APICommands(*args):
        """
        APICommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__APICommands(*args)

    APICommands = staticmethod(APICommands)

    def OptionCommands(*args):
        """
        OptionCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__OptionCommands(*args)

    OptionCommands = staticmethod(OptionCommands)

    def Factory(*args):
        """
        Factory(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__Factory(*args)

    Factory = staticmethod(Factory)

    def DebugCommands(*args):
        """
        DebugCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__DebugCommands(*args)

    DebugCommands = staticmethod(DebugCommands)

    def CellsCommands(*args):
        """
        CellsCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__CellsCommands(*args)

    CellsCommands = staticmethod(CellsCommands)

    def UtilityCommands(*args):
        """
        UtilityCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__UtilityCommands(*args)

    UtilityCommands = staticmethod(UtilityCommands)

    def RemoveFeaturesCommands(*args):
        """
        RemoveFeaturesCommands(Draw_Interpretor aDI)

        :type aDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.BOPTest__RemoveFeaturesCommands(*args)

    RemoveFeaturesCommands = staticmethod(RemoveFeaturesCommands)

    def ReportAlerts(*args):
        """
        ReportAlerts(Handle_Message_Report theReport)

        Prints errors and warnings if any and draws attached shapes 
        if flag BOPTest_Objects::DrawWarnShapes() is set

        :type theReport: OCC.wrapper.Message.Handle_Message_Report

        """
        return _BOPTest.BOPTest__ReportAlerts(*args)

    ReportAlerts = staticmethod(ReportAlerts)

    def __init__(self):
        this = _BOPTest.new_BOPTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BOPTest.delete_BOPTest_
BOPTest__swigregister = _BOPTest.BOPTest__swigregister
BOPTest__swigregister(BOPTest_)

def BOPTest__AllCommands(*args):
    """
    BOPTest__AllCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__AllCommands(*args)

def BOPTest__BOPCommands(*args):
    """
    BOPTest__BOPCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__BOPCommands(*args)

def BOPTest__CheckCommands(*args):
    """
    BOPTest__CheckCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__CheckCommands(*args)

def BOPTest__TolerCommands(*args):
    """
    BOPTest__TolerCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__TolerCommands(*args)

def BOPTest__LowCommands(*args):
    """
    BOPTest__LowCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__LowCommands(*args)

def BOPTest__ObjCommands(*args):
    """
    BOPTest__ObjCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__ObjCommands(*args)

def BOPTest__PartitionCommands(*args):
    """
    BOPTest__PartitionCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__PartitionCommands(*args)

def BOPTest__APICommands(*args):
    """
    BOPTest__APICommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__APICommands(*args)

def BOPTest__OptionCommands(*args):
    """
    BOPTest__OptionCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__OptionCommands(*args)

def BOPTest__Factory(*args):
    """
    BOPTest__Factory(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__Factory(*args)

def BOPTest__DebugCommands(*args):
    """
    BOPTest__DebugCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__DebugCommands(*args)

def BOPTest__CellsCommands(*args):
    """
    BOPTest__CellsCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__CellsCommands(*args)

def BOPTest__UtilityCommands(*args):
    """
    BOPTest__UtilityCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__UtilityCommands(*args)

def BOPTest__RemoveFeaturesCommands(*args):
    """
    BOPTest__RemoveFeaturesCommands(Draw_Interpretor aDI)

    :type aDI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BOPTest.BOPTest__RemoveFeaturesCommands(*args)

def BOPTest__ReportAlerts(*args):
    """
    BOPTest__ReportAlerts(Handle_Message_Report theReport)

    Prints errors and warnings if any and draws attached shapes 
    if flag BOPTest_Objects::DrawWarnShapes() is set

    :type theReport: OCC.wrapper.Message.Handle_Message_Report

    """
    return _BOPTest.BOPTest__ReportAlerts(*args)

class Handle_BOPTest_DrawableShape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BOPTest_DrawableShape self)

        Nullify the handle


        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BOPTest_DrawableShape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BOPTest_DrawableShape self, BOPTest_DrawableShape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BOPTest_DrawableShape self, Handle_BOPTest_DrawableShape theHandle) -> Handle_BOPTest_DrawableShape
        assign(Handle_BOPTest_DrawableShape self, BOPTest_DrawableShape thePtr) -> Handle_BOPTest_DrawableShape
        assign(Handle_BOPTest_DrawableShape self, Handle_BOPTest_DrawableShape theHandle) -> Handle_BOPTest_DrawableShape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BOPTest_DrawableShape self) -> BOPTest_DrawableShape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BOPTest_DrawableShape self) -> BOPTest_DrawableShape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BOPTest.Handle_BOPTest_DrawableShape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BOPTest_DrawableShape self) -> BOPTest_DrawableShape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BOPTest.Handle_BOPTest_DrawableShape___ref__(self, *args)


    def __hash__(self):
        return _BOPTest.Handle_BOPTest_DrawableShape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BOPTest.Handle_BOPTest_DrawableShape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BOPTest.new_Handle_BOPTest_DrawableShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BOPTest.Handle_BOPTest_DrawableShape_DownCast)
    __swig_destroy__ = _BOPTest.delete_Handle_BOPTest_DrawableShape

    def DrawOn(self, *args):
        """
        DrawOn(Handle_BOPTest_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BOPTest_DrawableShape self) -> char const *

        :rtype: const char *

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BOPTest.Handle_BOPTest_DrawableShape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BOPTest.Handle_BOPTest_DrawableShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeNbIsos(self, *args):
        """
        ChangeNbIsos(Handle_BOPTest_DrawableShape self, Standard_Integer const NbIsos)

        Changes the number of isoparametric curves in a shape.

        :type NbIsos: int

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_ChangeNbIsos(self, *args)


    def NbIsos(self, *args):
        """
        NbIsos(Handle_BOPTest_DrawableShape self) -> Standard_Integer

        Returns the number of isoparametric curves in a shape.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_NbIsos(self, *args)


    def Discret(self, *args):
        """
        Discret(Handle_BOPTest_DrawableShape self) -> Standard_Integer

        Returns the discretisation value of curve

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Discret(self, *args)


    def Shape(self, *args):
        """
        Shape(Handle_BOPTest_DrawableShape self) -> TopoDS_Shape

        Return const &

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Shape(self, *args)


    def DisplayOrientation(self, *args):
        """
        DisplayOrientation(Handle_BOPTest_DrawableShape self, Standard_Boolean const D)

        When True  the orientations  of the edges and free
        vertices  are displayed.

        :type D: bool

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DisplayOrientation(self, *args)


    def DisplayTriangulation(self, *args):
        """
        DisplayTriangulation(Handle_BOPTest_DrawableShape self, Standard_Boolean const D)
        DisplayTriangulation(Handle_BOPTest_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DisplayTriangulation(self, *args)


    def DisplayPolygons(self, *args):
        """
        DisplayPolygons(Handle_BOPTest_DrawableShape self, Standard_Boolean const D)
        DisplayPolygons(Handle_BOPTest_DrawableShape self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DisplayPolygons(self, *args)


    def DisplayHLR(self, *args):
        """
        DisplayHLR(Handle_BOPTest_DrawableShape self, Standard_Boolean const withHLR, Standard_Boolean const withRg1, Standard_Boolean const withRgN, Standard_Boolean const withHid, Standard_Real const ang)

        Performs Hidden lines.

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DisplayHLR(self, *args)


    def GetDisplayHLR(self, *args):
        """
        GetDisplayHLR(Handle_BOPTest_DrawableShape self)

        :type withHLR: bool
        :type withRg1: bool
        :type withRgN: bool
        :type withHid: bool
        :type ang: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_GetDisplayHLR(self, *args)


    def DisplayHiddenLines(self, *args):
        """
        DisplayHiddenLines(Handle_BOPTest_DrawableShape self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DisplayHiddenLines(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_BOPTest_DrawableShape self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_BOPTest_DrawableShape self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_BOPTest_DrawableShape self, Draw_Interpretor I)

        For variable whatis command.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Whatis(self, *args)


    def LastPick(self, *args):
        """
        LastPick(Handle_BOPTest_DrawableShape self, TopoDS_Shape S)

        Returns the subshape touched by the last pick.
        u,v are the parameters of the closest point.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type u: float
        :type v: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_LastPick(self, *args)


    def addMeshNormals(self, *args):
        """
        addMeshNormals(Handle_BOPTest_DrawableShape self, NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength) -> Standard_Boolean
        addMeshNormals(Handle_BOPTest_DrawableShape self, NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength)

        Auxiliary method computing nodal normals for presentation purposes.
        @param theNormals [out] map of computed normals (grouped per Face)
        @param theShape   [in]  input shape which will be exploded into Faces
        @param theLength  [in]  normal length

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_addMeshNormals(self, *args)


    def addSurfaceNormals(self, *args):
        """
        addSurfaceNormals(Handle_BOPTest_DrawableShape self, NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > & theNormals, TopoDS_Face theFace, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV) -> Standard_Boolean
        addSurfaceNormals(Handle_BOPTest_DrawableShape self, NCollection_DataMap< TopoDS_Face,NCollection_Vector< std::pair< gp_Pnt,gp_Pnt > > > & theNormals, TopoDS_Shape theShape, Standard_Real const theLength, Standard_Integer const theNbAlongU, Standard_Integer const theNbAlongV)

        Auxiliary method computing surface normals distributed within the Face for presentation purposes.
        @param theNormals  [out] map of computed normals (grouped per Face)
        @param theShape    [in]  input shape which will be exploded into Faces
        @param theLength   [in]  normal length
        @param theNbAlongU [in]  number along U
        @param theNbAlongV [in]  number along V
        @return FALSE if normals can not be computed

        :type theNormals: OCC.wrapper.DBRep.NCollection_DataMap_TopoDS_Face_NCollection_Vector_pair_gp_Pnt_gp_Pnt
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLength: float
        :type theNbAlongU: int
        :type theNbAlongV: int

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_addSurfaceNormals(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_BOPTest_DrawableShape self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_BOPTest_DrawableShape self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_BOPTest_DrawableShape self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_BOPTest_DrawableShape self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_BOPTest_DrawableShape self) -> Standard_Boolean
        Visible(Handle_BOPTest_DrawableShape self, Standard_Boolean const V)

        :type V: bool

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_BOPTest_DrawableShape self) -> Standard_Boolean
        Protected(Handle_BOPTest_DrawableShape self, Standard_Boolean const P)

        :type P: bool

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_BOPTest_DrawableShape self) -> Standard_CString
        Name(Handle_BOPTest_DrawableShape self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BOPTest_DrawableShape self)

        Memory deallocator for transient classes


        """
        return _BOPTest.Handle_BOPTest_DrawableShape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BOPTest_DrawableShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BOPTest_DrawableShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BOPTest_DrawableShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BOPTest_DrawableShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BOPTest_DrawableShape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BOPTest_DrawableShape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BOPTest_DrawableShape self)

        Increments the reference counter of this object


        """
        return _BOPTest.Handle_BOPTest_DrawableShape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BOPTest_DrawableShape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BOPTest.Handle_BOPTest_DrawableShape_DecrementRefCounter(self, *args)

Handle_BOPTest_DrawableShape_swigregister = _BOPTest.Handle_BOPTest_DrawableShape_swigregister
Handle_BOPTest_DrawableShape_swigregister(Handle_BOPTest_DrawableShape)

def Handle_BOPTest_DrawableShape_DownCast(thing):
    return _BOPTest.Handle_BOPTest_DrawableShape_DownCast(thing)
Handle_BOPTest_DrawableShape_DownCast = _BOPTest.Handle_BOPTest_DrawableShape_DownCast

class BOPTest_Objects(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def PaveFiller(*args):
        """
        PaveFiller() -> BOPAlgo_PaveFiller

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_PaveFiller

        """
        return _BOPTest.BOPTest_Objects_PaveFiller(*args)

    PaveFiller = staticmethod(PaveFiller)

    def Init(*args):
        """Init()"""
        return _BOPTest.BOPTest_Objects_Init(*args)

    Init = staticmethod(Init)

    def Clear(*args):
        """Clear()"""
        return _BOPTest.BOPTest_Objects_Clear(*args)

    Clear = staticmethod(Clear)

    def PDS(*args):
        """
        PDS() -> BOPDS_DS

        :rtype: OCC.wrapper.BOPDS.BOPDS_PDS

        """
        return _BOPTest.BOPTest_Objects_PDS(*args)

    PDS = staticmethod(PDS)

    def Builder(*args):
        """
        Builder() -> BOPAlgo_Builder

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Builder

        """
        return _BOPTest.BOPTest_Objects_Builder(*args)

    Builder = staticmethod(Builder)

    def BOP(*args):
        """
        BOP() -> BOPAlgo_BOP

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_BOP

        """
        return _BOPTest.BOPTest_Objects_BOP(*args)

    BOP = staticmethod(BOP)

    def Section(*args):
        """
        Section() -> BOPAlgo_Section

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Section

        """
        return _BOPTest.BOPTest_Objects_Section(*args)

    Section = staticmethod(Section)

    def CellsBuilder(*args):
        """
        CellsBuilder() -> BOPAlgo_CellsBuilder

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_CellsBuilder

        """
        return _BOPTest.BOPTest_Objects_CellsBuilder(*args)

    CellsBuilder = staticmethod(CellsBuilder)

    def Splitter(*args):
        """
        Splitter() -> BOPAlgo_Splitter

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Splitter

        """
        return _BOPTest.BOPTest_Objects_Splitter(*args)

    Splitter = staticmethod(Splitter)

    def Shapes(*args):
        """
        Shapes() -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _BOPTest.BOPTest_Objects_Shapes(*args)

    Shapes = staticmethod(Shapes)

    def Tools(*args):
        """
        Tools() -> NCollection_List_TopoDS_Shape

        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _BOPTest.BOPTest_Objects_Tools(*args)

    Tools = staticmethod(Tools)

    def SetBuilder(*args):
        """
        SetBuilder(BOPAlgo_Builder theBuilder)

        :type theBuilder: OCC.wrapper.BOPAlgo.BOPAlgo_PBuilder

        """
        return _BOPTest.BOPTest_Objects_SetBuilder(*args)

    SetBuilder = staticmethod(SetBuilder)

    def SetBuilderDefault(*args):
        """SetBuilderDefault()"""
        return _BOPTest.BOPTest_Objects_SetBuilderDefault(*args)

    SetBuilderDefault = staticmethod(SetBuilderDefault)

    def SetRunParallel(*args):
        """
        SetRunParallel(Standard_Boolean const theFlag)

        :type theFlag: bool

        """
        return _BOPTest.BOPTest_Objects_SetRunParallel(*args)

    SetRunParallel = staticmethod(SetRunParallel)

    def RunParallel(*args):
        """
        RunParallel() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.BOPTest_Objects_RunParallel(*args)

    RunParallel = staticmethod(RunParallel)

    def SetFuzzyValue(*args):
        """
        SetFuzzyValue(Standard_Real const theValue)

        :type theValue: float

        """
        return _BOPTest.BOPTest_Objects_SetFuzzyValue(*args)

    SetFuzzyValue = staticmethod(SetFuzzyValue)

    def FuzzyValue(*args):
        """
        FuzzyValue() -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BOPTest.BOPTest_Objects_FuzzyValue(*args)

    FuzzyValue = staticmethod(FuzzyValue)

    def SetNonDestructive(*args):
        """
        SetNonDestructive(Standard_Boolean const theFlag)

        :type theFlag: bool

        """
        return _BOPTest.BOPTest_Objects_SetNonDestructive(*args)

    SetNonDestructive = staticmethod(SetNonDestructive)

    def NonDestructive(*args):
        """
        NonDestructive() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.BOPTest_Objects_NonDestructive(*args)

    NonDestructive = staticmethod(NonDestructive)

    def SetGlue(*args):
        """
        SetGlue(BOPAlgo_GlueEnum const aGlue)

        :type aGlue: OCC.wrapper.BOPAlgo.BOPAlgo_GlueEnum

        """
        return _BOPTest.BOPTest_Objects_SetGlue(*args)

    SetGlue = staticmethod(SetGlue)

    def Glue(*args):
        """
        Glue() -> BOPAlgo_GlueEnum

        :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_GlueEnum

        """
        return _BOPTest.BOPTest_Objects_Glue(*args)

    Glue = staticmethod(Glue)

    def SetDrawWarnShapes(*args):
        """
        SetDrawWarnShapes(Standard_Boolean const bDraw)

        :type bDraw: bool

        """
        return _BOPTest.BOPTest_Objects_SetDrawWarnShapes(*args)

    SetDrawWarnShapes = staticmethod(SetDrawWarnShapes)

    def DrawWarnShapes(*args):
        """
        DrawWarnShapes() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.BOPTest_Objects_DrawWarnShapes(*args)

    DrawWarnShapes = staticmethod(DrawWarnShapes)

    def SetCheckInverted(*args):
        """
        SetCheckInverted(Standard_Boolean const bCheck)

        :type bCheck: bool

        """
        return _BOPTest.BOPTest_Objects_SetCheckInverted(*args)

    SetCheckInverted = staticmethod(SetCheckInverted)

    def CheckInverted(*args):
        """
        CheckInverted() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.BOPTest_Objects_CheckInverted(*args)

    CheckInverted = staticmethod(CheckInverted)

    def SetUseOBB(*args):
        """
        SetUseOBB(Standard_Boolean const bUseOBB)

        :type bUseOBB: bool

        """
        return _BOPTest.BOPTest_Objects_SetUseOBB(*args)

    SetUseOBB = staticmethod(SetUseOBB)

    def UseOBB(*args):
        """
        UseOBB() -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BOPTest.BOPTest_Objects_UseOBB(*args)

    UseOBB = staticmethod(UseOBB)

    def __init__(self):
        this = _BOPTest.new_BOPTest_Objects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BOPTest.delete_BOPTest_Objects
BOPTest_Objects_swigregister = _BOPTest.BOPTest_Objects_swigregister
BOPTest_Objects_swigregister(BOPTest_Objects)

def BOPTest_Objects_PaveFiller(*args):
    """
    BOPTest_Objects_PaveFiller() -> BOPAlgo_PaveFiller

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_PaveFiller

    """
    return _BOPTest.BOPTest_Objects_PaveFiller(*args)

def BOPTest_Objects_Init(*args):
    """BOPTest_Objects_Init()"""
    return _BOPTest.BOPTest_Objects_Init(*args)

def BOPTest_Objects_Clear(*args):
    """BOPTest_Objects_Clear()"""
    return _BOPTest.BOPTest_Objects_Clear(*args)

def BOPTest_Objects_PDS(*args):
    """
    BOPTest_Objects_PDS() -> BOPDS_DS

    :rtype: OCC.wrapper.BOPDS.BOPDS_PDS

    """
    return _BOPTest.BOPTest_Objects_PDS(*args)

def BOPTest_Objects_Builder(*args):
    """
    BOPTest_Objects_Builder() -> BOPAlgo_Builder

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Builder

    """
    return _BOPTest.BOPTest_Objects_Builder(*args)

def BOPTest_Objects_BOP(*args):
    """
    BOPTest_Objects_BOP() -> BOPAlgo_BOP

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_BOP

    """
    return _BOPTest.BOPTest_Objects_BOP(*args)

def BOPTest_Objects_Section(*args):
    """
    BOPTest_Objects_Section() -> BOPAlgo_Section

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Section

    """
    return _BOPTest.BOPTest_Objects_Section(*args)

def BOPTest_Objects_CellsBuilder(*args):
    """
    BOPTest_Objects_CellsBuilder() -> BOPAlgo_CellsBuilder

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_CellsBuilder

    """
    return _BOPTest.BOPTest_Objects_CellsBuilder(*args)

def BOPTest_Objects_Splitter(*args):
    """
    BOPTest_Objects_Splitter() -> BOPAlgo_Splitter

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_Splitter

    """
    return _BOPTest.BOPTest_Objects_Splitter(*args)

def BOPTest_Objects_Shapes(*args):
    """
    BOPTest_Objects_Shapes() -> NCollection_List_TopoDS_Shape

    :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _BOPTest.BOPTest_Objects_Shapes(*args)

def BOPTest_Objects_Tools(*args):
    """
    BOPTest_Objects_Tools() -> NCollection_List_TopoDS_Shape

    :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

    """
    return _BOPTest.BOPTest_Objects_Tools(*args)

def BOPTest_Objects_SetBuilder(*args):
    """
    BOPTest_Objects_SetBuilder(BOPAlgo_Builder theBuilder)

    :type theBuilder: OCC.wrapper.BOPAlgo.BOPAlgo_PBuilder

    """
    return _BOPTest.BOPTest_Objects_SetBuilder(*args)

def BOPTest_Objects_SetBuilderDefault(*args):
    """BOPTest_Objects_SetBuilderDefault()"""
    return _BOPTest.BOPTest_Objects_SetBuilderDefault(*args)

def BOPTest_Objects_SetRunParallel(*args):
    """
    BOPTest_Objects_SetRunParallel(Standard_Boolean const theFlag)

    :type theFlag: bool

    """
    return _BOPTest.BOPTest_Objects_SetRunParallel(*args)

def BOPTest_Objects_RunParallel(*args):
    """
    BOPTest_Objects_RunParallel() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BOPTest.BOPTest_Objects_RunParallel(*args)

def BOPTest_Objects_SetFuzzyValue(*args):
    """
    BOPTest_Objects_SetFuzzyValue(Standard_Real const theValue)

    :type theValue: float

    """
    return _BOPTest.BOPTest_Objects_SetFuzzyValue(*args)

def BOPTest_Objects_FuzzyValue(*args):
    """
    BOPTest_Objects_FuzzyValue() -> Standard_Real

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _BOPTest.BOPTest_Objects_FuzzyValue(*args)

def BOPTest_Objects_SetNonDestructive(*args):
    """
    BOPTest_Objects_SetNonDestructive(Standard_Boolean const theFlag)

    :type theFlag: bool

    """
    return _BOPTest.BOPTest_Objects_SetNonDestructive(*args)

def BOPTest_Objects_NonDestructive(*args):
    """
    BOPTest_Objects_NonDestructive() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BOPTest.BOPTest_Objects_NonDestructive(*args)

def BOPTest_Objects_SetGlue(*args):
    """
    BOPTest_Objects_SetGlue(BOPAlgo_GlueEnum const aGlue)

    :type aGlue: OCC.wrapper.BOPAlgo.BOPAlgo_GlueEnum

    """
    return _BOPTest.BOPTest_Objects_SetGlue(*args)

def BOPTest_Objects_Glue(*args):
    """
    BOPTest_Objects_Glue() -> BOPAlgo_GlueEnum

    :rtype: OCC.wrapper.BOPAlgo.BOPAlgo_GlueEnum

    """
    return _BOPTest.BOPTest_Objects_Glue(*args)

def BOPTest_Objects_SetDrawWarnShapes(*args):
    """
    BOPTest_Objects_SetDrawWarnShapes(Standard_Boolean const bDraw)

    :type bDraw: bool

    """
    return _BOPTest.BOPTest_Objects_SetDrawWarnShapes(*args)

def BOPTest_Objects_DrawWarnShapes(*args):
    """
    BOPTest_Objects_DrawWarnShapes() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BOPTest.BOPTest_Objects_DrawWarnShapes(*args)

def BOPTest_Objects_SetCheckInverted(*args):
    """
    BOPTest_Objects_SetCheckInverted(Standard_Boolean const bCheck)

    :type bCheck: bool

    """
    return _BOPTest.BOPTest_Objects_SetCheckInverted(*args)

def BOPTest_Objects_CheckInverted(*args):
    """
    BOPTest_Objects_CheckInverted() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BOPTest.BOPTest_Objects_CheckInverted(*args)

def BOPTest_Objects_SetUseOBB(*args):
    """
    BOPTest_Objects_SetUseOBB(Standard_Boolean const bUseOBB)

    :type bUseOBB: bool

    """
    return _BOPTest.BOPTest_Objects_SetUseOBB(*args)

def BOPTest_Objects_UseOBB(*args):
    """
    BOPTest_Objects_UseOBB() -> Standard_Boolean

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _BOPTest.BOPTest_Objects_UseOBB(*args)



