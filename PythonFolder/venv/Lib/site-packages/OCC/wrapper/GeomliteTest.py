# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomliteTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomliteTest')
    _GeomliteTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomliteTest', [dirname(__file__)])
        except ImportError:
            import _GeomliteTest
            return _GeomliteTest
        try:
            _mod = imp.load_module('_GeomliteTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomliteTest = swig_import_helper()
    del swig_import_helper
else:
    import _GeomliteTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomliteTest.delete_SwigPyIterator

    def value(self):
        return _GeomliteTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomliteTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomliteTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomliteTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomliteTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomliteTest.SwigPyIterator_copy(self)

    def next(self):
        return _GeomliteTest.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomliteTest.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomliteTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomliteTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomliteTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomliteTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomliteTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomliteTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomliteTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomliteTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomliteTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomliteTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomliteTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomliteTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomliteTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomliteTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomliteTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomliteTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomliteTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomliteTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomliteTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomliteTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomliteTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomliteTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomliteTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomliteTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomliteTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomliteTest.ptr_to_number(item)
ptr_to_number = _GeomliteTest.ptr_to_number

def HashCode(*args):
    return _GeomliteTest.HashCode(*args)
HashCode = _GeomliteTest.HashCode

def ptr_equal(a, b):
    return _GeomliteTest.ptr_equal(a, b)
ptr_equal = _GeomliteTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class GeomliteTest_(object):
    """
    this  package  provides  elementary commands for  curves  and
    surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor I)

        defines all geometric commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def CurveCommands(*args):
        """
        CurveCommands(Draw_Interpretor I)

        defines curve commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__CurveCommands(*args)

    CurveCommands = staticmethod(CurveCommands)

    def SurfaceCommands(*args):
        """
        SurfaceCommands(Draw_Interpretor I)

        defines surface commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__SurfaceCommands(*args)

    SurfaceCommands = staticmethod(SurfaceCommands)

    def API2dCommands(*args):
        """
        API2dCommands(Draw_Interpretor I)

        defines commands to test the Geom2dAPI
        - Intersection
        - Extrema
        - Projection
        - Approximation, interpolation

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__API2dCommands(*args)

    API2dCommands = staticmethod(API2dCommands)

    def ApproxCommands(*args):
        """
        ApproxCommands(Draw_Interpretor I)

        defines constrained curves commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__ApproxCommands(*args)

    ApproxCommands = staticmethod(ApproxCommands)

    def ModificationCommands(*args):
        """
        ModificationCommands(Draw_Interpretor I)

        defines curves and surfaces modification commands.
        - Curve extension to point
        - Surface extension by length

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeomliteTest.GeomliteTest__ModificationCommands(*args)

    ModificationCommands = staticmethod(ModificationCommands)

    def __init__(self):
        """
        this  package  provides  elementary commands for  curves  and
        surface.
        """
        this = _GeomliteTest.new_GeomliteTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomliteTest.delete_GeomliteTest_
GeomliteTest__swigregister = _GeomliteTest.GeomliteTest__swigregister
GeomliteTest__swigregister(GeomliteTest_)

def GeomliteTest__AllCommands(*args):
    """
    GeomliteTest__AllCommands(Draw_Interpretor I)

    defines all geometric commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__AllCommands(*args)

def GeomliteTest__CurveCommands(*args):
    """
    GeomliteTest__CurveCommands(Draw_Interpretor I)

    defines curve commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__CurveCommands(*args)

def GeomliteTest__SurfaceCommands(*args):
    """
    GeomliteTest__SurfaceCommands(Draw_Interpretor I)

    defines surface commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__SurfaceCommands(*args)

def GeomliteTest__API2dCommands(*args):
    """
    GeomliteTest__API2dCommands(Draw_Interpretor I)

    defines commands to test the Geom2dAPI
    - Intersection
    - Extrema
    - Projection
    - Approximation, interpolation

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__API2dCommands(*args)

def GeomliteTest__ApproxCommands(*args):
    """
    GeomliteTest__ApproxCommands(Draw_Interpretor I)

    defines constrained curves commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__ApproxCommands(*args)

def GeomliteTest__ModificationCommands(*args):
    """
    GeomliteTest__ModificationCommands(Draw_Interpretor I)

    defines curves and surfaces modification commands.
    - Curve extension to point
    - Surface extension by length

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeomliteTest.GeomliteTest__ModificationCommands(*args)



