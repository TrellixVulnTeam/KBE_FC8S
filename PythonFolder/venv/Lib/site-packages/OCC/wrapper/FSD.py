# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FSD')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FSD')
    _FSD = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FSD', [dirname(__file__)])
        except ImportError:
            import _FSD
            return _FSD
        try:
            _mod = imp.load_module('_FSD', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FSD = swig_import_helper()
    del swig_import_helper
else:
    import _FSD
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _FSD.delete_SwigPyIterator

    def value(self):
        return _FSD.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _FSD.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _FSD.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _FSD.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _FSD.SwigPyIterator_equal(self, x)

    def copy(self):
        return _FSD.SwigPyIterator_copy(self)

    def next(self):
        return _FSD.SwigPyIterator_next(self)

    def __next__(self):
        return _FSD.SwigPyIterator___next__(self)

    def previous(self):
        return _FSD.SwigPyIterator_previous(self)

    def advance(self, n):
        return _FSD.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _FSD.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _FSD.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _FSD.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _FSD.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _FSD.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _FSD.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _FSD.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FSD.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_FSD.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _FSD.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FSD.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FSD.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _FSD.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _FSD.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _FSD.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _FSD.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_FSD.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _FSD.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _FSD.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _FSD.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _FSD.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _FSD.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _FSD.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _FSD.ptr_to_number(item)
ptr_to_number = _FSD.ptr_to_number

def HashCode(*args):
    return _FSD.HashCode(*args)
HashCode = _FSD.HashCode

def ptr_equal(a, b):
    return _FSD.ptr_equal(a, b)
ptr_equal = _FSD.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class FSD_File(Storage.Storage_BaseDriver):
    """
    A general driver which defines as a file, the
    physical container for data to be stored or retrieved.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FSD_File self) -> FSD_File

        Constructs a driver defining as a file, the physical
        container for data to be stored or retrieved.
        Use the function Open to give the name of the driven file.


        """
        this = _FSD.new_FSD_File(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Open(self, *args):
        """
        Open(FSD_File self, TCollection_AsciiString aName, Storage_OpenMode const aMode) -> Storage_Error

        Assigns as aName the name of the file to be
        driven by this driver. aMode precises if the file is
        opened in read or write mode.
        The function returns Storage_VSOk if the file
        is opened correctly, or any other value of the
        Storage_Error enumeration which specifies the problem encountered.

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aMode: OCC.wrapper.Storage.Storage_OpenMode
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_Open(self, *args)


    def IsEnd(self, *args):
        """
        IsEnd(FSD_File self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FSD.FSD_File_IsEnd(self, *args)


    def Tell(self, *args):
        """
        Tell(FSD_File self) -> Storage_Position

        return position in the file. Return -1 upon error.

        :rtype: OCC.wrapper.Storage.Storage_Position

        """
        return _FSD.FSD_File_Tell(self, *args)


    def IsGoodFileType(*args):
        """
        IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_IsGoodFileType(*args)

    IsGoodFileType = staticmethod(IsGoodFileType)

    def BeginWriteInfoSection(self, *args):
        """
        BeginWriteInfoSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteInfoSection(self, *args)


    def WriteInfo(self, *args):
        """
        WriteInfo(FSD_File self, Standard_Integer const nbObj, TCollection_AsciiString dbVersion, TCollection_AsciiString date, TCollection_AsciiString schemaName, TCollection_AsciiString schemaVersion, TCollection_ExtendedString appName, TCollection_AsciiString appVersion, TCollection_ExtendedString objectType, NCollection_Sequence_TCollection_AsciiString userInfo)

        :type nbObj: int
        :type dbVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type date: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type appName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type appVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type objectType: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type userInfo: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _FSD.FSD_File_WriteInfo(self, *args)


    def EndWriteInfoSection(self, *args):
        """
        EndWriteInfoSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteInfoSection(self, *args)


    def BeginReadInfoSection(self, *args):
        """
        BeginReadInfoSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadInfoSection(self, *args)


    def ReadInfo(self, *args):
        """
        ReadInfo(FSD_File self, TCollection_AsciiString dbVersion, TCollection_AsciiString date, TCollection_AsciiString schemaName, TCollection_AsciiString schemaVersion, TCollection_ExtendedString appName, TCollection_AsciiString appVersion, TCollection_ExtendedString objectType, NCollection_Sequence_TCollection_AsciiString userInfo)

        :type nbObj: int
        :type dbVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type date: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type appName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type appVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type objectType: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type userInfo: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _FSD.FSD_File_ReadInfo(self, *args)


    def ReadCompleteInfo(self, *args):
        """
        ReadCompleteInfo(FSD_File self, Standard_IStream & theIStream, Handle_Storage_Data theData)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theData: OCC.wrapper.Storage.Handle_Storage_Data

        """
        return _FSD.FSD_File_ReadCompleteInfo(self, *args)


    def EndReadInfoSection(self, *args):
        """
        EndReadInfoSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadInfoSection(self, *args)


    def BeginWriteCommentSection(self, *args):
        """
        BeginWriteCommentSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteCommentSection(self, *args)


    def WriteComment(self, *args):
        """
        WriteComment(FSD_File self, NCollection_Sequence_TCollection_ExtendedString userComments)

        :type userComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString

        """
        return _FSD.FSD_File_WriteComment(self, *args)


    def EndWriteCommentSection(self, *args):
        """
        EndWriteCommentSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteCommentSection(self, *args)


    def BeginReadCommentSection(self, *args):
        """
        BeginReadCommentSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadCommentSection(self, *args)


    def ReadComment(self, *args):
        """
        ReadComment(FSD_File self, NCollection_Sequence_TCollection_ExtendedString userComments)

        :type userComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString

        """
        return _FSD.FSD_File_ReadComment(self, *args)


    def EndReadCommentSection(self, *args):
        """
        EndReadCommentSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadCommentSection(self, *args)


    def BeginWriteTypeSection(self, *args):
        """
        BeginWriteTypeSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteTypeSection(self, *args)


    def SetTypeSectionSize(self, *args):
        """
        SetTypeSectionSize(FSD_File self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_File_SetTypeSectionSize(self, *args)


    def WriteTypeInformations(self, *args):
        """
        WriteTypeInformations(FSD_File self, Standard_Integer const typeNum, TCollection_AsciiString typeName)

        :type typeNum: int
        :type typeName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_File_WriteTypeInformations(self, *args)


    def EndWriteTypeSection(self, *args):
        """
        EndWriteTypeSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteTypeSection(self, *args)


    def BeginReadTypeSection(self, *args):
        """
        BeginReadTypeSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadTypeSection(self, *args)


    def TypeSectionSize(self, *args):
        """
        TypeSectionSize(FSD_File self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_File_TypeSectionSize(self, *args)


    def ReadTypeInformations(self, *args):
        """
        ReadTypeInformations(FSD_File self, TCollection_AsciiString typeName)

        :type typeNum: int
        :type typeName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_File_ReadTypeInformations(self, *args)


    def EndReadTypeSection(self, *args):
        """
        EndReadTypeSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadTypeSection(self, *args)


    def BeginWriteRootSection(self, *args):
        """
        BeginWriteRootSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteRootSection(self, *args)


    def SetRootSectionSize(self, *args):
        """
        SetRootSectionSize(FSD_File self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_File_SetRootSectionSize(self, *args)


    def WriteRoot(self, *args):
        """
        WriteRoot(FSD_File self, TCollection_AsciiString rootName, Standard_Integer const aRef, TCollection_AsciiString aType)

        :type rootName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aRef: int
        :type aType: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_File_WriteRoot(self, *args)


    def EndWriteRootSection(self, *args):
        """
        EndWriteRootSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteRootSection(self, *args)


    def BeginReadRootSection(self, *args):
        """
        BeginReadRootSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadRootSection(self, *args)


    def RootSectionSize(self, *args):
        """
        RootSectionSize(FSD_File self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_File_RootSectionSize(self, *args)


    def ReadRoot(self, *args):
        """
        ReadRoot(FSD_File self, TCollection_AsciiString rootName, TCollection_AsciiString aType)

        :type rootName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aRef: int
        :type aType: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_File_ReadRoot(self, *args)


    def EndReadRootSection(self, *args):
        """
        EndReadRootSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadRootSection(self, *args)


    def BeginWriteRefSection(self, *args):
        """
        BeginWriteRefSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteRefSection(self, *args)


    def SetRefSectionSize(self, *args):
        """
        SetRefSectionSize(FSD_File self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_File_SetRefSectionSize(self, *args)


    def WriteReferenceType(self, *args):
        """
        WriteReferenceType(FSD_File self, Standard_Integer const reference, Standard_Integer const typeNum)

        :type reference: int
        :type typeNum: int

        """
        return _FSD.FSD_File_WriteReferenceType(self, *args)


    def EndWriteRefSection(self, *args):
        """
        EndWriteRefSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteRefSection(self, *args)


    def BeginReadRefSection(self, *args):
        """
        BeginReadRefSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadRefSection(self, *args)


    def RefSectionSize(self, *args):
        """
        RefSectionSize(FSD_File self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_File_RefSectionSize(self, *args)


    def ReadReferenceType(self, *args):
        """
        ReadReferenceType(FSD_File self)

        :type reference: int
        :type typeNum: int

        """
        return _FSD.FSD_File_ReadReferenceType(self, *args)


    def EndReadRefSection(self, *args):
        """
        EndReadRefSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadRefSection(self, *args)


    def BeginWriteDataSection(self, *args):
        """
        BeginWriteDataSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginWriteDataSection(self, *args)


    def WritePersistentObjectHeader(self, *args):
        """
        WritePersistentObjectHeader(FSD_File self, Standard_Integer const aRef, Standard_Integer const aType)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_File_WritePersistentObjectHeader(self, *args)


    def BeginWritePersistentObjectData(self, *args):
        """BeginWritePersistentObjectData(FSD_File self)"""
        return _FSD.FSD_File_BeginWritePersistentObjectData(self, *args)


    def BeginWriteObjectData(self, *args):
        """BeginWriteObjectData(FSD_File self)"""
        return _FSD.FSD_File_BeginWriteObjectData(self, *args)


    def EndWriteObjectData(self, *args):
        """EndWriteObjectData(FSD_File self)"""
        return _FSD.FSD_File_EndWriteObjectData(self, *args)


    def EndWritePersistentObjectData(self, *args):
        """EndWritePersistentObjectData(FSD_File self)"""
        return _FSD.FSD_File_EndWritePersistentObjectData(self, *args)


    def EndWriteDataSection(self, *args):
        """
        EndWriteDataSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndWriteDataSection(self, *args)


    def BeginReadDataSection(self, *args):
        """
        BeginReadDataSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_BeginReadDataSection(self, *args)


    def ReadPersistentObjectHeader(self, *args):
        """
        ReadPersistentObjectHeader(FSD_File self)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_File_ReadPersistentObjectHeader(self, *args)


    def BeginReadPersistentObjectData(self, *args):
        """BeginReadPersistentObjectData(FSD_File self)"""
        return _FSD.FSD_File_BeginReadPersistentObjectData(self, *args)


    def BeginReadObjectData(self, *args):
        """BeginReadObjectData(FSD_File self)"""
        return _FSD.FSD_File_BeginReadObjectData(self, *args)


    def EndReadObjectData(self, *args):
        """EndReadObjectData(FSD_File self)"""
        return _FSD.FSD_File_EndReadObjectData(self, *args)


    def EndReadPersistentObjectData(self, *args):
        """EndReadPersistentObjectData(FSD_File self)"""
        return _FSD.FSD_File_EndReadPersistentObjectData(self, *args)


    def EndReadDataSection(self, *args):
        """
        EndReadDataSection(FSD_File self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_EndReadDataSection(self, *args)


    def SkipObject(self, *args):
        """SkipObject(FSD_File self)"""
        return _FSD.FSD_File_SkipObject(self, *args)


    def PutReference(self, *args):
        """
        PutReference(FSD_File self, Standard_Integer const aValue) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutReference(self, *args)


    def PutCharacter(self, *args):
        """
        PutCharacter(FSD_File self, Standard_Character const aValue) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutCharacter(self, *args)


    def PutExtCharacter(self, *args):
        """
        PutExtCharacter(FSD_File self, Standard_ExtCharacter const aValue) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutExtCharacter(self, *args)


    def PutInteger(self, *args):
        """
        PutInteger(FSD_File self, Standard_Integer const aValue) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutInteger(self, *args)


    def PutBoolean(self, *args):
        """
        PutBoolean(FSD_File self, Standard_Boolean const aValue) -> Storage_BaseDriver

        :type aValue: bool
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutBoolean(self, *args)


    def PutReal(self, *args):
        """
        PutReal(FSD_File self, Standard_Real const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutReal(self, *args)


    def PutShortReal(self, *args):
        """
        PutShortReal(FSD_File self, Standard_ShortReal const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_PutShortReal(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(FSD_File self, Standard_Character const aValue) -> Storage_BaseDriver
        __lshift__(FSD_File self, Standard_ExtCharacter const aValue) -> Storage_BaseDriver
        __lshift__(FSD_File self, Standard_Integer const aValue) -> Storage_BaseDriver
        __lshift__(FSD_File self, Standard_Boolean const aValue) -> Storage_BaseDriver
        __lshift__(FSD_File self, Standard_Real const aValue) -> Storage_BaseDriver
        __lshift__(FSD_File self, Standard_ShortReal const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File___lshift__(self, *args)


    def GetReference(self, *args):
        """
        GetReference(FSD_File self) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetReference(self, *args)


    def GetCharacter(self, *args):
        """
        GetCharacter(FSD_File self) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetCharacter(self, *args)


    def GetExtCharacter(self, *args):
        """
        GetExtCharacter(FSD_File self) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetExtCharacter(self, *args)


    def GetInteger(self, *args):
        """
        GetInteger(FSD_File self) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetInteger(self, *args)


    def GetBoolean(self, *args):
        """
        GetBoolean(FSD_File self) -> Storage_BaseDriver

        :type aValue: bool
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetBoolean(self, *args)


    def GetReal(self, *args):
        """
        GetReal(FSD_File self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetReal(self, *args)


    def GetShortReal(self, *args):
        """
        GetShortReal(FSD_File self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File_GetShortReal(self, *args)


    def __rshift__(self, *args):
        """
        __rshift__(FSD_File self) -> Storage_BaseDriver
        __rshift__(FSD_File self) -> Storage_BaseDriver
        __rshift__(FSD_File self) -> Storage_BaseDriver
        __rshift__(FSD_File self) -> Storage_BaseDriver
        __rshift__(FSD_File self) -> Storage_BaseDriver
        __rshift__(FSD_File self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_File___rshift__(self, *args)


    def Close(self, *args):
        """
        Close(FSD_File self) -> Storage_Error

        Closes the file driven by this driver. This file was
        opened by the last call to the function Open.
        The function returns Storage_VSOk if the
        closure is correctly done, or any other value of
        the Storage_Error enumeration which specifies the problem encountered.

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_File_Close(self, *args)


    def Destroy(self, *args):
        """Destroy(FSD_File self)"""
        return _FSD.FSD_File_Destroy(self, *args)


    def MagicNumber(*args):
        """
        MagicNumber() -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _FSD.FSD_File_MagicNumber(*args)

    MagicNumber = staticmethod(MagicNumber)
    __swig_destroy__ = _FSD.delete_FSD_File
FSD_File_swigregister = _FSD.FSD_File_swigregister
FSD_File_swigregister(FSD_File)

def FSD_File_IsGoodFileType(*args):
    """
    FSD_File_IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

    :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Storage.Storage_Error

    """
    return _FSD.FSD_File_IsGoodFileType(*args)

def FSD_File_MagicNumber(*args):
    """
    FSD_File_MagicNumber() -> Standard_CString

    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _FSD.FSD_File_MagicNumber(*args)

class FSD_BinaryFile(Storage.Storage_BaseDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(FSD_BinaryFile self) -> FSD_BinaryFile"""
        this = _FSD.new_FSD_BinaryFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Open(self, *args):
        """
        Open(FSD_BinaryFile self, TCollection_AsciiString aName, Storage_OpenMode const aMode) -> Storage_Error

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aMode: OCC.wrapper.Storage.Storage_OpenMode
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_Open(self, *args)


    def IsEnd(self, *args):
        """
        IsEnd(FSD_BinaryFile self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _FSD.FSD_BinaryFile_IsEnd(self, *args)


    def Tell(self, *args):
        """
        Tell(FSD_BinaryFile self) -> Storage_Position

        return position in the file. Return -1 upon error.

        :rtype: OCC.wrapper.Storage.Storage_Position

        """
        return _FSD.FSD_BinaryFile_Tell(self, *args)


    def IsGoodFileType(*args):
        """
        IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_IsGoodFileType(*args)

    IsGoodFileType = staticmethod(IsGoodFileType)

    def BeginWriteInfoSection(self, *args):
        """
        BeginWriteInfoSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteInfoSection(self, *args)


    def WriteInfo(self, *args):
        """
        WriteInfo(FSD_BinaryFile self, Standard_OStream & theOStream, Standard_Integer const nbObj, TCollection_AsciiString dbVersion, TCollection_AsciiString date, TCollection_AsciiString schemaName, TCollection_AsciiString schemaVersion, TCollection_ExtendedString appName, TCollection_AsciiString appVersion, TCollection_ExtendedString objectType, NCollection_Sequence_TCollection_AsciiString userInfo, Standard_Boolean const theOnlyCount) -> Standard_Integer
        WriteInfo(FSD_BinaryFile self, Standard_Integer const nbObj, TCollection_AsciiString dbVersion, TCollection_AsciiString date, TCollection_AsciiString schemaName, TCollection_AsciiString schemaVersion, TCollection_ExtendedString appName, TCollection_AsciiString appVersion, TCollection_ExtendedString objectType, NCollection_Sequence_TCollection_AsciiString userInfo)

        :type nbObj: int
        :type dbVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type date: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type appName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type appVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type objectType: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type userInfo: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _FSD.FSD_BinaryFile_WriteInfo(self, *args)


    def EndWriteInfoSection(self, *args):
        """
        EndWriteInfoSection(FSD_BinaryFile self) -> Storage_Error
        EndWriteInfoSection(FSD_BinaryFile self, Standard_OStream & theOStream) -> Storage_Error

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteInfoSection(self, *args)


    def BeginReadInfoSection(self, *args):
        """
        BeginReadInfoSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadInfoSection(self, *args)


    def ReadInfo(self, *args):
        """
        ReadInfo(FSD_BinaryFile self, TCollection_AsciiString dbVersion, TCollection_AsciiString date, TCollection_AsciiString schemaName, TCollection_AsciiString schemaVersion, TCollection_ExtendedString appName, TCollection_AsciiString appVersion, TCollection_ExtendedString objectType, NCollection_Sequence_TCollection_AsciiString userInfo)

        :type nbObj: int
        :type dbVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type date: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type schemaVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type appName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type appVersion: OCC.wrapper.TCollection.TCollection_AsciiString
        :type objectType: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type userInfo: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _FSD.FSD_BinaryFile_ReadInfo(self, *args)


    def ReadCompleteInfo(self, *args):
        """
        ReadCompleteInfo(FSD_BinaryFile self, Standard_IStream & theIStream, Handle_Storage_Data theData)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theData: OCC.wrapper.Storage.Handle_Storage_Data

        """
        return _FSD.FSD_BinaryFile_ReadCompleteInfo(self, *args)


    def EndReadInfoSection(self, *args):
        """
        EndReadInfoSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadInfoSection(self, *args)


    def BeginWriteCommentSection(self, *args):
        """
        BeginWriteCommentSection(FSD_BinaryFile self) -> Storage_Error
        BeginWriteCommentSection(FSD_BinaryFile self, Standard_OStream & theOStream) -> Storage_Error

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteCommentSection(self, *args)


    def WriteComment(*args):
        """
        WriteComment(NCollection_Sequence_TCollection_ExtendedString userComments)
        WriteComment(Standard_OStream & theOStream, NCollection_Sequence_TCollection_ExtendedString theComments, Standard_Boolean const theOnlyCount) -> Standard_Integer

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :type theComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
        :type theOnlyCount: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_WriteComment(*args)

    WriteComment = staticmethod(WriteComment)

    def EndWriteCommentSection(self, *args):
        """
        EndWriteCommentSection(FSD_BinaryFile self) -> Storage_Error
        EndWriteCommentSection(FSD_BinaryFile self, Standard_OStream & theOStream) -> Storage_Error

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteCommentSection(self, *args)


    def BeginReadCommentSection(self, *args):
        """
        BeginReadCommentSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadCommentSection(self, *args)


    def ReadComment(*args):
        """
        ReadComment(NCollection_Sequence_TCollection_ExtendedString userComments)
        ReadComment(Standard_IStream & theIStream, NCollection_Sequence_TCollection_ExtendedString userComments)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type userComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString

        """
        return _FSD.FSD_BinaryFile_ReadComment(*args)

    ReadComment = staticmethod(ReadComment)

    def EndReadCommentSection(self, *args):
        """
        EndReadCommentSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadCommentSection(self, *args)


    def BeginWriteTypeSection(self, *args):
        """
        BeginWriteTypeSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteTypeSection(self, *args)


    def SetTypeSectionSize(self, *args):
        """
        SetTypeSectionSize(FSD_BinaryFile self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_BinaryFile_SetTypeSectionSize(self, *args)


    def WriteTypeInformations(self, *args):
        """
        WriteTypeInformations(FSD_BinaryFile self, Standard_Integer const typeNum, TCollection_AsciiString typeName)

        :type typeNum: int
        :type typeName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_BinaryFile_WriteTypeInformations(self, *args)


    def EndWriteTypeSection(self, *args):
        """
        EndWriteTypeSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteTypeSection(self, *args)


    def BeginReadTypeSection(self, *args):
        """
        BeginReadTypeSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadTypeSection(self, *args)


    def TypeSectionSize(*args):
        """
        TypeSectionSize() -> Standard_Integer
        TypeSectionSize(Standard_IStream & theIStream) -> Standard_Integer

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_TypeSectionSize(*args)

    TypeSectionSize = staticmethod(TypeSectionSize)

    def ReadTypeInformations(*args):
        """
        ReadTypeInformations(TCollection_AsciiString typeName)
        ReadTypeInformations(Standard_IStream & theIStream, TCollection_AsciiString typeName)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type typeNum: int
        :type typeName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_BinaryFile_ReadTypeInformations(*args)

    ReadTypeInformations = staticmethod(ReadTypeInformations)

    def EndReadTypeSection(self, *args):
        """
        EndReadTypeSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadTypeSection(self, *args)


    def BeginWriteRootSection(self, *args):
        """
        BeginWriteRootSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteRootSection(self, *args)


    def SetRootSectionSize(self, *args):
        """
        SetRootSectionSize(FSD_BinaryFile self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_BinaryFile_SetRootSectionSize(self, *args)


    def WriteRoot(self, *args):
        """
        WriteRoot(FSD_BinaryFile self, TCollection_AsciiString rootName, Standard_Integer const aRef, TCollection_AsciiString aType)

        :type rootName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aRef: int
        :type aType: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_BinaryFile_WriteRoot(self, *args)


    def EndWriteRootSection(self, *args):
        """
        EndWriteRootSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteRootSection(self, *args)


    def BeginReadRootSection(self, *args):
        """
        BeginReadRootSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadRootSection(self, *args)


    def RootSectionSize(*args):
        """
        RootSectionSize() -> Standard_Integer
        RootSectionSize(Standard_IStream & theIStream) -> Standard_Integer

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_RootSectionSize(*args)

    RootSectionSize = staticmethod(RootSectionSize)

    def ReadRoot(*args):
        """
        ReadRoot(TCollection_AsciiString rootName, TCollection_AsciiString aType)
        ReadRoot(Standard_IStream & theIStream, TCollection_AsciiString rootName, TCollection_AsciiString aType)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type rootName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aRef: int
        :type aType: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_BinaryFile_ReadRoot(*args)

    ReadRoot = staticmethod(ReadRoot)

    def EndReadRootSection(self, *args):
        """
        EndReadRootSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadRootSection(self, *args)


    def BeginWriteRefSection(self, *args):
        """
        BeginWriteRefSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteRefSection(self, *args)


    def SetRefSectionSize(self, *args):
        """
        SetRefSectionSize(FSD_BinaryFile self, Standard_Integer const aSize)

        :type aSize: int

        """
        return _FSD.FSD_BinaryFile_SetRefSectionSize(self, *args)


    def WriteReferenceType(self, *args):
        """
        WriteReferenceType(FSD_BinaryFile self, Standard_Integer const reference, Standard_Integer const typeNum)

        :type reference: int
        :type typeNum: int

        """
        return _FSD.FSD_BinaryFile_WriteReferenceType(self, *args)


    def EndWriteRefSection(self, *args):
        """
        EndWriteRefSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteRefSection(self, *args)


    def BeginReadRefSection(self, *args):
        """
        BeginReadRefSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadRefSection(self, *args)


    def RefSectionSize(*args):
        """
        RefSectionSize() -> Standard_Integer
        RefSectionSize(Standard_IStream & theIStream) -> Standard_Integer

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_RefSectionSize(*args)

    RefSectionSize = staticmethod(RefSectionSize)

    def ReadReferenceType(*args):
        """
        ReadReferenceType()
        ReadReferenceType(Standard_IStream & theIStream)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type reference: int
        :type typeNum: int

        """
        return _FSD.FSD_BinaryFile_ReadReferenceType(*args)

    ReadReferenceType = staticmethod(ReadReferenceType)

    def EndReadRefSection(self, *args):
        """
        EndReadRefSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadRefSection(self, *args)


    def BeginWriteDataSection(self, *args):
        """
        BeginWriteDataSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginWriteDataSection(self, *args)


    def WritePersistentObjectHeader(self, *args):
        """
        WritePersistentObjectHeader(FSD_BinaryFile self, Standard_Integer const aRef, Standard_Integer const aType)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_BinaryFile_WritePersistentObjectHeader(self, *args)


    def BeginWritePersistentObjectData(self, *args):
        """BeginWritePersistentObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_BeginWritePersistentObjectData(self, *args)


    def BeginWriteObjectData(self, *args):
        """BeginWriteObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_BeginWriteObjectData(self, *args)


    def EndWriteObjectData(self, *args):
        """EndWriteObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_EndWriteObjectData(self, *args)


    def EndWritePersistentObjectData(self, *args):
        """EndWritePersistentObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_EndWritePersistentObjectData(self, *args)


    def EndWriteDataSection(self, *args):
        """
        EndWriteDataSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndWriteDataSection(self, *args)


    def BeginReadDataSection(self, *args):
        """
        BeginReadDataSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_BeginReadDataSection(self, *args)


    def ReadPersistentObjectHeader(self, *args):
        """
        ReadPersistentObjectHeader(FSD_BinaryFile self)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_BinaryFile_ReadPersistentObjectHeader(self, *args)


    def BeginReadPersistentObjectData(self, *args):
        """BeginReadPersistentObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_BeginReadPersistentObjectData(self, *args)


    def BeginReadObjectData(self, *args):
        """BeginReadObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_BeginReadObjectData(self, *args)


    def EndReadObjectData(self, *args):
        """EndReadObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_EndReadObjectData(self, *args)


    def EndReadPersistentObjectData(self, *args):
        """EndReadPersistentObjectData(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_EndReadPersistentObjectData(self, *args)


    def EndReadDataSection(self, *args):
        """
        EndReadDataSection(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_EndReadDataSection(self, *args)


    def SkipObject(self, *args):
        """SkipObject(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_SkipObject(self, *args)


    def PutReference(self, *args):
        """
        PutReference(FSD_BinaryFile self, Standard_Integer const aValue) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutReference(self, *args)


    def PutCharacter(self, *args):
        """
        PutCharacter(FSD_BinaryFile self, Standard_Character const aValue) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutCharacter(self, *args)


    def PutExtCharacter(self, *args):
        """
        PutExtCharacter(FSD_BinaryFile self, Standard_ExtCharacter const aValue) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutExtCharacter(self, *args)


    def PutInteger(self, *args):
        """
        PutInteger(FSD_BinaryFile self, Standard_OStream & theOStream, Standard_Integer const aValue, Standard_Boolean const theOnlyCount) -> Standard_Integer
        PutInteger(FSD_BinaryFile self, Standard_Integer const aValue) -> Storage_BaseDriver

        :type aValue: int
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutInteger(self, *args)


    def PutBoolean(self, *args):
        """
        PutBoolean(FSD_BinaryFile self, Standard_Boolean const aValue) -> Storage_BaseDriver

        :type aValue: bool
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutBoolean(self, *args)


    def PutReal(self, *args):
        """
        PutReal(FSD_BinaryFile self, Standard_Real const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutReal(self, *args)


    def PutShortReal(self, *args):
        """
        PutShortReal(FSD_BinaryFile self, Standard_ShortReal const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_PutShortReal(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(FSD_BinaryFile self, Standard_Character const aValue) -> Storage_BaseDriver
        __lshift__(FSD_BinaryFile self, Standard_ExtCharacter const aValue) -> Storage_BaseDriver
        __lshift__(FSD_BinaryFile self, Standard_Integer const aValue) -> Storage_BaseDriver
        __lshift__(FSD_BinaryFile self, Standard_Boolean const aValue) -> Storage_BaseDriver
        __lshift__(FSD_BinaryFile self, Standard_Real const aValue) -> Storage_BaseDriver
        __lshift__(FSD_BinaryFile self, Standard_ShortReal const aValue) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile___lshift__(self, *args)


    def GetCharacter(self, *args):
        """
        GetCharacter(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_Character
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_GetCharacter(self, *args)


    def GetReference(*args):
        """
        GetReference() -> Storage_BaseDriver
        GetReference(Standard_IStream & theIStream)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type aValue: int

        """
        return _FSD.FSD_BinaryFile_GetReference(*args)

    GetReference = staticmethod(GetReference)

    def GetExtCharacter(self, *args):
        """
        GetExtCharacter(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_GetExtCharacter(self, *args)


    def GetInteger(*args):
        """
        GetInteger() -> Storage_BaseDriver
        GetInteger(Standard_IStream & theIStream)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type aValue: int

        """
        return _FSD.FSD_BinaryFile_GetInteger(*args)

    GetInteger = staticmethod(GetInteger)

    def GetBoolean(self, *args):
        """
        GetBoolean(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: bool
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_GetBoolean(self, *args)


    def GetReal(self, *args):
        """
        GetReal(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_GetReal(self, *args)


    def GetShortReal(self, *args):
        """
        GetShortReal(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile_GetShortReal(self, *args)


    def __rshift__(self, *args):
        """
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver
        __rshift__(FSD_BinaryFile self) -> Storage_BaseDriver

        :type aValue: float
        :rtype: OCC.wrapper.Storage.Storage_BaseDriver

        """
        return _FSD.FSD_BinaryFile___rshift__(self, *args)


    def Close(self, *args):
        """
        Close(FSD_BinaryFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_BinaryFile_Close(self, *args)


    def Destroy(self, *args):
        """Destroy(FSD_BinaryFile self)"""
        return _FSD.FSD_BinaryFile_Destroy(self, *args)


    def InverseInt(*args):
        """
        InverseInt(Standard_Integer const theValue) -> Standard_Integer

        Inverse bytes in integer value

        :type theValue: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_InverseInt(*args)

    InverseInt = staticmethod(InverseInt)

    def InverseExtChar(*args):
        """
        InverseExtChar(Standard_ExtCharacter const theValue) -> Standard_ExtCharacter

        Inverse bytes in extended character value

        :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
        :rtype: OCC.wrapper.Standard.Standard_ExtCharacter

        """
        return _FSD.FSD_BinaryFile_InverseExtChar(*args)

    InverseExtChar = staticmethod(InverseExtChar)

    def InverseReal(*args):
        """
        InverseReal(Standard_Real const theValue) -> Standard_Real

        Inverse bytes in real value

        :type theValue: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _FSD.FSD_BinaryFile_InverseReal(*args)

    InverseReal = staticmethod(InverseReal)

    def InverseShortReal(*args):
        """
        InverseShortReal(Standard_ShortReal const theValue) -> Standard_ShortReal

        Inverse bytes in short real value

        :type theValue: float
        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _FSD.FSD_BinaryFile_InverseShortReal(*args)

    InverseShortReal = staticmethod(InverseShortReal)

    def InverseSize(*args):
        """
        InverseSize(Standard_Size const theValue) -> Standard_Size

        Inverse bytes in size value

        :type theValue: int
        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _FSD.FSD_BinaryFile_InverseSize(*args)

    InverseSize = staticmethod(InverseSize)

    def InverseUint64(*args):
        """
        InverseUint64(uint64_t const theValue) -> uint64_t

        Inverse bytes in 64bit unsigned int value

        :type theValue: uint64_t
        :rtype: uint64_t

        """
        return _FSD.FSD_BinaryFile_InverseUint64(*args)

    InverseUint64 = staticmethod(InverseUint64)

    def ReadHeader(*args):
        """
        ReadHeader(Standard_IStream & theIStream, FSD_FileHeader & theFileHeader)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theFileHeader: OCC.wrapper.FSD.FSD_FileHeader

        """
        return _FSD.FSD_BinaryFile_ReadHeader(*args)

    ReadHeader = staticmethod(ReadHeader)

    def ReadHeaderData(*args):
        """
        ReadHeaderData(Standard_IStream & theIStream, Handle_Storage_HeaderData theHeaderData)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theHeaderData: OCC.wrapper.Storage.Handle_Storage_HeaderData

        """
        return _FSD.FSD_BinaryFile_ReadHeaderData(*args)

    ReadHeaderData = staticmethod(ReadHeaderData)

    def ReadString(*args):
        """
        ReadString(Standard_IStream & theIStream, TCollection_AsciiString buffer)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type buffer: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _FSD.FSD_BinaryFile_ReadString(*args)

    ReadString = staticmethod(ReadString)

    def ReadExtendedString(*args):
        """
        ReadExtendedString(Standard_IStream & theIStream, TCollection_ExtendedString buffer)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type buffer: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _FSD.FSD_BinaryFile_ReadExtendedString(*args)

    ReadExtendedString = staticmethod(ReadExtendedString)

    def WriteHeader(*args):
        """
        WriteHeader(Standard_OStream & theOStream, FSD_FileHeader const & theHeader, Standard_Boolean const theOnlyCount) -> Standard_Integer

        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :type theHeader: OCC.wrapper.FSD.FSD_FileHeader
        :type theOnlyCount: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _FSD.FSD_BinaryFile_WriteHeader(*args)

    WriteHeader = staticmethod(WriteHeader)

    def MagicNumber(*args):
        """
        MagicNumber() -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _FSD.FSD_BinaryFile_MagicNumber(*args)

    MagicNumber = staticmethod(MagicNumber)
    __swig_destroy__ = _FSD.delete_FSD_BinaryFile
FSD_BinaryFile_swigregister = _FSD.FSD_BinaryFile_swigregister
FSD_BinaryFile_swigregister(FSD_BinaryFile)

def FSD_BinaryFile_IsGoodFileType(*args):
    """
    FSD_BinaryFile_IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

    :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Storage.Storage_Error

    """
    return _FSD.FSD_BinaryFile_IsGoodFileType(*args)

def FSD_BinaryFile_WriteComment(*args):
    """
    WriteComment(NCollection_Sequence_TCollection_ExtendedString userComments)
    FSD_BinaryFile_WriteComment(Standard_OStream & theOStream, NCollection_Sequence_TCollection_ExtendedString theComments, Standard_Boolean const theOnlyCount) -> Standard_Integer

    :type theOStream: OCC.wrapper.Standard.Standard_OStream
    :type theComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
    :type theOnlyCount: bool
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_WriteComment(*args)

def FSD_BinaryFile_ReadComment(*args):
    """
    ReadComment(NCollection_Sequence_TCollection_ExtendedString userComments)
    FSD_BinaryFile_ReadComment(Standard_IStream & theIStream, NCollection_Sequence_TCollection_ExtendedString userComments)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type userComments: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString

    """
    return _FSD.FSD_BinaryFile_ReadComment(*args)

def FSD_BinaryFile_TypeSectionSize(*args):
    """
    TypeSectionSize() -> Standard_Integer
    FSD_BinaryFile_TypeSectionSize(Standard_IStream & theIStream) -> Standard_Integer

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_TypeSectionSize(*args)

def FSD_BinaryFile_ReadTypeInformations(*args):
    """
    ReadTypeInformations(TCollection_AsciiString typeName)
    FSD_BinaryFile_ReadTypeInformations(Standard_IStream & theIStream, TCollection_AsciiString typeName)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type typeNum: int
    :type typeName: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _FSD.FSD_BinaryFile_ReadTypeInformations(*args)

def FSD_BinaryFile_RootSectionSize(*args):
    """
    RootSectionSize() -> Standard_Integer
    FSD_BinaryFile_RootSectionSize(Standard_IStream & theIStream) -> Standard_Integer

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_RootSectionSize(*args)

def FSD_BinaryFile_ReadRoot(*args):
    """
    ReadRoot(TCollection_AsciiString rootName, TCollection_AsciiString aType)
    FSD_BinaryFile_ReadRoot(Standard_IStream & theIStream, TCollection_AsciiString rootName, TCollection_AsciiString aType)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type rootName: OCC.wrapper.TCollection.TCollection_AsciiString
    :type aRef: int
    :type aType: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _FSD.FSD_BinaryFile_ReadRoot(*args)

def FSD_BinaryFile_RefSectionSize(*args):
    """
    RefSectionSize() -> Standard_Integer
    FSD_BinaryFile_RefSectionSize(Standard_IStream & theIStream) -> Standard_Integer

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_RefSectionSize(*args)

def FSD_BinaryFile_ReadReferenceType(*args):
    """
    ReadReferenceType()
    FSD_BinaryFile_ReadReferenceType(Standard_IStream & theIStream)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type reference: int
    :type typeNum: int

    """
    return _FSD.FSD_BinaryFile_ReadReferenceType(*args)

def FSD_BinaryFile_GetReference(*args):
    """
    GetReference() -> Storage_BaseDriver
    FSD_BinaryFile_GetReference(Standard_IStream & theIStream)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type aValue: int

    """
    return _FSD.FSD_BinaryFile_GetReference(*args)

def FSD_BinaryFile_GetInteger(*args):
    """
    GetInteger() -> Storage_BaseDriver
    FSD_BinaryFile_GetInteger(Standard_IStream & theIStream)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type aValue: int

    """
    return _FSD.FSD_BinaryFile_GetInteger(*args)

def FSD_BinaryFile_InverseInt(*args):
    """
    FSD_BinaryFile_InverseInt(Standard_Integer const theValue) -> Standard_Integer

    Inverse bytes in integer value

    :type theValue: int
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_InverseInt(*args)

def FSD_BinaryFile_InverseExtChar(*args):
    """
    FSD_BinaryFile_InverseExtChar(Standard_ExtCharacter const theValue) -> Standard_ExtCharacter

    Inverse bytes in extended character value

    :type theValue: OCC.wrapper.Standard.Standard_ExtCharacter
    :rtype: OCC.wrapper.Standard.Standard_ExtCharacter

    """
    return _FSD.FSD_BinaryFile_InverseExtChar(*args)

def FSD_BinaryFile_InverseReal(*args):
    """
    FSD_BinaryFile_InverseReal(Standard_Real const theValue) -> Standard_Real

    Inverse bytes in real value

    :type theValue: float
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _FSD.FSD_BinaryFile_InverseReal(*args)

def FSD_BinaryFile_InverseShortReal(*args):
    """
    FSD_BinaryFile_InverseShortReal(Standard_ShortReal const theValue) -> Standard_ShortReal

    Inverse bytes in short real value

    :type theValue: float
    :rtype: OCC.wrapper.Standard.Standard_ShortReal

    """
    return _FSD.FSD_BinaryFile_InverseShortReal(*args)

def FSD_BinaryFile_InverseSize(*args):
    """
    FSD_BinaryFile_InverseSize(Standard_Size const theValue) -> Standard_Size

    Inverse bytes in size value

    :type theValue: int
    :rtype: OCC.wrapper.Standard.Standard_Size

    """
    return _FSD.FSD_BinaryFile_InverseSize(*args)

def FSD_BinaryFile_InverseUint64(*args):
    """
    FSD_BinaryFile_InverseUint64(uint64_t const theValue) -> uint64_t

    Inverse bytes in 64bit unsigned int value

    :type theValue: uint64_t
    :rtype: uint64_t

    """
    return _FSD.FSD_BinaryFile_InverseUint64(*args)

def FSD_BinaryFile_ReadHeader(*args):
    """
    FSD_BinaryFile_ReadHeader(Standard_IStream & theIStream, FSD_FileHeader & theFileHeader)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type theFileHeader: OCC.wrapper.FSD.FSD_FileHeader

    """
    return _FSD.FSD_BinaryFile_ReadHeader(*args)

def FSD_BinaryFile_ReadHeaderData(*args):
    """
    FSD_BinaryFile_ReadHeaderData(Standard_IStream & theIStream, Handle_Storage_HeaderData theHeaderData)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type theHeaderData: OCC.wrapper.Storage.Handle_Storage_HeaderData

    """
    return _FSD.FSD_BinaryFile_ReadHeaderData(*args)

def FSD_BinaryFile_ReadString(*args):
    """
    FSD_BinaryFile_ReadString(Standard_IStream & theIStream, TCollection_AsciiString buffer)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type buffer: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _FSD.FSD_BinaryFile_ReadString(*args)

def FSD_BinaryFile_ReadExtendedString(*args):
    """
    FSD_BinaryFile_ReadExtendedString(Standard_IStream & theIStream, TCollection_ExtendedString buffer)

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type buffer: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _FSD.FSD_BinaryFile_ReadExtendedString(*args)

def FSD_BinaryFile_WriteHeader(*args):
    """
    FSD_BinaryFile_WriteHeader(Standard_OStream & theOStream, FSD_FileHeader const & theHeader, Standard_Boolean const theOnlyCount) -> Standard_Integer

    :type theOStream: OCC.wrapper.Standard.Standard_OStream
    :type theHeader: OCC.wrapper.FSD.FSD_FileHeader
    :type theOnlyCount: bool
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _FSD.FSD_BinaryFile_WriteHeader(*args)

def FSD_BinaryFile_MagicNumber(*args):
    """
    FSD_BinaryFile_MagicNumber() -> Standard_CString

    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _FSD.FSD_BinaryFile_MagicNumber(*args)

class FSD_CmpFile(FSD_File):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(FSD_CmpFile self) -> FSD_CmpFile"""
        this = _FSD.new_FSD_CmpFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Open(self, *args):
        """
        Open(FSD_CmpFile self, TCollection_AsciiString aName, Storage_OpenMode const aMode) -> Storage_Error

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aMode: OCC.wrapper.Storage.Storage_OpenMode
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_CmpFile_Open(self, *args)


    def IsGoodFileType(*args):
        """
        IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

        :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_CmpFile_IsGoodFileType(*args)

    IsGoodFileType = staticmethod(IsGoodFileType)

    def BeginWriteInfoSection(self, *args):
        """
        BeginWriteInfoSection(FSD_CmpFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_CmpFile_BeginWriteInfoSection(self, *args)


    def BeginReadInfoSection(self, *args):
        """
        BeginReadInfoSection(FSD_CmpFile self) -> Storage_Error

        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _FSD.FSD_CmpFile_BeginReadInfoSection(self, *args)


    def WritePersistentObjectHeader(self, *args):
        """
        WritePersistentObjectHeader(FSD_CmpFile self, Standard_Integer const aRef, Standard_Integer const aType)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_CmpFile_WritePersistentObjectHeader(self, *args)


    def BeginWritePersistentObjectData(self, *args):
        """BeginWritePersistentObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_BeginWritePersistentObjectData(self, *args)


    def BeginWriteObjectData(self, *args):
        """BeginWriteObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_BeginWriteObjectData(self, *args)


    def EndWriteObjectData(self, *args):
        """EndWriteObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_EndWriteObjectData(self, *args)


    def EndWritePersistentObjectData(self, *args):
        """EndWritePersistentObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_EndWritePersistentObjectData(self, *args)


    def ReadPersistentObjectHeader(self, *args):
        """
        ReadPersistentObjectHeader(FSD_CmpFile self)

        :type aRef: int
        :type aType: int

        """
        return _FSD.FSD_CmpFile_ReadPersistentObjectHeader(self, *args)


    def BeginReadPersistentObjectData(self, *args):
        """BeginReadPersistentObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_BeginReadPersistentObjectData(self, *args)


    def BeginReadObjectData(self, *args):
        """BeginReadObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_BeginReadObjectData(self, *args)


    def EndReadObjectData(self, *args):
        """EndReadObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_EndReadObjectData(self, *args)


    def EndReadPersistentObjectData(self, *args):
        """EndReadPersistentObjectData(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_EndReadPersistentObjectData(self, *args)


    def Destroy(self, *args):
        """Destroy(FSD_CmpFile self)"""
        return _FSD.FSD_CmpFile_Destroy(self, *args)


    def MagicNumber(*args):
        """
        MagicNumber() -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _FSD.FSD_CmpFile_MagicNumber(*args)

    MagicNumber = staticmethod(MagicNumber)
    __swig_destroy__ = _FSD.delete_FSD_CmpFile
FSD_CmpFile_swigregister = _FSD.FSD_CmpFile_swigregister
FSD_CmpFile_swigregister(FSD_CmpFile)

def FSD_CmpFile_IsGoodFileType(*args):
    """
    FSD_CmpFile_IsGoodFileType(TCollection_AsciiString aName) -> Storage_Error

    :type aName: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Storage.Storage_Error

    """
    return _FSD.FSD_CmpFile_IsGoodFileType(*args)

def FSD_CmpFile_MagicNumber(*args):
    """
    FSD_CmpFile_MagicNumber() -> Standard_CString

    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _FSD.FSD_CmpFile_MagicNumber(*args)



