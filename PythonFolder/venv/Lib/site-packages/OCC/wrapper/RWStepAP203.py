# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepAP203')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepAP203')
    _RWStepAP203 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepAP203', [dirname(__file__)])
        except ImportError:
            import _RWStepAP203
            return _RWStepAP203
        try:
            _mod = imp.load_module('_RWStepAP203', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepAP203 = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepAP203
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepAP203.delete_SwigPyIterator

    def value(self):
        return _RWStepAP203.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepAP203.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepAP203.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepAP203.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepAP203.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepAP203.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepAP203.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepAP203.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepAP203.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepAP203.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepAP203.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepAP203.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepAP203.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepAP203.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepAP203.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepAP203.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepAP203.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepAP203.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepAP203.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepAP203.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepAP203.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepAP203.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepAP203.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepAP203.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepAP203.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepAP203.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepAP203.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepAP203.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepAP203.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepAP203.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepAP203.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepAP203.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepAP203.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepAP203.ptr_to_number(item)
ptr_to_number = _RWStepAP203.ptr_to_number

def HashCode(*args):
    return _RWStepAP203.HashCode(*args)
HashCode = _RWStepAP203.HashCode

def ptr_equal(a, b):
    return _RWStepAP203.ptr_equal(a, b)
ptr_equal = _RWStepAP203.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepAP203
else:
    import StepAP203
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
class RWStepAP203_RWCcDesignPersonAndOrganizationAssignment(object):
    """Read & Write tool for CcDesignPersonAndOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment self) -> RWStepAP203_RWCcDesignPersonAndOrganizationAssignment

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignPersonAndOrganizationAssignment ent)

        Reads CcDesignPersonAndOrganizationAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment self, StepData_StepWriter SW, Handle_StepAP203_CcDesignPersonAndOrganizationAssignment ent)

        Writes CcDesignPersonAndOrganizationAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment self, Handle_StepAP203_CcDesignPersonAndOrganizationAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignPersonAndOrganizationAssignment
RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister
RWStepAP203_RWCcDesignPersonAndOrganizationAssignment_swigregister(RWStepAP203_RWCcDesignPersonAndOrganizationAssignment)

class RWStepAP203_RWChangeRequest(object):
    """Read & Write tool for ChangeRequest"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWChangeRequest self) -> RWStepAP203_RWChangeRequest

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWChangeRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWChangeRequest self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_ChangeRequest ent)

        Reads ChangeRequest

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWChangeRequest self, StepData_StepWriter SW, Handle_StepAP203_ChangeRequest ent)

        Writes ChangeRequest

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWChangeRequest self, Handle_StepAP203_ChangeRequest ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWChangeRequest_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWChangeRequest
RWStepAP203_RWChangeRequest_swigregister = _RWStepAP203.RWStepAP203_RWChangeRequest_swigregister
RWStepAP203_RWChangeRequest_swigregister(RWStepAP203_RWChangeRequest)

class RWStepAP203_RWStartWork(object):
    """Read & Write tool for StartWork"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWStartWork self) -> RWStepAP203_RWStartWork

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWStartWork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWStartWork self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_StartWork ent)

        Reads StartWork

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWStartWork self, StepData_StepWriter SW, Handle_StepAP203_StartWork ent)

        Writes StartWork

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWStartWork self, Handle_StepAP203_StartWork ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWStartWork_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWStartWork
RWStepAP203_RWStartWork_swigregister = _RWStepAP203.RWStepAP203_RWStartWork_swigregister
RWStepAP203_RWStartWork_swigregister(RWStepAP203_RWStartWork)

class RWStepAP203_RWChange(object):
    """Read & Write tool for Change"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWChange self) -> RWStepAP203_RWChange

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWChange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWChange self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_Change ent)

        Reads Change

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_Change

        """
        return _RWStepAP203.RWStepAP203_RWChange_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWChange self, StepData_StepWriter SW, Handle_StepAP203_Change ent)

        Writes Change

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_Change

        """
        return _RWStepAP203.RWStepAP203_RWChange_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWChange self, Handle_StepAP203_Change ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_Change
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWChange_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWChange
RWStepAP203_RWChange_swigregister = _RWStepAP203.RWStepAP203_RWChange_swigregister
RWStepAP203_RWChange_swigregister(RWStepAP203_RWChange)

class RWStepAP203_RWStartRequest(object):
    """Read & Write tool for StartRequest"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWStartRequest self) -> RWStepAP203_RWStartRequest

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWStartRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWStartRequest self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_StartRequest ent)

        Reads StartRequest

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWStartRequest self, StepData_StepWriter SW, Handle_StepAP203_StartRequest ent)

        Writes StartRequest

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWStartRequest self, Handle_StepAP203_StartRequest ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWStartRequest_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWStartRequest
RWStepAP203_RWStartRequest_swigregister = _RWStepAP203.RWStepAP203_RWStartRequest_swigregister
RWStepAP203_RWStartRequest_swigregister(RWStepAP203_RWStartRequest)

class RWStepAP203_RWCcDesignDateAndTimeAssignment(object):
    """Read & Write tool for CcDesignDateAndTimeAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignDateAndTimeAssignment self) -> RWStepAP203_RWCcDesignDateAndTimeAssignment

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignDateAndTimeAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignDateAndTimeAssignment ent)

        Reads CcDesignDateAndTimeAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignDateAndTimeAssignment self, StepData_StepWriter SW, Handle_StepAP203_CcDesignDateAndTimeAssignment ent)

        Writes CcDesignDateAndTimeAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignDateAndTimeAssignment self, Handle_StepAP203_CcDesignDateAndTimeAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignDateAndTimeAssignment
RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister
RWStepAP203_RWCcDesignDateAndTimeAssignment_swigregister(RWStepAP203_RWCcDesignDateAndTimeAssignment)

class RWStepAP203_RWCcDesignApproval(object):
    """Read & Write tool for CcDesignApproval"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignApproval self) -> RWStepAP203_RWCcDesignApproval

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignApproval self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignApproval ent)

        Reads CcDesignApproval

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignApproval

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignApproval self, StepData_StepWriter SW, Handle_StepAP203_CcDesignApproval ent)

        Writes CcDesignApproval

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignApproval

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignApproval self, Handle_StepAP203_CcDesignApproval ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignApproval
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignApproval_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignApproval
RWStepAP203_RWCcDesignApproval_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignApproval_swigregister
RWStepAP203_RWCcDesignApproval_swigregister(RWStepAP203_RWCcDesignApproval)

class RWStepAP203_RWCcDesignContract(object):
    """Read & Write tool for CcDesignContract"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignContract self) -> RWStepAP203_RWCcDesignContract

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignContract self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignContract ent)

        Reads CcDesignContract

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignContract

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignContract self, StepData_StepWriter SW, Handle_StepAP203_CcDesignContract ent)

        Writes CcDesignContract

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignContract

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignContract self, Handle_StepAP203_CcDesignContract ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignContract
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignContract_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignContract
RWStepAP203_RWCcDesignContract_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignContract_swigregister
RWStepAP203_RWCcDesignContract_swigregister(RWStepAP203_RWCcDesignContract)

class RWStepAP203_RWCcDesignCertification(object):
    """Read & Write tool for CcDesignCertification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignCertification self) -> RWStepAP203_RWCcDesignCertification

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignCertification self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignCertification ent)

        Reads CcDesignCertification

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignCertification

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignCertification self, StepData_StepWriter SW, Handle_StepAP203_CcDesignCertification ent)

        Writes CcDesignCertification

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignCertification

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignCertification self, Handle_StepAP203_CcDesignCertification ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignCertification
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignCertification_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignCertification
RWStepAP203_RWCcDesignCertification_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignCertification_swigregister
RWStepAP203_RWCcDesignCertification_swigregister(RWStepAP203_RWCcDesignCertification)

class RWStepAP203_RWCcDesignSpecificationReference(object):
    """Read & Write tool for CcDesignSpecificationReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignSpecificationReference self) -> RWStepAP203_RWCcDesignSpecificationReference

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignSpecificationReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignSpecificationReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignSpecificationReference ent)

        Reads CcDesignSpecificationReference

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSpecificationReference

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignSpecificationReference self, StepData_StepWriter SW, Handle_StepAP203_CcDesignSpecificationReference ent)

        Writes CcDesignSpecificationReference

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSpecificationReference

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignSpecificationReference self, Handle_StepAP203_CcDesignSpecificationReference ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSpecificationReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignSpecificationReference
RWStepAP203_RWCcDesignSpecificationReference_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignSpecificationReference_swigregister
RWStepAP203_RWCcDesignSpecificationReference_swigregister(RWStepAP203_RWCcDesignSpecificationReference)

class RWStepAP203_RWCcDesignSecurityClassification(object):
    """Read & Write tool for CcDesignSecurityClassification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP203_RWCcDesignSecurityClassification self) -> RWStepAP203_RWCcDesignSecurityClassification

        Empty constructor


        """
        this = _RWStepAP203.new_RWStepAP203_RWCcDesignSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP203_RWCcDesignSecurityClassification self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP203_CcDesignSecurityClassification ent)

        Reads CcDesignSecurityClassification

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSecurityClassification

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP203_RWCcDesignSecurityClassification self, StepData_StepWriter SW, Handle_StepAP203_CcDesignSecurityClassification ent)

        Writes CcDesignSecurityClassification

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSecurityClassification

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP203_RWCcDesignSecurityClassification self, Handle_StepAP203_CcDesignSecurityClassification ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP203.Handle_StepAP203_CcDesignSecurityClassification
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_Share(self, *args)

    __swig_destroy__ = _RWStepAP203.delete_RWStepAP203_RWCcDesignSecurityClassification
RWStepAP203_RWCcDesignSecurityClassification_swigregister = _RWStepAP203.RWStepAP203_RWCcDesignSecurityClassification_swigregister
RWStepAP203_RWCcDesignSecurityClassification_swigregister(RWStepAP203_RWCcDesignSecurityClassification)



