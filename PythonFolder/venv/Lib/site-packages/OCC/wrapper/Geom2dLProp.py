# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dLProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dLProp')
    _Geom2dLProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dLProp', [dirname(__file__)])
        except ImportError:
            import _Geom2dLProp
            return _Geom2dLProp
        try:
            _mod = imp.load_module('_Geom2dLProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dLProp = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dLProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dLProp.delete_SwigPyIterator

    def value(self):
        return _Geom2dLProp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2dLProp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2dLProp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2dLProp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2dLProp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2dLProp.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2dLProp.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2dLProp.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2dLProp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2dLProp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2dLProp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2dLProp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2dLProp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2dLProp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2dLProp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2dLProp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geom2dLProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dLProp.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Geom2dLProp.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dLProp.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dLProp.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dLProp.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Geom2dLProp.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Geom2dLProp.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Geom2dLProp.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dLProp.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Geom2dLProp.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dLProp.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dLProp.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dLProp.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Geom2dLProp.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Geom2dLProp.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Geom2dLProp.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Geom2dLProp.ptr_to_number(item)
ptr_to_number = _Geom2dLProp.ptr_to_number

def HashCode(*args):
    return _Geom2dLProp.HashCode(*args)
HashCode = _Geom2dLProp.HashCode

def ptr_equal(a, b):
    return _Geom2dLProp.ptr_equal(a, b)
ptr_equal = _Geom2dLProp.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LProp
else:
    import LProp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class Geom2dLProp_FuncCurExt(math.math_FunctionWithDerivative):
    """Function used to find the extremas of curvature in 2d."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dLProp_FuncCurExt self, Handle_Geom2d_Curve C, Standard_Real const Tol) -> Geom2dLProp_FuncCurExt

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type Tol: float

        """
        this = _Geom2dLProp.new_Geom2dLProp_FuncCurExt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(Geom2dLProp_FuncCurExt self, Standard_Real const X) -> Standard_Boolean

        Returns the value for the variable <X>.

        :type X: float
        :type F: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurExt_Value(self, *args)


    def Derivative(self, *args):
        """
        Derivative(Geom2dLProp_FuncCurExt self, Standard_Real const X) -> Standard_Boolean

        Returns the derivative for the variable <X>.

        :type X: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurExt_Derivative(self, *args)


    def Values(self, *args):
        """
        Values(Geom2dLProp_FuncCurExt self, Standard_Real const X) -> Standard_Boolean

        Returns the value of the function and the derivative
        for the variable <X>.

        :type X: float
        :type F: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurExt_Values(self, *args)


    def IsMinKC(self, *args):
        """
        IsMinKC(Geom2dLProp_FuncCurExt self, Standard_Real const Param) -> Standard_Boolean

        True  if  Param  corresponds  to  a minus
        of the radius of curvature.

        :type Param: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurExt_IsMinKC(self, *args)

    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_FuncCurExt
Geom2dLProp_FuncCurExt_swigregister = _Geom2dLProp.Geom2dLProp_FuncCurExt_swigregister
Geom2dLProp_FuncCurExt_swigregister(Geom2dLProp_FuncCurExt)

class Geom2dLProp_CLProps2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dLProp_CLProps2d self, Handle_Geom2d_Curve C, Standard_Integer const N, Standard_Real const Resolution) -> Geom2dLProp_CLProps2d
        __init__(Geom2dLProp_CLProps2d self, Handle_Geom2d_Curve C, Standard_Real const U, Standard_Integer const N, Standard_Real const Resolution) -> Geom2dLProp_CLProps2d
        __init__(Geom2dLProp_CLProps2d self, Standard_Integer const N, Standard_Real const Resolution) -> Geom2dLProp_CLProps2d

        Same as previous constructor but here the parameter is
        set to the value <U> and the curve is set
        with SetCurve.
        the curve can have a empty constructor
        All the computations done will be related to <C> and <U>
        when the functions "set" will be done.

        :type N: int
        :type Resolution: float

        """
        this = _Geom2dLProp.new_Geom2dLProp_CLProps2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetParameter(self, *args):
        """
        SetParameter(Geom2dLProp_CLProps2d self, Standard_Real const U)

        Initializes the local properties of the curve
        for the parameter value <U>.

        :type U: float

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_SetParameter(self, *args)


    def SetCurve(self, *args):
        """
        SetCurve(Geom2dLProp_CLProps2d self, Handle_Geom2d_Curve C)

        Initializes the local properties of the curve
        for the new curve.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_SetCurve(self, *args)


    def Value(self, *args):
        """
        Returns the Point.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _Geom2dLProp.Geom2dLProp_CLProps2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def D1(self, *args):
        """
        Returns the first derivative.
        The derivative is computed if it has not been yet.

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        res = _Geom2dLProp.Geom2dLProp_CLProps2d_D1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def D2(self, *args):
        """
        Returns the second derivative.
        The derivative is computed if it has not been yet.

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        res = _Geom2dLProp.Geom2dLProp_CLProps2d_D2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def D3(self, *args):
        """
        Returns the third derivative.
        The derivative is computed if it has not been yet.

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        res = _Geom2dLProp.Geom2dLProp_CLProps2d_D3(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsTangentDefined(self, *args):
        """
        IsTangentDefined(Geom2dLProp_CLProps2d self) -> Standard_Boolean

        Returns True if the tangent is defined.
        For example, the tangent is not defined if the
        three first derivatives are all null.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_IsTangentDefined(self, *args)


    def Tangent(self, *args):
        """
        Tangent(Geom2dLProp_CLProps2d self, gp_Dir2d D)

        output  the tangent direction <D>

        :type D: OCC.wrapper.gp.gp_Dir2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Tangent(self, *args)


    def Curvature(self, *args):
        """
        Curvature(Geom2dLProp_CLProps2d self) -> Standard_Real

        Returns the curvature.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Curvature(self, *args)


    def Normal(self, *args):
        """
        Normal(Geom2dLProp_CLProps2d self, gp_Dir2d N)

        Returns the normal direction <N>.

        :type N: OCC.wrapper.gp.gp_Dir2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_Normal(self, *args)


    def CentreOfCurvature(self, *args):
        """
        CentreOfCurvature(Geom2dLProp_CLProps2d self, gp_Pnt2d P)

        Returns the centre of curvature <P>.

        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dLProp.Geom2dLProp_CLProps2d_CentreOfCurvature(self, *args)

    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_CLProps2d
Geom2dLProp_CLProps2d_swigregister = _Geom2dLProp.Geom2dLProp_CLProps2d_swigregister
Geom2dLProp_CLProps2d_swigregister(Geom2dLProp_CLProps2d)

class Geom2dLProp_NumericCurInf2d(object):
    """
    Computes the locals extremas of curvature and the
    inflections of a bounded curve in 2d.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dLProp_NumericCurInf2d self) -> Geom2dLProp_NumericCurInf2d

        Computes the locals extremas of curvature and the
        inflections of a bounded curve in 2d.
        """
        this = _Geom2dLProp.new_Geom2dLProp_NumericCurInf2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PerformCurExt(self, *args):
        """
        PerformCurExt(Geom2dLProp_NumericCurInf2d self, Handle_Geom2d_Curve C, LProp_CurAndInf Result)
        PerformCurExt(Geom2dLProp_NumericCurInf2d self, Handle_Geom2d_Curve C, Standard_Real const UMin, Standard_Real const UMax, LProp_CurAndInf Result)

        Computes the locals extremas of curvature.
        in the interval of parmeters [UMin,UMax].

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type UMin: float
        :type UMax: float
        :type Result: OCC.wrapper.LProp.LProp_CurAndInf

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformCurExt(self, *args)


    def PerformInf(self, *args):
        """
        PerformInf(Geom2dLProp_NumericCurInf2d self, Handle_Geom2d_Curve C, LProp_CurAndInf Result)
        PerformInf(Geom2dLProp_NumericCurInf2d self, Handle_Geom2d_Curve C, Standard_Real const UMin, Standard_Real const UMax, LProp_CurAndInf Result)

        Computes the inflections in the interval of
        parmeters [UMin,UMax].

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type UMin: float
        :type UMax: float
        :type Result: OCC.wrapper.LProp.LProp_CurAndInf

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_PerformInf(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Geom2dLProp_NumericCurInf2d self) -> Standard_Boolean

        True if the solutions are found.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_NumericCurInf2d_IsDone(self, *args)

    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_NumericCurInf2d
Geom2dLProp_NumericCurInf2d_swigregister = _Geom2dLProp.Geom2dLProp_NumericCurInf2d_swigregister
Geom2dLProp_NumericCurInf2d_swigregister(Geom2dLProp_NumericCurInf2d)

class Geom2dLProp_CurAndInf2d(LProp.LProp_CurAndInf):
    """
    An algorithm for computing local properties of a curve.
    These properties include:
    - the maximum and minimum curvatures
    - the inflection points.
    A CurAndInf2d object provides the framework for:
    - defining the curve to be analyzed
    - implementing the computation algorithms
    - consulting the results.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dLProp_CurAndInf2d self) -> Geom2dLProp_CurAndInf2d

        Initializes the framework.
        Note: The curve on which the local properties are
        computed is defined using one of the following
        functions: Perform, PerformCurExt or PerformInf.


        """
        this = _Geom2dLProp.new_Geom2dLProp_CurAndInf2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(Geom2dLProp_CurAndInf2d self, Handle_Geom2d_Curve C)

        For the curve C, Computes both the
        inflection points and the maximum and minimum curvatures.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_Perform(self, *args)


    def PerformCurExt(self, *args):
        """
        PerformCurExt(Geom2dLProp_CurAndInf2d self, Handle_Geom2d_Curve C)

        For the curve C, Computes the locals extremas of curvature.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformCurExt(self, *args)


    def PerformInf(self, *args):
        """
        PerformInf(Geom2dLProp_CurAndInf2d self, Handle_Geom2d_Curve C)

        For the curve C, Computes the inflections.
        After computation, the following functions can be used:
        - IsDone to check if the computation was successful
        - NbPoints to obtain the number of computed particular points
        - Parameter to obtain the parameter on the curve for
        each particular point
        - Type to check if the point is an inflection point or an
        extremum of curvature of the curve C.
        Warning
        These functions can be used to analyze a series of
        curves, however it is necessary to clear the table of
        results between each computation.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_PerformInf(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Geom2dLProp_CurAndInf2d self) -> Standard_Boolean

        True if the solutions are found.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_CurAndInf2d_IsDone(self, *args)

    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_CurAndInf2d
Geom2dLProp_CurAndInf2d_swigregister = _Geom2dLProp.Geom2dLProp_CurAndInf2d_swigregister
Geom2dLProp_CurAndInf2d_swigregister(Geom2dLProp_CurAndInf2d)

class Geom2dLProp_FuncCurNul(math.math_FunctionWithDerivative):
    """Function used to find the inflections in 2d."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dLProp_FuncCurNul self, Handle_Geom2d_Curve C) -> Geom2dLProp_FuncCurNul

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        this = _Geom2dLProp.new_Geom2dLProp_FuncCurNul(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(Geom2dLProp_FuncCurNul self, Standard_Real const X) -> Standard_Boolean

        Returns the value for the variable <X>.

        :type X: float
        :type F: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurNul_Value(self, *args)


    def Derivative(self, *args):
        """
        Derivative(Geom2dLProp_FuncCurNul self, Standard_Real const X) -> Standard_Boolean

        Returns the derivative for the variable <X>

        :type X: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurNul_Derivative(self, *args)


    def Values(self, *args):
        """
        Values(Geom2dLProp_FuncCurNul self, Standard_Real const X) -> Standard_Boolean

        Returns the value of the function and the derivative
        for the variable <X>.

        :type X: float
        :type F: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dLProp.Geom2dLProp_FuncCurNul_Values(self, *args)

    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_FuncCurNul
Geom2dLProp_FuncCurNul_swigregister = _Geom2dLProp.Geom2dLProp_FuncCurNul_swigregister
Geom2dLProp_FuncCurNul_swigregister(Geom2dLProp_FuncCurNul)

class Geom2dLProp_Curve2dTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Value(*args):
        """
        Value(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P)

        Computes the point <P> of parameter <U> on the curve <C>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args):
        """
        D1(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1)

        Computes the point <P> and first derivative <V1> of
        parameter <U> on the curve <C>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D1(*args)

    D1 = staticmethod(D1)

    def D2(*args):
        """
        D2(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        Computes the point <P>, the first derivative <V1> and second
        derivative <V2> of parameter <U> on the curve <C>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D2(*args)

    D2 = staticmethod(D2)

    def D3(*args):
        """
        D3(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        Computes the point <P>, the first derivative <V1>, the
        second derivative <V2> and third derivative <V3> of
        parameter <U> on the curve <C>.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_D3(*args)

    D3 = staticmethod(D3)

    def Continuity(*args):
        """
        Continuity(Handle_Geom2d_Curve C) -> Standard_Integer

        returns the order of continuity of the curve <C>.
        returns 1 : first derivative only is computable
        returns 2 : first and second derivative only are computable.
        returns 3 : first, second and third are computable.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_Continuity(*args)

    Continuity = staticmethod(Continuity)

    def FirstParameter(*args):
        """
        FirstParameter(Handle_Geom2d_Curve C) -> Standard_Real

        returns the first parameter bound of the curve.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args):
        """
        LastParameter(Handle_Geom2d_Curve C) -> Standard_Real

        returns the last parameter bound of the curve.
        FirstParameter must be less than LastParameter.

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dLProp.Geom2dLProp_Curve2dTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def __init__(self):
        this = _Geom2dLProp.new_Geom2dLProp_Curve2dTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dLProp.delete_Geom2dLProp_Curve2dTool
Geom2dLProp_Curve2dTool_swigregister = _Geom2dLProp.Geom2dLProp_Curve2dTool_swigregister
Geom2dLProp_Curve2dTool_swigregister(Geom2dLProp_Curve2dTool)

def Geom2dLProp_Curve2dTool_Value(*args):
    """
    Geom2dLProp_Curve2dTool_Value(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P)

    Computes the point <P> of parameter <U> on the curve <C>.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type U: float
    :type P: OCC.wrapper.gp.gp_Pnt2d

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_Value(*args)

def Geom2dLProp_Curve2dTool_D1(*args):
    """
    Geom2dLProp_Curve2dTool_D1(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1)

    Computes the point <P> and first derivative <V1> of
    parameter <U> on the curve <C>.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type U: float
    :type P: OCC.wrapper.gp.gp_Pnt2d
    :type V1: OCC.wrapper.gp.gp_Vec2d

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D1(*args)

def Geom2dLProp_Curve2dTool_D2(*args):
    """
    Geom2dLProp_Curve2dTool_D2(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

    Computes the point <P>, the first derivative <V1> and second
    derivative <V2> of parameter <U> on the curve <C>.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type U: float
    :type P: OCC.wrapper.gp.gp_Pnt2d
    :type V1: OCC.wrapper.gp.gp_Vec2d
    :type V2: OCC.wrapper.gp.gp_Vec2d

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D2(*args)

def Geom2dLProp_Curve2dTool_D3(*args):
    """
    Geom2dLProp_Curve2dTool_D3(Handle_Geom2d_Curve C, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

    Computes the point <P>, the first derivative <V1>, the
    second derivative <V2> and third derivative <V3> of
    parameter <U> on the curve <C>.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :type U: float
    :type P: OCC.wrapper.gp.gp_Pnt2d
    :type V1: OCC.wrapper.gp.gp_Vec2d
    :type V2: OCC.wrapper.gp.gp_Vec2d
    :type V3: OCC.wrapper.gp.gp_Vec2d

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_D3(*args)

def Geom2dLProp_Curve2dTool_Continuity(*args):
    """
    Geom2dLProp_Curve2dTool_Continuity(Handle_Geom2d_Curve C) -> Standard_Integer

    returns the order of continuity of the curve <C>.
    returns 1 : first derivative only is computable
    returns 2 : first and second derivative only are computable.
    returns 3 : first, second and third are computable.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_Continuity(*args)

def Geom2dLProp_Curve2dTool_FirstParameter(*args):
    """
    Geom2dLProp_Curve2dTool_FirstParameter(Handle_Geom2d_Curve C) -> Standard_Real

    returns the first parameter bound of the curve.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_FirstParameter(*args)

def Geom2dLProp_Curve2dTool_LastParameter(*args):
    """
    Geom2dLProp_Curve2dTool_LastParameter(Handle_Geom2d_Curve C) -> Standard_Real

    returns the last parameter bound of the curve.
    FirstParameter must be less than LastParameter.

    :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Geom2dLProp.Geom2dLProp_Curve2dTool_LastParameter(*args)



