# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomPlate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomPlate')
    _GeomPlate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomPlate', [dirname(__file__)])
        except ImportError:
            import _GeomPlate
            return _GeomPlate
        try:
            _mod = imp.load_module('_GeomPlate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomPlate = swig_import_helper()
    del swig_import_helper
else:
    import _GeomPlate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomPlate.delete_SwigPyIterator

    def value(self):
        return _GeomPlate.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomPlate.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomPlate.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomPlate.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomPlate.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomPlate.SwigPyIterator_copy(self)

    def next(self):
        return _GeomPlate.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomPlate.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomPlate.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomPlate.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomPlate.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomPlate.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomPlate.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomPlate.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomPlate.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomPlate.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomPlate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomPlate.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomPlate.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomPlate.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomPlate.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomPlate.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomPlate.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomPlate.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomPlate.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomPlate.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomPlate.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomPlate.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomPlate.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomPlate.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomPlate.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomPlate.ptr_to_number(item)
ptr_to_number = _GeomPlate.ptr_to_number

def HashCode(*args):
    return _GeomPlate.HashCode(*args)
HashCode = _GeomPlate.HashCode

def ptr_equal(a, b):
    return _GeomPlate.ptr_equal(a, b)
ptr_equal = _GeomPlate.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Plate
else:
    import Plate
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom2d
else:
    import TColGeom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomLProp
else:
    import GeomLProp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApp2Var
else:
    import AdvApp2Var
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Law
else:
    import Law
del _swig_python_version_info
class GeomPlate_HSequenceOfCurveConstraint(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_HSequenceOfCurveConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_HSequenceOfCurveConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_HSequenceOfCurveConstraint self) -> GeomPlate_HSequenceOfCurveConstraint
        __init__(GeomPlate_HSequenceOfCurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theOther) -> GeomPlate_HSequenceOfCurveConstraint

        :type theOther: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        this = _GeomPlate.new_GeomPlate_HSequenceOfCurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        res = _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(GeomPlate_HSequenceOfCurveConstraint self, Handle_GeomPlate_CurveConstraint theItem)
        Append(GeomPlate_HSequenceOfCurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSequence)

        :type theSequence: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(GeomPlate_HSequenceOfCurveConstraint self) -> NCollection_Sequence_Handle_GeomPlate_CurveConstraint

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HSequenceOfCurveConstraint
GeomPlate_HSequenceOfCurveConstraint_swigregister = _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_swigregister
GeomPlate_HSequenceOfCurveConstraint_swigregister(GeomPlate_HSequenceOfCurveConstraint)

def GeomPlate_HSequenceOfCurveConstraint_get_type_name(*args):
    """
    GeomPlate_HSequenceOfCurveConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_get_type_name(*args)

def GeomPlate_HSequenceOfCurveConstraint_get_type_descriptor(*args):
    """
    GeomPlate_HSequenceOfCurveConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_HSequenceOfCurveConstraint_get_type_descriptor(*args)

class GeomPlate_CurveConstraint(Standard.Standard_Transient):
    """Defines curves as constraints to be used to deform a surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_CurveConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_CurveConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_CurveConstraint self) -> GeomPlate_CurveConstraint
        __init__(GeomPlate_CurveConstraint self, Handle_Adaptor3d_HCurve Boundary, Standard_Integer const Order, Standard_Integer const NPt=10, Standard_Real const TolDist=0.0001, Standard_Real const TolAng=0.01, Standard_Real const TolCurv=0.1) -> GeomPlate_CurveConstraint

        Create a constraint
        Order is the order of the constraint. The possible values for order are -1,0,1,2.
        Order i means constraints Gi
        Npt is the number of points associated with the constraint.
        TolDist is the maximum error to satisfy for G0 constraints
        TolAng is the maximum error to satisfy for G1 constraints
        TolCurv is the maximum error to satisfy for G2 constraints
        These errors can be replaced by laws of criterion.
        Raises    ConstructionError if Order is not -1 , 0,  1,  2

        :type Boundary: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type Order: int
        :type NPt: int
        :type TolDist: float
        :type TolAng: float
        :type TolCurv: float

        """
        this = _GeomPlate.new_GeomPlate_CurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOrder(self, *args):
        """
        SetOrder(GeomPlate_CurveConstraint self, Standard_Integer const Order)

        Allows you to set the order of continuity required for
        the constraints: G0, G1, and G2, controlled
        respectively by G0Criterion G1Criterion and G2Criterion.

        :type Order: int

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetOrder(self, *args)


    def Order(self, *args):
        """
        Order(GeomPlate_CurveConstraint self) -> Standard_Integer

        Returns the order of constraint, one of G0, G1 or G2.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.GeomPlate_CurveConstraint_Order(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(GeomPlate_CurveConstraint self) -> Standard_Integer

        Returns the number of points on the curve used as a
        constraint. The default setting is 10. This parameter
        affects computation time, which increases by the cube of
        the number of points.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.GeomPlate_CurveConstraint_NbPoints(self, *args)


    def SetNbPoints(self, *args):
        """
        SetNbPoints(GeomPlate_CurveConstraint self, Standard_Integer const NewNb)

        Allows you to set the number of points on the curve
        constraint. The default setting is 10. This parameter
        affects computation time, which increases by the cube of
        the number of points.

        :type NewNb: int

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetNbPoints(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(GeomPlate_CurveConstraint self, Handle_Law_Function G0Crit)

        Allows you to set the G0 criterion. This is the law
        defining the greatest distance allowed between the
        constraint and the target surface for each point of the
        constraint. If this criterion is not set, TolDist, the
        distance tolerance from the constructor, is used.

        :type G0Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(GeomPlate_CurveConstraint self, Handle_Law_Function G1Crit)

        Allows you to set the G1 criterion. This is the law
        defining the greatest angle allowed between the
        constraint and the target surface. If this criterion is not
        set, TolAng, the angular tolerance from the constructor, is used.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type G1Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(GeomPlate_CurveConstraint self, Handle_Law_Function G2Crit)

        :type G2Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetG2Criterion(self, *args)


    def G0Criterion(self, *args):
        """
        G0Criterion(GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G0 criterion at the parametric point U on
        the curve. This is the greatest distance allowed between
        the constraint and the target surface at U.

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G1 criterion at the parametric point U on
        the curve. This is the greatest angle allowed between
        the constraint and the target surface at U.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G2 criterion at the parametric point U on
        the curve. This is the greatest difference in curvature
        allowed between the constraint and the target surface at U.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_G2Criterion(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_LastParameter(self, *args)


    def Length(self, *args):
        """
        Length(GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_CurveConstraint_Length(self, *args)


    def LPropSurf(self, *args):
        """
        LPropSurf(GeomPlate_CurveConstraint self, Standard_Real const U) -> GeomLProp_SLProps

        :type U: float
        :rtype: OCC.wrapper.GeomLProp.GeomLProp_SLProps

        """
        return _GeomPlate.GeomPlate_CurveConstraint_LPropSurf(self, *args)


    def D0(self, *args):
        """
        D0(GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.GeomPlate_CurveConstraint_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_CurveConstraint_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3, gp_Vec V4, gp_Vec V5)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec
        :type V4: OCC.wrapper.gp.gp_Vec
        :type V5: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_CurveConstraint_D2(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(GeomPlate_CurveConstraint self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomPlate.GeomPlate_CurveConstraint_Curve3d(self, *args)


    def SetCurve2dOnSurf(self, *args):
        """
        SetCurve2dOnSurf(GeomPlate_CurveConstraint self, Handle_Geom2d_Curve Curve2d)

        loads a 2d curve associated the surface resulting of the constraints

        :type Curve2d: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetCurve2dOnSurf(self, *args)


    def Curve2dOnSurf(self, *args):
        """
        Curve2dOnSurf(GeomPlate_CurveConstraint self) -> Handle_Geom2d_Curve

        Returns a 2d curve associated the surface resulting of the constraints

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomPlate.GeomPlate_CurveConstraint_Curve2dOnSurf(self, *args)


    def SetProjectedCurve(self, *args):
        """
        SetProjectedCurve(GeomPlate_CurveConstraint self, Handle_Adaptor2d_HCurve2d Curve2d, Standard_Real const TolU, Standard_Real const TolV)

        loads a 2d curve  resulting from the normal projection of
        the curve on the initial surface

        :type Curve2d: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type TolU: float
        :type TolV: float

        """
        return _GeomPlate.GeomPlate_CurveConstraint_SetProjectedCurve(self, *args)


    def ProjectedCurve(self, *args):
        """
        ProjectedCurve(GeomPlate_CurveConstraint self) -> Handle_Adaptor2d_HCurve2d

        Returns the projected curve resulting from the normal projection of the
        curve on the initial surface

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _GeomPlate.GeomPlate_CurveConstraint_ProjectedCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_CurveConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_CurveConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_CurveConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_CurveConstraint
GeomPlate_CurveConstraint_swigregister = _GeomPlate.GeomPlate_CurveConstraint_swigregister
GeomPlate_CurveConstraint_swigregister(GeomPlate_CurveConstraint)

def GeomPlate_CurveConstraint_get_type_name(*args):
    """
    GeomPlate_CurveConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_CurveConstraint_get_type_name(*args)

def GeomPlate_CurveConstraint_get_type_descriptor(*args):
    """
    GeomPlate_CurveConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_CurveConstraint_get_type_descriptor(*args)

class GeomPlate_PointConstraint(Standard.Standard_Transient):
    """Defines points as constraints to be used to deform a surface."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_PointConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_PointConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_PointConstraint self, gp_Pnt Pt, Standard_Integer const Order, Standard_Real const TolDist=0.0001) -> GeomPlate_PointConstraint
        __init__(GeomPlate_PointConstraint self, Standard_Real const U, Standard_Real const V, Handle_Geom_Surface Surf, Standard_Integer const Order, Standard_Real const TolDist=0.0001, Standard_Real const TolAng=0.01, Standard_Real const TolCurv=0.1) -> GeomPlate_PointConstraint

        Constructs a point constraint object defined by
        the intersection point of U and V on the surface Surf.
        Order gives the order of constraint, one of:
        -   -1 i.e. none, or 0 i.e.G0 when assigned to Pt
        -   -1 i.e. none, 0 i.e. G0, 1 i.e. G1, 2 i.e. G2 when
        assigned to U, V and Surf.
        In this constructor the surface to be generated must
        respect several tolerance values only:
        -   the distance tolerance TolDist
        -   the angular tolerance TolAng
        -   the curvature tolerance, TolCurv.
        Distance tolerance represents the greatest distance
        allowed between the constraint and the target surface.
        Angular tolerance represents the largest angle allowed
        between the constraint and the target surface. Curvature
        tolerance represents the greatest difference in curvature
        allowed between the constraint and the target surface.Creates a punctual constraint.

        :type U: float
        :type V: float
        :type Surf: OCC.wrapper.Geom.Handle_Geom_Surface
        :type Order: int
        :type TolDist: float
        :type TolAng: float
        :type TolCurv: float

        """
        this = _GeomPlate.new_GeomPlate_PointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOrder(self, *args):
        """
        SetOrder(GeomPlate_PointConstraint self, Standard_Integer const Order)

        :type Order: int

        """
        return _GeomPlate.GeomPlate_PointConstraint_SetOrder(self, *args)


    def Order(self, *args):
        """
        Order(GeomPlate_PointConstraint self) -> Standard_Integer

        Returns the order of constraint: G0, G1, and G2,
        controlled respectively by G0Criterion G1Criterion and G2Criterion.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.GeomPlate_PointConstraint_Order(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(GeomPlate_PointConstraint self, Standard_Real const TolDist)

        Allows you to set the G0 criterion. This is the law
        defining the greatest distance allowed between the
        constraint and the target surface. If this criterion is not
        set, {TolDist, the distance tolerance from the constructor, is used

        :type TolDist: float

        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(GeomPlate_PointConstraint self, Standard_Real const TolAng)

        Allows you to set the G1 criterion. This is the law
        defining the greatest angle allowed between the
        constraint and the target surface. If this criterion is not
        set, TolAng, the angular tolerance from the constructor, is used.
        Raises   ConstructionError  if  the  point  is  not  on  the  surface

        :type TolAng: float

        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(GeomPlate_PointConstraint self, Standard_Real const TolCurv)

        Allows you to set the G2 criterion. This is the law
        defining the greatest difference in curvature allowed
        between the constraint and the target surface. If this
        criterion is not set, TolCurv, the curvature tolerance from
        the constructor, is used.
        Raises   ConstructionError if  the  point  is  not  on  the  surface

        :type TolCurv: float

        """
        return _GeomPlate.GeomPlate_PointConstraint_SetG2Criterion(self, *args)


    def G0Criterion(self, *args):
        """
        G0Criterion(GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G0 criterion. This is the greatest distance
        allowed between the constraint and the target surface.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_PointConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G1 criterion. This is the greatest angle
        allowed between the constraint and the target surface.
        Raises   ConstructionError if  the  point  is  not  on  the  surface.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_PointConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G2 criterion. This is the greatest difference
        in curvature allowed between the constraint and the target surface.
        Raises   ConstructionError if  the  point  is  not  on  the  surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_PointConstraint_G2Criterion(self, *args)


    def D0(self, *args):
        """
        D0(GeomPlate_PointConstraint self, gp_Pnt P)

        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.GeomPlate_PointConstraint_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomPlate_PointConstraint self, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_PointConstraint_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomPlate_PointConstraint self, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3, gp_Vec V4, gp_Vec V5)

        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec
        :type V4: OCC.wrapper.gp.gp_Vec
        :type V5: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_PointConstraint_D2(self, *args)


    def HasPnt2dOnSurf(self, *args):
        """
        HasPnt2dOnSurf(GeomPlate_PointConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_PointConstraint_HasPnt2dOnSurf(self, *args)


    def SetPnt2dOnSurf(self, *args):
        """
        SetPnt2dOnSurf(GeomPlate_PointConstraint self, gp_Pnt2d Pnt)

        :type Pnt: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GeomPlate.GeomPlate_PointConstraint_SetPnt2dOnSurf(self, *args)


    def Pnt2dOnSurf(self, *args):
        """
        Pnt2dOnSurf(GeomPlate_PointConstraint self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GeomPlate.GeomPlate_PointConstraint_Pnt2dOnSurf(self, *args)


    def LPropSurf(self, *args):
        """
        LPropSurf(GeomPlate_PointConstraint self) -> GeomLProp_SLProps

        :rtype: OCC.wrapper.GeomLProp.GeomLProp_SLProps

        """
        return _GeomPlate.GeomPlate_PointConstraint_LPropSurf(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_PointConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_PointConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_PointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PointConstraint
GeomPlate_PointConstraint_swigregister = _GeomPlate.GeomPlate_PointConstraint_swigregister
GeomPlate_PointConstraint_swigregister(GeomPlate_PointConstraint)

def GeomPlate_PointConstraint_get_type_name(*args):
    """
    GeomPlate_PointConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_PointConstraint_get_type_name(*args)

def GeomPlate_PointConstraint_get_type_descriptor(*args):
    """
    GeomPlate_PointConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_PointConstraint_get_type_descriptor(*args)

class GeomPlate_HArray1OfHCurve(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_HArray1OfHCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_HArray1OfHCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_HArray1OfHCurve self, Standard_Integer const theLower, Standard_Integer const theUpper) -> GeomPlate_HArray1OfHCurve
        __init__(GeomPlate_HArray1OfHCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_Adaptor3d_HCurve theValue) -> GeomPlate_HArray1OfHCurve
        __init__(GeomPlate_HArray1OfHCurve self, NCollection_Array1_Handle_Adaptor3d_HCurve theOther) -> GeomPlate_HArray1OfHCurve

        :type theOther: OCC.wrapper.GeomPlate.GeomPlate_Array1OfHCurve

        """
        this = _GeomPlate.new_GeomPlate_HArray1OfHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfHCurve

        """
        res = _GeomPlate.GeomPlate_HArray1OfHCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(GeomPlate_HArray1OfHCurve self) -> NCollection_Array1_Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfHCurve

        """
        return _GeomPlate.GeomPlate_HArray1OfHCurve_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_HArray1OfHCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_HArray1OfHCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_HArray1OfHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HArray1OfHCurve
GeomPlate_HArray1OfHCurve_swigregister = _GeomPlate.GeomPlate_HArray1OfHCurve_swigregister
GeomPlate_HArray1OfHCurve_swigregister(GeomPlate_HArray1OfHCurve)

def GeomPlate_HArray1OfHCurve_get_type_name(*args):
    """
    GeomPlate_HArray1OfHCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_HArray1OfHCurve_get_type_name(*args)

def GeomPlate_HArray1OfHCurve_get_type_descriptor(*args):
    """
    GeomPlate_HArray1OfHCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_HArray1OfHCurve_get_type_descriptor(*args)

class Handle_GeomPlate_HSequenceOfCurveConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_HSequenceOfCurveConstraint self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_HSequenceOfCurveConstraint self, GeomPlate_HSequenceOfCurveConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_HSequenceOfCurveConstraint self, Handle_GeomPlate_HSequenceOfCurveConstraint theHandle) -> Handle_GeomPlate_HSequenceOfCurveConstraint
        assign(Handle_GeomPlate_HSequenceOfCurveConstraint self, GeomPlate_HSequenceOfCurveConstraint thePtr) -> Handle_GeomPlate_HSequenceOfCurveConstraint
        assign(Handle_GeomPlate_HSequenceOfCurveConstraint self, Handle_GeomPlate_HSequenceOfCurveConstraint theHandle) -> Handle_GeomPlate_HSequenceOfCurveConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> GeomPlate_HSequenceOfCurveConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> GeomPlate_HSequenceOfCurveConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> GeomPlate_HSequenceOfCurveConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_HSequenceOfCurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_HSequenceOfCurveConstraint

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_GeomPlate_HSequenceOfCurveConstraint self, Handle_GeomPlate_CurveConstraint theItem)
        Append(Handle_GeomPlate_HSequenceOfCurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSequence)

        :type theSequence: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> NCollection_Sequence_Handle_GeomPlate_CurveConstraint

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfCurveConstraint

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_HSequenceOfCurveConstraint self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_HSequenceOfCurveConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_HSequenceOfCurveConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_HSequenceOfCurveConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_HSequenceOfCurveConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_HSequenceOfCurveConstraint self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_HSequenceOfCurveConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DecrementRefCounter(self, *args)

Handle_GeomPlate_HSequenceOfCurveConstraint_swigregister = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_swigregister
Handle_GeomPlate_HSequenceOfCurveConstraint_swigregister(Handle_GeomPlate_HSequenceOfCurveConstraint)

def Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast(thing)
Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast = _GeomPlate.Handle_GeomPlate_HSequenceOfCurveConstraint_DownCast

class Handle_GeomPlate_HArray1OfHCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_HArray1OfHCurve self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_HArray1OfHCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_HArray1OfHCurve self, GeomPlate_HArray1OfHCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_HArray1OfHCurve self, Handle_GeomPlate_HArray1OfHCurve theHandle) -> Handle_GeomPlate_HArray1OfHCurve
        assign(Handle_GeomPlate_HArray1OfHCurve self, GeomPlate_HArray1OfHCurve thePtr) -> Handle_GeomPlate_HArray1OfHCurve
        assign(Handle_GeomPlate_HArray1OfHCurve self, Handle_GeomPlate_HArray1OfHCurve theHandle) -> Handle_GeomPlate_HArray1OfHCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_HArray1OfHCurve self) -> GeomPlate_HArray1OfHCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_HArray1OfHCurve self) -> GeomPlate_HArray1OfHCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_HArray1OfHCurve self) -> GeomPlate_HArray1OfHCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_HArray1OfHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_HArray1OfHCurve

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfHCurve

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_GeomPlate_HArray1OfHCurve self) -> NCollection_Array1_Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfHCurve

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_HArray1OfHCurve self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_HArray1OfHCurve self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_HArray1OfHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_HArray1OfHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_HArray1OfHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_HArray1OfHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_HArray1OfHCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_HArray1OfHCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_HArray1OfHCurve self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_HArray1OfHCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DecrementRefCounter(self, *args)

Handle_GeomPlate_HArray1OfHCurve_swigregister = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_swigregister
Handle_GeomPlate_HArray1OfHCurve_swigregister(Handle_GeomPlate_HArray1OfHCurve)

def Handle_GeomPlate_HArray1OfHCurve_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DownCast(thing)
Handle_GeomPlate_HArray1OfHCurve_DownCast = _GeomPlate.Handle_GeomPlate_HArray1OfHCurve_DownCast

class GeomPlate_HSequenceOfPointConstraint(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_HSequenceOfPointConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_HSequenceOfPointConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_HSequenceOfPointConstraint self) -> GeomPlate_HSequenceOfPointConstraint
        __init__(GeomPlate_HSequenceOfPointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theOther) -> GeomPlate_HSequenceOfPointConstraint

        :type theOther: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        this = _GeomPlate.new_GeomPlate_HSequenceOfPointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        res = _GeomPlate.GeomPlate_HSequenceOfPointConstraint_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(GeomPlate_HSequenceOfPointConstraint self, Handle_GeomPlate_PointConstraint theItem)
        Append(GeomPlate_HSequenceOfPointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSequence)

        :type theSequence: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(GeomPlate_HSequenceOfPointConstraint self) -> NCollection_Sequence_Handle_GeomPlate_PointConstraint

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_HSequenceOfPointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HSequenceOfPointConstraint
GeomPlate_HSequenceOfPointConstraint_swigregister = _GeomPlate.GeomPlate_HSequenceOfPointConstraint_swigregister
GeomPlate_HSequenceOfPointConstraint_swigregister(GeomPlate_HSequenceOfPointConstraint)

def GeomPlate_HSequenceOfPointConstraint_get_type_name(*args):
    """
    GeomPlate_HSequenceOfPointConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_get_type_name(*args)

def GeomPlate_HSequenceOfPointConstraint_get_type_descriptor(*args):
    """
    GeomPlate_HSequenceOfPointConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_HSequenceOfPointConstraint_get_type_descriptor(*args)

class Handle_GeomPlate_HSequenceOfPointConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_HSequenceOfPointConstraint self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_HSequenceOfPointConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_HSequenceOfPointConstraint self, GeomPlate_HSequenceOfPointConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_HSequenceOfPointConstraint self, Handle_GeomPlate_HSequenceOfPointConstraint theHandle) -> Handle_GeomPlate_HSequenceOfPointConstraint
        assign(Handle_GeomPlate_HSequenceOfPointConstraint self, GeomPlate_HSequenceOfPointConstraint thePtr) -> Handle_GeomPlate_HSequenceOfPointConstraint
        assign(Handle_GeomPlate_HSequenceOfPointConstraint self, Handle_GeomPlate_HSequenceOfPointConstraint theHandle) -> Handle_GeomPlate_HSequenceOfPointConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_HSequenceOfPointConstraint self) -> GeomPlate_HSequenceOfPointConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_HSequenceOfPointConstraint self) -> GeomPlate_HSequenceOfPointConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_HSequenceOfPointConstraint self) -> GeomPlate_HSequenceOfPointConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_HSequenceOfPointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_HSequenceOfPointConstraint

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_GeomPlate_HSequenceOfPointConstraint self, Handle_GeomPlate_PointConstraint theItem)
        Append(Handle_GeomPlate_HSequenceOfPointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSequence)

        :type theSequence: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_GeomPlate_HSequenceOfPointConstraint self) -> NCollection_Sequence_Handle_GeomPlate_PointConstraint

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfPointConstraint

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_HSequenceOfPointConstraint self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_HSequenceOfPointConstraint self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_HSequenceOfPointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_HSequenceOfPointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_HSequenceOfPointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_HSequenceOfPointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_HSequenceOfPointConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_HSequenceOfPointConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_HSequenceOfPointConstraint self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_HSequenceOfPointConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DecrementRefCounter(self, *args)

Handle_GeomPlate_HSequenceOfPointConstraint_swigregister = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_swigregister
Handle_GeomPlate_HSequenceOfPointConstraint_swigregister(Handle_GeomPlate_HSequenceOfPointConstraint)

def Handle_GeomPlate_HSequenceOfPointConstraint_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DownCast(thing)
Handle_GeomPlate_HSequenceOfPointConstraint_DownCast = _GeomPlate.Handle_GeomPlate_HSequenceOfPointConstraint_DownCast

class GeomPlate_PlateG0Criterion(AdvApp2Var.AdvApp2Var_Criterion):
    """this class contains a specific G0 criterion for GeomPlate_MakeApprox"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_PlateG0Criterion self, NCollection_Sequence_gp_XY Data, NCollection_Sequence_gp_XYZ G0Data, Standard_Real const Maximum, AdvApp2Var_CriterionType const Type=AdvApp2Var_Absolute, AdvApp2Var_CriterionRepartition const Repart=AdvApp2Var_Regular) -> GeomPlate_PlateG0Criterion

        :type Data: OCC.wrapper.TColgp.TColgp_SequenceOfXY
        :type G0Data: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ
        :type Maximum: float
        :type Type: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionType
        :type Repart: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionRepartition

        """
        this = _GeomPlate.new_GeomPlate_PlateG0Criterion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(GeomPlate_PlateG0Criterion self, AdvApp2Var_Patch P, AdvApp2Var_Context C)

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :type C: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context

        """
        return _GeomPlate.GeomPlate_PlateG0Criterion_Value(self, *args)


    def IsSatisfied(self, *args):
        """
        IsSatisfied(GeomPlate_PlateG0Criterion self, AdvApp2Var_Patch P) -> Standard_Boolean

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_PlateG0Criterion_IsSatisfied(self, *args)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PlateG0Criterion
GeomPlate_PlateG0Criterion_swigregister = _GeomPlate.GeomPlate_PlateG0Criterion_swigregister
GeomPlate_PlateG0Criterion_swigregister(GeomPlate_PlateG0Criterion)


try:
	TColStd_SequenceOfReal = TColStd.NCollection_Sequence_Standard_Real
except AttributeError:
	pass # does not exist, probably ignored

class NCollection_Sequence_Handle_GeomPlate_CurveConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _GeomPlate.new_NCollection_Sequence_Handle_GeomPlate_CurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self)

        Reverse sequence


        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theOther) -> NCollection_Sequence_Handle_GeomPlate_CurveConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theOther) -> NCollection_Sequence_Handle_GeomPlate_CurveConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Handle_GeomPlate_CurveConstraint theItem)
        Append(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Handle_GeomPlate_CurveConstraint theItem)
        Prepend(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_CurveConstraint theItem)
        InsertBefore(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, NCollection_Sequence< opencascade::handle< GeomPlate_CurveConstraint > >::Iterator & thePosition, Handle_GeomPlate_CurveConstraint theItem)
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSeq)
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_CurveConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_CurveConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Handle_GeomPlate_CurveConstraint

        First item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self) -> Handle_GeomPlate_CurveConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex) -> Handle_GeomPlate_CurveConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_GeomPlate_CurveConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_CurveConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_SetValue(self, *args)


    def __iter__(self):
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint___iter__(self)
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_Handle_GeomPlate_CurveConstraint
NCollection_Sequence_Handle_GeomPlate_CurveConstraint_swigregister = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_swigregister
NCollection_Sequence_Handle_GeomPlate_CurveConstraint_swigregister(NCollection_Sequence_Handle_GeomPlate_CurveConstraint)

def NCollection_Sequence_Handle_GeomPlate_CurveConstraint_delNode(*args):
    """
    NCollection_Sequence_Handle_GeomPlate_CurveConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_delNode(*args)

class NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _GeomPlate.new_NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper

    def __next__(self):
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper_swigregister = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper_swigregister
NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper_swigregister(NCollection_Sequence_Handle_GeomPlate_CurveConstraint_IteratorHelper)


try:
	GeomPlate_SequenceOfCurveConstraint = NCollection_Sequence_Handle_GeomPlate_CurveConstraint
except NameError:
	pass # does not exist, probably ignored

class GeomPlate_BuildPlateSurface(object):
    """
    This class provides an algorithm for constructing such a plate surface that
    it conforms to given curve and/or point constraints.
    The algorithm accepts or constructs an initial surface
    and looks for a deformation of it satisfying the
    constraints and minimizing energy input.
    A BuildPlateSurface object provides a framework for:
    -   defining or setting constraints
    -   implementing the construction algorithm
    -   consulting the result.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_BuildPlateSurface self, Handle_TColStd_HArray1OfInteger NPoints, Handle_GeomPlate_HArray1OfHCurve TabCurve, Handle_TColStd_HArray1OfInteger Tang, Standard_Integer const Degree, Standard_Integer const NbIter=3, Standard_Real const Tol2d=0.00001, Standard_Real const Tol3d=0.0001, Standard_Real const TolAng=0.01, Standard_Real const TolCurv=0.1, Standard_Boolean const Anisotropie) -> GeomPlate_BuildPlateSurface
        __init__(GeomPlate_BuildPlateSurface self, Handle_Geom_Surface Surf, Standard_Integer const Degree=3, Standard_Integer const NbPtsOnCur=10, Standard_Integer const NbIter=3, Standard_Real const Tol2d=0.00001, Standard_Real const Tol3d=0.0001, Standard_Real const TolAng=0.01, Standard_Real const TolCurv=0.1, Standard_Boolean const Anisotropie) -> GeomPlate_BuildPlateSurface
        __init__(GeomPlate_BuildPlateSurface self, Standard_Integer const Degree=3, Standard_Integer const NbPtsOnCur=10, Standard_Integer const NbIter=3, Standard_Real const Tol2d=0.00001, Standard_Real const Tol3d=0.0001, Standard_Real const TolAng=0.01, Standard_Real const TolCurv=0.1, Standard_Boolean const Anisotropie) -> GeomPlate_BuildPlateSurface

        Initializes the BuildPlateSurface framework for
        deforming plate surfaces using curve and point
        constraints. You use the first constructor if you have
        an initial surface to work with at construction time. If
        not, you use the second. You can add one later by
        using the method LoadInitSurface. If no initial
        surface is loaded, one will automatically be computed.
        The curve and point constraints will be defined by
        using the method Add.
        Before the call to the algorithm, the curve constraints
        will be transformed into sequences of discrete points.
        Each curve defined as a constraint will be given the
        value of NbPtsOnCur as the average number of points on it.
        Several arguments serve to improve performance of
        the algorithm. NbIter, for example, expresses the
        number of iterations allowed and is used to control the
        duration of computation. To optimize resolution,
        Degree will have the default value of 3.
        The surface generated must respect several tolerance values:
        -   2d tolerance given by Tol2d, with a default value of 0.00001
        -   3d tolerance expressed by Tol3d, with a default value of 0.0001
        -   angular tolerance given by TolAng, with a default
        value of 0.01, defining the greatest angle allowed
        between the constraint and the target surface.
        Exceptions
        Standard_ConstructionError if NbIter is less than 1 or Degree is less than 3.

        :type Degree: int
        :type NbPtsOnCur: int
        :type NbIter: int
        :type Tol2d: float
        :type Tol3d: float
        :type TolAng: float
        :type TolCurv: float
        :type Anisotropie: bool

        """
        this = _GeomPlate.new_GeomPlate_BuildPlateSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(GeomPlate_BuildPlateSurface self)

        Resets all constraints


        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Init(self, *args)


    def LoadInitSurface(self, *args):
        """
        LoadInitSurface(GeomPlate_BuildPlateSurface self, Handle_Geom_Surface Surf)

        Loads the initial Surface

        :type Surf: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_LoadInitSurface(self, *args)


    def SetNbBounds(self, *args):
        """
        SetNbBounds(GeomPlate_BuildPlateSurface self, Standard_Integer const NbBounds)

        :type NbBounds: int

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_SetNbBounds(self, *args)


    def Add(self, *args):
        """
        Add(GeomPlate_BuildPlateSurface self, Handle_GeomPlate_CurveConstraint Cont)
        Add(GeomPlate_BuildPlateSurface self, Handle_GeomPlate_PointConstraint Cont)

        Adds the point constraint cont.

        :type Cont: OCC.wrapper.GeomPlate.Handle_GeomPlate_PointConstraint

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Add(self, *args)


    def Perform(self, *args):
        """
        Perform(GeomPlate_BuildPlateSurface self)

        Calls the algorithm and computes the plate surface using
        the loaded constraints. If no initial surface is given, the
        algorithm automatically computes one.
        Exceptions
        Standard_RangeError if the value of the constraint is
        null or if plate is not done.


        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Perform(self, *args)


    def CurveConstraint(self, *args):
        """
        CurveConstraint(GeomPlate_BuildPlateSurface self, Standard_Integer const order) -> Handle_GeomPlate_CurveConstraint

        returns the CurveConstraints of order order

        :type order: int
        :rtype: OCC.wrapper.GeomPlate.Handle_GeomPlate_CurveConstraint

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_CurveConstraint(self, *args)


    def PointConstraint(self, *args):
        """
        PointConstraint(GeomPlate_BuildPlateSurface self, Standard_Integer const order) -> Handle_GeomPlate_PointConstraint

        returns the PointConstraint of order order

        :type order: int
        :rtype: OCC.wrapper.GeomPlate.Handle_GeomPlate_PointConstraint

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_PointConstraint(self, *args)


    def Disc2dContour(self, *args):
        """
        Disc2dContour(GeomPlate_BuildPlateSurface self, Standard_Integer const nbp, NCollection_Sequence_gp_XY Seq2d)

        :type nbp: int
        :type Seq2d: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Disc2dContour(self, *args)


    def Disc3dContour(self, *args):
        """
        Disc3dContour(GeomPlate_BuildPlateSurface self, Standard_Integer const nbp, Standard_Integer const iordre, NCollection_Sequence_gp_XYZ Seq3d)

        :type nbp: int
        :type iordre: int
        :type Seq3d: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Disc3dContour(self, *args)


    def IsDone(self, *args):
        """
        IsDone(GeomPlate_BuildPlateSurface self) -> Standard_Boolean

        Tests whether computation of the plate has been completed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_IsDone(self, *args)


    def Surface(self, *args):
        """
        Surface(GeomPlate_BuildPlateSurface self) -> Handle_GeomPlate_Surface

        Returns the result of the computation. This surface can
        then be used by GeomPlate_MakeApprox for
        converting the resulting surface into a BSpline.

        :rtype: OCC.wrapper.GeomPlate.Handle_GeomPlate_Surface

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Surface(self, *args)


    def SurfInit(self, *args):
        """
        SurfInit(GeomPlate_BuildPlateSurface self) -> Handle_Geom_Surface

        Returns the initial surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_SurfInit(self, *args)


    def Sense(self, *args):
        """
        Sense(GeomPlate_BuildPlateSurface self) -> Handle_TColStd_HArray1OfInteger

        Allows you to ensure that the array of curves returned by
        Curves2d has the correct orientation. Returns the
        orientation of the curves in the the array returned by
        Curves2d. Computation changes the orientation of
        these curves. Consequently, this method returns the
        orientation prior to computation.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Sense(self, *args)


    def Curves2d(self, *args):
        """
        Curves2d(GeomPlate_BuildPlateSurface self) -> Handle_TColGeom2d_HArray1OfCurve

        Extracts the array of curves on the plate surface which
        correspond to the curve constraints set in Add.

        :rtype: OCC.wrapper.TColGeom2d.Handle_TColGeom2d_HArray1OfCurve

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Curves2d(self, *args)


    def Order(self, *args):
        """
        Order(GeomPlate_BuildPlateSurface self) -> Handle_TColStd_HArray1OfInteger

        Returns the order of the curves in the array returned by
        Curves2d. Computation changes this order.
        Consequently, this method returns the order of the
        curves prior to computation.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_Order(self, *args)


    def G0Error(self, *args):
        """
        G0Error(GeomPlate_BuildPlateSurface self) -> Standard_Real
        G0Error(GeomPlate_BuildPlateSurface self, Standard_Integer const Index) -> Standard_Real

        Returns   the max distance between the result and the constraint Index

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G0Error(self, *args)


    def G1Error(self, *args):
        """
        G1Error(GeomPlate_BuildPlateSurface self) -> Standard_Real
        G1Error(GeomPlate_BuildPlateSurface self, Standard_Integer const Index) -> Standard_Real

        Returns the max angle between the result and the constraint Index

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G1Error(self, *args)


    def G2Error(self, *args):
        """
        G2Error(GeomPlate_BuildPlateSurface self) -> Standard_Real
        G2Error(GeomPlate_BuildPlateSurface self, Standard_Integer const Index) -> Standard_Real

        Returns the max difference of curvature between the result and the constraint Index

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_BuildPlateSurface_G2Error(self, *args)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_BuildPlateSurface
GeomPlate_BuildPlateSurface_swigregister = _GeomPlate.GeomPlate_BuildPlateSurface_swigregister
GeomPlate_BuildPlateSurface_swigregister(GeomPlate_BuildPlateSurface)

class GeomPlate_HArray1OfSequenceOfReal(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_HArray1OfSequenceOfReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_HArray1OfSequenceOfReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_HArray1OfSequenceOfReal self, Standard_Integer const theLower, Standard_Integer const theUpper) -> GeomPlate_HArray1OfSequenceOfReal
        __init__(GeomPlate_HArray1OfSequenceOfReal self, Standard_Integer const theLower, Standard_Integer const theUpper, NCollection_Sequence_Standard_Real theValue) -> GeomPlate_HArray1OfSequenceOfReal
        __init__(GeomPlate_HArray1OfSequenceOfReal self, NCollection_Array1_TColStd_SequenceOfReal theOther) -> GeomPlate_HArray1OfSequenceOfReal

        :type theOther: OCC.wrapper.GeomPlate.GeomPlate_Array1OfSequenceOfReal

        """
        this = _GeomPlate.new_GeomPlate_HArray1OfSequenceOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfSequenceOfReal

        """
        res = _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(GeomPlate_HArray1OfSequenceOfReal self) -> NCollection_Array1_TColStd_SequenceOfReal

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfSequenceOfReal

        """
        return _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_HArray1OfSequenceOfReal
GeomPlate_HArray1OfSequenceOfReal_swigregister = _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_swigregister
GeomPlate_HArray1OfSequenceOfReal_swigregister(GeomPlate_HArray1OfSequenceOfReal)

def GeomPlate_HArray1OfSequenceOfReal_get_type_name(*args):
    """
    GeomPlate_HArray1OfSequenceOfReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_get_type_name(*args)

def GeomPlate_HArray1OfSequenceOfReal_get_type_descriptor(*args):
    """
    GeomPlate_HArray1OfSequenceOfReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_HArray1OfSequenceOfReal_get_type_descriptor(*args)

class GeomPlate_Surface(Geom.Geom_Surface):
    """
    Describes the characteristics of plate surface objects
    returned by BuildPlateSurface::Surface. These can be
    used to verify the quality of the resulting surface before
    approximating it to a Geom_BSpline surface generated
    by MakeApprox. This proves necessary in cases where
    you want to use the resulting surface as the support for
    a shape. The algorithmically generated surface cannot
    fill this function as is, and as a result must be converted first.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomPlate_Surface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomPlate_Surface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomPlate_Surface self, Handle_Geom_Surface Surfinit, Plate_Plate Surfinter) -> GeomPlate_Surface

        :type Surfinit: OCC.wrapper.Geom.Handle_Geom_Surface
        :type Surfinter: OCC.wrapper.Plate.Plate_Plate

        """
        this = _GeomPlate.new_GeomPlate_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def UReverse(self, *args):
        """
        UReverse(GeomPlate_Surface self)

        Reverses the U direction of parametrization of <me>.
        The bounds of the surface are not modified.


        """
        return _GeomPlate.GeomPlate_Surface_UReverse(self, *args)


    def UReversedParameter(self, *args):
        """
        UReversedParameter(GeomPlate_Surface self, Standard_Real const U) -> Standard_Real

        Return the  parameter on the  Ureversed surface for
        the point of parameter U on <me>.

        me->UReversed()->Value(me->UReversedParameter(U),V)

        is the same point as

        me->Value(U,V)

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_Surface_UReversedParameter(self, *args)


    def VReverse(self, *args):
        """
        VReverse(GeomPlate_Surface self)

        Reverses the V direction of parametrization of <me>.
        The bounds of the surface are not modified.


        """
        return _GeomPlate.GeomPlate_Surface_VReverse(self, *args)


    def VReversedParameter(self, *args):
        """
        VReversedParameter(GeomPlate_Surface self, Standard_Real const V) -> Standard_Real

        Return the  parameter on the  Vreversed surface for
        the point of parameter V on <me>.

        me->VReversed()->Value(U,me->VReversedParameter(V))

        is the same point as

        me->Value(U,V)

        :type V: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_Surface_VReversedParameter(self, *args)


    def TransformParameters(self, *args):
        """
        TransformParameters(GeomPlate_Surface self, gp_Trsf T)

        Computes the  parameters on the  transformed  surface for
        the transform of the point of parameters U,V on <me>.

        me->Transformed(T)->Value(U',V')

        is the same point as

        me->Value(U,V).Transformed(T)

        Where U',V' are the new values of U,V after calling

        me->TranformParameters(U,V,T)

        This methods does not change <U> and <V>

        It  can be redefined.  For  example on  the Plane,
        Cylinder, Cone, Revolved and Extruded surfaces.

        :type U: float
        :type V: float
        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _GeomPlate.GeomPlate_Surface_TransformParameters(self, *args)


    def ParametricTransformation(self, *args):
        """
        ParametricTransformation(GeomPlate_Surface self, gp_Trsf T) -> gp_GTrsf2d

        Returns a 2d transformation  used to find the  new
        parameters of a point on the transformed surface.

        me->Transformed(T)->Value(U',V')

        is the same point as

        me->Value(U,V).Transformed(T)

        Where U',V' are  obtained by transforming U,V with
        th 2d transformation returned by

        me->ParametricTransformation(T)

        This methods returns an identity transformation

        It  can be redefined.  For  example on  the Plane,
        Cylinder, Cone, Revolved and Extruded surfaces.

        :type T: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.gp.gp_GTrsf2d

        """
        return _GeomPlate.GeomPlate_Surface_ParametricTransformation(self, *args)


    def Bounds(self, *args):
        """
        Bounds(GeomPlate_Surface self)

        :type U1: float
        :type U2: float
        :type V1: float
        :type V2: float

        """
        return _GeomPlate.GeomPlate_Surface_Bounds(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(GeomPlate_Surface self) -> Standard_Boolean

        Is the surface closed in the parametric direction U ?
        Returns True if for each parameter V  the distance
        between the point P (UFirst, V) and P (ULast, V) is
        lower or equal to Resolution from gp.  UFirst and ULast
        are the parametric bounds in the U direction.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(GeomPlate_Surface self) -> Standard_Boolean

        Is the surface closed in the parametric direction V ?
        Returns True if for each parameter U  the distance
        between the point P (U, VFirst) and  P (U, VLast) is
        lower or equal to Resolution from gp.  VFirst and VLast
        are the parametric bounds in the V direction.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(GeomPlate_Surface self) -> Standard_Boolean

        Is the parametrization of a surface periodic in the
        direction U ?
        It is possible only if the surface is closed in this
        parametric direction and if the following relation is
        satisfied :
        for each parameter V the distance between the point
        P (U, V)  and the point  P (U + T, V) is lower or equal
        to Resolution from package gp. T is the parametric period
        and must be a constant.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(GeomPlate_Surface self) -> Standard_Real

        returns the Uperiod.
        raises if the surface is not uperiodic.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(GeomPlate_Surface self) -> Standard_Boolean

        Is the parametrization of a surface periodic in the
        direction U ?
        It is possible only if the surface is closed in this
        parametric direction and if the following relation is
        satisfied :
        for each parameter V the distance between the point
        P (U, V)  and the point  P (U + T, V) is lower or equal
        to Resolution from package gp. T is the parametric period
        and must be a constant.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(GeomPlate_Surface self) -> Standard_Real

        returns the Vperiod.
        raises if the surface is not vperiodic.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_Surface_VPeriod(self, *args)


    def UIso(self, *args):
        """
        UIso(GeomPlate_Surface self, Standard_Real const U) -> Handle_Geom_Curve

        Computes the U isoparametric curve.

        :type U: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomPlate.GeomPlate_Surface_UIso(self, *args)


    def VIso(self, *args):
        """
        VIso(GeomPlate_Surface self, Standard_Real const V) -> Handle_Geom_Curve

        Computes the V isoparametric curve.

        :type V: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomPlate.GeomPlate_Surface_VIso(self, *args)


    def Continuity(self, *args):
        """
        Continuity(GeomPlate_Surface self) -> GeomAbs_Shape

        Global Continuity of the surface in direction U and V :
        C0 : only geometric continuity,
        C1 : continuity of the first derivative all along the surface,
        C2 : continuity of the second derivative all along the surface,
        C3 : continuity of the third derivative all along the surface,
        G1 : tangency continuity all along the surface,
        G2 : curvature continuity all along the surface,
        CN : the order of continuity is infinite.
        Example :
        If the surface is C1 in the V parametric direction and C2
        in the U parametric direction Shape = C1.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomPlate.GeomPlate_Surface_Continuity(self, *args)


    def IsCNu(self, *args):
        """
        IsCNu(GeomPlate_Surface self, Standard_Integer const N) -> Standard_Boolean

        Returns the order of continuity of the surface in the
        U parametric direction.
        Raised if N < 0.

        :type N: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsCNu(self, *args)


    def IsCNv(self, *args):
        """
        IsCNv(GeomPlate_Surface self, Standard_Integer const N) -> Standard_Boolean

        Returns the order of continuity of the surface in the
        V parametric direction.
        Raised if N < 0.

        :type N: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_Surface_IsCNv(self, *args)


    def D0(self, *args):
        """
        D0(GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        Computes the point of parameter U,V on the surface.

        Raised only for an "OffsetSurface" if it is not possible to
        compute the current point.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.GeomPlate_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        Computes the point P and the first derivatives in the
        directions U and V at this point.
        Raised if the continuity of the surface is not C1.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        Computes the point P, the first and the second derivatives in
        the directions U and V at this point.
        Raised if the continuity of the surface is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        Computes the point P, the first,the second and the third
        derivatives in the directions U and V at this point.
        Raised if the continuity of the surface is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        ---Purpose ;
        Computes the derivative of order Nu in the direction U and Nv
        in the direction V at the point P(U, V).

        Raised if the continuity of the surface is not CNu in the U
        direction or not CNv in the V direction.
        Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.GeomPlate_Surface_DN(self, *args)


    def Copy(self, *args):
        """
        Copy(GeomPlate_Surface self) -> Handle_Geom_Geometry

        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.GeomPlate_Surface_Copy(self, *args)


    def Transform(self, *args):
        """
        Transform(GeomPlate_Surface self, gp_Trsf T)

        Transformation of a geometric object. This tansformation
        can be a translation, a rotation, a symmetry, a scaling
        or a complex transformation obtained by combination of
        the previous elementaries transformations.
        (see class Transformation of the package Geom).

        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _GeomPlate.GeomPlate_Surface_Transform(self, *args)


    def CallSurfinit(self, *args):
        """
        CallSurfinit(GeomPlate_Surface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.GeomPlate_Surface_CallSurfinit(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(GeomPlate_Surface self, Standard_Real const Umin, Standard_Real const Umax, Standard_Real const Vmin, Standard_Real const Vmax)

        :type Umin: float
        :type Umax: float
        :type Vmin: float
        :type Vmax: float

        """
        return _GeomPlate.GeomPlate_Surface_SetBounds(self, *args)


    def RealBounds(self, *args):
        """
        RealBounds(GeomPlate_Surface self)

        :type U1: float
        :type U2: float
        :type V1: float
        :type V2: float

        """
        return _GeomPlate.GeomPlate_Surface_RealBounds(self, *args)


    def Constraints(self, *args):
        """
        Constraints(GeomPlate_Surface self, NCollection_Sequence_gp_XY Seq)

        :type Seq: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _GeomPlate.GeomPlate_Surface_Constraints(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomPlate.GeomPlate_Surface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomPlate.GeomPlate_Surface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.GeomPlate_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Surface
GeomPlate_Surface_swigregister = _GeomPlate.GeomPlate_Surface_swigregister
GeomPlate_Surface_swigregister(GeomPlate_Surface)

def GeomPlate_Surface_get_type_name(*args):
    """
    GeomPlate_Surface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomPlate.GeomPlate_Surface_get_type_name(*args)

def GeomPlate_Surface_get_type_descriptor(*args):
    """
    GeomPlate_Surface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomPlate.GeomPlate_Surface_get_type_descriptor(*args)

class Handle_GeomPlate_PointConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_PointConstraint self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_PointConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_PointConstraint self, GeomPlate_PointConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_PointConstraint self, Handle_GeomPlate_PointConstraint theHandle) -> Handle_GeomPlate_PointConstraint
        assign(Handle_GeomPlate_PointConstraint self, GeomPlate_PointConstraint thePtr) -> Handle_GeomPlate_PointConstraint
        assign(Handle_GeomPlate_PointConstraint self, Handle_GeomPlate_PointConstraint theHandle) -> Handle_GeomPlate_PointConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_PointConstraint self) -> GeomPlate_PointConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_PointConstraint self) -> GeomPlate_PointConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_PointConstraint self) -> GeomPlate_PointConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_PointConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_PointConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_PointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_PointConstraint_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_PointConstraint

    def SetOrder(self, *args):
        """
        SetOrder(Handle_GeomPlate_PointConstraint self, Standard_Integer const Order)

        :type Order: int

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_SetOrder(self, *args)


    def Order(self, *args):
        """
        Order(Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Returns the order of constraint: G0, G1, and G2,
        controlled respectively by G0Criterion G1Criterion and G2Criterion.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_Order(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_GeomPlate_PointConstraint self, Standard_Real const TolDist)

        Allows you to set the G0 criterion. This is the law
        defining the greatest distance allowed between the
        constraint and the target surface. If this criterion is not
        set, {TolDist, the distance tolerance from the constructor, is used

        :type TolDist: float

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_GeomPlate_PointConstraint self, Standard_Real const TolAng)

        Allows you to set the G1 criterion. This is the law
        defining the greatest angle allowed between the
        constraint and the target surface. If this criterion is not
        set, TolAng, the angular tolerance from the constructor, is used.
        Raises   ConstructionError  if  the  point  is  not  on  the  surface

        :type TolAng: float

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_GeomPlate_PointConstraint self, Standard_Real const TolCurv)

        Allows you to set the G2 criterion. This is the law
        defining the greatest difference in curvature allowed
        between the constraint and the target surface. If this
        criterion is not set, TolCurv, the curvature tolerance from
        the constructor, is used.
        Raises   ConstructionError if  the  point  is  not  on  the  surface

        :type TolCurv: float

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_SetG2Criterion(self, *args)


    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G0 criterion. This is the greatest distance
        allowed between the constraint and the target surface.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G1 criterion. This is the greatest angle
        allowed between the constraint and the target surface.
        Raises   ConstructionError if  the  point  is  not  on  the  surface.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_GeomPlate_PointConstraint self) -> Standard_Real

        Returns the G2 criterion. This is the greatest difference
        in curvature allowed between the constraint and the target surface.
        Raises   ConstructionError if  the  point  is  not  on  the  surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_G2Criterion(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomPlate_PointConstraint self, gp_Pnt P)

        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomPlate_PointConstraint self, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomPlate_PointConstraint self, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3, gp_Vec V4, gp_Vec V5)

        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec
        :type V4: OCC.wrapper.gp.gp_Vec
        :type V5: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_D2(self, *args)


    def HasPnt2dOnSurf(self, *args):
        """
        HasPnt2dOnSurf(Handle_GeomPlate_PointConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_HasPnt2dOnSurf(self, *args)


    def SetPnt2dOnSurf(self, *args):
        """
        SetPnt2dOnSurf(Handle_GeomPlate_PointConstraint self, gp_Pnt2d Pnt)

        :type Pnt: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_SetPnt2dOnSurf(self, *args)


    def Pnt2dOnSurf(self, *args):
        """
        Pnt2dOnSurf(Handle_GeomPlate_PointConstraint self) -> gp_Pnt2d

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_Pnt2dOnSurf(self, *args)


    def LPropSurf(self, *args):
        """
        LPropSurf(Handle_GeomPlate_PointConstraint self) -> GeomLProp_SLProps

        :rtype: OCC.wrapper.GeomLProp.GeomLProp_SLProps

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_LPropSurf(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_PointConstraint self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_PointConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_PointConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_PointConstraint self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_PointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_PointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_PointConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_PointConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_PointConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_PointConstraint self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_PointConstraint_DecrementRefCounter(self, *args)

Handle_GeomPlate_PointConstraint_swigregister = _GeomPlate.Handle_GeomPlate_PointConstraint_swigregister
Handle_GeomPlate_PointConstraint_swigregister(Handle_GeomPlate_PointConstraint)

def Handle_GeomPlate_PointConstraint_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_PointConstraint_DownCast(thing)
Handle_GeomPlate_PointConstraint_DownCast = _GeomPlate.Handle_GeomPlate_PointConstraint_DownCast

class GeomPlate_PlateG1Criterion(AdvApp2Var.AdvApp2Var_Criterion):
    """this class contains a specific G1 criterion for GeomPlate_MakeApprox"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_PlateG1Criterion self, NCollection_Sequence_gp_XY Data, NCollection_Sequence_gp_XYZ G1Data, Standard_Real const Maximum, AdvApp2Var_CriterionType const Type=AdvApp2Var_Absolute, AdvApp2Var_CriterionRepartition const Repart=AdvApp2Var_Regular) -> GeomPlate_PlateG1Criterion

        :type Data: OCC.wrapper.TColgp.TColgp_SequenceOfXY
        :type G1Data: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ
        :type Maximum: float
        :type Type: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionType
        :type Repart: OCC.wrapper.AdvApp2Var.AdvApp2Var_CriterionRepartition

        """
        this = _GeomPlate.new_GeomPlate_PlateG1Criterion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(GeomPlate_PlateG1Criterion self, AdvApp2Var_Patch P, AdvApp2Var_Context C)

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :type C: OCC.wrapper.AdvApp2Var.AdvApp2Var_Context

        """
        return _GeomPlate.GeomPlate_PlateG1Criterion_Value(self, *args)


    def IsSatisfied(self, *args):
        """
        IsSatisfied(GeomPlate_PlateG1Criterion self, AdvApp2Var_Patch P) -> Standard_Boolean

        :type P: OCC.wrapper.AdvApp2Var.AdvApp2Var_Patch
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_PlateG1Criterion_IsSatisfied(self, *args)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_PlateG1Criterion
GeomPlate_PlateG1Criterion_swigregister = _GeomPlate.GeomPlate_PlateG1Criterion_swigregister
GeomPlate_PlateG1Criterion_swigregister(GeomPlate_PlateG1Criterion)

class Handle_GeomPlate_CurveConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_CurveConstraint self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_CurveConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_CurveConstraint self, GeomPlate_CurveConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_CurveConstraint self, Handle_GeomPlate_CurveConstraint theHandle) -> Handle_GeomPlate_CurveConstraint
        assign(Handle_GeomPlate_CurveConstraint self, GeomPlate_CurveConstraint thePtr) -> Handle_GeomPlate_CurveConstraint
        assign(Handle_GeomPlate_CurveConstraint self, Handle_GeomPlate_CurveConstraint theHandle) -> Handle_GeomPlate_CurveConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_CurveConstraint self) -> GeomPlate_CurveConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_CurveConstraint self) -> GeomPlate_CurveConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_CurveConstraint self) -> GeomPlate_CurveConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_CurveConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_CurveConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_CurveConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_CurveConstraint_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_CurveConstraint

    def SetOrder(self, *args):
        """
        SetOrder(Handle_GeomPlate_CurveConstraint self, Standard_Integer const Order)

        Allows you to set the order of continuity required for
        the constraints: G0, G1, and G2, controlled
        respectively by G0Criterion G1Criterion and G2Criterion.

        :type Order: int

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetOrder(self, *args)


    def Order(self, *args):
        """
        Order(Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Returns the order of constraint, one of G0, G1 or G2.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Order(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Returns the number of points on the curve used as a
        constraint. The default setting is 10. This parameter
        affects computation time, which increases by the cube of
        the number of points.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_NbPoints(self, *args)


    def SetNbPoints(self, *args):
        """
        SetNbPoints(Handle_GeomPlate_CurveConstraint self, Standard_Integer const NewNb)

        Allows you to set the number of points on the curve
        constraint. The default setting is 10. This parameter
        affects computation time, which increases by the cube of
        the number of points.

        :type NewNb: int

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetNbPoints(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_GeomPlate_CurveConstraint self, Handle_Law_Function G0Crit)

        Allows you to set the G0 criterion. This is the law
        defining the greatest distance allowed between the
        constraint and the target surface for each point of the
        constraint. If this criterion is not set, TolDist, the
        distance tolerance from the constructor, is used.

        :type G0Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_GeomPlate_CurveConstraint self, Handle_Law_Function G1Crit)

        Allows you to set the G1 criterion. This is the law
        defining the greatest angle allowed between the
        constraint and the target surface. If this criterion is not
        set, TolAng, the angular tolerance from the constructor, is used.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type G1Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_GeomPlate_CurveConstraint self, Handle_Law_Function G2Crit)

        :type G2Crit: OCC.wrapper.Law.Handle_Law_Function

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetG2Criterion(self, *args)


    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G0 criterion at the parametric point U on
        the curve. This is the greatest distance allowed between
        the constraint and the target surface at U.

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G1 criterion at the parametric point U on
        the curve. This is the greatest angle allowed between
        the constraint and the target surface at U.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_GeomPlate_CurveConstraint self, Standard_Real const U) -> Standard_Real

        Returns the G2 criterion at the parametric point U on
        the curve. This is the greatest difference in curvature
        allowed between the constraint and the target surface at U.
        Raises  ConstructionError if  the  curve  is  not  on  a  surface

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_G2Criterion(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_LastParameter(self, *args)


    def Length(self, *args):
        """
        Length(Handle_GeomPlate_CurveConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Length(self, *args)


    def LPropSurf(self, *args):
        """
        LPropSurf(Handle_GeomPlate_CurveConstraint self, Standard_Real const U) -> GeomLProp_SLProps

        :type U: float
        :rtype: OCC.wrapper.GeomLProp.GeomLProp_SLProps

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_LPropSurf(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomPlate_CurveConstraint self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3, gp_Vec V4, gp_Vec V5)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec
        :type V4: OCC.wrapper.gp.gp_Vec
        :type V5: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_D2(self, *args)


    def Curve3d(self, *args):
        """
        Curve3d(Handle_GeomPlate_CurveConstraint self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Curve3d(self, *args)


    def SetCurve2dOnSurf(self, *args):
        """
        SetCurve2dOnSurf(Handle_GeomPlate_CurveConstraint self, Handle_Geom2d_Curve Curve2d)

        loads a 2d curve associated the surface resulting of the constraints

        :type Curve2d: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetCurve2dOnSurf(self, *args)


    def Curve2dOnSurf(self, *args):
        """
        Curve2dOnSurf(Handle_GeomPlate_CurveConstraint self) -> Handle_Geom2d_Curve

        Returns a 2d curve associated the surface resulting of the constraints

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Curve2dOnSurf(self, *args)


    def SetProjectedCurve(self, *args):
        """
        SetProjectedCurve(Handle_GeomPlate_CurveConstraint self, Handle_Adaptor2d_HCurve2d Curve2d, Standard_Real const TolU, Standard_Real const TolV)

        loads a 2d curve  resulting from the normal projection of
        the curve on the initial surface

        :type Curve2d: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d
        :type TolU: float
        :type TolV: float

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_SetProjectedCurve(self, *args)


    def ProjectedCurve(self, *args):
        """
        ProjectedCurve(Handle_GeomPlate_CurveConstraint self) -> Handle_Adaptor2d_HCurve2d

        Returns the projected curve resulting from the normal projection of the
        curve on the initial surface

        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_ProjectedCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_CurveConstraint self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_CurveConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_CurveConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_CurveConstraint self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_CurveConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_CurveConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_CurveConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_CurveConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_CurveConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_CurveConstraint self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_CurveConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_CurveConstraint_DecrementRefCounter(self, *args)

Handle_GeomPlate_CurveConstraint_swigregister = _GeomPlate.Handle_GeomPlate_CurveConstraint_swigregister
Handle_GeomPlate_CurveConstraint_swigregister(Handle_GeomPlate_CurveConstraint)

def Handle_GeomPlate_CurveConstraint_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_CurveConstraint_DownCast(thing)
Handle_GeomPlate_CurveConstraint_DownCast = _GeomPlate.Handle_GeomPlate_CurveConstraint_DownCast

class NCollection_Sequence_Handle_GeomPlate_PointConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _GeomPlate.new_NCollection_Sequence_Handle_GeomPlate_PointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_GeomPlate_PointConstraint self)

        Reverse sequence


        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theOther) -> NCollection_Sequence_Handle_GeomPlate_PointConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theOther) -> NCollection_Sequence_Handle_GeomPlate_PointConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Handle_GeomPlate_PointConstraint theItem)
        Append(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Handle_GeomPlate_PointConstraint theItem)
        Prepend(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_PointConstraint theItem)
        InsertBefore(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, NCollection_Sequence< opencascade::handle< GeomPlate_PointConstraint > >::Iterator & thePosition, Handle_GeomPlate_PointConstraint theItem)
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSeq)
        InsertAfter(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_PointConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_GeomPlate_PointConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Handle_GeomPlate_PointConstraint

        First item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_GeomPlate_PointConstraint self) -> Handle_GeomPlate_PointConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex) -> Handle_GeomPlate_PointConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_GeomPlate_PointConstraint self, Standard_Integer const theIndex, Handle_GeomPlate_PointConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_SetValue(self, *args)


    def __iter__(self):
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint___iter__(self)
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_Handle_GeomPlate_PointConstraint
NCollection_Sequence_Handle_GeomPlate_PointConstraint_swigregister = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_swigregister
NCollection_Sequence_Handle_GeomPlate_PointConstraint_swigregister(NCollection_Sequence_Handle_GeomPlate_PointConstraint)

def NCollection_Sequence_Handle_GeomPlate_PointConstraint_delNode(*args):
    """
    NCollection_Sequence_Handle_GeomPlate_PointConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_delNode(*args)

class NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _GeomPlate.new_NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper

    def __next__(self):
        return _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper_swigregister = _GeomPlate.NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper_swigregister
NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper_swigregister(NCollection_Sequence_Handle_GeomPlate_PointConstraint_IteratorHelper)


try:
	GeomPlate_SequenceOfPointConstraint = NCollection_Sequence_Handle_GeomPlate_PointConstraint
except NameError:
	pass # does not exist, probably ignored

class Handle_GeomPlate_HArray1OfSequenceOfReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_HArray1OfSequenceOfReal self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_HArray1OfSequenceOfReal self, GeomPlate_HArray1OfSequenceOfReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_HArray1OfSequenceOfReal self, Handle_GeomPlate_HArray1OfSequenceOfReal theHandle) -> Handle_GeomPlate_HArray1OfSequenceOfReal
        assign(Handle_GeomPlate_HArray1OfSequenceOfReal self, GeomPlate_HArray1OfSequenceOfReal thePtr) -> Handle_GeomPlate_HArray1OfSequenceOfReal
        assign(Handle_GeomPlate_HArray1OfSequenceOfReal self, Handle_GeomPlate_HArray1OfSequenceOfReal theHandle) -> Handle_GeomPlate_HArray1OfSequenceOfReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> GeomPlate_HArray1OfSequenceOfReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> GeomPlate_HArray1OfSequenceOfReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> GeomPlate_HArray1OfSequenceOfReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_HArray1OfSequenceOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_HArray1OfSequenceOfReal

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfSequenceOfReal

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> NCollection_Array1_TColStd_SequenceOfReal

        :rtype: OCC.wrapper.GeomPlate.GeomPlate_Array1OfSequenceOfReal

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_HArray1OfSequenceOfReal self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_HArray1OfSequenceOfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_HArray1OfSequenceOfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_HArray1OfSequenceOfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_HArray1OfSequenceOfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_HArray1OfSequenceOfReal self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_HArray1OfSequenceOfReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DecrementRefCounter(self, *args)

Handle_GeomPlate_HArray1OfSequenceOfReal_swigregister = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_swigregister
Handle_GeomPlate_HArray1OfSequenceOfReal_swigregister(Handle_GeomPlate_HArray1OfSequenceOfReal)

def Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast(thing)
Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast = _GeomPlate.Handle_GeomPlate_HArray1OfSequenceOfReal_DownCast

class GeomPlate_BuildAveragePlane(object):
    """
    This class computes an average inertial plane with an
    array of points.
    Computes the initial surface (average plane) in the cases
    when the initial surface is not given.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_BuildAveragePlane self, Handle_TColgp_HArray1OfPnt Pts, Standard_Integer const NbBoundPoints, Standard_Real const Tol, Standard_Integer const POption, Standard_Integer const NOption) -> GeomPlate_BuildAveragePlane
        __init__(GeomPlate_BuildAveragePlane self, NCollection_Sequence_gp_Vec Normals, Handle_TColgp_HArray1OfPnt Pts) -> GeomPlate_BuildAveragePlane

        Creates the plane from the "best vector"

        :type Normals: OCC.wrapper.TColgp.TColgp_SequenceOfVec
        :type Pts: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfPnt

        """
        this = _GeomPlate.new_GeomPlate_BuildAveragePlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Plane(self, *args):
        """
        Plane(GeomPlate_BuildAveragePlane self) -> Handle_Geom_Plane

        Return the average Plane.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_Plane(self, *args)


    def Line(self, *args):
        """
        Line(GeomPlate_BuildAveragePlane self) -> Handle_Geom_Line

        Return a Line when 2 eigenvalues are null.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Line

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_Line(self, *args)


    def IsPlane(self, *args):
        """
        IsPlane(GeomPlate_BuildAveragePlane self) -> Standard_Boolean

        return OK if is a plane.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_IsPlane(self, *args)


    def IsLine(self, *args):
        """
        IsLine(GeomPlate_BuildAveragePlane self) -> Standard_Boolean

        return OK if is a line.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_IsLine(self, *args)


    def MinMaxBox(self, *args):
        """
        MinMaxBox(GeomPlate_BuildAveragePlane self)

        computes the   minimal box  to include  all normal
        projection points of the initial array  on the plane.

        :type Umin: float
        :type Umax: float
        :type Vmin: float
        :type Vmax: float

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_MinMaxBox(self, *args)


    def HalfSpace(*args):
        """
        HalfSpace(NCollection_Sequence_gp_Vec NewNormals, NCollection_Sequence_gp_Vec Normals, NCollection_Sequence_GeomPlate_Aij Bset, Standard_Real const LinTol, Standard_Real const AngTol) -> Standard_Boolean

        :type NewNormals: OCC.wrapper.TColgp.TColgp_SequenceOfVec
        :type Normals: OCC.wrapper.TColgp.TColgp_SequenceOfVec
        :type Bset: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfAij
        :type LinTol: float
        :type AngTol: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.GeomPlate_BuildAveragePlane_HalfSpace(*args)

    HalfSpace = staticmethod(HalfSpace)
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_BuildAveragePlane
GeomPlate_BuildAveragePlane_swigregister = _GeomPlate.GeomPlate_BuildAveragePlane_swigregister
GeomPlate_BuildAveragePlane_swigregister(GeomPlate_BuildAveragePlane)

def GeomPlate_BuildAveragePlane_HalfSpace(*args):
    """
    GeomPlate_BuildAveragePlane_HalfSpace(NCollection_Sequence_gp_Vec NewNormals, NCollection_Sequence_gp_Vec Normals, NCollection_Sequence_GeomPlate_Aij Bset, Standard_Real const LinTol, Standard_Real const AngTol) -> Standard_Boolean

    :type NewNormals: OCC.wrapper.TColgp.TColgp_SequenceOfVec
    :type Normals: OCC.wrapper.TColgp.TColgp_SequenceOfVec
    :type Bset: OCC.wrapper.GeomPlate.GeomPlate_SequenceOfAij
    :type LinTol: float
    :type AngTol: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _GeomPlate.GeomPlate_BuildAveragePlane_HalfSpace(*args)

class GeomPlate_Aij(object):
    """A structure containing indexes of two normals and its cross product"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_Aij self) -> GeomPlate_Aij
        __init__(GeomPlate_Aij self, Standard_Integer const anInd1, Standard_Integer const anInd2, gp_Vec aVec) -> GeomPlate_Aij

        :type anInd1: int
        :type anInd2: int
        :type aVec: OCC.wrapper.gp.gp_Vec

        """
        this = _GeomPlate.new_GeomPlate_Aij(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_GeomPlate_Aij
GeomPlate_Aij_swigregister = _GeomPlate.GeomPlate_Aij_swigregister
GeomPlate_Aij_swigregister(GeomPlate_Aij)

class NCollection_Array1_Handle_Adaptor3d_HCurve(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> NCollection_Array1< opencascade::handle< Adaptor3d_HCurve > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> NCollection_Array1< opencascade::handle< Adaptor3d_HCurve > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> NCollection_Array1< opencascade::handle< Adaptor3d_HCurve > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> NCollection_Array1< opencascade::handle< Adaptor3d_HCurve > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _GeomPlate.new_NCollection_Array1_Handle_Adaptor3d_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_Adaptor3d_HCurve self, Handle_Adaptor3d_HCurve theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_Adaptor3d_HCurve self, NCollection_Array1_Handle_Adaptor3d_HCurve theOther) -> NCollection_Array1_Handle_Adaptor3d_HCurve

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_Adaptor3d_HCurve self, NCollection_Array1_Handle_Adaptor3d_HCurve theOther) -> NCollection_Array1_Handle_Adaptor3d_HCurve

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_Adaptor3d_HCurve self, NCollection_Array1_Handle_Adaptor3d_HCurve theOther) -> NCollection_Array1_Handle_Adaptor3d_HCurve
        assign(NCollection_Array1_Handle_Adaptor3d_HCurve self, NCollection_Array1_Handle_Adaptor3d_HCurve theOther) -> NCollection_Array1_Handle_Adaptor3d_HCurve

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Handle_Adaptor3d_HCurve

        @return first element

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_Adaptor3d_HCurve self) -> Handle_Adaptor3d_HCurve

        @return last element

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_Adaptor3d_HCurve self, Standard_Integer const theIndex) -> Handle_Adaptor3d_HCurve

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_Adaptor3d_HCurve self, Standard_Integer const theIndex, Handle_Adaptor3d_HCurve theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_Adaptor3d_HCurve self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_Resize(self, *args)

    __swig_destroy__ = _GeomPlate.delete_NCollection_Array1_Handle_Adaptor3d_HCurve
NCollection_Array1_Handle_Adaptor3d_HCurve_swigregister = _GeomPlate.NCollection_Array1_Handle_Adaptor3d_HCurve_swigregister
NCollection_Array1_Handle_Adaptor3d_HCurve_swigregister(NCollection_Array1_Handle_Adaptor3d_HCurve)


try:
	GeomPlate_Array1OfHCurve = NCollection_Array1_Handle_Adaptor3d_HCurve
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_TColStd_SequenceOfReal(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Array1< TColStd_SequenceOfReal >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Array1< TColStd_SequenceOfReal >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Array1< TColStd_SequenceOfReal >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Array1< TColStd_SequenceOfReal >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _GeomPlate.new_NCollection_Array1_TColStd_SequenceOfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_TColStd_SequenceOfReal self, NCollection_Sequence_Standard_Real theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_TColStd_SequenceOfReal self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_TColStd_SequenceOfReal self, NCollection_Array1_TColStd_SequenceOfReal theOther) -> NCollection_Array1_TColStd_SequenceOfReal

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_TColStd_SequenceOfReal self, NCollection_Array1_TColStd_SequenceOfReal theOther) -> NCollection_Array1_TColStd_SequenceOfReal

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_TColStd_SequenceOfReal self, NCollection_Array1_TColStd_SequenceOfReal theOther) -> NCollection_Array1_TColStd_SequenceOfReal
        assign(NCollection_Array1_TColStd_SequenceOfReal self, NCollection_Array1_TColStd_SequenceOfReal theOther) -> NCollection_Array1_TColStd_SequenceOfReal

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Sequence_Standard_Real

        @return first element

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_TColStd_SequenceOfReal self) -> NCollection_Sequence_Standard_Real

        @return last element

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_TColStd_SequenceOfReal self, Standard_Integer const theIndex) -> NCollection_Sequence_Standard_Real

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_TColStd_SequenceOfReal self, Standard_Integer const theIndex, NCollection_Sequence_Standard_Real theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_TColStd_SequenceOfReal self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_Resize(self, *args)

    __swig_destroy__ = _GeomPlate.delete_NCollection_Array1_TColStd_SequenceOfReal
NCollection_Array1_TColStd_SequenceOfReal_swigregister = _GeomPlate.NCollection_Array1_TColStd_SequenceOfReal_swigregister
NCollection_Array1_TColStd_SequenceOfReal_swigregister(NCollection_Array1_TColStd_SequenceOfReal)


try:
	GeomPlate_Array1OfSequenceOfReal = NCollection_Array1_TColStd_SequenceOfReal
except NameError:
	pass # does not exist, probably ignored

class GeomPlate_MakeApprox(object):
    """Allows you to convert a GeomPlate surface into a BSpline."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomPlate_MakeApprox self, Handle_GeomPlate_Surface SurfPlate, AdvApp2Var_Criterion PlateCrit, Standard_Real const Tol3d, Standard_Integer const Nbmax, Standard_Integer const dgmax, GeomAbs_Shape const Continuity=GeomAbs_C1, Standard_Real const EnlargeCoeff=1.1) -> GeomPlate_MakeApprox
        __init__(GeomPlate_MakeApprox self, Handle_GeomPlate_Surface SurfPlate, Standard_Real const Tol3d, Standard_Integer const Nbmax, Standard_Integer const dgmax, Standard_Real const dmax, Standard_Integer const CritOrder=0, GeomAbs_Shape const Continuity=GeomAbs_C1, Standard_Real const EnlargeCoeff=1.1) -> GeomPlate_MakeApprox

        Converts SurfPlate into a Geom_BSplineSurface with
        n Bezier pieces (n<=Nbmax) of degree <= dgmax
        and an approximation error < Tol3d if possible
        if CritOrder = -1 , no criterion is used
        if CritOrder = 0 , a PlateG0Criterion is used with max value > 10*dmax
        if CritOrder = 1 , a PlateG1Criterion is used with max value > 10*dmax
        WARNING : for CritOrder = 0 or 1, only the constraints points of SurfPlate
        are used to evaluate the value of the criterion

        :type SurfPlate: OCC.wrapper.GeomPlate.Handle_GeomPlate_Surface
        :type Tol3d: float
        :type Nbmax: int
        :type dgmax: int
        :type dmax: float
        :type CritOrder: int
        :type Continuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type EnlargeCoeff: float

        """
        this = _GeomPlate.new_GeomPlate_MakeApprox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Surface(self, *args):
        """
        Surface(GeomPlate_MakeApprox self) -> Handle_Geom_BSplineSurface

        Returns the BSpline surface extracted from the
        GeomPlate_MakeApprox object.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomPlate.GeomPlate_MakeApprox_Surface(self, *args)


    def ApproxError(self, *args):
        """
        ApproxError(GeomPlate_MakeApprox self) -> Standard_Real

        Returns the error in computation of the approximation
        surface. This is the distance between the entire target
        BSpline surface and the entire original surface
        generated by BuildPlateSurface and converted by GeomPlate_Surface.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_MakeApprox_ApproxError(self, *args)


    def CriterionError(self, *args):
        """
        CriterionError(GeomPlate_MakeApprox self) -> Standard_Real

        Returns the criterion error in computation of the
        approximation surface. This is estimated relative to the
        curve and point constraints only.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.GeomPlate_MakeApprox_CriterionError(self, *args)

    __swig_destroy__ = _GeomPlate.delete_GeomPlate_MakeApprox
GeomPlate_MakeApprox_swigregister = _GeomPlate.GeomPlate_MakeApprox_swigregister
GeomPlate_MakeApprox_swigregister(GeomPlate_MakeApprox)

class Handle_GeomPlate_Surface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomPlate_Surface self)

        Nullify the handle


        """
        return _GeomPlate.Handle_GeomPlate_Surface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomPlate_Surface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomPlate_Surface self, GeomPlate_Surface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomPlate.Handle_GeomPlate_Surface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomPlate_Surface self, Handle_GeomPlate_Surface theHandle) -> Handle_GeomPlate_Surface
        assign(Handle_GeomPlate_Surface self, GeomPlate_Surface thePtr) -> Handle_GeomPlate_Surface
        assign(Handle_GeomPlate_Surface self, Handle_GeomPlate_Surface theHandle) -> Handle_GeomPlate_Surface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomPlate.Handle_GeomPlate_Surface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomPlate_Surface self) -> GeomPlate_Surface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_Surface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomPlate_Surface self) -> GeomPlate_Surface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomPlate.Handle_GeomPlate_Surface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomPlate_Surface self) -> GeomPlate_Surface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomPlate.Handle_GeomPlate_Surface___ref__(self, *args)


    def __hash__(self):
        return _GeomPlate.Handle_GeomPlate_Surface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomPlate.Handle_GeomPlate_Surface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomPlate.new_Handle_GeomPlate_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomPlate.Handle_GeomPlate_Surface_DownCast)
    __swig_destroy__ = _GeomPlate.delete_Handle_GeomPlate_Surface

    def UReverse(self, *args):
        """
        UReverse(Handle_GeomPlate_Surface self)

        Reverses the U direction of parametrization of <me>.
        The bounds of the surface are not modified.


        """
        return _GeomPlate.Handle_GeomPlate_Surface_UReverse(self, *args)


    def UReversedParameter(self, *args):
        """
        UReversedParameter(Handle_GeomPlate_Surface self, Standard_Real const U) -> Standard_Real

        Return the  parameter on the  Ureversed surface for
        the point of parameter U on <me>.

        me->UReversed()->Value(me->UReversedParameter(U),V)

        is the same point as

        me->Value(U,V)

        :type U: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_Surface_UReversedParameter(self, *args)


    def VReverse(self, *args):
        """
        VReverse(Handle_GeomPlate_Surface self)

        Reverses the V direction of parametrization of <me>.
        The bounds of the surface are not modified.


        """
        return _GeomPlate.Handle_GeomPlate_Surface_VReverse(self, *args)


    def VReversedParameter(self, *args):
        """
        VReversedParameter(Handle_GeomPlate_Surface self, Standard_Real const V) -> Standard_Real

        Return the  parameter on the  Vreversed surface for
        the point of parameter V on <me>.

        me->VReversed()->Value(U,me->VReversedParameter(V))

        is the same point as

        me->Value(U,V)

        :type V: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_Surface_VReversedParameter(self, *args)


    def TransformParameters(self, *args):
        """
        TransformParameters(Handle_GeomPlate_Surface self, gp_Trsf T)

        Computes the  parameters on the  transformed  surface for
        the transform of the point of parameters U,V on <me>.

        me->Transformed(T)->Value(U',V')

        is the same point as

        me->Value(U,V).Transformed(T)

        Where U',V' are the new values of U,V after calling

        me->TranformParameters(U,V,T)

        This methods does not change <U> and <V>

        It  can be redefined.  For  example on  the Plane,
        Cylinder, Cone, Revolved and Extruded surfaces.

        :type U: float
        :type V: float
        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _GeomPlate.Handle_GeomPlate_Surface_TransformParameters(self, *args)


    def ParametricTransformation(self, *args):
        """
        ParametricTransformation(Handle_GeomPlate_Surface self, gp_Trsf T) -> gp_GTrsf2d

        Returns a 2d transformation  used to find the  new
        parameters of a point on the transformed surface.

        me->Transformed(T)->Value(U',V')

        is the same point as

        me->Value(U,V).Transformed(T)

        Where U',V' are  obtained by transforming U,V with
        th 2d transformation returned by

        me->ParametricTransformation(T)

        This methods returns an identity transformation

        It  can be redefined.  For  example on  the Plane,
        Cylinder, Cone, Revolved and Extruded surfaces.

        :type T: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.gp.gp_GTrsf2d

        """
        return _GeomPlate.Handle_GeomPlate_Surface_ParametricTransformation(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_GeomPlate_Surface self)

        :type U1: float
        :type U2: float
        :type V1: float
        :type V2: float

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Bounds(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_GeomPlate_Surface self) -> Standard_Boolean

        Is the surface closed in the parametric direction U ?
        Returns True if for each parameter V  the distance
        between the point P (UFirst, V) and P (ULast, V) is
        lower or equal to Resolution from gp.  UFirst and ULast
        are the parametric bounds in the U direction.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_GeomPlate_Surface self) -> Standard_Boolean

        Is the surface closed in the parametric direction V ?
        Returns True if for each parameter U  the distance
        between the point P (U, VFirst) and  P (U, VLast) is
        lower or equal to Resolution from gp.  VFirst and VLast
        are the parametric bounds in the V direction.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_GeomPlate_Surface self) -> Standard_Boolean

        Is the parametrization of a surface periodic in the
        direction U ?
        It is possible only if the surface is closed in this
        parametric direction and if the following relation is
        satisfied :
        for each parameter V the distance between the point
        P (U, V)  and the point  P (U + T, V) is lower or equal
        to Resolution from package gp. T is the parametric period
        and must be a constant.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_GeomPlate_Surface self) -> Standard_Real

        returns the Uperiod.
        raises if the surface is not uperiodic.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_GeomPlate_Surface self) -> Standard_Boolean

        Is the parametrization of a surface periodic in the
        direction U ?
        It is possible only if the surface is closed in this
        parametric direction and if the following relation is
        satisfied :
        for each parameter V the distance between the point
        P (U, V)  and the point  P (U + T, V) is lower or equal
        to Resolution from package gp. T is the parametric period
        and must be a constant.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_GeomPlate_Surface self) -> Standard_Real

        returns the Vperiod.
        raises if the surface is not vperiodic.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomPlate.Handle_GeomPlate_Surface_VPeriod(self, *args)


    def UIso(self, *args):
        """
        UIso(Handle_GeomPlate_Surface self, Standard_Real const U) -> Handle_Geom_Curve

        Computes the U isoparametric curve.

        :type U: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomPlate.Handle_GeomPlate_Surface_UIso(self, *args)


    def VIso(self, *args):
        """
        VIso(Handle_GeomPlate_Surface self, Standard_Real const V) -> Handle_Geom_Curve

        Computes the V isoparametric curve.

        :type V: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomPlate.Handle_GeomPlate_Surface_VIso(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_GeomPlate_Surface self) -> GeomAbs_Shape

        Global Continuity of the surface in direction U and V :
        C0 : only geometric continuity,
        C1 : continuity of the first derivative all along the surface,
        C2 : continuity of the second derivative all along the surface,
        C3 : continuity of the third derivative all along the surface,
        G1 : tangency continuity all along the surface,
        G2 : curvature continuity all along the surface,
        CN : the order of continuity is infinite.
        Example :
        If the surface is C1 in the V parametric direction and C2
        in the U parametric direction Shape = C1.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Continuity(self, *args)


    def IsCNu(self, *args):
        """
        IsCNu(Handle_GeomPlate_Surface self, Standard_Integer const N) -> Standard_Boolean

        Returns the order of continuity of the surface in the
        U parametric direction.
        Raised if N < 0.

        :type N: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsCNu(self, *args)


    def IsCNv(self, *args):
        """
        IsCNv(Handle_GeomPlate_Surface self, Standard_Integer const N) -> Standard_Boolean

        Returns the order of continuity of the surface in the
        V parametric direction.
        Raised if N < 0.

        :type N: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsCNv(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        Computes the point of parameter U,V on the surface.

        Raised only for an "OffsetSurface" if it is not possible to
        compute the current point.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.Handle_GeomPlate_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        Computes the point P and the first derivatives in the
        directions U and V at this point.
        Raised if the continuity of the surface is not C1.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        Computes the point P, the first and the second derivatives in
        the directions U and V at this point.
        Raised if the continuity of the surface is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        Computes the point P, the first,the second and the third
        derivatives in the directions U and V at this point.
        Raised if the continuity of the surface is not C2.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        ---Purpose ;
        Computes the derivative of order Nu in the direction U and Nv
        in the direction V at the point P(U, V).

        Raised if the continuity of the surface is not CNu in the U
        direction or not CNv in the V direction.
        Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomPlate.Handle_GeomPlate_Surface_DN(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_GeomPlate_Surface self) -> Handle_Geom_Geometry

        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Copy(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_GeomPlate_Surface self, gp_Trsf T)

        Transformation of a geometric object. This tansformation
        can be a translation, a rotation, a symmetry, a scaling
        or a complex transformation obtained by combination of
        the previous elementaries transformations.
        (see class Transformation of the package Geom).

        :type T: OCC.wrapper.gp.gp_Trsf

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Transform(self, *args)


    def CallSurfinit(self, *args):
        """
        CallSurfinit(Handle_GeomPlate_Surface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.Handle_GeomPlate_Surface_CallSurfinit(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_GeomPlate_Surface self, Standard_Real const Umin, Standard_Real const Umax, Standard_Real const Vmin, Standard_Real const Vmax)

        :type Umin: float
        :type Umax: float
        :type Vmin: float
        :type Vmax: float

        """
        return _GeomPlate.Handle_GeomPlate_Surface_SetBounds(self, *args)


    def RealBounds(self, *args):
        """
        RealBounds(Handle_GeomPlate_Surface self)

        :type U1: float
        :type U2: float
        :type V1: float
        :type V2: float

        """
        return _GeomPlate.Handle_GeomPlate_Surface_RealBounds(self, *args)


    def Constraints(self, *args):
        """
        Constraints(Handle_GeomPlate_Surface self, NCollection_Sequence_gp_XY Seq)

        :type Seq: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Constraints(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomPlate_Surface self) -> char const *

        :rtype: const char *

        """
        return _GeomPlate.Handle_GeomPlate_Surface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_Surface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomPlate.Handle_GeomPlate_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UReversed(self, *args):
        """
        UReversed(Handle_GeomPlate_Surface self) -> Handle_Geom_Surface

        Reverses the U direction of parametrization of <me>.
        The bounds of the surface are not modified.
        A copy of <me> is returned.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.Handle_GeomPlate_Surface_UReversed(self, *args)


    def VReversed(self, *args):
        """
        VReversed(Handle_GeomPlate_Surface self) -> Handle_Geom_Surface

        Reverses the V direction of parametrization of <me>.
        The bounds of the surface are not modified.
        A copy of <me> is returned.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomPlate.Handle_GeomPlate_Surface_VReversed(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomPlate_Surface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        Computes the point of parameter U on the surface.

        It is implemented with D0

        Raised only for an "OffsetSurface" if it is not possible to
        compute the current point.

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Value(self, *args)


    def Mirror(self, *args):
        """
        Mirror(Handle_GeomPlate_Surface self, gp_Pnt P)
        Mirror(Handle_GeomPlate_Surface self, gp_Ax1 A1)
        Mirror(Handle_GeomPlate_Surface self, gp_Ax2 A2)

        Performs the symmetrical transformation of a Geometry
        with respect to a plane. The axis placement A2 locates
        the plane of the symmetry : (Location, XDirection, YDirection).

        :type A2: OCC.wrapper.gp.gp_Ax2

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Mirror(self, *args)


    def Rotate(self, *args):
        """
        Rotate(Handle_GeomPlate_Surface self, gp_Ax1 A1, Standard_Real const Ang)

        Rotates a Geometry. A1 is the axis of the rotation.
        Ang is the angular value of the rotation in radians.

        :type A1: OCC.wrapper.gp.gp_Ax1
        :type Ang: float

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Rotate(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_GeomPlate_Surface self, gp_Pnt P, Standard_Real const S)

        Scales a Geometry. S is the scaling value.

        :type P: OCC.wrapper.gp.gp_Pnt
        :type S: float

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Scale(self, *args)


    def Translate(self, *args):
        """
        Translate(Handle_GeomPlate_Surface self, gp_Vec V)
        Translate(Handle_GeomPlate_Surface self, gp_Pnt P1, gp_Pnt P2)

        Translates a Geometry from the point P1 to the point P2.

        :type P1: OCC.wrapper.gp.gp_Pnt
        :type P2: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Translate(self, *args)


    def Mirrored(self, *args):
        """
        Mirrored(Handle_GeomPlate_Surface self, gp_Pnt P) -> Handle_Geom_Geometry
        Mirrored(Handle_GeomPlate_Surface self, gp_Ax1 A1) -> Handle_Geom_Geometry
        Mirrored(Handle_GeomPlate_Surface self, gp_Ax2 A2) -> Handle_Geom_Geometry

        :type A2: OCC.wrapper.gp.gp_Ax2
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Mirrored(self, *args)


    def Rotated(self, *args):
        """
        Rotated(Handle_GeomPlate_Surface self, gp_Ax1 A1, Standard_Real const Ang) -> Handle_Geom_Geometry

        :type A1: OCC.wrapper.gp.gp_Ax1
        :type Ang: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Rotated(self, *args)


    def Scaled(self, *args):
        """
        Scaled(Handle_GeomPlate_Surface self, gp_Pnt P, Standard_Real const S) -> Handle_Geom_Geometry

        :type P: OCC.wrapper.gp.gp_Pnt
        :type S: float
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Scaled(self, *args)


    def Transformed(self, *args):
        """
        Transformed(Handle_GeomPlate_Surface self, gp_Trsf T) -> Handle_Geom_Geometry

        :type T: OCC.wrapper.gp.gp_Trsf
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Transformed(self, *args)


    def Translated(self, *args):
        """
        Translated(Handle_GeomPlate_Surface self, gp_Vec V) -> Handle_Geom_Geometry
        Translated(Handle_GeomPlate_Surface self, gp_Pnt P1, gp_Pnt P2) -> Handle_Geom_Geometry

        :type P1: OCC.wrapper.gp.gp_Pnt
        :type P2: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _GeomPlate.Handle_GeomPlate_Surface_Translated(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomPlate_Surface self)

        Memory deallocator for transient classes


        """
        return _GeomPlate.Handle_GeomPlate_Surface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomPlate_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomPlate_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomPlate_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomPlate_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.Handle_GeomPlate_Surface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomPlate_Surface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomPlate.Handle_GeomPlate_Surface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomPlate_Surface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_Surface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomPlate_Surface self)

        Increments the reference counter of this object


        """
        return _GeomPlate.Handle_GeomPlate_Surface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomPlate_Surface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.Handle_GeomPlate_Surface_DecrementRefCounter(self, *args)

Handle_GeomPlate_Surface_swigregister = _GeomPlate.Handle_GeomPlate_Surface_swigregister
Handle_GeomPlate_Surface_swigregister(Handle_GeomPlate_Surface)

def Handle_GeomPlate_Surface_DownCast(thing):
    return _GeomPlate.Handle_GeomPlate_Surface_DownCast(thing)
Handle_GeomPlate_Surface_DownCast = _GeomPlate.Handle_GeomPlate_Surface_DownCast

class NCollection_Sequence_GeomPlate_Aij(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_GeomPlate_Aij self) -> NCollection_Sequence< GeomPlate_Aij >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_GeomPlate_Aij self) -> NCollection_Sequence< GeomPlate_Aij >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_GeomPlate_Aij self) -> NCollection_Sequence< GeomPlate_Aij >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_GeomPlate_Aij self) -> NCollection_Sequence< GeomPlate_Aij >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _GeomPlate.new_NCollection_Sequence_GeomPlate_Aij(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_GeomPlate_Aij self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_GeomPlate_Aij self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_GeomPlate_Aij self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_GeomPlate_Aij self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_GeomPlate_Aij self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_GeomPlate_Aij self)

        Reverse sequence


        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_GeomPlate_Aij self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence_GeomPlate_Aij theOther) -> NCollection_Sequence_GeomPlate_Aij

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence_GeomPlate_Aij theOther) -> NCollection_Sequence_GeomPlate_Aij

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence< GeomPlate_Aij >::Iterator & thePosition)
        Remove(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_GeomPlate_Aij self, GeomPlate_Aij theItem)
        Append(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence_GeomPlate_Aij theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_GeomPlate_Aij self, GeomPlate_Aij theItem)
        Prepend(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence_GeomPlate_Aij theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, GeomPlate_Aij theItem)
        InsertBefore(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, NCollection_Sequence_GeomPlate_Aij theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_GeomPlate_Aij self, NCollection_Sequence< GeomPlate_Aij >::Iterator & thePosition, GeomPlate_Aij theItem)
        InsertAfter(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, NCollection_Sequence_GeomPlate_Aij theSeq)
        InsertAfter(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, GeomPlate_Aij theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, NCollection_Sequence_GeomPlate_Aij theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_GeomPlate_Aij_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_GeomPlate_Aij self) -> GeomPlate_Aij

        First item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_GeomPlate_Aij self) -> GeomPlate_Aij

        Last item access

        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_GeomPlate_Aij_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex) -> GeomPlate_Aij

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _GeomPlate.NCollection_Sequence_GeomPlate_Aij___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_GeomPlate_Aij self, Standard_Integer const theIndex, GeomPlate_Aij theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_SetValue(self, *args)


    def __iter__(self):
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij___iter__(self)
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_GeomPlate_Aij
NCollection_Sequence_GeomPlate_Aij_swigregister = _GeomPlate.NCollection_Sequence_GeomPlate_Aij_swigregister
NCollection_Sequence_GeomPlate_Aij_swigregister(NCollection_Sequence_GeomPlate_Aij)

def NCollection_Sequence_GeomPlate_Aij_delNode(*args):
    """
    NCollection_Sequence_GeomPlate_Aij_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_delNode(*args)

class NCollection_Sequence_GeomPlate_Aij_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _GeomPlate.new_NCollection_Sequence_GeomPlate_Aij_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomPlate.delete_NCollection_Sequence_GeomPlate_Aij_IteratorHelper

    def __next__(self):
        return _GeomPlate.NCollection_Sequence_GeomPlate_Aij_IteratorHelper___next__(self)
NCollection_Sequence_GeomPlate_Aij_IteratorHelper_swigregister = _GeomPlate.NCollection_Sequence_GeomPlate_Aij_IteratorHelper_swigregister
NCollection_Sequence_GeomPlate_Aij_IteratorHelper_swigregister(NCollection_Sequence_GeomPlate_Aij_IteratorHelper)


try:
	GeomPlate_SequenceOfAij = NCollection_Sequence_GeomPlate_Aij
except NameError:
	pass # does not exist, probably ignored



