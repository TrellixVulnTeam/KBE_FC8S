# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Resource')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Resource')
    _Resource = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Resource', [dirname(__file__)])
        except ImportError:
            import _Resource
            return _Resource
        try:
            _mod = imp.load_module('_Resource', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Resource = swig_import_helper()
    del swig_import_helper
else:
    import _Resource
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Resource.delete_SwigPyIterator

    def value(self):
        return _Resource.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Resource.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Resource.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Resource.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Resource.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Resource.SwigPyIterator_copy(self)

    def next(self):
        return _Resource.SwigPyIterator_next(self)

    def __next__(self):
        return _Resource.SwigPyIterator___next__(self)

    def previous(self):
        return _Resource.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Resource.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Resource.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Resource.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Resource.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Resource.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Resource.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Resource.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Resource.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Resource.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Resource.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Resource.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Resource.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Resource.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Resource.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Resource.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Resource.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Resource.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Resource.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Resource.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Resource.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Resource.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Resource.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Resource.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Resource.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Resource.ptr_to_number(item)
ptr_to_number = _Resource.ptr_to_number

def HashCode(*args):
    return _Resource.HashCode(*args)
HashCode = _Resource.HashCode

def ptr_equal(a, b):
    return _Resource.ptr_equal(a, b)
ptr_equal = _Resource.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
Resource_SJIS = _Resource.Resource_SJIS
Resource_EUC = _Resource.Resource_EUC
Resource_ANSI = _Resource.Resource_ANSI
Resource_GB = _Resource.Resource_GB
class Resource_Manager(Standard.Standard_Transient):
    """Defines a resource structure and its management methods."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Resource_Manager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Resource_Manager(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Resource_Manager self, Standard_CString const aName, Standard_Boolean const Verbose) -> Resource_Manager
        __init__(Resource_Manager self, Standard_CString const aName, TCollection_AsciiString aDefaultsDirectory, TCollection_AsciiString anUserDefaultsDirectory, Standard_Boolean const Verbose) -> Resource_Manager

        :type aName: OCC.wrapper.Standard.Standard_CString
        :type aDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
        :type anUserDefaultsDirectory: OCC.wrapper.TCollection.TCollection_AsciiString
        :type Verbose: bool

        """
        this = _Resource.new_Resource_Manager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Save(self, *args):
        """
        Save(Resource_Manager self) -> Standard_Boolean

        Save the user resource structure in the specified file.
        Creates the file if it does not exist.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Manager_Save(self, *args)


    def Find(self, *args):
        """
        Find(Resource_Manager self, Standard_CString const aResource) -> Standard_Boolean

        returns True if the Resource does exist.

        :type aResource: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Manager_Find(self, *args)


    def Integer(self, *args):
        """
        Integer(Resource_Manager self, Standard_CString const aResourceName) -> Standard_Integer

        Gets the value of an integer resource according to its
        instance and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Resource_Manager_Integer(self, *args)


    def Real(self, *args):
        """
        Real(Resource_Manager self, Standard_CString const aResourceName) -> Standard_Real

        Gets the value of a real resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Resource.Resource_Manager_Real(self, *args)


    def Value(self, *args):
        """
        Value(Resource_Manager self, Standard_CString const aResourceName) -> Standard_CString

        Gets the value of a CString resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Resource.Resource_Manager_Value(self, *args)


    def ExtValue(self, *args):
        """
        ExtValue(Resource_Manager self, Standard_CString const aResourceName) -> Standard_ExtString

        Gets the value of an ExtString resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _Resource.Resource_Manager_ExtValue(self, *args)


    def SetResource(self, *args):
        """
        SetResource(Resource_Manager self, Standard_CString const aResourceName, Standard_Integer const aValue)
        SetResource(Resource_Manager self, Standard_CString const aResourceName, Standard_Real const aValue)
        SetResource(Resource_Manager self, Standard_CString const aResourceName, Standard_CString const aValue)
        SetResource(Resource_Manager self, Standard_CString const aResourceName, Standard_ExtString const aValue)

        Sets the new value of an ExtString resource.
        If the resource does not exist, it is created.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :type aValue: OCC.wrapper.Standard.Standard_ExtString

        """
        return _Resource.Resource_Manager_SetResource(self, *args)


    def GetResourcePath(*args):
        """
        GetResourcePath(TCollection_AsciiString aPath, Standard_CString const aName, Standard_Boolean const isUserDefaults)

        Gets the resource file full path by its name.
        If corresponding environment variable is not set
        or file doesn't exist returns empty string.

        :type aPath: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aName: OCC.wrapper.Standard.Standard_CString
        :type isUserDefaults: bool

        """
        return _Resource.Resource_Manager_GetResourcePath(*args)

    GetResourcePath = staticmethod(GetResourcePath)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Resource.Resource_Manager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Resource.Resource_Manager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Resource_Manager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Resource.delete_Resource_Manager
Resource_Manager_swigregister = _Resource.Resource_Manager_swigregister
Resource_Manager_swigregister(Resource_Manager)

def Resource_Manager_GetResourcePath(*args):
    """
    Resource_Manager_GetResourcePath(TCollection_AsciiString aPath, Standard_CString const aName, Standard_Boolean const isUserDefaults)

    Gets the resource file full path by its name.
    If corresponding environment variable is not set
    or file doesn't exist returns empty string.

    :type aPath: OCC.wrapper.TCollection.TCollection_AsciiString
    :type aName: OCC.wrapper.Standard.Standard_CString
    :type isUserDefaults: bool

    """
    return _Resource.Resource_Manager_GetResourcePath(*args)

def Resource_Manager_get_type_name(*args):
    """
    Resource_Manager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Resource.Resource_Manager_get_type_name(*args)

def Resource_Manager_get_type_descriptor(*args):
    """
    Resource_Manager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Resource.Resource_Manager_get_type_descriptor(*args)

class Resource_NoSuchResource(Standard.Standard_NoSuchObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Resource_NoSuchResource
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Resource_NoSuchResource(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Resource_NoSuchResource self) -> Resource_NoSuchResource
        __init__(Resource_NoSuchResource self, Standard_CString const theMessage) -> Resource_NoSuchResource

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Resource.new_Resource_NoSuchResource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Resource_NoSuchResource

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Resource.Handle_Resource_NoSuchResource

        """
        return _Resource.Resource_NoSuchResource_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Resource.Resource_NoSuchResource_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Resource.Resource_NoSuchResource_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Resource_NoSuchResource_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Resource.delete_Resource_NoSuchResource
Resource_NoSuchResource_swigregister = _Resource.Resource_NoSuchResource_swigregister
Resource_NoSuchResource_swigregister(Resource_NoSuchResource)

def Resource_NoSuchResource_NewInstance(*args):
    """
    Resource_NoSuchResource_NewInstance(Standard_CString const theMessage) -> Handle_Resource_NoSuchResource

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Resource.Handle_Resource_NoSuchResource

    """
    return _Resource.Resource_NoSuchResource_NewInstance(*args)

def Resource_NoSuchResource_get_type_name(*args):
    """
    Resource_NoSuchResource_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Resource.Resource_NoSuchResource_get_type_name(*args)

def Resource_NoSuchResource_get_type_descriptor(*args):
    """
    Resource_NoSuchResource_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Resource.Resource_NoSuchResource_get_type_descriptor(*args)

class NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_AsciiString,TCollection_AsciiString >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _Resource.new_NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey, TCollection_AsciiString theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey, TCollection_AsciiString theItem) -> TCollection_AsciiString

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_AsciiString

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_AsciiString

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_AsciiString

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_Size(self, *args)


    def __iter__(self):
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString___iter__(self)
    __swig_destroy__ = _Resource.delete_NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString
NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_swigregister = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_swigregister
NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_swigregister(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString)

class NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Resource.new_NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Resource.delete_NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper

    def __next__(self):
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper___next__(self)
NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister
NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper_swigregister(NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString_IteratorHelper)


try:
	Resource_DataMapOfAsciiStringAsciiString = NCollection_DataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class Resource_Unicode(object):
    """
    This class provides functions used to convert a non-ASCII C string
    given in ANSI, EUC, GB or SJIS format, to a
    Unicode string of extended characters, and vice versa.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertSJISToUnicode(*args):
        """
        ConvertSJISToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

        Converts non-ASCII CString <fromstr> in SJIS format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

    ConvertSJISToUnicode = staticmethod(ConvertSJISToUnicode)

    def ConvertEUCToUnicode(*args):
        """
        ConvertEUCToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

        Converts non-ASCII CString <fromstr> in EUC format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

    ConvertEUCToUnicode = staticmethod(ConvertEUCToUnicode)

    def ConvertGBToUnicode(*args):
        """
        ConvertGBToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

        Converts non-ASCII CString <fromstr> in GB format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

    ConvertGBToUnicode = staticmethod(ConvertGBToUnicode)

    def ConvertGBKToUnicode(*args):
        """
        ConvertGBKToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr) -> Standard_Boolean

        Converts non-ASCII CString <fromstr> in GBK format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertGBKToUnicode(*args)

    ConvertGBKToUnicode = staticmethod(ConvertGBKToUnicode)

    def ConvertBig5ToUnicode(*args):
        """
        ConvertBig5ToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr) -> Standard_Boolean

        Converts non-ASCII CString <fromstr> in Big5 format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertBig5ToUnicode(*args)

    ConvertBig5ToUnicode = staticmethod(ConvertBig5ToUnicode)

    def ConvertANSIToUnicode(*args):
        """
        ConvertANSIToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

        Converts non-ASCII CString <fromstr> in ANSI format
        to Unicode ExtendedString <tostr>.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

    ConvertANSIToUnicode = staticmethod(ConvertANSIToUnicode)

    def ConvertUnicodeToSJIS(*args):
        """
        ConvertUnicodeToSJIS(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

        Converts Unicode ExtendedString <fromstr> to non-ASCII
        CString <tostr> in SJIS format, limited to <maxsize>
        characters. To translate the whole <fromstr>, use more
        than twice the length of <fromstr>. Returns true if
        <maxsize> has not been reached before end of conversion.

        :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type tostr: OCC.wrapper.Standard.Standard_PCharacter
        :type maxsize: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

    ConvertUnicodeToSJIS = staticmethod(ConvertUnicodeToSJIS)

    def ConvertUnicodeToEUC(*args):
        """
        ConvertUnicodeToEUC(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

        Converts Unicode ExtendedString <fromstr> to non-ASCII
        CString <tostr> in EUC format, limited to <maxsize>
        characters. To translate the whole <fromstr>, use more
        than twice the length of <fromstr>. Returns true if
        <maxsize> has not been reached before end of conversion.

        :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type tostr: OCC.wrapper.Standard.Standard_PCharacter
        :type maxsize: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

    ConvertUnicodeToEUC = staticmethod(ConvertUnicodeToEUC)

    def ConvertUnicodeToGB(*args):
        """
        ConvertUnicodeToGB(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

        Converts Unicode ExtendedString <fromstr> to non-ASCII
        CString <tostr> in GB format, limited to <maxsize>
        characters. To translate the whole <fromstr>, use more
        than twice the length of <fromstr>. Returns true if
        <maxsize> has not been reached before end of conversion.

        :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type tostr: OCC.wrapper.Standard.Standard_PCharacter
        :type maxsize: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

    ConvertUnicodeToGB = staticmethod(ConvertUnicodeToGB)

    def ConvertUnicodeToANSI(*args):
        """
        ConvertUnicodeToANSI(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

        Converts Unicode ExtendedString <fromstr> to non-ASCII
        CString <tostr> in ANSI format, limited to <maxsize>
        characters. To translate the whole <fromstr>, use more
        than twice the length of <fromstr>.  Returns true if
        <maxsize> has not been reached before end of conversion.

        :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type tostr: OCC.wrapper.Standard.Standard_PCharacter
        :type maxsize: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

    ConvertUnicodeToANSI = staticmethod(ConvertUnicodeToANSI)

    def SetFormat(*args):
        """
        SetFormat(Resource_FormatType const typecode)

        Defines the current conversion format as typecode.
        This conversion format will then be used by the
        functions ConvertFormatToUnicode and
        ConvertUnicodeToFormat to convert the strings.

        :type typecode: OCC.wrapper.Resource.Resource_FormatType

        """
        return _Resource.Resource_Unicode_SetFormat(*args)

    SetFormat = staticmethod(SetFormat)

    def GetFormat(*args):
        """
        GetFormat() -> Resource_FormatType

        Returns the current conversion format (either
        ANSI, EUC, GB or SJIS).
        The current converting format must be defined in
        advance with the SetFormat function.

        :rtype: OCC.wrapper.Resource.Resource_FormatType

        """
        return _Resource.Resource_Unicode_GetFormat(*args)

    GetFormat = staticmethod(GetFormat)

    def ReadFormat(*args):
        """
        ReadFormat()

        Reads converting format from resource "FormatType"
        in Resource Manager "CharSet"


        """
        return _Resource.Resource_Unicode_ReadFormat(*args)

    ReadFormat = staticmethod(ReadFormat)

    def ConvertFormatToUnicode(*args):
        """
        ConvertFormatToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

        Converts the non-ASCII C string fromstr to the
        Unicode string of extended characters tostr.
        fromstr is translated according to the format
        (either ANSI, EUC, GB or SJIS) returned by the function GetFormat.

        :type fromstr: OCC.wrapper.Standard.Standard_CString
        :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

    ConvertFormatToUnicode = staticmethod(ConvertFormatToUnicode)

    def ConvertUnicodeToFormat(*args):
        """
        ConvertUnicodeToFormat(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

        Converts the Unicode string of extended
        characters fromstr to the non-ASCII C string
        tostr according to the format (either ANSI, EUC,
        GB or SJIS) returned by the function GetFormat.
        maxsize limits the size of the string tostr to a
        maximum number of characters. You need more
        than twice the length of the string fromstr to
        complete the conversion.
        The function returns true if conversion is
        complete, i.e. the maximum number of characters
        maxsize is not reached by tostr before the end
        of conversion of fromstr.

        :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type tostr: OCC.wrapper.Standard.Standard_PCharacter
        :type maxsize: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)

    ConvertUnicodeToFormat = staticmethod(ConvertUnicodeToFormat)

    def __init__(self):
        """
        This class provides functions used to convert a non-ASCII C string
        given in ANSI, EUC, GB or SJIS format, to a
        Unicode string of extended characters, and vice versa.
        """
        this = _Resource.new_Resource_Unicode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Resource.delete_Resource_Unicode
Resource_Unicode_swigregister = _Resource.Resource_Unicode_swigregister
Resource_Unicode_swigregister(Resource_Unicode)

def Resource_Unicode_ConvertSJISToUnicode(*args):
    """
    Resource_Unicode_ConvertSJISToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

    Converts non-ASCII CString <fromstr> in SJIS format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

def Resource_Unicode_ConvertEUCToUnicode(*args):
    """
    Resource_Unicode_ConvertEUCToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

    Converts non-ASCII CString <fromstr> in EUC format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

def Resource_Unicode_ConvertGBToUnicode(*args):
    """
    Resource_Unicode_ConvertGBToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

    Converts non-ASCII CString <fromstr> in GB format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

def Resource_Unicode_ConvertGBKToUnicode(*args):
    """
    Resource_Unicode_ConvertGBKToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr) -> Standard_Boolean

    Converts non-ASCII CString <fromstr> in GBK format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertGBKToUnicode(*args)

def Resource_Unicode_ConvertBig5ToUnicode(*args):
    """
    Resource_Unicode_ConvertBig5ToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr) -> Standard_Boolean

    Converts non-ASCII CString <fromstr> in Big5 format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertBig5ToUnicode(*args)

def Resource_Unicode_ConvertANSIToUnicode(*args):
    """
    Resource_Unicode_ConvertANSIToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

    Converts non-ASCII CString <fromstr> in ANSI format
    to Unicode ExtendedString <tostr>.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

def Resource_Unicode_ConvertUnicodeToSJIS(*args):
    """
    Resource_Unicode_ConvertUnicodeToSJIS(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

    Converts Unicode ExtendedString <fromstr> to non-ASCII
    CString <tostr> in SJIS format, limited to <maxsize>
    characters. To translate the whole <fromstr>, use more
    than twice the length of <fromstr>. Returns true if
    <maxsize> has not been reached before end of conversion.

    :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type tostr: OCC.wrapper.Standard.Standard_PCharacter
    :type maxsize: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

def Resource_Unicode_ConvertUnicodeToEUC(*args):
    """
    Resource_Unicode_ConvertUnicodeToEUC(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

    Converts Unicode ExtendedString <fromstr> to non-ASCII
    CString <tostr> in EUC format, limited to <maxsize>
    characters. To translate the whole <fromstr>, use more
    than twice the length of <fromstr>. Returns true if
    <maxsize> has not been reached before end of conversion.

    :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type tostr: OCC.wrapper.Standard.Standard_PCharacter
    :type maxsize: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

def Resource_Unicode_ConvertUnicodeToGB(*args):
    """
    Resource_Unicode_ConvertUnicodeToGB(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

    Converts Unicode ExtendedString <fromstr> to non-ASCII
    CString <tostr> in GB format, limited to <maxsize>
    characters. To translate the whole <fromstr>, use more
    than twice the length of <fromstr>. Returns true if
    <maxsize> has not been reached before end of conversion.

    :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type tostr: OCC.wrapper.Standard.Standard_PCharacter
    :type maxsize: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

def Resource_Unicode_ConvertUnicodeToANSI(*args):
    """
    Resource_Unicode_ConvertUnicodeToANSI(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

    Converts Unicode ExtendedString <fromstr> to non-ASCII
    CString <tostr> in ANSI format, limited to <maxsize>
    characters. To translate the whole <fromstr>, use more
    than twice the length of <fromstr>.  Returns true if
    <maxsize> has not been reached before end of conversion.

    :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type tostr: OCC.wrapper.Standard.Standard_PCharacter
    :type maxsize: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

def Resource_Unicode_SetFormat(*args):
    """
    Resource_Unicode_SetFormat(Resource_FormatType const typecode)

    Defines the current conversion format as typecode.
    This conversion format will then be used by the
    functions ConvertFormatToUnicode and
    ConvertUnicodeToFormat to convert the strings.

    :type typecode: OCC.wrapper.Resource.Resource_FormatType

    """
    return _Resource.Resource_Unicode_SetFormat(*args)

def Resource_Unicode_GetFormat(*args):
    """
    Resource_Unicode_GetFormat() -> Resource_FormatType

    Returns the current conversion format (either
    ANSI, EUC, GB or SJIS).
    The current converting format must be defined in
    advance with the SetFormat function.

    :rtype: OCC.wrapper.Resource.Resource_FormatType

    """
    return _Resource.Resource_Unicode_GetFormat(*args)

def Resource_Unicode_ReadFormat(*args):
    """
    Resource_Unicode_ReadFormat()

    Reads converting format from resource "FormatType"
    in Resource Manager "CharSet"


    """
    return _Resource.Resource_Unicode_ReadFormat(*args)

def Resource_Unicode_ConvertFormatToUnicode(*args):
    """
    Resource_Unicode_ConvertFormatToUnicode(Standard_CString const fromstr, TCollection_ExtendedString tostr)

    Converts the non-ASCII C string fromstr to the
    Unicode string of extended characters tostr.
    fromstr is translated according to the format
    (either ANSI, EUC, GB or SJIS) returned by the function GetFormat.

    :type fromstr: OCC.wrapper.Standard.Standard_CString
    :type tostr: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

def Resource_Unicode_ConvertUnicodeToFormat(*args):
    """
    Resource_Unicode_ConvertUnicodeToFormat(TCollection_ExtendedString fromstr, Standard_PCharacter & tostr, Standard_Integer const maxsize) -> Standard_Boolean

    Converts the Unicode string of extended
    characters fromstr to the non-ASCII C string
    tostr according to the format (either ANSI, EUC,
    GB or SJIS) returned by the function GetFormat.
    maxsize limits the size of the string tostr to a
    maximum number of characters. You need more
    than twice the length of the string fromstr to
    complete the conversion.
    The function returns true if conversion is
    complete, i.e. the maximum number of characters
    maxsize is not reached by tostr before the end
    of conversion of fromstr.

    :type fromstr: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type tostr: OCC.wrapper.Standard.Standard_PCharacter
    :type maxsize: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)

class Handle_Resource_Manager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Resource_Manager self)

        Nullify the handle


        """
        return _Resource.Handle_Resource_Manager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Resource_Manager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Resource.Handle_Resource_Manager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Resource_Manager self, Resource_Manager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Resource.Handle_Resource_Manager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Resource_Manager self, Handle_Resource_Manager theHandle) -> Handle_Resource_Manager
        assign(Handle_Resource_Manager self, Resource_Manager thePtr) -> Handle_Resource_Manager
        assign(Handle_Resource_Manager self, Handle_Resource_Manager theHandle) -> Handle_Resource_Manager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Resource.Handle_Resource_Manager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Resource_Manager self) -> Resource_Manager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Resource.Handle_Resource_Manager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Resource_Manager self) -> Resource_Manager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Resource.Handle_Resource_Manager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Resource_Manager self) -> Resource_Manager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Resource.Handle_Resource_Manager___ref__(self, *args)


    def __hash__(self):
        return _Resource.Handle_Resource_Manager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Resource.Handle_Resource_Manager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Resource.new_Handle_Resource_Manager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Resource.Handle_Resource_Manager_DownCast)
    __swig_destroy__ = _Resource.delete_Handle_Resource_Manager

    def Save(self, *args):
        """
        Save(Handle_Resource_Manager self) -> Standard_Boolean

        Save the user resource structure in the specified file.
        Creates the file if it does not exist.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_Manager_Save(self, *args)


    def Find(self, *args):
        """
        Find(Handle_Resource_Manager self, Standard_CString const aResource) -> Standard_Boolean

        returns True if the Resource does exist.

        :type aResource: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_Manager_Find(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_Resource_Manager self, Standard_CString const aResourceName) -> Standard_Integer

        Gets the value of an integer resource according to its
        instance and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Handle_Resource_Manager_Integer(self, *args)


    def Real(self, *args):
        """
        Real(Handle_Resource_Manager self, Standard_CString const aResourceName) -> Standard_Real

        Gets the value of a real resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Resource.Handle_Resource_Manager_Real(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Resource_Manager self, Standard_CString const aResourceName) -> Standard_CString

        Gets the value of a CString resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Resource.Handle_Resource_Manager_Value(self, *args)


    def ExtValue(self, *args):
        """
        ExtValue(Handle_Resource_Manager self, Standard_CString const aResourceName) -> Standard_ExtString

        Gets the value of an ExtString resource according to its instance
        and its type.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _Resource.Handle_Resource_Manager_ExtValue(self, *args)


    def SetResource(self, *args):
        """
        SetResource(Handle_Resource_Manager self, Standard_CString const aResourceName, Standard_Integer const aValue)
        SetResource(Handle_Resource_Manager self, Standard_CString const aResourceName, Standard_Real const aValue)
        SetResource(Handle_Resource_Manager self, Standard_CString const aResourceName, Standard_CString const aValue)
        SetResource(Handle_Resource_Manager self, Standard_CString const aResourceName, Standard_ExtString const aValue)

        Sets the new value of an ExtString resource.
        If the resource does not exist, it is created.

        :type aResourceName: OCC.wrapper.Standard.Standard_CString
        :type aValue: OCC.wrapper.Standard.Standard_ExtString

        """
        return _Resource.Handle_Resource_Manager_SetResource(self, *args)


    def GetResourcePath(self, *args):
        """
        GetResourcePath(Handle_Resource_Manager self, TCollection_AsciiString aPath, Standard_CString const aName, Standard_Boolean const isUserDefaults)

        Gets the resource file full path by its name.
        If corresponding environment variable is not set
        or file doesn't exist returns empty string.

        :type aPath: OCC.wrapper.TCollection.TCollection_AsciiString
        :type aName: OCC.wrapper.Standard.Standard_CString
        :type isUserDefaults: bool

        """
        return _Resource.Handle_Resource_Manager_GetResourcePath(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Resource_Manager self) -> char const *

        :rtype: const char *

        """
        return _Resource.Handle_Resource_Manager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Handle_Resource_Manager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Handle_Resource_Manager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Resource_Manager self)

        Memory deallocator for transient classes


        """
        return _Resource.Handle_Resource_Manager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Resource_Manager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Resource_Manager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_Manager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Resource_Manager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Resource_Manager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_Manager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Resource_Manager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Resource.Handle_Resource_Manager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Resource_Manager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Handle_Resource_Manager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Resource_Manager self)

        Increments the reference counter of this object


        """
        return _Resource.Handle_Resource_Manager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Resource_Manager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Handle_Resource_Manager_DecrementRefCounter(self, *args)

Handle_Resource_Manager_swigregister = _Resource.Handle_Resource_Manager_swigregister
Handle_Resource_Manager_swigregister(Handle_Resource_Manager)

def Handle_Resource_Manager_DownCast(thing):
    return _Resource.Handle_Resource_Manager_DownCast(thing)
Handle_Resource_Manager_DownCast = _Resource.Handle_Resource_Manager_DownCast

class Handle_Resource_NoSuchResource(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Resource_NoSuchResource self)

        Nullify the handle


        """
        return _Resource.Handle_Resource_NoSuchResource_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Resource_NoSuchResource self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Resource.Handle_Resource_NoSuchResource_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Resource_NoSuchResource self, Resource_NoSuchResource thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Resource.Handle_Resource_NoSuchResource_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Resource_NoSuchResource self, Handle_Resource_NoSuchResource theHandle) -> Handle_Resource_NoSuchResource
        assign(Handle_Resource_NoSuchResource self, Resource_NoSuchResource thePtr) -> Handle_Resource_NoSuchResource
        assign(Handle_Resource_NoSuchResource self, Handle_Resource_NoSuchResource theHandle) -> Handle_Resource_NoSuchResource

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Resource.Handle_Resource_NoSuchResource_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Resource_NoSuchResource self) -> Resource_NoSuchResource

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Resource.Handle_Resource_NoSuchResource_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Resource_NoSuchResource self) -> Resource_NoSuchResource

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Resource.Handle_Resource_NoSuchResource___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Resource_NoSuchResource self) -> Resource_NoSuchResource

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Resource.Handle_Resource_NoSuchResource___ref__(self, *args)


    def __hash__(self):
        return _Resource.Handle_Resource_NoSuchResource___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Resource.Handle_Resource_NoSuchResource___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Resource.new_Handle_Resource_NoSuchResource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Resource.Handle_Resource_NoSuchResource_DownCast)
    __swig_destroy__ = _Resource.delete_Handle_Resource_NoSuchResource

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Resource_NoSuchResource self, Standard_CString const theMessage) -> Handle_Resource_NoSuchResource

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Resource.Handle_Resource_NoSuchResource

        """
        return _Resource.Handle_Resource_NoSuchResource_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Resource_NoSuchResource self) -> char const *

        :rtype: const char *

        """
        return _Resource.Handle_Resource_NoSuchResource_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Handle_Resource_NoSuchResource_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Resource.Handle_Resource_NoSuchResource_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Resource_NoSuchResource self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Resource.Handle_Resource_NoSuchResource_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Resource_NoSuchResource self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Resource.Handle_Resource_NoSuchResource_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Resource_NoSuchResource self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Resource.Handle_Resource_NoSuchResource_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Resource_NoSuchResource self)
        Reraise(Handle_Resource_NoSuchResource self, Standard_CString const aMessage)
        Reraise(Handle_Resource_NoSuchResource self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Resource.Handle_Resource_NoSuchResource_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Resource_NoSuchResource self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Resource.Handle_Resource_NoSuchResource_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Resource_NoSuchResource self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Resource.Handle_Resource_NoSuchResource_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Resource_NoSuchResource self)

        Memory deallocator for transient classes


        """
        return _Resource.Handle_Resource_NoSuchResource_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Resource_NoSuchResource self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Resource_NoSuchResource self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_NoSuchResource_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Resource_NoSuchResource self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Resource_NoSuchResource self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Handle_Resource_NoSuchResource_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Resource_NoSuchResource self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Resource.Handle_Resource_NoSuchResource_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Resource_NoSuchResource self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Handle_Resource_NoSuchResource_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Resource_NoSuchResource self)

        Increments the reference counter of this object


        """
        return _Resource.Handle_Resource_NoSuchResource_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Resource_NoSuchResource self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.Handle_Resource_NoSuchResource_DecrementRefCounter(self, *args)

Handle_Resource_NoSuchResource_swigregister = _Resource.Handle_Resource_NoSuchResource_swigregister
Handle_Resource_NoSuchResource_swigregister(Handle_Resource_NoSuchResource)

def Handle_Resource_NoSuchResource_DownCast(thing):
    return _Resource.Handle_Resource_NoSuchResource_DownCast(thing)
Handle_Resource_NoSuchResource_DownCast = _Resource.Handle_Resource_NoSuchResource_DownCast

class NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_ExtendedString,TCollection_AsciiString >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_ExtendedString,TCollection_AsciiString >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_ExtendedString,TCollection_AsciiString >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,TCollection_ExtendedString,TCollection_AsciiString >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _Resource.new_NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey, TCollection_ExtendedString theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey, TCollection_ExtendedString theItem) -> TCollection_ExtendedString

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_ExtendedString

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_ExtendedString

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, TCollection_AsciiString theKey) -> TCollection_ExtendedString

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_Size(self, *args)


    def __iter__(self):
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString___iter__(self)
    __swig_destroy__ = _Resource.delete_NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString
NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_swigregister = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_swigregister
NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_swigregister(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString)

class NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Resource.new_NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Resource.delete_NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper

    def __next__(self):
        return _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper___next__(self)
NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper_swigregister = _Resource.NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper_swigregister
NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper_swigregister(NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString_IteratorHelper)


try:
	Resource_DataMapOfAsciiStringExtendedString = NCollection_DataMap_TCollection_AsciiString_TCollection_ExtendedString_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class Resource_LexicalCompare(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(Resource_LexicalCompare self) -> Resource_LexicalCompare"""
        this = _Resource.new_Resource_LexicalCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsLower(self, *args):
        """
        IsLower(Resource_LexicalCompare self, TCollection_AsciiString Left, TCollection_AsciiString Right) -> Standard_Boolean

        Returns True if <Left> is lower than <Right>.

        :type Left: OCC.wrapper.TCollection.TCollection_AsciiString
        :type Right: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Resource.Resource_LexicalCompare_IsLower(self, *args)

    __swig_destroy__ = _Resource.delete_Resource_LexicalCompare
Resource_LexicalCompare_swigregister = _Resource.Resource_LexicalCompare_swigregister
Resource_LexicalCompare_swigregister(Resource_LexicalCompare)



