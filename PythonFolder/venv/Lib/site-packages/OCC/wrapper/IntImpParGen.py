# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntImpParGen')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntImpParGen')
    _IntImpParGen = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntImpParGen', [dirname(__file__)])
        except ImportError:
            import _IntImpParGen
            return _IntImpParGen
        try:
            _mod = imp.load_module('_IntImpParGen', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntImpParGen = swig_import_helper()
    del swig_import_helper
else:
    import _IntImpParGen
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntImpParGen.delete_SwigPyIterator

    def value(self):
        return _IntImpParGen.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntImpParGen.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntImpParGen.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntImpParGen.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntImpParGen.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntImpParGen.SwigPyIterator_copy(self)

    def next(self):
        return _IntImpParGen.SwigPyIterator_next(self)

    def __next__(self):
        return _IntImpParGen.SwigPyIterator___next__(self)

    def previous(self):
        return _IntImpParGen.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntImpParGen.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntImpParGen.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntImpParGen.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntImpParGen.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntImpParGen.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntImpParGen.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntImpParGen.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntImpParGen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IntImpParGen.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IntImpParGen.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IntImpParGen.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IntImpParGen.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntImpParGen.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IntImpParGen.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IntImpParGen.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IntImpParGen.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IntImpParGen.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IntImpParGen.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IntImpParGen.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IntImpParGen.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntImpParGen.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IntImpParGen.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IntImpParGen.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IntImpParGen.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IntImpParGen.ptr_to_number(item)
ptr_to_number = _IntImpParGen.ptr_to_number

def HashCode(*args):
    return _IntImpParGen.HashCode(*args)
HashCode = _IntImpParGen.HashCode

def ptr_equal(a, b):
    return _IntImpParGen.ptr_equal(a, b)
ptr_equal = _IntImpParGen.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
class IntImpParGen_ImpTool(object):
    """Template class for an implicit curve."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """Template class for an implicit curve."""
        this = _IntImpParGen.new_IntImpParGen_ImpTool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntImpParGen.delete_IntImpParGen_ImpTool
IntImpParGen_ImpTool_swigregister = _IntImpParGen.IntImpParGen_ImpTool_swigregister
IntImpParGen_ImpTool_swigregister(IntImpParGen_ImpTool)

class IntImpParGen_(object):
    """
    Gives a generic algorithm to intersect Implicit Curves
    and Bounded Parametric Curves.

    Level: Internal

    All the methods of all the classes are Internal.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def DetermineTransition(*args):
        """
        DetermineTransition(IntRes2d_Position const Pos1, gp_Vec2d Tan1, gp_Vec2d Norm1, IntRes2d_Transition Trans1, IntRes2d_Position const Pos2, gp_Vec2d Tan2, gp_Vec2d Norm2, IntRes2d_Transition Trans2, Standard_Real const Tol)
        DetermineTransition(IntRes2d_Position const Pos1, gp_Vec2d Tan1, IntRes2d_Transition Trans1, IntRes2d_Position const Pos2, gp_Vec2d Tan2, IntRes2d_Transition Trans2, Standard_Real const Tol) -> Standard_Boolean

        :type Pos1: OCC.wrapper.IntRes2d.IntRes2d_Position
        :type Tan1: OCC.wrapper.gp.gp_Vec2d
        :type Trans1: OCC.wrapper.IntRes2d.IntRes2d_Transition
        :type Pos2: OCC.wrapper.IntRes2d.IntRes2d_Position
        :type Tan2: OCC.wrapper.gp.gp_Vec2d
        :type Trans2: OCC.wrapper.IntRes2d.IntRes2d_Transition
        :type Tol: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IntImpParGen.IntImpParGen__DetermineTransition(*args)

    DetermineTransition = staticmethod(DetermineTransition)

    def DeterminePosition(*args):
        """
        DeterminePosition(IntRes2d_Domain Dom1, gp_Pnt2d P1, Standard_Real const Tol)

        :type Pos1: OCC.wrapper.IntRes2d.IntRes2d_Position
        :type Dom1: OCC.wrapper.IntRes2d.IntRes2d_Domain
        :type P1: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float

        """
        return _IntImpParGen.IntImpParGen__DeterminePosition(*args)

    DeterminePosition = staticmethod(DeterminePosition)

    def NormalizeOnDomain(*args):
        """
        NormalizeOnDomain(IntRes2d_Domain Dom1) -> Standard_Real

        :type Par1: float
        :type Dom1: OCC.wrapper.IntRes2d.IntRes2d_Domain
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntImpParGen.IntImpParGen__NormalizeOnDomain(*args)

    NormalizeOnDomain = staticmethod(NormalizeOnDomain)

    def __init__(self):
        """
        Gives a generic algorithm to intersect Implicit Curves
        and Bounded Parametric Curves.

        Level: Internal

        All the methods of all the classes are Internal.
        """
        this = _IntImpParGen.new_IntImpParGen_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntImpParGen.delete_IntImpParGen_
IntImpParGen__swigregister = _IntImpParGen.IntImpParGen__swigregister
IntImpParGen__swigregister(IntImpParGen_)

def IntImpParGen__DetermineTransition(*args):
    """
    DetermineTransition(IntRes2d_Position const Pos1, gp_Vec2d Tan1, gp_Vec2d Norm1, IntRes2d_Transition Trans1, IntRes2d_Position const Pos2, gp_Vec2d Tan2, gp_Vec2d Norm2, IntRes2d_Transition Trans2, Standard_Real const Tol)
    IntImpParGen__DetermineTransition(IntRes2d_Position const Pos1, gp_Vec2d Tan1, IntRes2d_Transition Trans1, IntRes2d_Position const Pos2, gp_Vec2d Tan2, IntRes2d_Transition Trans2, Standard_Real const Tol) -> Standard_Boolean

    :type Pos1: OCC.wrapper.IntRes2d.IntRes2d_Position
    :type Tan1: OCC.wrapper.gp.gp_Vec2d
    :type Trans1: OCC.wrapper.IntRes2d.IntRes2d_Transition
    :type Pos2: OCC.wrapper.IntRes2d.IntRes2d_Position
    :type Tan2: OCC.wrapper.gp.gp_Vec2d
    :type Trans2: OCC.wrapper.IntRes2d.IntRes2d_Transition
    :type Tol: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IntImpParGen.IntImpParGen__DetermineTransition(*args)

def IntImpParGen__DeterminePosition(*args):
    """
    IntImpParGen__DeterminePosition(IntRes2d_Domain Dom1, gp_Pnt2d P1, Standard_Real const Tol)

    :type Pos1: OCC.wrapper.IntRes2d.IntRes2d_Position
    :type Dom1: OCC.wrapper.IntRes2d.IntRes2d_Domain
    :type P1: OCC.wrapper.gp.gp_Pnt2d
    :type Tol: float

    """
    return _IntImpParGen.IntImpParGen__DeterminePosition(*args)

def IntImpParGen__NormalizeOnDomain(*args):
    """
    IntImpParGen__NormalizeOnDomain(IntRes2d_Domain Dom1) -> Standard_Real

    :type Par1: float
    :type Dom1: OCC.wrapper.IntRes2d.IntRes2d_Domain
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _IntImpParGen.IntImpParGen__NormalizeOnDomain(*args)



