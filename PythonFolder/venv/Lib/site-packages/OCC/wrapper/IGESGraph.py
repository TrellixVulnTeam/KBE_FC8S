# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESGraph')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESGraph')
    _IGESGraph = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESGraph', [dirname(__file__)])
        except ImportError:
            import _IGESGraph
            return _IGESGraph
        try:
            _mod = imp.load_module('_IGESGraph', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESGraph = swig_import_helper()
    del swig_import_helper
else:
    import _IGESGraph
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESGraph.delete_SwigPyIterator

    def value(self):
        return _IGESGraph.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESGraph.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESGraph.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESGraph.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESGraph.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESGraph.SwigPyIterator_copy(self)

    def next(self):
        return _IGESGraph.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESGraph.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESGraph.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESGraph.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESGraph.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESGraph.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESGraph.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESGraph.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESGraph.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESGraph.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESGraph.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESGraph.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESGraph.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESGraph.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESGraph.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGraph.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESGraph.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESGraph.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESGraph.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESGraph.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESGraph.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESGraph.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESGraph.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGraph.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESGraph.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESGraph.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESGraph.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESGraph.ptr_to_number(item)
ptr_to_number = _IGESGraph.ptr_to_number

def HashCode(*args):
    return _IGESGraph.HashCode(*args)
HashCode = _IGESGraph.HashCode

def ptr_equal(a, b):
    return _IGESGraph.ptr_equal(a, b)
ptr_equal = _IGESGraph.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
class IGESGraph_HighLight(IGESData.IGESData_IGESEntity):
    """
    defines IGESHighLight, Type <406> Form <20>
    in package IGESGraph

    Attaches information that an entity is to be
    displayed in some system dependent manner
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_HighLight
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_HighLight(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_HighLight self) -> IGESGraph_HighLight

        defines IGESHighLight, Type <406> Form <20>
        in package IGESGraph

        Attaches information that an entity is to be
        displayed in some system dependent manner
        """
        this = _IGESGraph.new_IGESGraph_HighLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_HighLight self, Standard_Integer const nbProps, Standard_Integer const aHighLightStatus)

        This method is used to set the fields of the class
        HighLight
        - nbProps          : Number of property values (NP = 1)
        - aHighLightStatus : HighLight Flag

        :type nbProps: int
        :type aHighLightStatus: int

        """
        return _IGESGraph.IGESGraph_HighLight_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_HighLight self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_HighLight_NbPropertyValues(self, *args)


    def HighLightStatus(self, *args):
        """
        HighLightStatus(IGESGraph_HighLight self) -> Standard_Integer

        returns 0 if <me> is not highlighted(default),
        1 if <me> is highlighted

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_HighLight_HighLightStatus(self, *args)


    def IsHighLighted(self, *args):
        """
        IsHighLighted(IGESGraph_HighLight self) -> Standard_Boolean

        returns True if entity is highlighted

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_HighLight_IsHighLighted(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_HighLight_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_HighLight_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_HighLight_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_HighLight
IGESGraph_HighLight_swigregister = _IGESGraph.IGESGraph_HighLight_swigregister
IGESGraph_HighLight_swigregister(IGESGraph_HighLight)

def IGESGraph_HighLight_get_type_name(*args):
    """
    IGESGraph_HighLight_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_HighLight_get_type_name(*args)

def IGESGraph_HighLight_get_type_descriptor(*args):
    """
    IGESGraph_HighLight_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_HighLight_get_type_descriptor(*args)

class IGESGraph_DefinitionLevel(IGESData.IGESData_LevelListEntity):
    """
    defines IGESDefinitionLevel, Type <406> Form <1>
    in package IGESGraph

    Indicates the no. of levels on which an entity is
    defined
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_DefinitionLevel
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_DefinitionLevel(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_DefinitionLevel self) -> IGESGraph_DefinitionLevel

        defines IGESDefinitionLevel, Type <406> Form <1>
        in package IGESGraph

        Indicates the no. of levels on which an entity is
        defined
        """
        this = _IGESGraph.new_IGESGraph_DefinitionLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_DefinitionLevel self, Handle_TColStd_HArray1OfInteger allLevelNumbers)

        This method is used to set the fields of the class
        DefinitionLevel
        - allLevelNumbers : Values of Level Numbers

        :type allLevelNumbers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_DefinitionLevel self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_NbPropertyValues(self, *args)


    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(IGESGraph_DefinitionLevel self) -> Standard_Integer

        Must return the count of levels (== NbPropertyValues)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(IGESGraph_DefinitionLevel self, Standard_Integer const LevelIndex) -> Standard_Integer

        returns the Level Number of <me> indicated by <LevelIndex>
        raises an exception if LevelIndex is <= 0 or
        LevelIndex > NbPropertyValues

        :type LevelIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_LevelNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_DefinitionLevel_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_DefinitionLevel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_DefinitionLevel
IGESGraph_DefinitionLevel_swigregister = _IGESGraph.IGESGraph_DefinitionLevel_swigregister
IGESGraph_DefinitionLevel_swigregister(IGESGraph_DefinitionLevel)

def IGESGraph_DefinitionLevel_get_type_name(*args):
    """
    IGESGraph_DefinitionLevel_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_DefinitionLevel_get_type_name(*args)

def IGESGraph_DefinitionLevel_get_type_descriptor(*args):
    """
    IGESGraph_DefinitionLevel_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_DefinitionLevel_get_type_descriptor(*args)

class IGESGraph_UniformRectGrid(IGESData.IGESData_IGESEntity):
    """
    defines IGESUniformRectGrid, Type <406> Form <22>
    in package IGESGraph

    Stores sufficient information for the creation of
    a uniform rectangular grid within a drawing
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_UniformRectGrid
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_UniformRectGrid(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_UniformRectGrid self) -> IGESGraph_UniformRectGrid

        defines IGESUniformRectGrid, Type <406> Form <22>
        in package IGESGraph

        Stores sufficient information for the creation of
        a uniform rectangular grid within a drawing
        """
        this = _IGESGraph.new_IGESGraph_UniformRectGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_UniformRectGrid self, Standard_Integer const nbProps, Standard_Integer const finite, Standard_Integer const line, Standard_Integer const weighted, gp_XY aGridPoint, gp_XY aGridSpacing, Standard_Integer const pointsX, Standard_Integer const pointsY)

        This method is used to set the fields of the class
        UniformRectGrid
        - nbProps      : Number of property values (NP = 9)
        - finite       : Finite/Infinite grid flag
        - line         : Line/Point grid flag
        - weighted     : Weighted/Unweighted grid flag
        - aGridPoint   : Point on the grid
        - aGridSpacing : Grid spacing
        - pointsX      : No. of points/lines in X Direction
        - pointsY      : No. of points/lines in Y Direction

        :type nbProps: int
        :type finite: int
        :type line: int
        :type weighted: int
        :type aGridPoint: OCC.wrapper.gp.gp_XY
        :type aGridSpacing: OCC.wrapper.gp.gp_XY
        :type pointsX: int
        :type pointsY: int

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the number of property values in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_NbPropertyValues(self, *args)


    def IsFinite(self, *args):
        """
        IsFinite(IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is an infinite grid,
        True  if <me> is a finite grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_IsFinite(self, *args)


    def IsLine(self, *args):
        """
        IsLine(IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is a Point grid,
        True  if <me> is a Line grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_IsLine(self, *args)


    def IsWeighted(self, *args):
        """
        IsWeighted(IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is a Weighted grid,
        True  if <me> is not a Weighted grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_IsWeighted(self, *args)


    def GridPoint(self, *args):
        """
        GridPoint(IGESGraph_UniformRectGrid self) -> gp_Pnt2d

        returns coordinates of lower left corner,
        if <me> is a finite grid,
        coordinates of an arbitrary point,
        if <me> is an infinite grid.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_GridPoint(self, *args)


    def GridSpacing(self, *args):
        """
        GridSpacing(IGESGraph_UniformRectGrid self) -> gp_Vec2d

        returns the grid-spacing in drawing coordinates.

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_GridSpacing(self, *args)


    def NbPointsX(self, *args):
        """
        NbPointsX(IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the no. of points/lines in X direction
        (only applicable if IsFinite() = 1, i.e: a finite grid).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_NbPointsX(self, *args)


    def NbPointsY(self, *args):
        """
        NbPointsY(IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the no. of points/lines in Y direction
        (only applicable if IsFinite() = 1, i.e: a finite grid).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_NbPointsY(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_UniformRectGrid_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_UniformRectGrid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_UniformRectGrid
IGESGraph_UniformRectGrid_swigregister = _IGESGraph.IGESGraph_UniformRectGrid_swigregister
IGESGraph_UniformRectGrid_swigregister(IGESGraph_UniformRectGrid)

def IGESGraph_UniformRectGrid_get_type_name(*args):
    """
    IGESGraph_UniformRectGrid_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_UniformRectGrid_get_type_name(*args)

def IGESGraph_UniformRectGrid_get_type_descriptor(*args):
    """
    IGESGraph_UniformRectGrid_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_UniformRectGrid_get_type_descriptor(*args)

class IGESGraph_Pick(IGESData.IGESData_IGESEntity):
    """
    defines IGESPick, Type <406> Form <21>
    in package IGESGraph

    Attaches information that an entity may be picked
    by whatever pick device is used in the receiving
    system
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_Pick
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_Pick(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_Pick self) -> IGESGraph_Pick

        defines IGESPick, Type <406> Form <21>
        in package IGESGraph

        Attaches information that an entity may be picked
        by whatever pick device is used in the receiving
        system
        """
        this = _IGESGraph.new_IGESGraph_Pick(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_Pick self, Standard_Integer const nbProps, Standard_Integer const aPickStatus)

        This method is used to set the fields of the class Pick
        - nbProps     : Number of property values (NP = 1)
        - aPickStatus : Pick Flag

        :type nbProps: int
        :type aPickStatus: int

        """
        return _IGESGraph.IGESGraph_Pick_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_Pick self) -> Standard_Integer

        returns the number of property values in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_Pick_NbPropertyValues(self, *args)


    def PickFlag(self, *args):
        """
        PickFlag(IGESGraph_Pick self) -> Standard_Integer

        returns 0 if <me> is pickable(default),
        1 if <me> is not pickable.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_Pick_PickFlag(self, *args)


    def IsPickable(self, *args):
        """
        IsPickable(IGESGraph_Pick self) -> Standard_Boolean

        returns True if thePick is 0.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_Pick_IsPickable(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_Pick_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_Pick_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_Pick_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_Pick
IGESGraph_Pick_swigregister = _IGESGraph.IGESGraph_Pick_swigregister
IGESGraph_Pick_swigregister(IGESGraph_Pick)

def IGESGraph_Pick_get_type_name(*args):
    """
    IGESGraph_Pick_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_Pick_get_type_name(*args)

def IGESGraph_Pick_get_type_descriptor(*args):
    """
    IGESGraph_Pick_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_Pick_get_type_descriptor(*args)

class IGESGraph_IntercharacterSpacing(IGESData.IGESData_IGESEntity):
    """
    defines IGESIntercharacterSpacing, Type <406> Form <18>
    in package IGESGraph

    Specifies the gap between letters when fixed-pitch
    spacing is used
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_IntercharacterSpacing
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_IntercharacterSpacing(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_IntercharacterSpacing self) -> IGESGraph_IntercharacterSpacing

        defines IGESIntercharacterSpacing, Type <406> Form <18>
        in package IGESGraph

        Specifies the gap between letters when fixed-pitch
        spacing is used
        """
        this = _IGESGraph.new_IGESGraph_IntercharacterSpacing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_IntercharacterSpacing self, Standard_Integer const nbProps, Standard_Real const anISpace)

        This method is used to set the fields of the class
        IntercharacterSpacing
        - nbProps  : Number of property values (NP = 1)
        - anISpace : Intercharacter spacing percentage

        :type nbProps: int
        :type anISpace: float

        """
        return _IGESGraph.IGESGraph_IntercharacterSpacing_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_IntercharacterSpacing_NbPropertyValues(self, *args)


    def ISpace(self, *args):
        """
        ISpace(IGESGraph_IntercharacterSpacing self) -> Standard_Real

        returns the Intercharacter Space of <me> in percentage
        of the text height (Range = 0..100)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_IntercharacterSpacing_ISpace(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_IntercharacterSpacing_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_IntercharacterSpacing_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_IntercharacterSpacing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_IntercharacterSpacing
IGESGraph_IntercharacterSpacing_swigregister = _IGESGraph.IGESGraph_IntercharacterSpacing_swigregister
IGESGraph_IntercharacterSpacing_swigregister(IGESGraph_IntercharacterSpacing)

def IGESGraph_IntercharacterSpacing_get_type_name(*args):
    """
    IGESGraph_IntercharacterSpacing_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_IntercharacterSpacing_get_type_name(*args)

def IGESGraph_IntercharacterSpacing_get_type_descriptor(*args):
    """
    IGESGraph_IntercharacterSpacing_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_IntercharacterSpacing_get_type_descriptor(*args)

class IGESGraph_TextFontDef(IGESData.IGESData_IGESEntity):
    """
    defines IGES Text Font Definition Entity, Type <310>
    in package IGESGraph

    Used to define the appearance of characters in a text font.
    It may be used to describe a complete font or a
    modification to a subset of characters in another font.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_TextFontDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_TextFontDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_TextFontDef self) -> IGESGraph_TextFontDef

        defines IGES Text Font Definition Entity, Type <310>
        in package IGESGraph

        Used to define the appearance of characters in a text font.
        It may be used to describe a complete font or a
        modification to a subset of characters in another font.
        """
        this = _IGESGraph.new_IGESGraph_TextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_TextFontDef self, Standard_Integer const aFontCode, Handle_TCollection_HAsciiString aFontName, Standard_Integer const aSupersededFont, Handle_IGESGraph_TextFontDef aSupersededEntity, Standard_Integer const aScale, Handle_TColStd_HArray1OfInteger allASCIICodes, Handle_TColStd_HArray1OfInteger allNextCharX, Handle_TColStd_HArray1OfInteger allNextCharY, Handle_TColStd_HArray1OfInteger allPenMotions, Handle_IGESBasic_HArray1OfHArray1OfInteger allPenFlags, Handle_IGESBasic_HArray1OfHArray1OfInteger allMovePenToX, Handle_IGESBasic_HArray1OfHArray1OfInteger allMovePenToY)

        This method is used to set the fields of the class
        TextFontDef
        - aFontCode         : Font Code
        - aFontName         : Font Name
        - aSupersededFont   : Number of superseded font
        - aSupersededEntity : Text Definition Entity
        - aScale            : No. of grid units = 1 text height unit
        - allASCIICodes     : ASCII codes for characters
        - allNextCharX & Y  : Grid locations of the next
        character's origin (Integer vals)
        - allPenMotions     : No. of pen motions for the characters
        - allPenFlags       : Pen up/down flags,
        0 = Down (default), 1 = Up
        - allMovePenToX & Y : Grid locations the pen will move to
        This method initializes the fields of the class TextFontDef.
        An exception is raised if the lengths of allASCIICodes,
        allNextChars, allPenMotions, allPenFlags and allMovePenTo
        are not same.

        :type aFontCode: int
        :type aFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSupersededFont: int
        :type aSupersededEntity: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type aScale: int
        :type allASCIICodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNextCharX: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNextCharY: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPenMotions: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPenFlags: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allMovePenToX: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allMovePenToY: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger

        """
        return _IGESGraph.IGESGraph_TextFontDef_Init(self, *args)


    def FontCode(self, *args):
        """
        FontCode(IGESGraph_TextFontDef self) -> Standard_Integer

        returns the font code.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_FontCode(self, *args)


    def FontName(self, *args):
        """
        FontName(IGESGraph_TextFontDef self) -> Handle_TCollection_HAsciiString

        returns the font name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_TextFontDef_FontName(self, *args)


    def IsSupersededFontEntity(self, *args):
        """
        IsSupersededFontEntity(IGESGraph_TextFontDef self) -> Standard_Boolean

        True if this definition supersedes another
        TextFontDefinition Entity,
        False if it supersedes value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_TextFontDef_IsSupersededFontEntity(self, *args)


    def SupersededFontCode(self, *args):
        """
        SupersededFontCode(IGESGraph_TextFontDef self) -> Standard_Integer

        returns the font number which this entity modifies.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_SupersededFontCode(self, *args)


    def SupersededFontEntity(self, *args):
        """
        SupersededFontEntity(IGESGraph_TextFontDef self) -> Handle_IGESGraph_TextFontDef

        returns the font entity which this entity modifies.

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESGraph.IGESGraph_TextFontDef_SupersededFontEntity(self, *args)


    def Scale(self, *args):
        """
        Scale(IGESGraph_TextFontDef self) -> Standard_Integer

        returns the number of grid units which equal one text height unit.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_Scale(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(IGESGraph_TextFontDef self) -> Standard_Integer

        returns the number of characters in this definition.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_NbCharacters(self, *args)


    def ASCIICode(self, *args):
        """
        ASCIICode(IGESGraph_TextFontDef self, Standard_Integer const Chnum) -> Standard_Integer

        returns the ASCII code of Chnum'th character.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_ASCIICode(self, *args)


    def NextCharOrigin(self, *args):
        """
        NextCharOrigin(IGESGraph_TextFontDef self, Standard_Integer const Chnum)

        returns grid location of origin of character next to Chnum'th char.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :type NX: int
        :type NY: int

        """
        return _IGESGraph.IGESGraph_TextFontDef_NextCharOrigin(self, *args)


    def NbPenMotions(self, *args):
        """
        NbPenMotions(IGESGraph_TextFontDef self, Standard_Integer const Chnum) -> Standard_Integer

        returns number of pen motions for Chnum'th character.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextFontDef_NbPenMotions(self, *args)


    def IsPenUp(self, *args):
        """
        IsPenUp(IGESGraph_TextFontDef self, Standard_Integer const Chnum, Standard_Integer const Motionnum) -> Standard_Boolean

        returns pen status(True if 1, False if 0) of Motionnum'th motion
        of Chnum'th character.
        Exception raised if Chnum <= 0 or Chnum > NbCharacters or
        Motionnum <= 0 or Motionnum >  NbPenMotions

        :type Chnum: int
        :type Motionnum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_TextFontDef_IsPenUp(self, *args)


    def NextPenPosition(self, *args):
        """
        NextPenPosition(IGESGraph_TextFontDef self, Standard_Integer const Chnum, Standard_Integer const Motionnum)

        :type Chnum: int
        :type Motionnum: int
        :type IX: int
        :type IY: int

        """
        return _IGESGraph.IGESGraph_TextFontDef_NextPenPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_TextFontDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_TextFontDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_TextFontDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_TextFontDef
IGESGraph_TextFontDef_swigregister = _IGESGraph.IGESGraph_TextFontDef_swigregister
IGESGraph_TextFontDef_swigregister(IGESGraph_TextFontDef)

def IGESGraph_TextFontDef_get_type_name(*args):
    """
    IGESGraph_TextFontDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_TextFontDef_get_type_name(*args)

def IGESGraph_TextFontDef_get_type_descriptor(*args):
    """
    IGESGraph_TextFontDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_TextFontDef_get_type_descriptor(*args)

class IGESGraph_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESGraph"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_Protocol self) -> IGESGraph_Protocol

        Description of Protocol for IGESGraph
        """
        this = _IGESGraph.new_IGESGraph_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESGraph_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESBasic)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESGraph_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGraph.IGESGraph_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESGraph_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_Protocol
IGESGraph_Protocol_swigregister = _IGESGraph.IGESGraph_Protocol_swigregister
IGESGraph_Protocol_swigregister(IGESGraph_Protocol)

def IGESGraph_Protocol_get_type_name(*args):
    """
    IGESGraph_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_Protocol_get_type_name(*args)

def IGESGraph_Protocol_get_type_descriptor(*args):
    """
    IGESGraph_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_Protocol_get_type_descriptor(*args)

class IGESGraph_ToolLineFontPredefined(object):
    """
    Tool to work on a LineFontPredefined. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolLineFontPredefined self) -> IGESGraph_ToolLineFontPredefined

        Returns a ToolLineFontPredefined, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolLineFontPredefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LineFontPredefined <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a LineFontPredefined
        (NbPropertyValues forced to 1)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined entfrom, Handle_IGESGraph_LineFontPredefined entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolLineFontPredefined self, Handle_IGESGraph_LineFontPredefined ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontPredefined
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolLineFontPredefined_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolLineFontPredefined
IGESGraph_ToolLineFontPredefined_swigregister = _IGESGraph.IGESGraph_ToolLineFontPredefined_swigregister
IGESGraph_ToolLineFontPredefined_swigregister(IGESGraph_ToolLineFontPredefined)

class IGESGraph_LineFontDefPattern(IGESData.IGESData_LineFontEntity):
    """
    defines IGESLineFontDefPattern, Type <304> Form <2>
    in package IGESGraph

    Line Font may be defined by repetition of a basic pattern
    of visible-blank(or, on-off) segments superimposed on
    a line or a curve. The line or curve is then displayed
    according to the basic pattern.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_LineFontDefPattern
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_LineFontDefPattern(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_LineFontDefPattern self) -> IGESGraph_LineFontDefPattern

        defines IGESLineFontDefPattern, Type <304> Form <2>
        in package IGESGraph

        Line Font may be defined by repetition of a basic pattern
        of visible-blank(or, on-off) segments superimposed on
        a line or a curve. The line or curve is then displayed
        according to the basic pattern.
        """
        this = _IGESGraph.new_IGESGraph_LineFontDefPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_LineFontDefPattern self, Handle_TColStd_HArray1OfReal allSegLength, Handle_TCollection_HAsciiString aPattern)

        This method is used to set the fields of the class
        LineFontDefPattern
        - allSegLength : Containing lengths of respective segments
        - aPattern     : HAsciiString indicating visible-blank segments

        :type allSegLength: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aPattern: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_Init(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(IGESGraph_LineFontDefPattern self) -> Standard_Integer

        returns the number of segments in the visible-blank pattern

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_NbSegments(self, *args)


    def Length(self, *args):
        """
        Length(IGESGraph_LineFontDefPattern self, Standard_Integer const Index) -> Standard_Real

        returns the Length of Index'th segment of the basic pattern
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_Length(self, *args)


    def DisplayPattern(self, *args):
        """
        DisplayPattern(IGESGraph_LineFontDefPattern self) -> Handle_TCollection_HAsciiString

        returns the string indicating which segments of the basic
        pattern are visible and which are blanked.
        e.g:
        theNbSegments = 5 and if Bit Pattern = 10110, which means that
        segments 2, 3 and 5 are visible, whereas segments 1 and 4 are
        blank. The method returns "2H16" as the HAsciiString.
        Note: The bits are right justified. (16h = 10110)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_DisplayPattern(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(IGESGraph_LineFontDefPattern self, Standard_Integer const Index) -> Standard_Boolean

        The Display Pattern is decrypted to
        return True if the Index'th basic pattern is Visible,
        False otherwise.
        If Index > NbSegments or Index <= 0 then return value is
        False.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_IsVisible(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_LineFontDefPattern_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_LineFontDefPattern_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_LineFontDefPattern
IGESGraph_LineFontDefPattern_swigregister = _IGESGraph.IGESGraph_LineFontDefPattern_swigregister
IGESGraph_LineFontDefPattern_swigregister(IGESGraph_LineFontDefPattern)

def IGESGraph_LineFontDefPattern_get_type_name(*args):
    """
    IGESGraph_LineFontDefPattern_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_LineFontDefPattern_get_type_name(*args)

def IGESGraph_LineFontDefPattern_get_type_descriptor(*args):
    """
    IGESGraph_LineFontDefPattern_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_LineFontDefPattern_get_type_descriptor(*args)

class IGESGraph_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESGraph (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_GeneralModule self) -> IGESGraph_GeneralModule

        Creates a GeneralModule from IGESGraph and puts it into GeneralLib


        """
        this = _IGESGraph.new_IGESGraph_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Drawing for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_GeneralModule
IGESGraph_GeneralModule_swigregister = _IGESGraph.IGESGraph_GeneralModule_swigregister
IGESGraph_GeneralModule_swigregister(IGESGraph_GeneralModule)

def IGESGraph_GeneralModule_get_type_name(*args):
    """
    IGESGraph_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_GeneralModule_get_type_name(*args)

def IGESGraph_GeneralModule_get_type_descriptor(*args):
    """
    IGESGraph_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_GeneralModule_get_type_descriptor(*args)

class IGESGraph_NominalSize(IGESData.IGESData_IGESEntity):
    """
    defines IGESNominalSize, Type <406> Form <13>
    in package IGESGraph

    Specifies a value, a name, and optionally a
    reference to an engineering standard
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_NominalSize
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_NominalSize(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_NominalSize self) -> IGESGraph_NominalSize

        defines IGESNominalSize, Type <406> Form <13>
        in package IGESGraph

        Specifies a value, a name, and optionally a
        reference to an engineering standard
        """
        this = _IGESGraph.new_IGESGraph_NominalSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_NominalSize self, Standard_Integer const nbProps, Standard_Real const aNominalSizeValue, Handle_TCollection_HAsciiString aNominalSizeName, Handle_TCollection_HAsciiString aStandardName)

        This method is used to set the fields of the class
        NominalSize
        - nbProps           : Number of property values (2 or 3)
        - aNominalSizeValue : NominalSize Value
        - aNominalSizeName  : NominalSize Name
        - aStandardName     : Name of relevant engineering standard

        :type nbProps: int
        :type aNominalSizeValue: float
        :type aNominalSizeName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aStandardName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_NominalSize_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_NominalSize self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_NominalSize_NbPropertyValues(self, *args)


    def NominalSizeValue(self, *args):
        """
        NominalSizeValue(IGESGraph_NominalSize self) -> Standard_Real

        returns the value of <me>

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_NominalSize_NominalSizeValue(self, *args)


    def NominalSizeName(self, *args):
        """
        NominalSizeName(IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        returns the name of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_NominalSize_NominalSizeName(self, *args)


    def HasStandardName(self, *args):
        """
        HasStandardName(IGESGraph_NominalSize self) -> Standard_Boolean

        returns True if an engineering Standard is defined for <me>
        else, returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_NominalSize_HasStandardName(self, *args)


    def StandardName(self, *args):
        """
        StandardName(IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        returns the name of the relevant engineering standard of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_NominalSize_StandardName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_NominalSize_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_NominalSize_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_NominalSize_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_NominalSize
IGESGraph_NominalSize_swigregister = _IGESGraph.IGESGraph_NominalSize_swigregister
IGESGraph_NominalSize_swigregister(IGESGraph_NominalSize)

def IGESGraph_NominalSize_get_type_name(*args):
    """
    IGESGraph_NominalSize_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_NominalSize_get_type_name(*args)

def IGESGraph_NominalSize_get_type_descriptor(*args):
    """
    IGESGraph_NominalSize_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_NominalSize_get_type_descriptor(*args)

class Handle_IGESGraph_LineFontDefPattern(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_LineFontDefPattern self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_LineFontDefPattern self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_LineFontDefPattern self, IGESGraph_LineFontDefPattern thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern theHandle) -> Handle_IGESGraph_LineFontDefPattern
        assign(Handle_IGESGraph_LineFontDefPattern self, IGESGraph_LineFontDefPattern thePtr) -> Handle_IGESGraph_LineFontDefPattern
        assign(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern theHandle) -> Handle_IGESGraph_LineFontDefPattern

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_LineFontDefPattern self) -> IGESGraph_LineFontDefPattern

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_LineFontDefPattern self) -> IGESGraph_LineFontDefPattern

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_LineFontDefPattern self) -> IGESGraph_LineFontDefPattern

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_LineFontDefPattern___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_LineFontDefPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_LineFontDefPattern_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_LineFontDefPattern

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_LineFontDefPattern self, Handle_TColStd_HArray1OfReal allSegLength, Handle_TCollection_HAsciiString aPattern)

        This method is used to set the fields of the class
        LineFontDefPattern
        - allSegLength : Containing lengths of respective segments
        - aPattern     : HAsciiString indicating visible-blank segments

        :type allSegLength: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aPattern: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Init(self, *args)


    def NbSegments(self, *args):
        """
        NbSegments(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        returns the number of segments in the visible-blank pattern

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NbSegments(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESGraph_LineFontDefPattern self, Standard_Integer const Index) -> Standard_Real

        returns the Length of Index'th segment of the basic pattern
        raises exception if Index <= 0 or Index > NbSegments

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Length(self, *args)


    def DisplayPattern(self, *args):
        """
        DisplayPattern(Handle_IGESGraph_LineFontDefPattern self) -> Handle_TCollection_HAsciiString

        returns the string indicating which segments of the basic
        pattern are visible and which are blanked.
        e.g:
        theNbSegments = 5 and if Bit Pattern = 10110, which means that
        segments 2, 3 and 5 are visible, whereas segments 1 and 4 are
        blank. The method returns "2H16" as the HAsciiString.
        Note: The bits are right justified. (16h = 10110)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DisplayPattern(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_IGESGraph_LineFontDefPattern self, Standard_Integer const Index) -> Standard_Boolean

        The Display Pattern is decrypted to
        return True if the Index'th basic pattern is Visible,
        False otherwise.
        If Index > NbSegments or Index <= 0 then return value is
        False.

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IsVisible(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_LineFontDefPattern self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontDefPattern_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_LineFontDefPattern self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_LineFontDefPattern self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_LineFontDefPattern self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_LineFontDefPattern self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_LineFontDefPattern self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_LineFontDefPattern self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_LineFontDefPattern self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_LineFontDefPattern self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_LineFontDefPattern self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_LineFontDefPattern self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_LineFontDefPattern self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_LineFontDefPattern self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_LineFontDefPattern self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_LineFontDefPattern self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_LineFontDefPattern self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_LineFontDefPattern self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_LineFontDefPattern self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_LineFontDefPattern self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_LineFontDefPattern self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_LineFontDefPattern self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_LineFontDefPattern self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_LineFontDefPattern self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_LineFontDefPattern self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_LineFontDefPattern self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_LineFontDefPattern self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_LineFontDefPattern self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DecrementRefCounter(self, *args)

Handle_IGESGraph_LineFontDefPattern_swigregister = _IGESGraph.Handle_IGESGraph_LineFontDefPattern_swigregister
Handle_IGESGraph_LineFontDefPattern_swigregister(Handle_IGESGraph_LineFontDefPattern)

def Handle_IGESGraph_LineFontDefPattern_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DownCast(thing)
Handle_IGESGraph_LineFontDefPattern_DownCast = _IGESGraph.Handle_IGESGraph_LineFontDefPattern_DownCast

class IGESGraph_ToolUniformRectGrid(object):
    """
    Tool to work on a UniformRectGrid. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolUniformRectGrid self) -> IGESGraph_ToolUniformRectGrid

        Returns a ToolUniformRectGrid, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolUniformRectGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent, Interface_EntityIterator iter)

        Lists the Entities shared by a UniformRectGrid <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a UniformRectGrid
        (NbPropertyValues forced to 9)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid entfrom, Handle_IGESGraph_UniformRectGrid entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolUniformRectGrid self, Handle_IGESGraph_UniformRectGrid ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_UniformRectGrid
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolUniformRectGrid_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolUniformRectGrid
IGESGraph_ToolUniformRectGrid_swigregister = _IGESGraph.IGESGraph_ToolUniformRectGrid_swigregister
IGESGraph_ToolUniformRectGrid_swigregister(IGESGraph_ToolUniformRectGrid)

class IGESGraph_HArray1OfColor(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_HArray1OfColor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_HArray1OfColor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_HArray1OfColor self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGraph_HArray1OfColor
        __init__(IGESGraph_HArray1OfColor self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGraph_Color theValue) -> IGESGraph_HArray1OfColor
        __init__(IGESGraph_HArray1OfColor self, NCollection_Array1_Handle_IGESGraph_Color theOther) -> IGESGraph_HArray1OfColor

        :type theOther: OCC.wrapper.IGESGraph.IGESGraph_Array1OfColor

        """
        this = _IGESGraph.new_IGESGraph_HArray1OfColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfColor

        """
        res = _IGESGraph.IGESGraph_HArray1OfColor_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGraph_HArray1OfColor self) -> NCollection_Array1_Handle_IGESGraph_Color

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfColor

        """
        return _IGESGraph.IGESGraph_HArray1OfColor_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_HArray1OfColor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_HArray1OfColor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_HArray1OfColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_HArray1OfColor
IGESGraph_HArray1OfColor_swigregister = _IGESGraph.IGESGraph_HArray1OfColor_swigregister
IGESGraph_HArray1OfColor_swigregister(IGESGraph_HArray1OfColor)

def IGESGraph_HArray1OfColor_get_type_name(*args):
    """
    IGESGraph_HArray1OfColor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_HArray1OfColor_get_type_name(*args)

def IGESGraph_HArray1OfColor_get_type_descriptor(*args):
    """
    IGESGraph_HArray1OfColor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_HArray1OfColor_get_type_descriptor(*args)

class Handle_IGESGraph_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_GeneralModule self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_GeneralModule self, IGESGraph_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_GeneralModule self, Handle_IGESGraph_GeneralModule theHandle) -> Handle_IGESGraph_GeneralModule
        assign(Handle_IGESGraph_GeneralModule self, IGESGraph_GeneralModule thePtr) -> Handle_IGESGraph_GeneralModule
        assign(Handle_IGESGraph_GeneralModule self, Handle_IGESGraph_GeneralModule theHandle) -> Handle_IGESGraph_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_GeneralModule self) -> IGESGraph_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_GeneralModule self) -> IGESGraph_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_GeneralModule self) -> IGESGraph_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_GeneralModule_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Drawing for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESGraph_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESGraph_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESGraph_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESGraph_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESGraph_GeneralModule_swigregister = _IGESGraph.Handle_IGESGraph_GeneralModule_swigregister
Handle_IGESGraph_GeneralModule_swigregister(Handle_IGESGraph_GeneralModule)

def Handle_IGESGraph_GeneralModule_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_GeneralModule_DownCast(thing)
Handle_IGESGraph_GeneralModule_DownCast = _IGESGraph.Handle_IGESGraph_GeneralModule_DownCast

class IGESGraph_HArray1OfTextDisplayTemplate(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_HArray1OfTextDisplayTemplate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_HArray1OfTextDisplayTemplate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_HArray1OfTextDisplayTemplate self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGraph_HArray1OfTextDisplayTemplate
        __init__(IGESGraph_HArray1OfTextDisplayTemplate self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGraph_TextDisplayTemplate theValue) -> IGESGraph_HArray1OfTextDisplayTemplate
        __init__(IGESGraph_HArray1OfTextDisplayTemplate self, NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate theOther) -> IGESGraph_HArray1OfTextDisplayTemplate

        :type theOther: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextDisplayTemplate

        """
        this = _IGESGraph.new_IGESGraph_HArray1OfTextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextDisplayTemplate

        """
        res = _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGraph_HArray1OfTextDisplayTemplate self) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextDisplayTemplate

        """
        return _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_HArray1OfTextDisplayTemplate
IGESGraph_HArray1OfTextDisplayTemplate_swigregister = _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_swigregister
IGESGraph_HArray1OfTextDisplayTemplate_swigregister(IGESGraph_HArray1OfTextDisplayTemplate)

def IGESGraph_HArray1OfTextDisplayTemplate_get_type_name(*args):
    """
    IGESGraph_HArray1OfTextDisplayTemplate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_get_type_name(*args)

def IGESGraph_HArray1OfTextDisplayTemplate_get_type_descriptor(*args):
    """
    IGESGraph_HArray1OfTextDisplayTemplate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_HArray1OfTextDisplayTemplate_get_type_descriptor(*args)

class IGESGraph_ToolLineFontDefTemplate(object):
    """
    Tool to work on a LineFontDefTemplate. Called by various
    Modules (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolLineFontDefTemplate self) -> IGESGraph_ToolLineFontDefTemplate

        Returns a ToolLineFontDefTemplate, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolLineFontDefTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LineFontDefTemplate <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate entfrom, Handle_IGESGraph_LineFontDefTemplate entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolLineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefTemplate
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefTemplate_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolLineFontDefTemplate
IGESGraph_ToolLineFontDefTemplate_swigregister = _IGESGraph.IGESGraph_ToolLineFontDefTemplate_swigregister
IGESGraph_ToolLineFontDefTemplate_swigregister(IGESGraph_ToolLineFontDefTemplate)

class IGESGraph_LineFontDefTemplate(IGESData.IGESData_LineFontEntity):
    """
    defines IGESLineFontDefTemplate, Type <304> Form <1>
    in package IGESGraph

    Line Font can be defined as a repetition od Template figure
    that is displayed at regularly spaced locations along a
    planer anchoring curve. The anchoring curve itself has
    no visual purpose.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_LineFontDefTemplate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_LineFontDefTemplate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_LineFontDefTemplate self) -> IGESGraph_LineFontDefTemplate

        defines IGESLineFontDefTemplate, Type <304> Form <1>
        in package IGESGraph

        Line Font can be defined as a repetition od Template figure
        that is displayed at regularly spaced locations along a
        planer anchoring curve. The anchoring curve itself has
        no visual purpose.
        """
        this = _IGESGraph.new_IGESGraph_LineFontDefTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_LineFontDefTemplate self, Standard_Integer const anOrientation, Handle_IGESBasic_SubfigureDef aTemplate, Standard_Real const aDistance, Standard_Real const aScale)

        This method is used to set the fields of the class
        LineFontDefTemplate
        - anOrientation : Orientation of Template figure on
        anchoring curve
        - aTemplate     : SubfigureDef entity used as Template figure
        - aDistance     : Distance between the neighbouring Template
        figures
        - aScale        : Scale factor applied to the Template figure

        :type anOrientation: int
        :type aTemplate: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type aDistance: float
        :type aScale: float

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        if return value = 0, Each Template display is oriented by aligning
        the axis of the SubfigureDef with the axis of
        the definition space of the anchoring curve.
        = 1, Each Template display is oriented by aligning
        X-axis of the SubfigureDef with the tangent
        vector of the anchoring curve at the point of
        incidence of the curve and the origin of
        subfigure.
        Similarly Z-axis is aligned.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_Orientation(self, *args)


    def TemplateEntity(self, *args):
        """
        TemplateEntity(IGESGraph_LineFontDefTemplate self) -> Handle_IGESBasic_SubfigureDef

        returns SubfigureDef as the Entity used as Template figure.

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_TemplateEntity(self, *args)


    def Distance(self, *args):
        """
        Distance(IGESGraph_LineFontDefTemplate self) -> Standard_Real

        returns the Distance between any two Template figures on the
        anchoring curve.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_Distance(self, *args)


    def Scale(self, *args):
        """
        Scale(IGESGraph_LineFontDefTemplate self) -> Standard_Real

        returns the Scaling factor applied to SubfigureDef to form
        Template figure.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_Scale(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_LineFontDefTemplate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_LineFontDefTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_LineFontDefTemplate
IGESGraph_LineFontDefTemplate_swigregister = _IGESGraph.IGESGraph_LineFontDefTemplate_swigregister
IGESGraph_LineFontDefTemplate_swigregister(IGESGraph_LineFontDefTemplate)

def IGESGraph_LineFontDefTemplate_get_type_name(*args):
    """
    IGESGraph_LineFontDefTemplate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_LineFontDefTemplate_get_type_name(*args)

def IGESGraph_LineFontDefTemplate_get_type_descriptor(*args):
    """
    IGESGraph_LineFontDefTemplate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_LineFontDefTemplate_get_type_descriptor(*args)

class NCollection_Array1_Handle_IGESGraph_TextFontDef(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGraph.new_NCollection_Array1_Handle_IGESGraph_TextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGraph_TextFontDef self, Handle_IGESGraph_TextFontDef theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGraph_TextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGraph_TextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGraph_TextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef
        assign(NCollection_Array1_Handle_IGESGraph_TextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Handle_IGESGraph_TextFontDef

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGraph_TextFontDef self) -> Handle_IGESGraph_TextFontDef

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGraph_TextFontDef self, Standard_Integer const theIndex) -> Handle_IGESGraph_TextFontDef

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGraph_TextFontDef self, Standard_Integer const theIndex, Handle_IGESGraph_TextFontDef theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGraph_TextFontDef self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_Resize(self, *args)

    __swig_destroy__ = _IGESGraph.delete_NCollection_Array1_Handle_IGESGraph_TextFontDef
NCollection_Array1_Handle_IGESGraph_TextFontDef_swigregister = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextFontDef_swigregister
NCollection_Array1_Handle_IGESGraph_TextFontDef_swigregister(NCollection_Array1_Handle_IGESGraph_TextFontDef)


try:
	IGESGraph_Array1OfTextFontDef = NCollection_Array1_Handle_IGESGraph_TextFontDef
except NameError:
	pass # does not exist, probably ignored

class IGESGraph_ToolLineFontDefPattern(object):
    """
    Tool to work on a LineFontDefPattern. Called by various
    Modules (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolLineFontDefPattern self) -> IGESGraph_ToolLineFontDefPattern

        Returns a ToolLineFontDefPattern, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolLineFontDefPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LineFontDefPattern <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern entfrom, Handle_IGESGraph_LineFontDefPattern entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolLineFontDefPattern self, Handle_IGESGraph_LineFontDefPattern ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_LineFontDefPattern
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolLineFontDefPattern_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolLineFontDefPattern
IGESGraph_ToolLineFontDefPattern_swigregister = _IGESGraph.IGESGraph_ToolLineFontDefPattern_swigregister
IGESGraph_ToolLineFontDefPattern_swigregister(IGESGraph_ToolLineFontDefPattern)

class Handle_IGESGraph_HighLight(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_HighLight self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_HighLight self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_HighLight self, IGESGraph_HighLight thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_HighLight self, Handle_IGESGraph_HighLight theHandle) -> Handle_IGESGraph_HighLight
        assign(Handle_IGESGraph_HighLight self, IGESGraph_HighLight thePtr) -> Handle_IGESGraph_HighLight
        assign(Handle_IGESGraph_HighLight self, Handle_IGESGraph_HighLight theHandle) -> Handle_IGESGraph_HighLight

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_HighLight self) -> IGESGraph_HighLight

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_HighLight self) -> IGESGraph_HighLight

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HighLight___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_HighLight self) -> IGESGraph_HighLight

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_HighLight___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_HighLight___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_HighLight___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_HighLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_HighLight_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_HighLight

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_HighLight self, Standard_Integer const nbProps, Standard_Integer const aHighLightStatus)

        This method is used to set the fields of the class
        HighLight
        - nbProps          : Number of property values (NP = 1)
        - aHighLightStatus : HighLight Flag

        :type nbProps: int
        :type aHighLightStatus: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_HighLight self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NbPropertyValues(self, *args)


    def HighLightStatus(self, *args):
        """
        HighLightStatus(Handle_IGESGraph_HighLight self) -> Standard_Integer

        returns 0 if <me> is not highlighted(default),
        1 if <me> is highlighted

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HighLightStatus(self, *args)


    def IsHighLighted(self, *args):
        """
        IsHighLighted(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        returns True if entity is highlighted

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IsHighLighted(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_HighLight self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HighLight_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HighLight_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_HighLight self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_HighLight self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_HighLight self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_HighLight self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_HighLight self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_HighLight self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_HighLight self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_HighLight self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_HighLight self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_HighLight self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_HighLight self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_HighLight self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_HighLight self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_HighLight self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_HighLight self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_HighLight self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_HighLight self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_HighLight self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_HighLight self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_HighLight self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_HighLight self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_HighLight self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_HighLight self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_HighLight self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_HighLight self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_HighLight self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_HighLight self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_HighLight self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_HighLight self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_HighLight self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_HighLight self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_HighLight self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_HighLight self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_HighLight self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_HighLight self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_HighLight self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_HighLight self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_HighLight self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_HighLight self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_HighLight self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_HighLight self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_HighLight self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_HighLight self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_HighLight self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_HighLight self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_HighLight self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_HighLight_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_HighLight self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_HighLight self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_HighLight self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_HighLight self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_HighLight self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_HighLight self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_HighLight_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_HighLight self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HighLight_DecrementRefCounter(self, *args)

Handle_IGESGraph_HighLight_swigregister = _IGESGraph.Handle_IGESGraph_HighLight_swigregister
Handle_IGESGraph_HighLight_swigregister(Handle_IGESGraph_HighLight)

def Handle_IGESGraph_HighLight_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_HighLight_DownCast(thing)
Handle_IGESGraph_HighLight_DownCast = _IGESGraph.Handle_IGESGraph_HighLight_DownCast

class Handle_IGESGraph_DefinitionLevel(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_DefinitionLevel self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_DefinitionLevel self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_DefinitionLevel self, IGESGraph_DefinitionLevel thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_DefinitionLevel self, Handle_IGESGraph_DefinitionLevel theHandle) -> Handle_IGESGraph_DefinitionLevel
        assign(Handle_IGESGraph_DefinitionLevel self, IGESGraph_DefinitionLevel thePtr) -> Handle_IGESGraph_DefinitionLevel
        assign(Handle_IGESGraph_DefinitionLevel self, Handle_IGESGraph_DefinitionLevel theHandle) -> Handle_IGESGraph_DefinitionLevel

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_DefinitionLevel self) -> IGESGraph_DefinitionLevel

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_DefinitionLevel self) -> IGESGraph_DefinitionLevel

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_DefinitionLevel self) -> IGESGraph_DefinitionLevel

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_DefinitionLevel___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_DefinitionLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_DefinitionLevel_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_DefinitionLevel

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_DefinitionLevel self, Handle_TColStd_HArray1OfInteger allLevelNumbers)

        This method is used to set the fields of the class
        DefinitionLevel
        - allLevelNumbers : Values of Level Numbers

        :type allLevelNumbers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbPropertyValues(self, *args)


    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Must return the count of levels (== NbPropertyValues)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(Handle_IGESGraph_DefinitionLevel self, Standard_Integer const LevelIndex) -> Standard_Integer

        returns the Level Number of <me> indicated by <LevelIndex>
        raises an exception if LevelIndex is <= 0 or
        LevelIndex > NbPropertyValues

        :type LevelIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LevelNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_DefinitionLevel self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DefinitionLevel_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DefinitionLevel_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasLevelNumber(self, *args):
        """
        HasLevelNumber(Handle_IGESGraph_DefinitionLevel self, Standard_Integer const level) -> Standard_Boolean

        returns True if <level> is in the list

        :type level: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasLevelNumber(self, *args)


    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_DefinitionLevel self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_DefinitionLevel self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_DefinitionLevel self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_DefinitionLevel self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_DefinitionLevel self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_DefinitionLevel self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_DefinitionLevel self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_DefinitionLevel self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_DefinitionLevel self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_DefinitionLevel self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_DefinitionLevel self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_DefinitionLevel self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_DefinitionLevel self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_DefinitionLevel self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_DefinitionLevel self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_DefinitionLevel self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_DefinitionLevel self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_DefinitionLevel self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_DefinitionLevel self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_DefinitionLevel self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_DefinitionLevel self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_DefinitionLevel self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_DefinitionLevel self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_DefinitionLevel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_DefinitionLevel self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_DefinitionLevel self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_DefinitionLevel self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_DefinitionLevel self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_DefinitionLevel self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DecrementRefCounter(self, *args)

Handle_IGESGraph_DefinitionLevel_swigregister = _IGESGraph.Handle_IGESGraph_DefinitionLevel_swigregister
Handle_IGESGraph_DefinitionLevel_swigregister(Handle_IGESGraph_DefinitionLevel)

def Handle_IGESGraph_DefinitionLevel_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_DefinitionLevel_DownCast(thing)
Handle_IGESGraph_DefinitionLevel_DownCast = _IGESGraph.Handle_IGESGraph_DefinitionLevel_DownCast

class IGESGraph_DrawingUnits(IGESData.IGESData_IGESEntity):
    """
    defines IGESDrawingUnits, Type <406> Form <17>
    in package IGESGraph

    Specifies the drawing space units as outlined
    in the Drawing entity
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_DrawingUnits
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_DrawingUnits(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_DrawingUnits self) -> IGESGraph_DrawingUnits

        defines IGESDrawingUnits, Type <406> Form <17>
        in package IGESGraph

        Specifies the drawing space units as outlined
        in the Drawing entity
        """
        this = _IGESGraph.new_IGESGraph_DrawingUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_DrawingUnits self, Standard_Integer const nbProps, Standard_Integer const aFlag, Handle_TCollection_HAsciiString aUnit)

        This method is used to set the fields of the class
        DrawingUnits
        - nbProps : Number of property values (NP = 2)
        - aFlag   : DrawingUnits Flag
        - aUnit   : DrawingUnits Name

        :type nbProps: int
        :type aFlag: int
        :type aUnit: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_DrawingUnits_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_DrawingUnits self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DrawingUnits_NbPropertyValues(self, *args)


    def Flag(self, *args):
        """
        Flag(IGESGraph_DrawingUnits self) -> Standard_Integer

        returns the drawing space units of <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DrawingUnits_Flag(self, *args)


    def Unit(self, *args):
        """
        Unit(IGESGraph_DrawingUnits self) -> Handle_TCollection_HAsciiString

        returns the name of the drawing space units of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_DrawingUnits_Unit(self, *args)


    def UnitValue(self, *args):
        """
        UnitValue(IGESGraph_DrawingUnits self) -> Standard_Real

        Computes the value of the unit, in meters, according Flag
        (same values as for GlobalSection from IGESData)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_DrawingUnits_UnitValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_DrawingUnits_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_DrawingUnits_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_DrawingUnits_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_DrawingUnits
IGESGraph_DrawingUnits_swigregister = _IGESGraph.IGESGraph_DrawingUnits_swigregister
IGESGraph_DrawingUnits_swigregister(IGESGraph_DrawingUnits)

def IGESGraph_DrawingUnits_get_type_name(*args):
    """
    IGESGraph_DrawingUnits_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_DrawingUnits_get_type_name(*args)

def IGESGraph_DrawingUnits_get_type_descriptor(*args):
    """
    IGESGraph_DrawingUnits_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_DrawingUnits_get_type_descriptor(*args)

class IGESGraph_LineFontPredefined(IGESData.IGESData_IGESEntity):
    """
    defines IGESLineFontPredefined, Type <406> Form <19>
    in package IGESGraph

    Provides the ability to specify a line font pattern
    from a predefined list rather than from
    Directory Entry Field 4
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_LineFontPredefined
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_LineFontPredefined(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_LineFontPredefined self) -> IGESGraph_LineFontPredefined

        defines IGESLineFontPredefined, Type <406> Form <19>
        in package IGESGraph

        Provides the ability to specify a line font pattern
        from a predefined list rather than from
        Directory Entry Field 4
        """
        this = _IGESGraph.new_IGESGraph_LineFontPredefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_LineFontPredefined self, Standard_Integer const nbProps, Standard_Integer const aLineFontPatternCode)

        This method is used to set the fields of the class
        LineFontPredefined
        - nbProps              : Number of property values (NP = 1)
        - aLineFontPatternCode : Line Font Pattern Code

        :type nbProps: int
        :type aLineFontPatternCode: int

        """
        return _IGESGraph.IGESGraph_LineFontPredefined_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_LineFontPredefined self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_LineFontPredefined_NbPropertyValues(self, *args)


    def LineFontPatternCode(self, *args):
        """
        LineFontPatternCode(IGESGraph_LineFontPredefined self) -> Standard_Integer

        returns the Line Font Pattern Code of <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_LineFontPredefined_LineFontPatternCode(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_LineFontPredefined_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_LineFontPredefined_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_LineFontPredefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_LineFontPredefined
IGESGraph_LineFontPredefined_swigregister = _IGESGraph.IGESGraph_LineFontPredefined_swigregister
IGESGraph_LineFontPredefined_swigregister(IGESGraph_LineFontPredefined)

def IGESGraph_LineFontPredefined_get_type_name(*args):
    """
    IGESGraph_LineFontPredefined_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_LineFontPredefined_get_type_name(*args)

def IGESGraph_LineFontPredefined_get_type_descriptor(*args):
    """
    IGESGraph_LineFontPredefined_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_LineFontPredefined_get_type_descriptor(*args)

class IGESGraph_ToolIntercharacterSpacing(object):
    """
    Tool to work on a IntercharacterSpacing. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolIntercharacterSpacing self) -> IGESGraph_ToolIntercharacterSpacing

        Returns a ToolIntercharacterSpacing, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolIntercharacterSpacing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent, Interface_EntityIterator iter)

        Lists the Entities shared by a IntercharacterSpacing <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a IntercharacterSpacing
        (NbPropertyValues forced to 1)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing entfrom, Handle_IGESGraph_IntercharacterSpacing entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolIntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_IntercharacterSpacing
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolIntercharacterSpacing_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolIntercharacterSpacing
IGESGraph_ToolIntercharacterSpacing_swigregister = _IGESGraph.IGESGraph_ToolIntercharacterSpacing_swigregister
IGESGraph_ToolIntercharacterSpacing_swigregister(IGESGraph_ToolIntercharacterSpacing)

class IGESGraph_Color(IGESData.IGESData_ColorEntity):
    """
    defines IGESColor, Type <314> Form <0>
    in package IGESGraph

    The Color Definition Entity is used to communicate the
    relationship of primary colors to the intensity level of
    the respective graphics devices as a percent of full
    intensity range.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_Color
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_Color(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_Color self) -> IGESGraph_Color

        defines IGESColor, Type <314> Form <0>
        in package IGESGraph

        The Color Definition Entity is used to communicate the
        relationship of primary colors to the intensity level of
        the respective graphics devices as a percent of full
        intensity range.
        """
        this = _IGESGraph.new_IGESGraph_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_Color self, Standard_Real const red, Standard_Real const green, Standard_Real const blue, Handle_TCollection_HAsciiString aColorName)

        This method is used to set the fields of the class Color
        - red        : Red   color intensity (range 0.0 to 100.0)
        - green      : Green color intensity (range 0.0 to 100.0)
        - blue       : Blue  color intensity (range 0.0 to 100.0)
        - aColorName : Name of the color (optional)

        :type red: float
        :type green: float
        :type blue: float
        :type aColorName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_Color_Init(self, *args)


    def RGBIntensity(self, *args):
        """
        RGBIntensity(IGESGraph_Color self)

        :type Red: float
        :type Green: float
        :type Blue: float

        """
        return _IGESGraph.IGESGraph_Color_RGBIntensity(self, *args)


    def CMYIntensity(self, *args):
        """
        CMYIntensity(IGESGraph_Color self)

        :type Cyan: float
        :type Magenta: float
        :type Yellow: float

        """
        return _IGESGraph.IGESGraph_Color_CMYIntensity(self, *args)


    def HLSPercentage(self, *args):
        """
        HLSPercentage(IGESGraph_Color self)

        :type Hue: float
        :type Lightness: float
        :type Saturation: float

        """
        return _IGESGraph.IGESGraph_Color_HLSPercentage(self, *args)


    def HasColorName(self, *args):
        """
        HasColorName(IGESGraph_Color self) -> Standard_Boolean

        returns True if optional character string is assigned,
        False otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_Color_HasColorName(self, *args)


    def ColorName(self, *args):
        """
        ColorName(IGESGraph_Color self) -> Handle_TCollection_HAsciiString

        if HasColorName() is True  returns the Verbal description of
        the Color.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.IGESGraph_Color_ColorName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_Color_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_Color_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_Color_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_Color
IGESGraph_Color_swigregister = _IGESGraph.IGESGraph_Color_swigregister
IGESGraph_Color_swigregister(IGESGraph_Color)

def IGESGraph_Color_get_type_name(*args):
    """
    IGESGraph_Color_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_Color_get_type_name(*args)

def IGESGraph_Color_get_type_descriptor(*args):
    """
    IGESGraph_Color_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_Color_get_type_descriptor(*args)

class IGESGraph_DrawingSize(IGESData.IGESData_IGESEntity):
    """
    defines IGESDrawingSize, Type <406> Form <16>
    in package IGESGraph

    Specifies the drawing size in drawing units. The
    origin of the drawing is defined to be (0,0) in
    drawing space
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_DrawingSize
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_DrawingSize(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_DrawingSize self) -> IGESGraph_DrawingSize

        defines IGESDrawingSize, Type <406> Form <16>
        in package IGESGraph

        Specifies the drawing size in drawing units. The
        origin of the drawing is defined to be (0,0) in
        drawing space
        """
        this = _IGESGraph.new_IGESGraph_DrawingSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_DrawingSize self, Standard_Integer const nbProps, Standard_Real const aXSize, Standard_Real const aYSize)

        This method is used to set the fields of the class
        DrawingSize
        - nbProps : Number of property values (NP = 2)
        - aXSize  : Extent of Drawing along positive XD axis
        - aYSize  : Extent of Drawing along positive YD axis

        :type nbProps: int
        :type aXSize: float
        :type aYSize: float

        """
        return _IGESGraph.IGESGraph_DrawingSize_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESGraph_DrawingSize self) -> Standard_Integer

        returns the number of property values in <me> (NP = 2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_DrawingSize_NbPropertyValues(self, *args)


    def XSize(self, *args):
        """
        XSize(IGESGraph_DrawingSize self) -> Standard_Real

        returns the extent of Drawing along positive XD axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_DrawingSize_XSize(self, *args)


    def YSize(self, *args):
        """
        YSize(IGESGraph_DrawingSize self) -> Standard_Real

        returns the extent of Drawing along positive YD axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_DrawingSize_YSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_DrawingSize_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_DrawingSize_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_DrawingSize_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_DrawingSize
IGESGraph_DrawingSize_swigregister = _IGESGraph.IGESGraph_DrawingSize_swigregister
IGESGraph_DrawingSize_swigregister(IGESGraph_DrawingSize)

def IGESGraph_DrawingSize_get_type_name(*args):
    """
    IGESGraph_DrawingSize_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_DrawingSize_get_type_name(*args)

def IGESGraph_DrawingSize_get_type_descriptor(*args):
    """
    IGESGraph_DrawingSize_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_DrawingSize_get_type_descriptor(*args)

class Handle_IGESGraph_Pick(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_Pick self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_Pick_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_Pick self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_Pick_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_Pick self, IGESGraph_Pick thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_Pick_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_Pick self, Handle_IGESGraph_Pick theHandle) -> Handle_IGESGraph_Pick
        assign(Handle_IGESGraph_Pick self, IGESGraph_Pick thePtr) -> Handle_IGESGraph_Pick
        assign(Handle_IGESGraph_Pick self, Handle_IGESGraph_Pick theHandle) -> Handle_IGESGraph_Pick

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_Pick_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_Pick self) -> IGESGraph_Pick

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Pick_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_Pick self) -> IGESGraph_Pick

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Pick___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_Pick self) -> IGESGraph_Pick

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_Pick___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_Pick___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_Pick___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_Pick(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_Pick_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_Pick

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_Pick self, Standard_Integer const nbProps, Standard_Integer const aPickStatus)

        This method is used to set the fields of the class Pick
        - nbProps     : Number of property values (NP = 1)
        - aPickStatus : Pick Flag

        :type nbProps: int
        :type aPickStatus: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_Pick self) -> Standard_Integer

        returns the number of property values in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NbPropertyValues(self, *args)


    def PickFlag(self, *args):
        """
        PickFlag(Handle_IGESGraph_Pick self) -> Standard_Integer

        returns 0 if <me> is pickable(default),
        1 if <me> is not pickable.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_PickFlag(self, *args)


    def IsPickable(self, *args):
        """
        IsPickable(Handle_IGESGraph_Pick self) -> Standard_Boolean

        returns True if thePick is 0.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_IsPickable(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_Pick self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_Pick_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Pick_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Pick_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_Pick self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_Pick_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_Pick self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_Pick self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_Pick self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_Pick self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_Pick self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_Pick self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_Pick self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_Pick self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_Pick self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_Pick self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_Pick self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_Pick self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_Pick self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_Pick self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_Pick_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_Pick self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_Pick self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_Pick self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_Pick self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Pick_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_Pick self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_Pick self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_Pick self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_Pick self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_Pick self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_Pick self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_Pick self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_Pick self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_Pick self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_Pick self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_Pick self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_Pick self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_Pick self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Pick_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_Pick self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Pick_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_Pick self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_Pick self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_Pick self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_Pick self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_Pick self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_Pick self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_Pick self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_Pick self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_Pick self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_Pick self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_Pick self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_Pick_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_Pick self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_Pick self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_Pick self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_Pick self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Pick_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_Pick self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_Pick_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_Pick self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_Pick_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_Pick self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_Pick self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_Pick self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_Pick self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Pick_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_Pick self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_Pick_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_Pick self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_Pick self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_Pick_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_Pick self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Pick_DecrementRefCounter(self, *args)

Handle_IGESGraph_Pick_swigregister = _IGESGraph.Handle_IGESGraph_Pick_swigregister
Handle_IGESGraph_Pick_swigregister(Handle_IGESGraph_Pick)

def Handle_IGESGraph_Pick_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_Pick_DownCast(thing)
Handle_IGESGraph_Pick_DownCast = _IGESGraph.Handle_IGESGraph_Pick_DownCast

class Handle_IGESGraph_DrawingUnits(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_DrawingUnits self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_DrawingUnits self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_DrawingUnits self, IGESGraph_DrawingUnits thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_DrawingUnits self, Handle_IGESGraph_DrawingUnits theHandle) -> Handle_IGESGraph_DrawingUnits
        assign(Handle_IGESGraph_DrawingUnits self, IGESGraph_DrawingUnits thePtr) -> Handle_IGESGraph_DrawingUnits
        assign(Handle_IGESGraph_DrawingUnits self, Handle_IGESGraph_DrawingUnits theHandle) -> Handle_IGESGraph_DrawingUnits

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_DrawingUnits self) -> IGESGraph_DrawingUnits

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_DrawingUnits self) -> IGESGraph_DrawingUnits

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_DrawingUnits self) -> IGESGraph_DrawingUnits

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_DrawingUnits___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_DrawingUnits___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_DrawingUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_DrawingUnits_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_DrawingUnits

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_DrawingUnits self, Standard_Integer const nbProps, Standard_Integer const aFlag, Handle_TCollection_HAsciiString aUnit)

        This method is used to set the fields of the class
        DrawingUnits
        - nbProps : Number of property values (NP = 2)
        - aFlag   : DrawingUnits Flag
        - aUnit   : DrawingUnits Name

        :type nbProps: int
        :type aFlag: int
        :type aUnit: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NbPropertyValues(self, *args)


    def Flag(self, *args):
        """
        Flag(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        returns the drawing space units of <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Flag(self, *args)


    def Unit(self, *args):
        """
        Unit(Handle_IGESGraph_DrawingUnits self) -> Handle_TCollection_HAsciiString

        returns the name of the drawing space units of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Unit(self, *args)


    def UnitValue(self, *args):
        """
        UnitValue(Handle_IGESGraph_DrawingUnits self) -> Standard_Real

        Computes the value of the unit, in meters, according Flag
        (same values as for GlobalSection from IGESData)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_UnitValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_DrawingUnits self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DrawingUnits_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DrawingUnits_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_DrawingUnits self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_DrawingUnits self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_DrawingUnits self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_DrawingUnits self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_DrawingUnits self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_DrawingUnits self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_DrawingUnits self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_DrawingUnits self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_DrawingUnits self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_DrawingUnits self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_DrawingUnits self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_DrawingUnits self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_DrawingUnits self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_DrawingUnits self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_DrawingUnits self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_DrawingUnits self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_DrawingUnits self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_DrawingUnits self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_DrawingUnits self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_DrawingUnits self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_DrawingUnits self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_DrawingUnits self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_DrawingUnits self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_DrawingUnits self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_DrawingUnits self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_DrawingUnits self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_DrawingUnits self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_DrawingUnits self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_DrawingUnits self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingUnits_DecrementRefCounter(self, *args)

Handle_IGESGraph_DrawingUnits_swigregister = _IGESGraph.Handle_IGESGraph_DrawingUnits_swigregister
Handle_IGESGraph_DrawingUnits_swigregister(Handle_IGESGraph_DrawingUnits)

def Handle_IGESGraph_DrawingUnits_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_DrawingUnits_DownCast(thing)
Handle_IGESGraph_DrawingUnits_DownCast = _IGESGraph.Handle_IGESGraph_DrawingUnits_DownCast

class Handle_IGESGraph_LineFontPredefined(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_LineFontPredefined self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_LineFontPredefined self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_LineFontPredefined self, IGESGraph_LineFontPredefined thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_LineFontPredefined self, Handle_IGESGraph_LineFontPredefined theHandle) -> Handle_IGESGraph_LineFontPredefined
        assign(Handle_IGESGraph_LineFontPredefined self, IGESGraph_LineFontPredefined thePtr) -> Handle_IGESGraph_LineFontPredefined
        assign(Handle_IGESGraph_LineFontPredefined self, Handle_IGESGraph_LineFontPredefined theHandle) -> Handle_IGESGraph_LineFontPredefined

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_LineFontPredefined self) -> IGESGraph_LineFontPredefined

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_LineFontPredefined self) -> IGESGraph_LineFontPredefined

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_LineFontPredefined self) -> IGESGraph_LineFontPredefined

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_LineFontPredefined___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_LineFontPredefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_LineFontPredefined_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_LineFontPredefined

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_LineFontPredefined self, Standard_Integer const nbProps, Standard_Integer const aLineFontPatternCode)

        This method is used to set the fields of the class
        LineFontPredefined
        - nbProps              : Number of property values (NP = 1)
        - aLineFontPatternCode : Line Font Pattern Code

        :type nbProps: int
        :type aLineFontPatternCode: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NbPropertyValues(self, *args)


    def LineFontPatternCode(self, *args):
        """
        LineFontPatternCode(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        returns the Line Font Pattern Code of <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LineFontPatternCode(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_LineFontPredefined self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontPredefined_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontPredefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_LineFontPredefined self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_LineFontPredefined self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_LineFontPredefined self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_LineFontPredefined self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_LineFontPredefined self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_LineFontPredefined self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_LineFontPredefined self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_LineFontPredefined self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_LineFontPredefined self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_LineFontPredefined self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_LineFontPredefined self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_LineFontPredefined self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_LineFontPredefined self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_LineFontPredefined self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_LineFontPredefined self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_LineFontPredefined self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_LineFontPredefined self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_LineFontPredefined self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_LineFontPredefined self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_LineFontPredefined self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_LineFontPredefined self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_LineFontPredefined self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_LineFontPredefined self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_LineFontPredefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_LineFontPredefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_LineFontPredefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_LineFontPredefined self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_LineFontPredefined self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_LineFontPredefined self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DecrementRefCounter(self, *args)

Handle_IGESGraph_LineFontPredefined_swigregister = _IGESGraph.Handle_IGESGraph_LineFontPredefined_swigregister
Handle_IGESGraph_LineFontPredefined_swigregister(Handle_IGESGraph_LineFontPredefined)

def Handle_IGESGraph_LineFontPredefined_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_LineFontPredefined_DownCast(thing)
Handle_IGESGraph_LineFontPredefined_DownCast = _IGESGraph.Handle_IGESGraph_LineFontPredefined_DownCast

class IGESGraph_HArray1OfTextFontDef(NCollection_Array1_Handle_IGESGraph_TextFontDef, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_HArray1OfTextFontDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_HArray1OfTextFontDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_HArray1OfTextFontDef self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESGraph_HArray1OfTextFontDef
        __init__(IGESGraph_HArray1OfTextFontDef self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESGraph_TextFontDef theValue) -> IGESGraph_HArray1OfTextFontDef
        __init__(IGESGraph_HArray1OfTextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> IGESGraph_HArray1OfTextFontDef

        :type theOther: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextFontDef

        """
        this = _IGESGraph.new_IGESGraph_HArray1OfTextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextFontDef

        """
        res = _IGESGraph.IGESGraph_HArray1OfTextFontDef_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextFontDef

        """
        return _IGESGraph.IGESGraph_HArray1OfTextFontDef_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_HArray1OfTextFontDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_HArray1OfTextFontDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_HArray1OfTextFontDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_HArray1OfTextFontDef
IGESGraph_HArray1OfTextFontDef_swigregister = _IGESGraph.IGESGraph_HArray1OfTextFontDef_swigregister
IGESGraph_HArray1OfTextFontDef_swigregister(IGESGraph_HArray1OfTextFontDef)

def IGESGraph_HArray1OfTextFontDef_get_type_name(*args):
    """
    IGESGraph_HArray1OfTextFontDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_HArray1OfTextFontDef_get_type_name(*args)

def IGESGraph_HArray1OfTextFontDef_get_type_descriptor(*args):
    """
    IGESGraph_HArray1OfTextFontDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_HArray1OfTextFontDef_get_type_descriptor(*args)

class IGESGraph_ToolTextDisplayTemplate(object):
    """
    Tool to work on a TextDisplayTemplate. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolTextDisplayTemplate self) -> IGESGraph_ToolTextDisplayTemplate

        Returns a ToolTextDisplayTemplate, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolTextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TextDisplayTemplate <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate entfrom, Handle_IGESGraph_TextDisplayTemplate entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolTextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolTextDisplayTemplate_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolTextDisplayTemplate
IGESGraph_ToolTextDisplayTemplate_swigregister = _IGESGraph.IGESGraph_ToolTextDisplayTemplate_swigregister
IGESGraph_ToolTextDisplayTemplate_swigregister(IGESGraph_ToolTextDisplayTemplate)

class IGESGraph_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESGraph
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_SpecificModule self) -> IGESGraph_SpecificModule

        Creates a SpecificModule from IGESGraph & puts it into SpecificLib


        """
        this = _IGESGraph.new_IGESGraph_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESGraph

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (DrawingSize,DrawingUnits,HighLight,IntercharacterSpacing,
        LineFontPredefined,NominalSize,Pick,UniformRectGrid)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_SpecificModule
IGESGraph_SpecificModule_swigregister = _IGESGraph.IGESGraph_SpecificModule_swigregister
IGESGraph_SpecificModule_swigregister(IGESGraph_SpecificModule)

def IGESGraph_SpecificModule_get_type_name(*args):
    """
    IGESGraph_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_SpecificModule_get_type_name(*args)

def IGESGraph_SpecificModule_get_type_descriptor(*args):
    """
    IGESGraph_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_SpecificModule_get_type_descriptor(*args)

class Handle_IGESGraph_DrawingSize(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_DrawingSize self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_DrawingSize self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_DrawingSize self, IGESGraph_DrawingSize thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_DrawingSize self, Handle_IGESGraph_DrawingSize theHandle) -> Handle_IGESGraph_DrawingSize
        assign(Handle_IGESGraph_DrawingSize self, IGESGraph_DrawingSize thePtr) -> Handle_IGESGraph_DrawingSize
        assign(Handle_IGESGraph_DrawingSize self, Handle_IGESGraph_DrawingSize theHandle) -> Handle_IGESGraph_DrawingSize

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_DrawingSize self) -> IGESGraph_DrawingSize

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_DrawingSize self) -> IGESGraph_DrawingSize

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_DrawingSize self) -> IGESGraph_DrawingSize

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_DrawingSize___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_DrawingSize___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_DrawingSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_DrawingSize_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_DrawingSize

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_DrawingSize self, Standard_Integer const nbProps, Standard_Real const aXSize, Standard_Real const aYSize)

        This method is used to set the fields of the class
        DrawingSize
        - nbProps : Number of property values (NP = 2)
        - aXSize  : Extent of Drawing along positive XD axis
        - aYSize  : Extent of Drawing along positive YD axis

        :type nbProps: int
        :type aXSize: float
        :type aYSize: float

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        returns the number of property values in <me> (NP = 2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NbPropertyValues(self, *args)


    def XSize(self, *args):
        """
        XSize(Handle_IGESGraph_DrawingSize self) -> Standard_Real

        returns the extent of Drawing along positive XD axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_XSize(self, *args)


    def YSize(self, *args):
        """
        YSize(Handle_IGESGraph_DrawingSize self) -> Standard_Real

        returns the extent of Drawing along positive YD axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_YSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_DrawingSize self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DrawingSize_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_DrawingSize_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_DrawingSize self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_DrawingSize self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_DrawingSize self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_DrawingSize self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_DrawingSize self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_DrawingSize self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_DrawingSize self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_DrawingSize self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_DrawingSize self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_DrawingSize self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_DrawingSize self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_DrawingSize self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_DrawingSize self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_DrawingSize self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_DrawingSize self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_DrawingSize self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_DrawingSize self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_DrawingSize self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_DrawingSize self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_DrawingSize self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_DrawingSize self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_DrawingSize self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_DrawingSize self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_DrawingSize self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_DrawingSize self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_DrawingSize self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_DrawingSize self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_DrawingSize self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_DrawingSize self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_DrawingSize self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_DrawingSize self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_DrawingSize self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_DrawingSize self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_DrawingSize self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_DrawingSize self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_DrawingSize self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_DrawingSize self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_DrawingSize self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_DrawingSize_DecrementRefCounter(self, *args)

Handle_IGESGraph_DrawingSize_swigregister = _IGESGraph.Handle_IGESGraph_DrawingSize_swigregister
Handle_IGESGraph_DrawingSize_swigregister(Handle_IGESGraph_DrawingSize)

def Handle_IGESGraph_DrawingSize_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_DrawingSize_DownCast(thing)
Handle_IGESGraph_DrawingSize_DownCast = _IGESGraph.Handle_IGESGraph_DrawingSize_DownCast

class Handle_IGESGraph_UniformRectGrid(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_UniformRectGrid self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_UniformRectGrid self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_UniformRectGrid self, IGESGraph_UniformRectGrid thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_UniformRectGrid self, Handle_IGESGraph_UniformRectGrid theHandle) -> Handle_IGESGraph_UniformRectGrid
        assign(Handle_IGESGraph_UniformRectGrid self, IGESGraph_UniformRectGrid thePtr) -> Handle_IGESGraph_UniformRectGrid
        assign(Handle_IGESGraph_UniformRectGrid self, Handle_IGESGraph_UniformRectGrid theHandle) -> Handle_IGESGraph_UniformRectGrid

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_UniformRectGrid self) -> IGESGraph_UniformRectGrid

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_UniformRectGrid self) -> IGESGraph_UniformRectGrid

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_UniformRectGrid self) -> IGESGraph_UniformRectGrid

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_UniformRectGrid___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_UniformRectGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_UniformRectGrid_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_UniformRectGrid

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_UniformRectGrid self, Standard_Integer const nbProps, Standard_Integer const finite, Standard_Integer const line, Standard_Integer const weighted, gp_XY aGridPoint, gp_XY aGridSpacing, Standard_Integer const pointsX, Standard_Integer const pointsY)

        This method is used to set the fields of the class
        UniformRectGrid
        - nbProps      : Number of property values (NP = 9)
        - finite       : Finite/Infinite grid flag
        - line         : Line/Point grid flag
        - weighted     : Weighted/Unweighted grid flag
        - aGridPoint   : Point on the grid
        - aGridSpacing : Grid spacing
        - pointsX      : No. of points/lines in X Direction
        - pointsY      : No. of points/lines in Y Direction

        :type nbProps: int
        :type finite: int
        :type line: int
        :type weighted: int
        :type aGridPoint: OCC.wrapper.gp.gp_XY
        :type aGridSpacing: OCC.wrapper.gp.gp_XY
        :type pointsX: int
        :type pointsY: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the number of property values in <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbPropertyValues(self, *args)


    def IsFinite(self, *args):
        """
        IsFinite(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is an infinite grid,
        True  if <me> is a finite grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsFinite(self, *args)


    def IsLine(self, *args):
        """
        IsLine(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is a Point grid,
        True  if <me> is a Line grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsLine(self, *args)


    def IsWeighted(self, *args):
        """
        IsWeighted(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns False if <me> is a Weighted grid,
        True  if <me> is not a Weighted grid.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsWeighted(self, *args)


    def GridPoint(self, *args):
        """
        GridPoint(Handle_IGESGraph_UniformRectGrid self) -> gp_Pnt2d

        returns coordinates of lower left corner,
        if <me> is a finite grid,
        coordinates of an arbitrary point,
        if <me> is an infinite grid.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_GridPoint(self, *args)


    def GridSpacing(self, *args):
        """
        GridSpacing(Handle_IGESGraph_UniformRectGrid self) -> gp_Vec2d

        returns the grid-spacing in drawing coordinates.

        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_GridSpacing(self, *args)


    def NbPointsX(self, *args):
        """
        NbPointsX(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the no. of points/lines in X direction
        (only applicable if IsFinite() = 1, i.e: a finite grid).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbPointsX(self, *args)


    def NbPointsY(self, *args):
        """
        NbPointsY(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        returns the no. of points/lines in Y direction
        (only applicable if IsFinite() = 1, i.e: a finite grid).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbPointsY(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_UniformRectGrid self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_UniformRectGrid_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_UniformRectGrid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_UniformRectGrid self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_UniformRectGrid self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_UniformRectGrid self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_UniformRectGrid self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_UniformRectGrid self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_UniformRectGrid self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_UniformRectGrid self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_UniformRectGrid self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_UniformRectGrid self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_UniformRectGrid self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_UniformRectGrid self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_UniformRectGrid self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_UniformRectGrid self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_UniformRectGrid self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_UniformRectGrid self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_UniformRectGrid self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_UniformRectGrid self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_UniformRectGrid self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_UniformRectGrid self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_UniformRectGrid self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_UniformRectGrid self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_UniformRectGrid self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_UniformRectGrid self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_UniformRectGrid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_UniformRectGrid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_UniformRectGrid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_UniformRectGrid self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_UniformRectGrid self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_UniformRectGrid self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DecrementRefCounter(self, *args)

Handle_IGESGraph_UniformRectGrid_swigregister = _IGESGraph.Handle_IGESGraph_UniformRectGrid_swigregister
Handle_IGESGraph_UniformRectGrid_swigregister(Handle_IGESGraph_UniformRectGrid)

def Handle_IGESGraph_UniformRectGrid_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_UniformRectGrid_DownCast(thing)
Handle_IGESGraph_UniformRectGrid_DownCast = _IGESGraph.Handle_IGESGraph_UniformRectGrid_DownCast

class Handle_IGESGraph_HArray1OfColor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_HArray1OfColor self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_HArray1OfColor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_HArray1OfColor self, IGESGraph_HArray1OfColor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_HArray1OfColor self, Handle_IGESGraph_HArray1OfColor theHandle) -> Handle_IGESGraph_HArray1OfColor
        assign(Handle_IGESGraph_HArray1OfColor self, IGESGraph_HArray1OfColor thePtr) -> Handle_IGESGraph_HArray1OfColor
        assign(Handle_IGESGraph_HArray1OfColor self, Handle_IGESGraph_HArray1OfColor theHandle) -> Handle_IGESGraph_HArray1OfColor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_HArray1OfColor self) -> IGESGraph_HArray1OfColor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_HArray1OfColor self) -> IGESGraph_HArray1OfColor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_HArray1OfColor self) -> IGESGraph_HArray1OfColor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_HArray1OfColor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_HArray1OfColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_HArray1OfColor_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_HArray1OfColor

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfColor

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfColor_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGraph_HArray1OfColor self) -> NCollection_Array1_Handle_IGESGraph_Color

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfColor

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_HArray1OfColor self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfColor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_HArray1OfColor self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_HArray1OfColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_HArray1OfColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_HArray1OfColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_HArray1OfColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_HArray1OfColor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_HArray1OfColor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_HArray1OfColor self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_HArray1OfColor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfColor_DecrementRefCounter(self, *args)

Handle_IGESGraph_HArray1OfColor_swigregister = _IGESGraph.Handle_IGESGraph_HArray1OfColor_swigregister
Handle_IGESGraph_HArray1OfColor_swigregister(Handle_IGESGraph_HArray1OfColor)

def Handle_IGESGraph_HArray1OfColor_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_HArray1OfColor_DownCast(thing)
Handle_IGESGraph_HArray1OfColor_DownCast = _IGESGraph.Handle_IGESGraph_HArray1OfColor_DownCast

class IGESGraph_ToolDefinitionLevel(object):
    """
    Tool to work on a DefinitionLevel. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolDefinitionLevel self) -> IGESGraph_ToolDefinitionLevel

        Returns a ToolDefinitionLevel, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolDefinitionLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DefinitionLevel <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel entfrom, Handle_IGESGraph_DefinitionLevel entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolDefinitionLevel self, Handle_IGESGraph_DefinitionLevel ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DefinitionLevel
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolDefinitionLevel_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolDefinitionLevel
IGESGraph_ToolDefinitionLevel_swigregister = _IGESGraph.IGESGraph_ToolDefinitionLevel_swigregister
IGESGraph_ToolDefinitionLevel_swigregister(IGESGraph_ToolDefinitionLevel)

class IGESGraph_TextDisplayTemplate(IGESData.IGESData_IGESEntity):
    """
    defines IGES TextDisplayTemplate Entity,
    Type <312>, form <0, 1> in package IGESGraph

    Used to set parameters for display of information
    which has been logically included in another entity
    as a parameter value
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_TextDisplayTemplate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_TextDisplayTemplate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_TextDisplayTemplate self) -> IGESGraph_TextDisplayTemplate

        defines IGES TextDisplayTemplate Entity,
        Type <312>, form <0, 1> in package IGESGraph

        Used to set parameters for display of information
        which has been logically included in another entity
        as a parameter value
        """
        this = _IGESGraph.new_IGESGraph_TextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESGraph_TextDisplayTemplate self, Standard_Real const aWidth, Standard_Real const aHeight, Standard_Integer const aFontCode, Handle_IGESGraph_TextFontDef aFontEntity, Standard_Real const aSlantAngle, Standard_Real const aRotationAngle, Standard_Integer const aMirrorFlag, Standard_Integer const aRotationFlag, gp_XYZ aCorner)

        This method is used to set the fields of the class
        TextDisplayTemplate
        - aWidth         : Character box width
        - aHeight        : Character box height
        - afontCode      : Font code
        - aFontEntity    : Text Font Definition Entity
        - aSlantAngle    : Slant angle
        - aRotationAngle : Rotation angle
        - aMirrorFlag    : Mirror Flag
        - aRotationFlag  : Rotate internal text flag
        - aCorner        : Lower left corner coordinates(Form No. 0),
        Increments from coordinates  (Form No. 1)

        :type aWidth: float
        :type aHeight: float
        :type aFontCode: int
        :type aFontEntity: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type aSlantAngle: float
        :type aRotationAngle: float
        :type aMirrorFlag: int
        :type aRotationFlag: int
        :type aCorner: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_Init(self, *args)


    def SetIncremental(self, *args):
        """
        SetIncremental(IGESGraph_TextDisplayTemplate self, Standard_Boolean const mode)

        Sets <me> to be Incremental (Form 1) if <mode> is True,
        or Basolute (Form 0) else

        :type mode: bool

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_SetIncremental(self, *args)


    def IsIncremental(self, *args):
        """
        IsIncremental(IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        returns True  if entity is Incremental (Form 1).
        False if entity is Absolute    (Form 0).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_IsIncremental(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Character Box Width.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Character Box Height.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_BoxHeight(self, *args)


    def IsFontEntity(self, *args):
        """
        IsFontEntity(IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        returns False if theFontEntity is Null, True otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_IsFontEntity(self, *args)


    def FontCode(self, *args):
        """
        FontCode(IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns the font code.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_FontCode(self, *args)


    def FontEntity(self, *args):
        """
        FontEntity(IGESGraph_TextDisplayTemplate self) -> Handle_IGESGraph_TextFontDef

        returns Text Font Definition Entity used to define the font.

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_FontEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns slant angle of character in radians.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Rotation angle of text block in radians.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns Mirror flag
        Mirror flag : 0 = no mirroring.
        1 = mirror axis perpendicular to text base line.
        2 = mirror axis is text base line.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_MirrorFlag(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns Rotate internal text flag.
        Rotate internal text flag : 0 = text horizontal.
        1 = text vertical.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_RotateFlag(self, *args)


    def StartingCorner(self, *args):
        """
        StartingCorner(IGESGraph_TextDisplayTemplate self) -> gp_Pnt

        If IsIncremental() returns False,
        gets coordinates of lower left corner
        of first character box.
        If IsIncremental() returns True,
        gets increments from X, Y, Z coordinates
        found in parent entity.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_StartingCorner(self, *args)


    def TransformedStartingCorner(self, *args):
        """
        TransformedStartingCorner(IGESGraph_TextDisplayTemplate self) -> gp_Pnt

        If IsIncremental() returns False,
        gets coordinates of lower left corner
        of first character box.
        If IsIncremental() returns True,
        gets increments from X, Y, Z coordinates
        found in parent entity.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_TransformedStartingCorner(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_TextDisplayTemplate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_TextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_TextDisplayTemplate
IGESGraph_TextDisplayTemplate_swigregister = _IGESGraph.IGESGraph_TextDisplayTemplate_swigregister
IGESGraph_TextDisplayTemplate_swigregister(IGESGraph_TextDisplayTemplate)

def IGESGraph_TextDisplayTemplate_get_type_name(*args):
    """
    IGESGraph_TextDisplayTemplate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_TextDisplayTemplate_get_type_name(*args)

def IGESGraph_TextDisplayTemplate_get_type_descriptor(*args):
    """
    IGESGraph_TextDisplayTemplate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_TextDisplayTemplate_get_type_descriptor(*args)

class NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextDisplayTemplate > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextDisplayTemplate > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextDisplayTemplate > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextDisplayTemplate > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGraph.new_NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate theOther) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate theOther) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate theOther) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate
        assign(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate theOther) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESGraph_TextDisplayTemplate

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESGraph_TextDisplayTemplate

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const theIndex) -> Handle_IGESGraph_TextDisplayTemplate

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const theIndex, Handle_IGESGraph_TextDisplayTemplate theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_Resize(self, *args)

    __swig_destroy__ = _IGESGraph.delete_NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate
NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_swigregister = _IGESGraph.NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_swigregister
NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate_swigregister(NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate)


try:
	IGESGraph_Array1OfTextDisplayTemplate = NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESGraph_NominalSize(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_NominalSize self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_NominalSize self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_NominalSize self, IGESGraph_NominalSize thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_NominalSize self, Handle_IGESGraph_NominalSize theHandle) -> Handle_IGESGraph_NominalSize
        assign(Handle_IGESGraph_NominalSize self, IGESGraph_NominalSize thePtr) -> Handle_IGESGraph_NominalSize
        assign(Handle_IGESGraph_NominalSize self, Handle_IGESGraph_NominalSize theHandle) -> Handle_IGESGraph_NominalSize

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_NominalSize self) -> IGESGraph_NominalSize

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_NominalSize self) -> IGESGraph_NominalSize

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_NominalSize self) -> IGESGraph_NominalSize

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_NominalSize___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_NominalSize___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_NominalSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_NominalSize_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_NominalSize

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_NominalSize self, Standard_Integer const nbProps, Standard_Real const aNominalSizeValue, Handle_TCollection_HAsciiString aNominalSizeName, Handle_TCollection_HAsciiString aStandardName)

        This method is used to set the fields of the class
        NominalSize
        - nbProps           : Number of property values (2 or 3)
        - aNominalSizeValue : NominalSize Value
        - aNominalSizeName  : NominalSize Name
        - aStandardName     : Name of relevant engineering standard

        :type nbProps: int
        :type aNominalSizeValue: float
        :type aNominalSizeName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aStandardName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NbPropertyValues(self, *args)


    def NominalSizeValue(self, *args):
        """
        NominalSizeValue(Handle_IGESGraph_NominalSize self) -> Standard_Real

        returns the value of <me>

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NominalSizeValue(self, *args)


    def NominalSizeName(self, *args):
        """
        NominalSizeName(Handle_IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        returns the name of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NominalSizeName(self, *args)


    def HasStandardName(self, *args):
        """
        HasStandardName(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        returns True if an engineering Standard is defined for <me>
        else, returns False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasStandardName(self, *args)


    def StandardName(self, *args):
        """
        StandardName(Handle_IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        returns the name of the relevant engineering standard of <me>

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_StandardName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_NominalSize self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_NominalSize_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_NominalSize_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_NominalSize self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_NominalSize self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_NominalSize self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_NominalSize self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_NominalSize self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_NominalSize self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_NominalSize self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_NominalSize self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_NominalSize self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_NominalSize self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_NominalSize self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_NominalSize self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_NominalSize self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_NominalSize self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_NominalSize self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_NominalSize self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_NominalSize self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_NominalSize self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_NominalSize self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_NominalSize self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_NominalSize self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_NominalSize self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_NominalSize self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_NominalSize self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_NominalSize self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_NominalSize self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_NominalSize self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_NominalSize self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_NominalSize self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_NominalSize self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_NominalSize self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_NominalSize self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_NominalSize self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_NominalSize self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_NominalSize self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_NominalSize self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_NominalSize self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_NominalSize self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_NominalSize self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_NominalSize self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_NominalSize self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_NominalSize self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_NominalSize_DecrementRefCounter(self, *args)

Handle_IGESGraph_NominalSize_swigregister = _IGESGraph.Handle_IGESGraph_NominalSize_swigregister
Handle_IGESGraph_NominalSize_swigregister(Handle_IGESGraph_NominalSize)

def Handle_IGESGraph_NominalSize_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_NominalSize_DownCast(thing)
Handle_IGESGraph_NominalSize_DownCast = _IGESGraph.Handle_IGESGraph_NominalSize_DownCast

class Handle_IGESGraph_IntercharacterSpacing(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_IntercharacterSpacing self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_IntercharacterSpacing self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_IntercharacterSpacing self, IGESGraph_IntercharacterSpacing thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing theHandle) -> Handle_IGESGraph_IntercharacterSpacing
        assign(Handle_IGESGraph_IntercharacterSpacing self, IGESGraph_IntercharacterSpacing thePtr) -> Handle_IGESGraph_IntercharacterSpacing
        assign(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESGraph_IntercharacterSpacing theHandle) -> Handle_IGESGraph_IntercharacterSpacing

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_IntercharacterSpacing self) -> IGESGraph_IntercharacterSpacing

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_IntercharacterSpacing self) -> IGESGraph_IntercharacterSpacing

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_IntercharacterSpacing self) -> IGESGraph_IntercharacterSpacing

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_IntercharacterSpacing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_IntercharacterSpacing

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_IntercharacterSpacing self, Standard_Integer const nbProps, Standard_Real const anISpace)

        This method is used to set the fields of the class
        IntercharacterSpacing
        - nbProps  : Number of property values (NP = 1)
        - anISpace : Intercharacter spacing percentage

        :type nbProps: int
        :type anISpace: float

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        returns the number of property values in <me>

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NbPropertyValues(self, *args)


    def ISpace(self, *args):
        """
        ISpace(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Real

        returns the Intercharacter Space of <me> in percentage
        of the text height (Range = 0..100)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_ISpace(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_IntercharacterSpacing self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_IntercharacterSpacing self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_IntercharacterSpacing self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_IntercharacterSpacing self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_IntercharacterSpacing self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_IntercharacterSpacing self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_IntercharacterSpacing self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_IntercharacterSpacing self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_IntercharacterSpacing self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_IntercharacterSpacing self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_IntercharacterSpacing self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_IntercharacterSpacing self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_IntercharacterSpacing self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_IntercharacterSpacing self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_IntercharacterSpacing self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_IntercharacterSpacing self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_IntercharacterSpacing self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_IntercharacterSpacing self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_IntercharacterSpacing self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_IntercharacterSpacing self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_IntercharacterSpacing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_IntercharacterSpacing self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_IntercharacterSpacing self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_IntercharacterSpacing self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_IntercharacterSpacing self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DecrementRefCounter(self, *args)

Handle_IGESGraph_IntercharacterSpacing_swigregister = _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_swigregister
Handle_IGESGraph_IntercharacterSpacing_swigregister(Handle_IGESGraph_IntercharacterSpacing)

def Handle_IGESGraph_IntercharacterSpacing_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DownCast(thing)
Handle_IGESGraph_IntercharacterSpacing_DownCast = _IGESGraph.Handle_IGESGraph_IntercharacterSpacing_DownCast

class Handle_IGESGraph_TextDisplayTemplate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_TextDisplayTemplate self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_TextDisplayTemplate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_TextDisplayTemplate self, IGESGraph_TextDisplayTemplate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate theHandle) -> Handle_IGESGraph_TextDisplayTemplate
        assign(Handle_IGESGraph_TextDisplayTemplate self, IGESGraph_TextDisplayTemplate thePtr) -> Handle_IGESGraph_TextDisplayTemplate
        assign(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESGraph_TextDisplayTemplate theHandle) -> Handle_IGESGraph_TextDisplayTemplate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_TextDisplayTemplate self) -> IGESGraph_TextDisplayTemplate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_TextDisplayTemplate self) -> IGESGraph_TextDisplayTemplate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_TextDisplayTemplate self) -> IGESGraph_TextDisplayTemplate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_TextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_TextDisplayTemplate

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_TextDisplayTemplate self, Standard_Real const aWidth, Standard_Real const aHeight, Standard_Integer const aFontCode, Handle_IGESGraph_TextFontDef aFontEntity, Standard_Real const aSlantAngle, Standard_Real const aRotationAngle, Standard_Integer const aMirrorFlag, Standard_Integer const aRotationFlag, gp_XYZ aCorner)

        This method is used to set the fields of the class
        TextDisplayTemplate
        - aWidth         : Character box width
        - aHeight        : Character box height
        - afontCode      : Font code
        - aFontEntity    : Text Font Definition Entity
        - aSlantAngle    : Slant angle
        - aRotationAngle : Rotation angle
        - aMirrorFlag    : Mirror Flag
        - aRotationFlag  : Rotate internal text flag
        - aCorner        : Lower left corner coordinates(Form No. 0),
        Increments from coordinates  (Form No. 1)

        :type aWidth: float
        :type aHeight: float
        :type aFontCode: int
        :type aFontEntity: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type aSlantAngle: float
        :type aRotationAngle: float
        :type aMirrorFlag: int
        :type aRotationFlag: int
        :type aCorner: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Init(self, *args)


    def SetIncremental(self, *args):
        """
        SetIncremental(Handle_IGESGraph_TextDisplayTemplate self, Standard_Boolean const mode)

        Sets <me> to be Incremental (Form 1) if <mode> is True,
        or Basolute (Form 0) else

        :type mode: bool

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SetIncremental(self, *args)


    def IsIncremental(self, *args):
        """
        IsIncremental(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        returns True  if entity is Incremental (Form 1).
        False if entity is Absolute    (Form 0).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IsIncremental(self, *args)


    def BoxWidth(self, *args):
        """
        BoxWidth(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Character Box Width.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_BoxWidth(self, *args)


    def BoxHeight(self, *args):
        """
        BoxHeight(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Character Box Height.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_BoxHeight(self, *args)


    def IsFontEntity(self, *args):
        """
        IsFontEntity(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        returns False if theFontEntity is Null, True otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IsFontEntity(self, *args)


    def FontCode(self, *args):
        """
        FontCode(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns the font code.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_FontCode(self, *args)


    def FontEntity(self, *args):
        """
        FontEntity(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESGraph_TextFontDef

        returns Text Font Definition Entity used to define the font.

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_FontEntity(self, *args)


    def SlantAngle(self, *args):
        """
        SlantAngle(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns slant angle of character in radians.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SlantAngle(self, *args)


    def RotationAngle(self, *args):
        """
        RotationAngle(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Real

        returns Rotation angle of text block in radians.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_RotationAngle(self, *args)


    def MirrorFlag(self, *args):
        """
        MirrorFlag(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns Mirror flag
        Mirror flag : 0 = no mirroring.
        1 = mirror axis perpendicular to text base line.
        2 = mirror axis is text base line.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_MirrorFlag(self, *args)


    def RotateFlag(self, *args):
        """
        RotateFlag(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        returns Rotate internal text flag.
        Rotate internal text flag : 0 = text horizontal.
        1 = text vertical.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_RotateFlag(self, *args)


    def StartingCorner(self, *args):
        """
        StartingCorner(Handle_IGESGraph_TextDisplayTemplate self) -> gp_Pnt

        If IsIncremental() returns False,
        gets coordinates of lower left corner
        of first character box.
        If IsIncremental() returns True,
        gets increments from X, Y, Z coordinates
        found in parent entity.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_StartingCorner(self, *args)


    def TransformedStartingCorner(self, *args):
        """
        TransformedStartingCorner(Handle_IGESGraph_TextDisplayTemplate self) -> gp_Pnt

        If IsIncremental() returns False,
        gets coordinates of lower left corner
        of first character box.
        If IsIncremental() returns True,
        gets increments from X, Y, Z coordinates
        found in parent entity.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_TransformedStartingCorner(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_TextDisplayTemplate self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_TextDisplayTemplate self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_TextDisplayTemplate self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_TextDisplayTemplate self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_TextDisplayTemplate self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_TextDisplayTemplate self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_TextDisplayTemplate self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_TextDisplayTemplate self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_TextDisplayTemplate self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_TextDisplayTemplate self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_TextDisplayTemplate self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_TextDisplayTemplate self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_TextDisplayTemplate self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_TextDisplayTemplate self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_TextDisplayTemplate self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_TextDisplayTemplate self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_TextDisplayTemplate self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_TextDisplayTemplate self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_TextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_TextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_TextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_TextDisplayTemplate self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_TextDisplayTemplate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DecrementRefCounter(self, *args)

Handle_IGESGraph_TextDisplayTemplate_swigregister = _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_swigregister
Handle_IGESGraph_TextDisplayTemplate_swigregister(Handle_IGESGraph_TextDisplayTemplate)

def Handle_IGESGraph_TextDisplayTemplate_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DownCast(thing)
Handle_IGESGraph_TextDisplayTemplate_DownCast = _IGESGraph.Handle_IGESGraph_TextDisplayTemplate_DownCast

class IGESGraph_ToolDrawingSize(object):
    """
    Tool to work on a DrawingSize. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolDrawingSize self) -> IGESGraph_ToolDrawingSize

        Returns a ToolDrawingSize, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolDrawingSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DrawingSize <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DrawingSize
        (NbPropertyValues forced to 2)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize entfrom, Handle_IGESGraph_DrawingSize entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolDrawingSize self, Handle_IGESGraph_DrawingSize ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingSize
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolDrawingSize_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolDrawingSize
IGESGraph_ToolDrawingSize_swigregister = _IGESGraph.IGESGraph_ToolDrawingSize_swigregister
IGESGraph_ToolDrawingSize_swigregister(IGESGraph_ToolDrawingSize)

class IGESGraph_ToolHighLight(object):
    """
    Tool to work on a HighLight. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolHighLight self) -> IGESGraph_ToolHighLight

        Returns a ToolHighLight, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolHighLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolHighLight_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolHighLight_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent, Interface_EntityIterator iter)

        Lists the Entities shared by a HighLight <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolHighLight_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a HighLight
        (NbPropertyValues forced to 1)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolHighLight_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolHighLight_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolHighLight_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight entfrom, Handle_IGESGraph_HighLight entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolHighLight_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolHighLight self, Handle_IGESGraph_HighLight ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_HighLight
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolHighLight_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolHighLight
IGESGraph_ToolHighLight_swigregister = _IGESGraph.IGESGraph_ToolHighLight_swigregister
IGESGraph_ToolHighLight_swigregister(IGESGraph_ToolHighLight)

class IGESGraph_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Graph File Access Module for IGESGraph (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESGraph_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESGraph_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESGraph_ReadWriteModule self) -> IGESGraph_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESGraph.new_IGESGraph_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESGraph_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESGraph

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.IGESGraph_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESGraph

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESGraph.IGESGraph_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.IGESGraph_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.IGESGraph_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ReadWriteModule
IGESGraph_ReadWriteModule_swigregister = _IGESGraph.IGESGraph_ReadWriteModule_swigregister
IGESGraph_ReadWriteModule_swigregister(IGESGraph_ReadWriteModule)

def IGESGraph_ReadWriteModule_get_type_name(*args):
    """
    IGESGraph_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESGraph.IGESGraph_ReadWriteModule_get_type_name(*args)

def IGESGraph_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESGraph_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESGraph.IGESGraph_ReadWriteModule_get_type_descriptor(*args)

class Handle_IGESGraph_LineFontDefTemplate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_LineFontDefTemplate self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_LineFontDefTemplate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_LineFontDefTemplate self, IGESGraph_LineFontDefTemplate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate theHandle) -> Handle_IGESGraph_LineFontDefTemplate
        assign(Handle_IGESGraph_LineFontDefTemplate self, IGESGraph_LineFontDefTemplate thePtr) -> Handle_IGESGraph_LineFontDefTemplate
        assign(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESGraph_LineFontDefTemplate theHandle) -> Handle_IGESGraph_LineFontDefTemplate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_LineFontDefTemplate self) -> IGESGraph_LineFontDefTemplate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_LineFontDefTemplate self) -> IGESGraph_LineFontDefTemplate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_LineFontDefTemplate self) -> IGESGraph_LineFontDefTemplate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_LineFontDefTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_LineFontDefTemplate

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_LineFontDefTemplate self, Standard_Integer const anOrientation, Handle_IGESBasic_SubfigureDef aTemplate, Standard_Real const aDistance, Standard_Real const aScale)

        This method is used to set the fields of the class
        LineFontDefTemplate
        - anOrientation : Orientation of Template figure on
        anchoring curve
        - aTemplate     : SubfigureDef entity used as Template figure
        - aDistance     : Distance between the neighbouring Template
        figures
        - aScale        : Scale factor applied to the Template figure

        :type anOrientation: int
        :type aTemplate: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type aDistance: float
        :type aScale: float

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Init(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        if return value = 0, Each Template display is oriented by aligning
        the axis of the SubfigureDef with the axis of
        the definition space of the anchoring curve.
        = 1, Each Template display is oriented by aligning
        X-axis of the SubfigureDef with the tangent
        vector of the anchoring curve at the point of
        incidence of the curve and the origin of
        subfigure.
        Similarly Z-axis is aligned.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Orientation(self, *args)


    def TemplateEntity(self, *args):
        """
        TemplateEntity(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESBasic_SubfigureDef

        returns SubfigureDef as the Entity used as Template figure.

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_TemplateEntity(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Real

        returns the Distance between any two Template figures on the
        anchoring curve.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Distance(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Real

        returns the Scaling factor applied to SubfigureDef to form
        Template figure.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Scale(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_LineFontDefTemplate self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_LineFontDefTemplate self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_LineFontDefTemplate self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_LineFontDefTemplate self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_LineFontDefTemplate self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_LineFontDefTemplate self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_LineFontDefTemplate self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_LineFontDefTemplate self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_LineFontDefTemplate self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_LineFontDefTemplate self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_LineFontDefTemplate self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_LineFontDefTemplate self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_LineFontDefTemplate self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_LineFontDefTemplate self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_LineFontDefTemplate self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_LineFontDefTemplate self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_LineFontDefTemplate self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_LineFontDefTemplate self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_LineFontDefTemplate self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_LineFontDefTemplate self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_LineFontDefTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_LineFontDefTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_LineFontDefTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_LineFontDefTemplate self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_LineFontDefTemplate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DecrementRefCounter(self, *args)

Handle_IGESGraph_LineFontDefTemplate_swigregister = _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_swigregister
Handle_IGESGraph_LineFontDefTemplate_swigregister(Handle_IGESGraph_LineFontDefTemplate)

def Handle_IGESGraph_LineFontDefTemplate_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DownCast(thing)
Handle_IGESGraph_LineFontDefTemplate_DownCast = _IGESGraph.Handle_IGESGraph_LineFontDefTemplate_DownCast

class NCollection_Array1_Handle_IGESGraph_Color(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESGraph_Color self) -> NCollection_Array1< opencascade::handle< IGESGraph_Color > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESGraph_Color self) -> NCollection_Array1< opencascade::handle< IGESGraph_Color > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESGraph_Color self) -> NCollection_Array1< opencascade::handle< IGESGraph_Color > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESGraph_Color self) -> NCollection_Array1< opencascade::handle< IGESGraph_Color > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESGraph.new_NCollection_Array1_Handle_IGESGraph_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESGraph_Color self, Handle_IGESGraph_Color theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESGraph_Color self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESGraph_Color self, NCollection_Array1_Handle_IGESGraph_Color theOther) -> NCollection_Array1_Handle_IGESGraph_Color

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESGraph_Color self, NCollection_Array1_Handle_IGESGraph_Color theOther) -> NCollection_Array1_Handle_IGESGraph_Color

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESGraph_Color self, NCollection_Array1_Handle_IGESGraph_Color theOther) -> NCollection_Array1_Handle_IGESGraph_Color
        assign(NCollection_Array1_Handle_IGESGraph_Color self, NCollection_Array1_Handle_IGESGraph_Color theOther) -> NCollection_Array1_Handle_IGESGraph_Color

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESGraph_Color self) -> Handle_IGESGraph_Color

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESGraph_Color self) -> Handle_IGESGraph_Color

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESGraph_Color self, Standard_Integer const theIndex) -> Handle_IGESGraph_Color

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESGraph_Color self, Standard_Integer const theIndex, Handle_IGESGraph_Color theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESGraph_Color self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_Resize(self, *args)

    __swig_destroy__ = _IGESGraph.delete_NCollection_Array1_Handle_IGESGraph_Color
NCollection_Array1_Handle_IGESGraph_Color_swigregister = _IGESGraph.NCollection_Array1_Handle_IGESGraph_Color_swigregister
NCollection_Array1_Handle_IGESGraph_Color_swigregister(NCollection_Array1_Handle_IGESGraph_Color)


try:
	IGESGraph_Array1OfColor = NCollection_Array1_Handle_IGESGraph_Color
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESGraph_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_ReadWriteModule self, IGESGraph_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_ReadWriteModule self, Handle_IGESGraph_ReadWriteModule theHandle) -> Handle_IGESGraph_ReadWriteModule
        assign(Handle_IGESGraph_ReadWriteModule self, IGESGraph_ReadWriteModule thePtr) -> Handle_IGESGraph_ReadWriteModule
        assign(Handle_IGESGraph_ReadWriteModule self, Handle_IGESGraph_ReadWriteModule theHandle) -> Handle_IGESGraph_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_ReadWriteModule self) -> IGESGraph_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_ReadWriteModule self) -> IGESGraph_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_ReadWriteModule self) -> IGESGraph_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESGraph_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESGraph

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESGraph_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESGraph

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESGraph_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESGraph_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESGraph_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESGraph_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESGraph_ReadWriteModule_swigregister = _IGESGraph.Handle_IGESGraph_ReadWriteModule_swigregister
Handle_IGESGraph_ReadWriteModule_swigregister(Handle_IGESGraph_ReadWriteModule)

def Handle_IGESGraph_ReadWriteModule_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_ReadWriteModule_DownCast(thing)
Handle_IGESGraph_ReadWriteModule_DownCast = _IGESGraph.Handle_IGESGraph_ReadWriteModule_DownCast

class IGESGraph_ToolDrawingUnits(object):
    """
    Tool to work on a DrawingUnits. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolDrawingUnits self) -> IGESGraph_ToolDrawingUnits

        Returns a ToolDrawingUnits, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolDrawingUnits(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DrawingUnits <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DrawingUnits
        (NbPropertyValues forced to 2)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits entfrom, Handle_IGESGraph_DrawingUnits entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolDrawingUnits self, Handle_IGESGraph_DrawingUnits ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_DrawingUnits
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolDrawingUnits_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolDrawingUnits
IGESGraph_ToolDrawingUnits_swigregister = _IGESGraph.IGESGraph_ToolDrawingUnits_swigregister
IGESGraph_ToolDrawingUnits_swigregister(IGESGraph_ToolDrawingUnits)

class IGESGraph_ToolColor(object):
    """
    Tool to work on a Color. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolColor self) -> IGESGraph_ToolColor

        Returns a ToolColor, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolColor_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolColor_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Color <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolColor_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolColor_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolColor_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolColor self, Handle_IGESGraph_Color entfrom, Handle_IGESGraph_Color entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolColor_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolColor self, Handle_IGESGraph_Color ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Color
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolColor_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolColor
IGESGraph_ToolColor_swigregister = _IGESGraph.IGESGraph_ToolColor_swigregister
IGESGraph_ToolColor_swigregister(IGESGraph_ToolColor)

class IGESGraph_ToolPick(object):
    """
    Tool to work on a Pick. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolPick self) -> IGESGraph_ToolPick

        Returns a ToolPick, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolPick(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolPick_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolPick_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Pick <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolPick_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Pick
        (NbPropertyValues forced to 1)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolPick_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolPick_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolPick_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolPick self, Handle_IGESGraph_Pick entfrom, Handle_IGESGraph_Pick entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolPick_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolPick self, Handle_IGESGraph_Pick ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_Pick
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolPick_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolPick
IGESGraph_ToolPick_swigregister = _IGESGraph.IGESGraph_ToolPick_swigregister
IGESGraph_ToolPick_swigregister(IGESGraph_ToolPick)

class Handle_IGESGraph_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_SpecificModule self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_SpecificModule self, IGESGraph_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_SpecificModule self, Handle_IGESGraph_SpecificModule theHandle) -> Handle_IGESGraph_SpecificModule
        assign(Handle_IGESGraph_SpecificModule self, IGESGraph_SpecificModule thePtr) -> Handle_IGESGraph_SpecificModule
        assign(Handle_IGESGraph_SpecificModule self, Handle_IGESGraph_SpecificModule theHandle) -> Handle_IGESGraph_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_SpecificModule self) -> IGESGraph_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_SpecificModule self) -> IGESGraph_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_SpecificModule self) -> IGESGraph_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_SpecificModule_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESGraph_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESGraph

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESGraph_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (DrawingSize,DrawingUnits,HighLight,IntercharacterSpacing,
        LineFontPredefined,NominalSize,Pick,UniformRectGrid)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESGraph_SpecificModule_swigregister = _IGESGraph.Handle_IGESGraph_SpecificModule_swigregister
Handle_IGESGraph_SpecificModule_swigregister(Handle_IGESGraph_SpecificModule)

def Handle_IGESGraph_SpecificModule_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_SpecificModule_DownCast(thing)
Handle_IGESGraph_SpecificModule_DownCast = _IGESGraph.Handle_IGESGraph_SpecificModule_DownCast

class IGESGraph_ToolNominalSize(object):
    """
    Tool to work on a NominalSize. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolNominalSize self) -> IGESGraph_ToolNominalSize

        Returns a ToolNominalSize, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolNominalSize(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NominalSize <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a NominalSize
        (NbPropertyValues forced to 2 or 3 according HasStandardName)

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize entfrom, Handle_IGESGraph_NominalSize entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolNominalSize self, Handle_IGESGraph_NominalSize ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_NominalSize
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolNominalSize_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolNominalSize
IGESGraph_ToolNominalSize_swigregister = _IGESGraph.IGESGraph_ToolNominalSize_swigregister
IGESGraph_ToolNominalSize_swigregister(IGESGraph_ToolNominalSize)

class Handle_IGESGraph_HArray1OfTextFontDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_HArray1OfTextFontDef self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_HArray1OfTextFontDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_HArray1OfTextFontDef self, IGESGraph_HArray1OfTextFontDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_HArray1OfTextFontDef self, Handle_IGESGraph_HArray1OfTextFontDef theHandle) -> Handle_IGESGraph_HArray1OfTextFontDef
        assign(Handle_IGESGraph_HArray1OfTextFontDef self, IGESGraph_HArray1OfTextFontDef thePtr) -> Handle_IGESGraph_HArray1OfTextFontDef
        assign(Handle_IGESGraph_HArray1OfTextFontDef self, Handle_IGESGraph_HArray1OfTextFontDef theHandle) -> Handle_IGESGraph_HArray1OfTextFontDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_HArray1OfTextFontDef self) -> IGESGraph_HArray1OfTextFontDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_HArray1OfTextFontDef self) -> IGESGraph_HArray1OfTextFontDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_HArray1OfTextFontDef self) -> IGESGraph_HArray1OfTextFontDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_HArray1OfTextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_HArray1OfTextFontDef

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextFontDef

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextFontDef

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_HArray1OfTextFontDef self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_IGESGraph_HArray1OfTextFontDef self) -> NCollection_Array1< opencascade::handle< IGESGraph_TextFontDef > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_IGESGraph_HArray1OfTextFontDef self, Handle_IGESGraph_TextFontDef theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_IGESGraph_HArray1OfTextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_IGESGraph_HArray1OfTextFontDef self, NCollection_Array1_Handle_IGESGraph_TextFontDef theOther) -> NCollection_Array1_Handle_IGESGraph_TextFontDef

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_IGESGraph_HArray1OfTextFontDef self) -> Handle_IGESGraph_TextFontDef

        @return first element

        :rtype: TheItemType &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_IGESGraph_HArray1OfTextFontDef self) -> Handle_IGESGraph_TextFontDef

        @return last element

        :rtype: TheItemType &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_IGESGraph_HArray1OfTextFontDef self, Standard_Integer const theIndex) -> Handle_IGESGraph_TextFontDef

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESGraph_HArray1OfTextFontDef self, Standard_Integer const theIndex, Handle_IGESGraph_TextFontDef theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_IGESGraph_HArray1OfTextFontDef self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_HArray1OfTextFontDef self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_HArray1OfTextFontDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_HArray1OfTextFontDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_HArray1OfTextFontDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_HArray1OfTextFontDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_HArray1OfTextFontDef self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_HArray1OfTextFontDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_DecrementRefCounter(self, *args)

Handle_IGESGraph_HArray1OfTextFontDef_swigregister = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_swigregister
Handle_IGESGraph_HArray1OfTextFontDef_swigregister(Handle_IGESGraph_HArray1OfTextFontDef)

def Handle_IGESGraph_HArray1OfTextFontDef_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_DownCast(thing)
Handle_IGESGraph_HArray1OfTextFontDef_DownCast = _IGESGraph.Handle_IGESGraph_HArray1OfTextFontDef_DownCast

class Handle_IGESGraph_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_Protocol self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_Protocol self, IGESGraph_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_Protocol self, Handle_IGESGraph_Protocol theHandle) -> Handle_IGESGraph_Protocol
        assign(Handle_IGESGraph_Protocol self, IGESGraph_Protocol thePtr) -> Handle_IGESGraph_Protocol
        assign(Handle_IGESGraph_Protocol self, Handle_IGESGraph_Protocol theHandle) -> Handle_IGESGraph_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_Protocol self) -> IGESGraph_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_Protocol self) -> IGESGraph_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_Protocol self) -> IGESGraph_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_Protocol_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESGraph_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESBasic)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESGraph_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESGraph_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESGraph_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESGraph_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESGraph_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESGraph_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESGraph_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESGraph_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESGraph.Handle_IGESGraph_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESGraph_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESGraph_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESGraph_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESGraph_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESGraph_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Protocol_DecrementRefCounter(self, *args)

Handle_IGESGraph_Protocol_swigregister = _IGESGraph.Handle_IGESGraph_Protocol_swigregister
Handle_IGESGraph_Protocol_swigregister(Handle_IGESGraph_Protocol)

def Handle_IGESGraph_Protocol_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_Protocol_DownCast(thing)
Handle_IGESGraph_Protocol_DownCast = _IGESGraph.Handle_IGESGraph_Protocol_DownCast

class Handle_IGESGraph_TextFontDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_TextFontDef self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_TextFontDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_TextFontDef self, IGESGraph_TextFontDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_TextFontDef self, Handle_IGESGraph_TextFontDef theHandle) -> Handle_IGESGraph_TextFontDef
        assign(Handle_IGESGraph_TextFontDef self, IGESGraph_TextFontDef thePtr) -> Handle_IGESGraph_TextFontDef
        assign(Handle_IGESGraph_TextFontDef self, Handle_IGESGraph_TextFontDef theHandle) -> Handle_IGESGraph_TextFontDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_TextFontDef self) -> IGESGraph_TextFontDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_TextFontDef self) -> IGESGraph_TextFontDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_TextFontDef self) -> IGESGraph_TextFontDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_TextFontDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_TextFontDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_TextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_TextFontDef_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_TextFontDef

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_TextFontDef self, Standard_Integer const aFontCode, Handle_TCollection_HAsciiString aFontName, Standard_Integer const aSupersededFont, Handle_IGESGraph_TextFontDef aSupersededEntity, Standard_Integer const aScale, Handle_TColStd_HArray1OfInteger allASCIICodes, Handle_TColStd_HArray1OfInteger allNextCharX, Handle_TColStd_HArray1OfInteger allNextCharY, Handle_TColStd_HArray1OfInteger allPenMotions, Handle_IGESBasic_HArray1OfHArray1OfInteger allPenFlags, Handle_IGESBasic_HArray1OfHArray1OfInteger allMovePenToX, Handle_IGESBasic_HArray1OfHArray1OfInteger allMovePenToY)

        This method is used to set the fields of the class
        TextFontDef
        - aFontCode         : Font Code
        - aFontName         : Font Name
        - aSupersededFont   : Number of superseded font
        - aSupersededEntity : Text Definition Entity
        - aScale            : No. of grid units = 1 text height unit
        - allASCIICodes     : ASCII codes for characters
        - allNextCharX & Y  : Grid locations of the next
        character's origin (Integer vals)
        - allPenMotions     : No. of pen motions for the characters
        - allPenFlags       : Pen up/down flags,
        0 = Down (default), 1 = Up
        - allMovePenToX & Y : Grid locations the pen will move to
        This method initializes the fields of the class TextFontDef.
        An exception is raised if the lengths of allASCIICodes,
        allNextChars, allPenMotions, allPenFlags and allMovePenTo
        are not same.

        :type aFontCode: int
        :type aFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSupersededFont: int
        :type aSupersededEntity: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type aScale: int
        :type allASCIICodes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNextCharX: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNextCharY: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPenMotions: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allPenFlags: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allMovePenToX: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allMovePenToY: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Init(self, *args)


    def FontCode(self, *args):
        """
        FontCode(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        returns the font code.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_FontCode(self, *args)


    def FontName(self, *args):
        """
        FontName(Handle_IGESGraph_TextFontDef self) -> Handle_TCollection_HAsciiString

        returns the font name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_FontName(self, *args)


    def IsSupersededFontEntity(self, *args):
        """
        IsSupersededFontEntity(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        True if this definition supersedes another
        TextFontDefinition Entity,
        False if it supersedes value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IsSupersededFontEntity(self, *args)


    def SupersededFontCode(self, *args):
        """
        SupersededFontCode(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        returns the font number which this entity modifies.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SupersededFontCode(self, *args)


    def SupersededFontEntity(self, *args):
        """
        SupersededFontEntity(Handle_IGESGraph_TextFontDef self) -> Handle_IGESGraph_TextFontDef

        returns the font entity which this entity modifies.

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SupersededFontEntity(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        returns the number of grid units which equal one text height unit.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Scale(self, *args)


    def NbCharacters(self, *args):
        """
        NbCharacters(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        returns the number of characters in this definition.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbCharacters(self, *args)


    def ASCIICode(self, *args):
        """
        ASCIICode(Handle_IGESGraph_TextFontDef self, Standard_Integer const Chnum) -> Standard_Integer

        returns the ASCII code of Chnum'th character.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_ASCIICode(self, *args)


    def NextCharOrigin(self, *args):
        """
        NextCharOrigin(Handle_IGESGraph_TextFontDef self, Standard_Integer const Chnum)

        returns grid location of origin of character next to Chnum'th char.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :type NX: int
        :type NY: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NextCharOrigin(self, *args)


    def NbPenMotions(self, *args):
        """
        NbPenMotions(Handle_IGESGraph_TextFontDef self, Standard_Integer const Chnum) -> Standard_Integer

        returns number of pen motions for Chnum'th character.
        Exception OutOfRange is raised if Chnum <= 0 or Chnum > NbCharacters

        :type Chnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbPenMotions(self, *args)


    def IsPenUp(self, *args):
        """
        IsPenUp(Handle_IGESGraph_TextFontDef self, Standard_Integer const Chnum, Standard_Integer const Motionnum) -> Standard_Boolean

        returns pen status(True if 1, False if 0) of Motionnum'th motion
        of Chnum'th character.
        Exception raised if Chnum <= 0 or Chnum > NbCharacters or
        Motionnum <= 0 or Motionnum >  NbPenMotions

        :type Chnum: int
        :type Motionnum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IsPenUp(self, *args)


    def NextPenPosition(self, *args):
        """
        NextPenPosition(Handle_IGESGraph_TextFontDef self, Standard_Integer const Chnum, Standard_Integer const Motionnum)

        :type Chnum: int
        :type Motionnum: int
        :type IX: int
        :type IY: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NextPenPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_TextFontDef self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_TextFontDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_TextFontDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_TextFontDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_TextFontDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_TextFontDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_TextFontDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_TextFontDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_TextFontDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_TextFontDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_TextFontDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_TextFontDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_TextFontDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_TextFontDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_TextFontDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_TextFontDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_TextFontDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_TextFontDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_TextFontDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_TextFontDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_TextFontDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_TextFontDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_TextFontDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_TextFontDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_TextFontDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_TextFontDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_TextFontDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_TextFontDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_TextFontDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_TextFontDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_TextFontDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_TextFontDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_TextFontDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_TextFontDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_TextFontDef self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_TextFontDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_TextFontDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_TextFontDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_TextFontDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_TextFontDef self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_TextFontDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_TextFontDef_DecrementRefCounter(self, *args)

Handle_IGESGraph_TextFontDef_swigregister = _IGESGraph.Handle_IGESGraph_TextFontDef_swigregister
Handle_IGESGraph_TextFontDef_swigregister(Handle_IGESGraph_TextFontDef)

def Handle_IGESGraph_TextFontDef_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_TextFontDef_DownCast(thing)
Handle_IGESGraph_TextFontDef_DownCast = _IGESGraph.Handle_IGESGraph_TextFontDef_DownCast

class IGESGraph_(object):
    """
    This package contains the group of classes necessary
    to define Graphic data among Structure Entities.
    (e.g., Fonts, Colors, Screen management ...)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESGraph.IGESGraph__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESGraph_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Protocol

        """
        return _IGESGraph.IGESGraph__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        This package contains the group of classes necessary
        to define Graphic data among Structure Entities.
        (e.g., Fonts, Colors, Screen management ...)
        """
        this = _IGESGraph.new_IGESGraph_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESGraph.delete_IGESGraph_
IGESGraph__swigregister = _IGESGraph.IGESGraph__swigregister
IGESGraph__swigregister(IGESGraph_)

def IGESGraph__Init(*args):
    """
    IGESGraph__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESGraph.IGESGraph__Init(*args)

def IGESGraph__Protocol(*args):
    """
    IGESGraph__Protocol() -> Handle_IGESGraph_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_Protocol

    """
    return _IGESGraph.IGESGraph__Protocol(*args)

class IGESGraph_ToolTextFontDef(object):
    """
    Tool to work on a TextFontDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESGraph_ToolTextFontDef self) -> IGESGraph_ToolTextFontDef

        Returns a ToolTextFontDef, ready to work


        """
        this = _IGESGraph.new_IGESGraph_ToolTextFontDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TextFontDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef entfrom, Handle_IGESGraph_TextFontDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type entto: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESGraph_ToolTextFontDef self, Handle_IGESGraph_TextFontDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextFontDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESGraph.IGESGraph_ToolTextFontDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESGraph.delete_IGESGraph_ToolTextFontDef
IGESGraph_ToolTextFontDef_swigregister = _IGESGraph.IGESGraph_ToolTextFontDef_swigregister
IGESGraph_ToolTextFontDef_swigregister(IGESGraph_ToolTextFontDef)

class Handle_IGESGraph_Color(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_Color self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_Color_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_Color self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_Color_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_Color self, IGESGraph_Color thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_Color_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_Color self, Handle_IGESGraph_Color theHandle) -> Handle_IGESGraph_Color
        assign(Handle_IGESGraph_Color self, IGESGraph_Color thePtr) -> Handle_IGESGraph_Color
        assign(Handle_IGESGraph_Color self, Handle_IGESGraph_Color theHandle) -> Handle_IGESGraph_Color

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_Color_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_Color self) -> IGESGraph_Color

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Color_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_Color self) -> IGESGraph_Color

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_Color___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_Color self) -> IGESGraph_Color

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_Color___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_Color___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_Color___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_Color_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_Color

    def Init(self, *args):
        """
        Init(Handle_IGESGraph_Color self, Standard_Real const red, Standard_Real const green, Standard_Real const blue, Handle_TCollection_HAsciiString aColorName)

        This method is used to set the fields of the class Color
        - red        : Red   color intensity (range 0.0 to 100.0)
        - green      : Green color intensity (range 0.0 to 100.0)
        - blue       : Blue  color intensity (range 0.0 to 100.0)
        - aColorName : Name of the color (optional)

        :type red: float
        :type green: float
        :type blue: float
        :type aColorName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Color_Init(self, *args)


    def RGBIntensity(self, *args):
        """
        RGBIntensity(Handle_IGESGraph_Color self)

        :type Red: float
        :type Green: float
        :type Blue: float

        """
        return _IGESGraph.Handle_IGESGraph_Color_RGBIntensity(self, *args)


    def CMYIntensity(self, *args):
        """
        CMYIntensity(Handle_IGESGraph_Color self)

        :type Cyan: float
        :type Magenta: float
        :type Yellow: float

        """
        return _IGESGraph.Handle_IGESGraph_Color_CMYIntensity(self, *args)


    def HLSPercentage(self, *args):
        """
        HLSPercentage(Handle_IGESGraph_Color self)

        :type Hue: float
        :type Lightness: float
        :type Saturation: float

        """
        return _IGESGraph.Handle_IGESGraph_Color_HLSPercentage(self, *args)


    def HasColorName(self, *args):
        """
        HasColorName(Handle_IGESGraph_Color self) -> Standard_Boolean

        returns True if optional character string is assigned,
        False otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasColorName(self, *args)


    def ColorName(self, *args):
        """
        ColorName(Handle_IGESGraph_Color self) -> Handle_TCollection_HAsciiString

        if HasColorName() is True  returns the Verbal description of
        the Color.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Color_ColorName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_Color self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_Color_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Color_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_Color_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESGraph_Color self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESGraph.Handle_IGESGraph_Color_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESGraph_Color self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESGraph_Color self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESGraph_Color self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESGraph_Color self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESGraph_Color self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_Color_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESGraph_Color self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESGraph_Color self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_Color_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESGraph_Color self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESGraph_Color self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESGraph.Handle_IGESGraph_Color_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESGraph_Color self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESGraph_Color self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESGraph_Color self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESGraph_Color self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESGraph_Color self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESGraph_Color self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESGraph_Color self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESGraph_Color self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESGraph_Color self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESGraph_Color self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESGraph.Handle_IGESGraph_Color_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESGraph_Color self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESGraph.Handle_IGESGraph_Color_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESGraph_Color self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESGraph_Color self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESGraph_Color self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Color_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESGraph_Color self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESGraph_Color self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESGraph_Color self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESGraph_Color self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESGraph_Color self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESGraph_Color self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESGraph_Color self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESGraph_Color self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESGraph_Color self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESGraph_Color self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESGraph_Color self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESGraph_Color self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Color_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESGraph_Color self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Color_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESGraph_Color self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESGraph.Handle_IGESGraph_Color_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESGraph_Color self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESGraph_Color self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESGraph.Handle_IGESGraph_Color_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESGraph_Color self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESGraph_Color self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_Color_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESGraph_Color self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESGraph_Color self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESGraph_Color self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESGraph_Color self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESGraph_Color self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESGraph_Color self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESGraph_Color self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESGraph.Handle_IGESGraph_Color_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESGraph_Color self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESGraph_Color self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESGraph_Color self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESGraph_Color self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESGraph.Handle_IGESGraph_Color_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESGraph_Color self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESGraph.Handle_IGESGraph_Color_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_Color self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_Color_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_Color self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_Color self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_Color self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_Color self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_Color_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_Color self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_Color_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_Color self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_Color self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_Color_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_Color self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_Color_DecrementRefCounter(self, *args)

Handle_IGESGraph_Color_swigregister = _IGESGraph.Handle_IGESGraph_Color_swigregister
Handle_IGESGraph_Color_swigregister(Handle_IGESGraph_Color)

def Handle_IGESGraph_Color_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_Color_DownCast(thing)
Handle_IGESGraph_Color_DownCast = _IGESGraph.Handle_IGESGraph_Color_DownCast

class Handle_IGESGraph_HArray1OfTextDisplayTemplate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESGraph_HArray1OfTextDisplayTemplate self)

        Nullify the handle


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, IGESGraph_HArray1OfTextDisplayTemplate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Handle_IGESGraph_HArray1OfTextDisplayTemplate theHandle) -> Handle_IGESGraph_HArray1OfTextDisplayTemplate
        assign(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, IGESGraph_HArray1OfTextDisplayTemplate thePtr) -> Handle_IGESGraph_HArray1OfTextDisplayTemplate
        assign(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Handle_IGESGraph_HArray1OfTextDisplayTemplate theHandle) -> Handle_IGESGraph_HArray1OfTextDisplayTemplate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> IGESGraph_HArray1OfTextDisplayTemplate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> IGESGraph_HArray1OfTextDisplayTemplate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> IGESGraph_HArray1OfTextDisplayTemplate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate___ref__(self, *args)


    def __hash__(self):
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESGraph.new_Handle_IGESGraph_HArray1OfTextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_DownCast)
    __swig_destroy__ = _IGESGraph.delete_Handle_IGESGraph_HArray1OfTextDisplayTemplate

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextDisplayTemplate

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> NCollection_Array1_Handle_IGESGraph_TextDisplayTemplate

        :rtype: OCC.wrapper.IGESGraph.IGESGraph_Array1OfTextDisplayTemplate

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> char const *

        :rtype: const char *

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESGraph_HArray1OfTextDisplayTemplate self)

        Memory deallocator for transient classes


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESGraph_HArray1OfTextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESGraph_HArray1OfTextDisplayTemplate self)

        Increments the reference counter of this object


        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESGraph_HArray1OfTextDisplayTemplate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_DecrementRefCounter(self, *args)

Handle_IGESGraph_HArray1OfTextDisplayTemplate_swigregister = _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_swigregister
Handle_IGESGraph_HArray1OfTextDisplayTemplate_swigregister(Handle_IGESGraph_HArray1OfTextDisplayTemplate)

def Handle_IGESGraph_HArray1OfTextDisplayTemplate_DownCast(thing):
    return _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_DownCast(thing)
Handle_IGESGraph_HArray1OfTextDisplayTemplate_DownCast = _IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate_DownCast



