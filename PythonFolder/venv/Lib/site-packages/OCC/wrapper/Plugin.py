# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Plugin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Plugin')
    _Plugin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Plugin', [dirname(__file__)])
        except ImportError:
            import _Plugin
            return _Plugin
        try:
            _mod = imp.load_module('_Plugin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Plugin = swig_import_helper()
    del swig_import_helper
else:
    import _Plugin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Plugin.delete_SwigPyIterator

    def value(self):
        return _Plugin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Plugin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Plugin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Plugin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Plugin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Plugin.SwigPyIterator_copy(self)

    def next(self):
        return _Plugin.SwigPyIterator_next(self)

    def __next__(self):
        return _Plugin.SwigPyIterator___next__(self)

    def previous(self):
        return _Plugin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Plugin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Plugin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Plugin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Plugin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Plugin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Plugin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Plugin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Plugin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Plugin.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Plugin.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Plugin.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Plugin.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plugin.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Plugin.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Plugin.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Plugin.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Plugin.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Plugin.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Plugin.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Plugin.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plugin.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Plugin.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Plugin.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Plugin.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Plugin.ptr_to_number(item)
ptr_to_number = _Plugin.ptr_to_number

def HashCode(*args):
    return _Plugin.HashCode(*args)
HashCode = _Plugin.HashCode

def ptr_equal(a, b):
    return _Plugin.ptr_equal(a, b)
ptr_equal = _Plugin.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class Plugin_Failure(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Plugin_Failure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Plugin_Failure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Plugin_Failure self) -> Plugin_Failure
        __init__(Plugin_Failure self, Standard_CString const theMessage) -> Plugin_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Plugin.new_Plugin_Failure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Plugin_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Plugin.Handle_Plugin_Failure

        """
        return _Plugin.Plugin_Failure_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Plugin.Plugin_Failure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Plugin.Plugin_Failure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plugin.Plugin_Failure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Plugin.delete_Plugin_Failure
Plugin_Failure_swigregister = _Plugin.Plugin_Failure_swigregister
Plugin_Failure_swigregister(Plugin_Failure)

def Plugin_Failure_NewInstance(*args):
    """
    Plugin_Failure_NewInstance(Standard_CString const theMessage) -> Handle_Plugin_Failure

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Plugin.Handle_Plugin_Failure

    """
    return _Plugin.Plugin_Failure_NewInstance(*args)

def Plugin_Failure_get_type_name(*args):
    """
    Plugin_Failure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Plugin.Plugin_Failure_get_type_name(*args)

def Plugin_Failure_get_type_descriptor(*args):
    """
    Plugin_Failure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Plugin.Plugin_Failure_get_type_descriptor(*args)

class Handle_Plugin_Failure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Plugin_Failure self)

        Nullify the handle


        """
        return _Plugin.Handle_Plugin_Failure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Plugin_Failure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Plugin.Handle_Plugin_Failure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Plugin_Failure self, Plugin_Failure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Plugin.Handle_Plugin_Failure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Plugin_Failure self, Handle_Plugin_Failure theHandle) -> Handle_Plugin_Failure
        assign(Handle_Plugin_Failure self, Plugin_Failure thePtr) -> Handle_Plugin_Failure
        assign(Handle_Plugin_Failure self, Handle_Plugin_Failure theHandle) -> Handle_Plugin_Failure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Plugin.Handle_Plugin_Failure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Plugin_Failure self) -> Plugin_Failure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Plugin.Handle_Plugin_Failure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Plugin_Failure self) -> Plugin_Failure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Plugin.Handle_Plugin_Failure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Plugin_Failure self) -> Plugin_Failure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Plugin.Handle_Plugin_Failure___ref__(self, *args)


    def __hash__(self):
        return _Plugin.Handle_Plugin_Failure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Plugin.Handle_Plugin_Failure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Plugin.new_Handle_Plugin_Failure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Plugin.Handle_Plugin_Failure_DownCast)
    __swig_destroy__ = _Plugin.delete_Handle_Plugin_Failure

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Plugin_Failure self, Standard_CString const theMessage) -> Handle_Plugin_Failure

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Plugin.Handle_Plugin_Failure

        """
        return _Plugin.Handle_Plugin_Failure_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Plugin_Failure self) -> char const *

        :rtype: const char *

        """
        return _Plugin.Handle_Plugin_Failure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plugin.Handle_Plugin_Failure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Plugin.Handle_Plugin_Failure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Plugin_Failure self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Plugin.Handle_Plugin_Failure_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Plugin_Failure self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Plugin.Handle_Plugin_Failure_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Plugin_Failure self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Plugin.Handle_Plugin_Failure_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Plugin_Failure self)
        Reraise(Handle_Plugin_Failure self, Standard_CString const aMessage)
        Reraise(Handle_Plugin_Failure self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Plugin.Handle_Plugin_Failure_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Plugin_Failure self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Plugin.Handle_Plugin_Failure_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Plugin_Failure self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Plugin.Handle_Plugin_Failure_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Plugin_Failure self)

        Memory deallocator for transient classes


        """
        return _Plugin.Handle_Plugin_Failure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Plugin_Failure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Plugin_Failure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plugin.Handle_Plugin_Failure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Plugin_Failure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Plugin_Failure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plugin.Handle_Plugin_Failure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Plugin_Failure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Plugin.Handle_Plugin_Failure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Plugin_Failure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plugin.Handle_Plugin_Failure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Plugin_Failure self)

        Increments the reference counter of this object


        """
        return _Plugin.Handle_Plugin_Failure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Plugin_Failure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plugin.Handle_Plugin_Failure_DecrementRefCounter(self, *args)

Handle_Plugin_Failure_swigregister = _Plugin.Handle_Plugin_Failure_swigregister
Handle_Plugin_Failure_swigregister(Handle_Plugin_Failure)

def Handle_Plugin_Failure_DownCast(thing):
    return _Plugin.Handle_Plugin_Failure_DownCast(thing)
Handle_Plugin_Failure_DownCast = _Plugin.Handle_Plugin_Failure_DownCast

class NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,int (*)(...),TCollection_AsciiString >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,int (*)(...),TCollection_AsciiString >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,int (*)(...),TCollection_AsciiString >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self) -> NCollection_DataMap< TCollection_AsciiString,int (*)(...),TCollection_AsciiString >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _Plugin.new_NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString theOther) -> NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey, int (*const &)(...) theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey, int (*const &)(...) theItem) -> int (**)(...)

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey) -> int (*const *)(...)

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey) -> int (**)(...)

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, TCollection_AsciiString theKey) -> int (*&)(...)

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_Size(self, *args)


    def __iter__(self):
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString___iter__(self)
    __swig_destroy__ = _Plugin.delete_NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString
NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_swigregister = _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_swigregister
NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_swigregister(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString)

class NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Plugin.new_NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plugin.delete_NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper

    def __next__(self):
        return _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper___next__(self)
NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper_swigregister = _Plugin.NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper_swigregister
NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper_swigregister(NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString_IteratorHelper)


try:
	Plugin_MapOfFunctions = NCollection_DataMap_TCollection_AsciiString_OSD_Function_TCollection_AsciiString
except NameError:
	pass # does not exist, probably ignored

class Plugin_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Load(*args):
        """
        Load(Standard_GUID aGUID, Standard_Boolean const theVerbose) -> Handle_Standard_Transient

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :type theVerbose: bool
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Plugin.Plugin__Load(*args)

    Load = staticmethod(Load)

    def __init__(self):
        this = _Plugin.new_Plugin_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Plugin.delete_Plugin_
Plugin__swigregister = _Plugin.Plugin__swigregister
Plugin__swigregister(Plugin_)

def Plugin__Load(*args):
    """
    Plugin__Load(Standard_GUID aGUID, Standard_Boolean const theVerbose) -> Handle_Standard_Transient

    :type aGUID: OCC.wrapper.Standard.Standard_GUID
    :type theVerbose: bool
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _Plugin.Plugin__Load(*args)



