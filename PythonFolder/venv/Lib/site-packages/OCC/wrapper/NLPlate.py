# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NLPlate')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NLPlate')
    _NLPlate = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NLPlate', [dirname(__file__)])
        except ImportError:
            import _NLPlate
            return _NLPlate
        try:
            _mod = imp.load_module('_NLPlate', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NLPlate = swig_import_helper()
    del swig_import_helper
else:
    import _NLPlate
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NLPlate.delete_SwigPyIterator

    def value(self):
        return _NLPlate.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NLPlate.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NLPlate.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NLPlate.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NLPlate.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NLPlate.SwigPyIterator_copy(self)

    def next(self):
        return _NLPlate.SwigPyIterator_next(self)

    def __next__(self):
        return _NLPlate.SwigPyIterator___next__(self)

    def previous(self):
        return _NLPlate.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NLPlate.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NLPlate.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NLPlate.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NLPlate.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NLPlate.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NLPlate.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NLPlate.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NLPlate.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _NLPlate.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_NLPlate.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _NLPlate.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _NLPlate.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NLPlate.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _NLPlate.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _NLPlate.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _NLPlate.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _NLPlate.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_NLPlate.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _NLPlate.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _NLPlate.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NLPlate.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _NLPlate.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _NLPlate.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _NLPlate.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _NLPlate.ptr_to_number(item)
ptr_to_number = _NLPlate.ptr_to_number

def HashCode(*args):
    return _NLPlate.HashCode(*args)
HashCode = _NLPlate.HashCode

def ptr_equal(a, b):
    return _NLPlate.ptr_equal(a, b)
ptr_equal = _NLPlate.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Plate
else:
    import Plate
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
class NLPlate_HGPPConstraint(Standard.Standard_Transient):
    """define a PinPoint geometric Constraint used to load a Non Linear Plate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HGPPConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HGPPConstraint(self) 
            return h


    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(NLPlate_HGPPConstraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(NLPlate_HGPPConstraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetIncrementalLoadAllowed(self, *args)


    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(NLPlate_HGPPConstraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(NLPlate_HGPPConstraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetUV(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(NLPlate_HGPPConstraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetOrientation(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(NLPlate_HGPPConstraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(NLPlate_HGPPConstraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(NLPlate_HGPPConstraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(NLPlate_HGPPConstraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.NLPlate_HGPPConstraint_SetG3Criterion(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HGPPConstraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HGPPConstraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HGPPConstraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HGPPConstraint_ActiveOrder(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.NLPlate_HGPPConstraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Orientation(self, *args):
        """
        Orientation(NLPlate_HGPPConstraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HGPPConstraint_Orientation(self, *args)


    def IsG0(self, *args):
        """
        IsG0(NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HGPPConstraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.NLPlate_HGPPConstraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.NLPlate_HGPPConstraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.NLPlate_HGPPConstraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.NLPlate_HGPPConstraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.NLPlate_HGPPConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.NLPlate_HGPPConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.NLPlate_HGPPConstraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.NLPlate_HGPPConstraint_G3Criterion(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HGPPConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HGPPConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HGPPConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HGPPConstraint
NLPlate_HGPPConstraint_swigregister = _NLPlate.NLPlate_HGPPConstraint_swigregister
NLPlate_HGPPConstraint_swigregister(NLPlate_HGPPConstraint)

def NLPlate_HGPPConstraint_get_type_name(*args):
    """
    NLPlate_HGPPConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HGPPConstraint_get_type_name(*args)

def NLPlate_HGPPConstraint_get_type_descriptor(*args):
    """
    NLPlate_HGPPConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HGPPConstraint_get_type_descriptor(*args)

class NLPlate_HPG0Constraint(NLPlate_HGPPConstraint):
    """
    define a PinPoint G0  Constraint  used to load a Non Linear
    Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG0Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG0Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG0Constraint self, gp_XY UV, gp_XYZ Value) -> NLPlate_HPG0Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type Value: OCC.wrapper.gp.gp_XYZ

        """
        this = _NLPlate.new_NLPlate_HPG0Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(NLPlate_HPG0Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.NLPlate_HPG0Constraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(NLPlate_HPG0Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.NLPlate_HPG0Constraint_SetIncrementalLoadAllowed(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HPG0Constraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HPG0Constraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG0Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG0Constraint_ActiveOrder(self, *args)


    def IsG0(self, *args):
        """
        IsG0(NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HPG0Constraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.NLPlate_HPG0Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG0Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG0Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG0Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0Constraint
NLPlate_HPG0Constraint_swigregister = _NLPlate.NLPlate_HPG0Constraint_swigregister
NLPlate_HPG0Constraint_swigregister(NLPlate_HPG0Constraint)

def NLPlate_HPG0Constraint_get_type_name(*args):
    """
    NLPlate_HPG0Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG0Constraint_get_type_name(*args)

def NLPlate_HPG0Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG0Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG0Constraint_get_type_descriptor(*args)

class NLPlate_HPG0G1Constraint(NLPlate_HPG0Constraint):
    """
    define a PinPoint G0+G1  Constraint  used to load a Non Linear
    Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG0G1Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG0G1Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG0G1Constraint self, gp_XY UV, gp_XYZ Value, Plate_D1 D1T) -> NLPlate_HPG0G1Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type Value: OCC.wrapper.gp.gp_XYZ
        :type D1T: OCC.wrapper.Plate.Plate_D1

        """
        this = _NLPlate.new_NLPlate_HPG0G1Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOrientation(self, *args):
        """
        SetOrientation(NLPlate_HPG0G1Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.NLPlate_HPG0G1Constraint_SetOrientation(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG0G1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG0G1Constraint_ActiveOrder(self, *args)


    def Orientation(self, *args):
        """
        Orientation(NLPlate_HPG0G1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG0G1Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.NLPlate_HPG0G1Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG0G1Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG0G1Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG0G1Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G1Constraint
NLPlate_HPG0G1Constraint_swigregister = _NLPlate.NLPlate_HPG0G1Constraint_swigregister
NLPlate_HPG0G1Constraint_swigregister(NLPlate_HPG0G1Constraint)

def NLPlate_HPG0G1Constraint_get_type_name(*args):
    """
    NLPlate_HPG0G1Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG0G1Constraint_get_type_name(*args)

def NLPlate_HPG0G1Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG0G1Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG0G1Constraint_get_type_descriptor(*args)

class NLPlate_HPG1Constraint(NLPlate_HGPPConstraint):
    """
    define a PinPoint (no G0)  G1 Constraint used to load a Non
    Linear Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG1Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG1Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG1Constraint self, gp_XY UV, Plate_D1 D1T) -> NLPlate_HPG1Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type D1T: OCC.wrapper.Plate.Plate_D1

        """
        this = _NLPlate.new_NLPlate_HPG1Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(NLPlate_HPG1Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.NLPlate_HPG1Constraint_SetIncrementalLoadAllowed(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(NLPlate_HPG1Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.NLPlate_HPG1Constraint_SetOrientation(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(NLPlate_HPG1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HPG1Constraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG1Constraint_ActiveOrder(self, *args)


    def IsG0(self, *args):
        """
        IsG0(NLPlate_HPG1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_HPG1Constraint_IsG0(self, *args)


    def Orientation(self, *args):
        """
        Orientation(NLPlate_HPG1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG1Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.NLPlate_HPG1Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG1Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG1Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG1Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG1Constraint
NLPlate_HPG1Constraint_swigregister = _NLPlate.NLPlate_HPG1Constraint_swigregister
NLPlate_HPG1Constraint_swigregister(NLPlate_HPG1Constraint)

def NLPlate_HPG1Constraint_get_type_name(*args):
    """
    NLPlate_HPG1Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG1Constraint_get_type_name(*args)

def NLPlate_HPG1Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG1Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG1Constraint_get_type_descriptor(*args)

class NLPlate_HPG0G2Constraint(NLPlate_HPG0G1Constraint):
    """
    define a PinPoint G0+G2  Constraint  used to load a Non Linear
    Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG0G2Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG0G2Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG0G2Constraint self, gp_XY UV, gp_XYZ Value, Plate_D1 D1T, Plate_D2 D2T) -> NLPlate_HPG0G2Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type Value: OCC.wrapper.gp.gp_XYZ
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2T: OCC.wrapper.Plate.Plate_D2

        """
        this = _NLPlate.new_NLPlate_HPG0G2Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG0G2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG0G2Constraint_ActiveOrder(self, *args)


    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.NLPlate_HPG0G2Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG0G2Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG0G2Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG0G2Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G2Constraint
NLPlate_HPG0G2Constraint_swigregister = _NLPlate.NLPlate_HPG0G2Constraint_swigregister
NLPlate_HPG0G2Constraint_swigregister(NLPlate_HPG0G2Constraint)

def NLPlate_HPG0G2Constraint_get_type_name(*args):
    """
    NLPlate_HPG0G2Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG0G2Constraint_get_type_name(*args)

def NLPlate_HPG0G2Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG0G2Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG0G2Constraint_get_type_descriptor(*args)

class NLPlate_HPG0G3Constraint(NLPlate_HPG0G2Constraint):
    """
    define a PinPoint G0+G3  Constraint  used to load a Non Linear
    Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG0G3Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG0G3Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG0G3Constraint self, gp_XY UV, gp_XYZ Value, Plate_D1 D1T, Plate_D2 D2T, Plate_D3 D3T) -> NLPlate_HPG0G3Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type Value: OCC.wrapper.gp.gp_XYZ
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2T: OCC.wrapper.Plate.Plate_D2
        :type D3T: OCC.wrapper.Plate.Plate_D3

        """
        this = _NLPlate.new_NLPlate_HPG0G3Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG0G3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG0G3Constraint_ActiveOrder(self, *args)


    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.NLPlate_HPG0G3Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG0G3Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG0G3Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG0G3Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG0G3Constraint
NLPlate_HPG0G3Constraint_swigregister = _NLPlate.NLPlate_HPG0G3Constraint_swigregister
NLPlate_HPG0G3Constraint_swigregister(NLPlate_HPG0G3Constraint)

def NLPlate_HPG0G3Constraint_get_type_name(*args):
    """
    NLPlate_HPG0G3Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG0G3Constraint_get_type_name(*args)

def NLPlate_HPG0G3Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG0G3Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG0G3Constraint_get_type_descriptor(*args)

class NLPlate_HPG2Constraint(NLPlate_HPG1Constraint):
    """
    define a PinPoint (no G0)  G2 Constraint used to load a Non
    Linear Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG2Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG2Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG2Constraint self, gp_XY UV, Plate_D1 D1T, Plate_D2 D2T) -> NLPlate_HPG2Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2T: OCC.wrapper.Plate.Plate_D2

        """
        this = _NLPlate.new_NLPlate_HPG2Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG2Constraint_ActiveOrder(self, *args)


    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.NLPlate_HPG2Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG2Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG2Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG2Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG2Constraint
NLPlate_HPG2Constraint_swigregister = _NLPlate.NLPlate_HPG2Constraint_swigregister
NLPlate_HPG2Constraint_swigregister(NLPlate_HPG2Constraint)

def NLPlate_HPG2Constraint_get_type_name(*args):
    """
    NLPlate_HPG2Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG2Constraint_get_type_name(*args)

def NLPlate_HPG2Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG2Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG2Constraint_get_type_descriptor(*args)

class Handle_NLPlate_HPG2Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG2Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG2Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG2Constraint self, NLPlate_HPG2Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG2Constraint self, Handle_NLPlate_HPG2Constraint theHandle) -> Handle_NLPlate_HPG2Constraint
        assign(Handle_NLPlate_HPG2Constraint self, NLPlate_HPG2Constraint thePtr) -> Handle_NLPlate_HPG2Constraint
        assign(Handle_NLPlate_HPG2Constraint self, Handle_NLPlate_HPG2Constraint theHandle) -> Handle_NLPlate_HPG2Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG2Constraint self) -> NLPlate_HPG2Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG2Constraint self) -> NLPlate_HPG2Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG2Constraint self) -> NLPlate_HPG2Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG2Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG2Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG2Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG2Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG2Constraint

    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_ActiveOrder(self, *args)


    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG2Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG2Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetIncrementalLoadAllowed(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG2Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetOrientation(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IsG0(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG2Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetUVFreeSliding(self, *args)


    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG2Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG2Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG2Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG2Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG2Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG2Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_SetG3Criterion(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_UVFreeSliding(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG2Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG2Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG2Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG2Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG2Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG2Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG2Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG2Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG2Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG2Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG2Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG2Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG2Constraint_swigregister
Handle_NLPlate_HPG2Constraint_swigregister(Handle_NLPlate_HPG2Constraint)

def Handle_NLPlate_HPG2Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG2Constraint_DownCast(thing)
Handle_NLPlate_HPG2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG2Constraint_DownCast

class Handle_NLPlate_HPG0G1Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG0G1Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG0G1Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG0G1Constraint self, NLPlate_HPG0G1Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG0G1Constraint self, Handle_NLPlate_HPG0G1Constraint theHandle) -> Handle_NLPlate_HPG0G1Constraint
        assign(Handle_NLPlate_HPG0G1Constraint self, NLPlate_HPG0G1Constraint thePtr) -> Handle_NLPlate_HPG0G1Constraint
        assign(Handle_NLPlate_HPG0G1Constraint self, Handle_NLPlate_HPG0G1Constraint theHandle) -> Handle_NLPlate_HPG0G1Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG0G1Constraint self) -> NLPlate_HPG0G1Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG0G1Constraint self) -> NLPlate_HPG0G1Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG0G1Constraint self) -> NLPlate_HPG0G1Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG0G1Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG0G1Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG0G1Constraint

    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG0G1Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetOrientation(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_ActiveOrder(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG0G1Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG0G1Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG0G1Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetIncrementalLoadAllowed(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG0G1Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG0G1Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG0G1Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG0G1Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG0G1Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG0G1Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_SetG3Criterion(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG0G1Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG0G1Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG0G1Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG0G1Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG0G1Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG0G1Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG0G1Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG0G1Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G1Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG0G1Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG0G1Constraint_swigregister
Handle_NLPlate_HPG0G1Constraint_swigregister(Handle_NLPlate_HPG0G1Constraint)

def Handle_NLPlate_HPG0G1Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast(thing)
Handle_NLPlate_HPG0G1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G1Constraint_DownCast

class Handle_NLPlate_HPG0G3Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG0G3Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG0G3Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG0G3Constraint self, NLPlate_HPG0G3Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG0G3Constraint self, Handle_NLPlate_HPG0G3Constraint theHandle) -> Handle_NLPlate_HPG0G3Constraint
        assign(Handle_NLPlate_HPG0G3Constraint self, NLPlate_HPG0G3Constraint thePtr) -> Handle_NLPlate_HPG0G3Constraint
        assign(Handle_NLPlate_HPG0G3Constraint self, Handle_NLPlate_HPG0G3Constraint theHandle) -> Handle_NLPlate_HPG0G3Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG0G3Constraint self) -> NLPlate_HPG0G3Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG0G3Constraint self) -> NLPlate_HPG0G3Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG0G3Constraint self) -> NLPlate_HPG0G3Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG0G3Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG0G3Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG0G3Constraint

    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_ActiveOrder(self, *args)


    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG0G3Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG0G3Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG0G3Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG0G3Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetIncrementalLoadAllowed(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG0G3Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG0G3Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG0G3Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG0G3Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG0G3Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG0G3Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_SetG3Criterion(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG0G3Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG0G3Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG0G3Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG0G3Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG0G3Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG0G3Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG0G3Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG0G3Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G3Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG0G3Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG0G3Constraint_swigregister
Handle_NLPlate_HPG0G3Constraint_swigregister(Handle_NLPlate_HPG0G3Constraint)

def Handle_NLPlate_HPG0G3Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast(thing)
Handle_NLPlate_HPG0G3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G3Constraint_DownCast

class NCollection_List_Plate_Plate_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _NLPlate.new_NCollection_List_Plate_Plate_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NLPlate.delete_NCollection_List_Plate_Plate_IteratorHelper

    def __next__(self):
        return _NLPlate.NCollection_List_Plate_Plate_IteratorHelper___next__(self)
NCollection_List_Plate_Plate_IteratorHelper_swigregister = _NLPlate.NCollection_List_Plate_Plate_IteratorHelper_swigregister
NCollection_List_Plate_Plate_IteratorHelper_swigregister(NCollection_List_Plate_Plate_IteratorHelper)


try:
	NLPlate_StackOfPlate = NCollection_List_Plate_Plate
except NameError:
	pass # does not exist, probably ignored

class Handle_NLPlate_HPG1Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG1Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG1Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG1Constraint self, NLPlate_HPG1Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG1Constraint self, Handle_NLPlate_HPG1Constraint theHandle) -> Handle_NLPlate_HPG1Constraint
        assign(Handle_NLPlate_HPG1Constraint self, NLPlate_HPG1Constraint thePtr) -> Handle_NLPlate_HPG1Constraint
        assign(Handle_NLPlate_HPG1Constraint self, Handle_NLPlate_HPG1Constraint theHandle) -> Handle_NLPlate_HPG1Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG1Constraint self) -> NLPlate_HPG1Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG1Constraint self) -> NLPlate_HPG1Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG1Constraint self) -> NLPlate_HPG1Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG1Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG1Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG1Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG1Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG1Constraint

    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG1Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetIncrementalLoadAllowed(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG1Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetOrientation(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_ActiveOrder(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IsG0(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG1Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG1Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG1Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetUVFreeSliding(self, *args)


    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG1Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG1Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG1Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG1Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG1Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG1Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_SetG3Criterion(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG1Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_UVFreeSliding(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG1Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG1Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG1Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG1Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG1Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG1Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG1Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG1Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG1Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG1Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG1Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG1Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG1Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG1Constraint_swigregister
Handle_NLPlate_HPG1Constraint_swigregister(Handle_NLPlate_HPG1Constraint)

def Handle_NLPlate_HPG1Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG1Constraint_DownCast(thing)
Handle_NLPlate_HPG1Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG1Constraint_DownCast

class Handle_NLPlate_HPG0Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG0Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG0Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG0Constraint self, NLPlate_HPG0Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG0Constraint self, Handle_NLPlate_HPG0Constraint theHandle) -> Handle_NLPlate_HPG0Constraint
        assign(Handle_NLPlate_HPG0Constraint self, NLPlate_HPG0Constraint thePtr) -> Handle_NLPlate_HPG0Constraint
        assign(Handle_NLPlate_HPG0Constraint self, Handle_NLPlate_HPG0Constraint theHandle) -> Handle_NLPlate_HPG0Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG0Constraint self) -> NLPlate_HPG0Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG0Constraint self) -> NLPlate_HPG0Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG0Constraint self) -> NLPlate_HPG0Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG0Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG0Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG0Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG0Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG0Constraint

    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG0Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG0Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetIncrementalLoadAllowed(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG0Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_ActiveOrder(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG0Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG0Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG0Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG0Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetUV(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG0Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetOrientation(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG0Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG0Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG0Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG0Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_SetG3Criterion(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG0Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG0Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG0Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG0Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG0Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG0Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG0Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG0Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG0Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG0Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG0Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG0Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG0Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG0Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG0Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG0Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG0Constraint_swigregister
Handle_NLPlate_HPG0Constraint_swigregister(Handle_NLPlate_HPG0Constraint)

def Handle_NLPlate_HPG0Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG0Constraint_DownCast(thing)
Handle_NLPlate_HPG0Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0Constraint_DownCast

class Handle_NLPlate_HPG0G2Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG0G2Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG0G2Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG0G2Constraint self, NLPlate_HPG0G2Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG0G2Constraint self, Handle_NLPlate_HPG0G2Constraint theHandle) -> Handle_NLPlate_HPG0G2Constraint
        assign(Handle_NLPlate_HPG0G2Constraint self, NLPlate_HPG0G2Constraint thePtr) -> Handle_NLPlate_HPG0G2Constraint
        assign(Handle_NLPlate_HPG0G2Constraint self, Handle_NLPlate_HPG0G2Constraint theHandle) -> Handle_NLPlate_HPG0G2Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG0G2Constraint self) -> NLPlate_HPG0G2Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG0G2Constraint self) -> NLPlate_HPG0G2Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG0G2Constraint self) -> NLPlate_HPG0G2Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG0G2Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG0G2Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG0G2Constraint

    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_ActiveOrder(self, *args)


    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG0G2Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG0G2Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetOrientation(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG0G2Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG0G2Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetIncrementalLoadAllowed(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG0G2Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG0G2Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG0G2Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG0G2Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG0G2Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG0G2Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_SetG3Criterion(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG0G2Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG0G2Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG0G2Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG0G2Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG0G2Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG0G2Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG0G2Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG0G2Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG0G2Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG0G2Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG0G2Constraint_swigregister
Handle_NLPlate_HPG0G2Constraint_swigregister(Handle_NLPlate_HPG0G2Constraint)

def Handle_NLPlate_HPG0G2Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast(thing)
Handle_NLPlate_HPG0G2Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG0G2Constraint_DownCast

class Handle_NLPlate_HGPPConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HGPPConstraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HGPPConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HGPPConstraint self, NLPlate_HGPPConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HGPPConstraint self, Handle_NLPlate_HGPPConstraint theHandle) -> Handle_NLPlate_HGPPConstraint
        assign(Handle_NLPlate_HGPPConstraint self, NLPlate_HGPPConstraint thePtr) -> Handle_NLPlate_HGPPConstraint
        assign(Handle_NLPlate_HGPPConstraint self, Handle_NLPlate_HGPPConstraint theHandle) -> Handle_NLPlate_HGPPConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HGPPConstraint self) -> NLPlate_HGPPConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HGPPConstraint self) -> NLPlate_HGPPConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HGPPConstraint self) -> NLPlate_HGPPConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HGPPConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HGPPConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HGPPConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HGPPConstraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HGPPConstraint

    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HGPPConstraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetUVFreeSliding(self, *args)


    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HGPPConstraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetIncrementalLoadAllowed(self, *args)


    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HGPPConstraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HGPPConstraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetUV(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HGPPConstraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetOrientation(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HGPPConstraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HGPPConstraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HGPPConstraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HGPPConstraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_SetG3Criterion(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_UVFreeSliding(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IncrementalLoadAllowed(self, *args)


    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_ActiveOrder(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_Orientation(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HGPPConstraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IsG0(self, *args)


    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HGPPConstraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_G3Criterion(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HGPPConstraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HGPPConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HGPPConstraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HGPPConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HGPPConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HGPPConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HGPPConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HGPPConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HGPPConstraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HGPPConstraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HGPPConstraint_swigregister = _NLPlate.Handle_NLPlate_HGPPConstraint_swigregister
Handle_NLPlate_HGPPConstraint_swigregister(Handle_NLPlate_HGPPConstraint)

def Handle_NLPlate_HGPPConstraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HGPPConstraint_DownCast(thing)
Handle_NLPlate_HGPPConstraint_DownCast = _NLPlate.Handle_NLPlate_HGPPConstraint_DownCast

class NLPlate_HPG3Constraint(NLPlate_HPG2Constraint):
    """
    define a PinPoint (no G0)  G3 Constraint used to load a Non
    Linear Plate
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_NLPlate_HPG3Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_NLPlate_HPG3Constraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(NLPlate_HPG3Constraint self, gp_XY UV, Plate_D1 D1T, Plate_D2 D2T, Plate_D3 D3T) -> NLPlate_HPG3Constraint

        :type UV: OCC.wrapper.gp.gp_XY
        :type D1T: OCC.wrapper.Plate.Plate_D1
        :type D2T: OCC.wrapper.Plate.Plate_D2
        :type D3T: OCC.wrapper.Plate.Plate_D3

        """
        this = _NLPlate.new_NLPlate_HPG3Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ActiveOrder(self, *args):
        """
        ActiveOrder(NLPlate_HPG3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_HPG3Constraint_ActiveOrder(self, *args)


    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.NLPlate_HPG3Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _NLPlate.NLPlate_HPG3Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _NLPlate.NLPlate_HPG3Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.NLPlate_HPG3Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _NLPlate.delete_NLPlate_HPG3Constraint
NLPlate_HPG3Constraint_swigregister = _NLPlate.NLPlate_HPG3Constraint_swigregister
NLPlate_HPG3Constraint_swigregister(NLPlate_HPG3Constraint)

def NLPlate_HPG3Constraint_get_type_name(*args):
    """
    NLPlate_HPG3Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _NLPlate.NLPlate_HPG3Constraint_get_type_name(*args)

def NLPlate_HPG3Constraint_get_type_descriptor(*args):
    """
    NLPlate_HPG3Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _NLPlate.NLPlate_HPG3Constraint_get_type_descriptor(*args)

class NLPlate_NLPlate(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NLPlate_NLPlate self, Handle_Geom_Surface InitialSurface) -> NLPlate_NLPlate

        :type InitialSurface: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        this = _NLPlate.new_NLPlate_NLPlate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(NLPlate_NLPlate self, Handle_NLPlate_HGPPConstraint GConst)

        :type GConst: OCC.wrapper.NLPlate.Handle_NLPlate_HGPPConstraint

        """
        return _NLPlate.NLPlate_NLPlate_Load(self, *args)


    def Solve(self, *args):
        """
        Solve(NLPlate_NLPlate self, Standard_Integer const ord=2, Standard_Integer const InitialConsraintOrder=1)

        :type ord: int
        :type InitialConsraintOrder: int

        """
        return _NLPlate.NLPlate_NLPlate_Solve(self, *args)


    def Solve2(self, *args):
        """
        Solve2(NLPlate_NLPlate self, Standard_Integer const ord=2, Standard_Integer const InitialConsraintOrder=1)

        :type ord: int
        :type InitialConsraintOrder: int

        """
        return _NLPlate.NLPlate_NLPlate_Solve2(self, *args)


    def IncrementalSolve(self, *args):
        """
        IncrementalSolve(NLPlate_NLPlate self, Standard_Integer const ord=2, Standard_Integer const InitialConsraintOrder=1, Standard_Integer const NbIncrements=4, Standard_Boolean const UVSliding)

        :type ord: int
        :type InitialConsraintOrder: int
        :type NbIncrements: int
        :type UVSliding: bool

        """
        return _NLPlate.NLPlate_NLPlate_IncrementalSolve(self, *args)


    def IsDone(self, *args):
        """
        IsDone(NLPlate_NLPlate self) -> Standard_Boolean

        returns True if all has been correctly done.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NLPlate_NLPlate_IsDone(self, *args)


    def destroy(self, *args):
        """destroy(NLPlate_NLPlate self)"""
        return _NLPlate.NLPlate_NLPlate_destroy(self, *args)


    def Init(self, *args):
        """
        Init(NLPlate_NLPlate self)

        reset the Plate in the initial state
        ( same as after Create((Surface))


        """
        return _NLPlate.NLPlate_NLPlate_Init(self, *args)


    def Evaluate(self, *args):
        """
        Evaluate(NLPlate_NLPlate self, gp_XY point2d) -> gp_XYZ

        :type point2d: OCC.wrapper.gp.gp_XY
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _NLPlate.NLPlate_NLPlate_Evaluate(self, *args)


    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(NLPlate_NLPlate self, gp_XY point2d, Standard_Integer const iu, Standard_Integer const iv) -> gp_XYZ

        :type point2d: OCC.wrapper.gp.gp_XY
        :type iu: int
        :type iv: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _NLPlate.NLPlate_NLPlate_EvaluateDerivative(self, *args)


    def Continuity(self, *args):
        """
        Continuity(NLPlate_NLPlate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_NLPlate_Continuity(self, *args)


    def ConstraintsSliding(self, *args):
        """
        ConstraintsSliding(NLPlate_NLPlate self, Standard_Integer const NbIterations=3)

        :type NbIterations: int

        """
        return _NLPlate.NLPlate_NLPlate_ConstraintsSliding(self, *args)


    def MaxActiveConstraintOrder(self, *args):
        """
        MaxActiveConstraintOrder(NLPlate_NLPlate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NLPlate_NLPlate_MaxActiveConstraintOrder(self, *args)

    __swig_destroy__ = _NLPlate.delete_NLPlate_NLPlate
NLPlate_NLPlate_swigregister = _NLPlate.NLPlate_NLPlate_swigregister
NLPlate_NLPlate_swigregister(NLPlate_NLPlate)

class Handle_NLPlate_HPG3Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_NLPlate_HPG3Constraint self)

        Nullify the handle


        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_NLPlate_HPG3Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_NLPlate_HPG3Constraint self, NLPlate_HPG3Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_NLPlate_HPG3Constraint self, Handle_NLPlate_HPG3Constraint theHandle) -> Handle_NLPlate_HPG3Constraint
        assign(Handle_NLPlate_HPG3Constraint self, NLPlate_HPG3Constraint thePtr) -> Handle_NLPlate_HPG3Constraint
        assign(Handle_NLPlate_HPG3Constraint self, Handle_NLPlate_HPG3Constraint theHandle) -> Handle_NLPlate_HPG3Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_NLPlate_HPG3Constraint self) -> NLPlate_HPG3Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_NLPlate_HPG3Constraint self) -> NLPlate_HPG3Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_NLPlate_HPG3Constraint self) -> NLPlate_HPG3Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint___ref__(self, *args)


    def __hash__(self):
        return _NLPlate.Handle_NLPlate_HPG3Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _NLPlate.Handle_NLPlate_HPG3Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _NLPlate.new_Handle_NLPlate_HPG3Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_NLPlate.Handle_NLPlate_HPG3Constraint_DownCast)
    __swig_destroy__ = _NLPlate.delete_Handle_NLPlate_HPG3Constraint

    def ActiveOrder(self, *args):
        """
        ActiveOrder(Handle_NLPlate_HPG3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_ActiveOrder(self, *args)


    def G3Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D3

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_G3Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_NLPlate_HPG3Constraint self) -> char const *

        :rtype: const char *

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G2Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D2

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_G2Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetIncrementalLoadAllowed(self, *args):
        """
        SetIncrementalLoadAllowed(Handle_NLPlate_HPG3Constraint self, Standard_Boolean const ILA)

        :type ILA: bool

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetIncrementalLoadAllowed(self, *args)


    def SetOrientation(self, *args):
        """
        SetOrientation(Handle_NLPlate_HPG3Constraint self, Standard_Integer const Orient=0)

        :type Orient: int

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetOrientation(self, *args)


    def IncrementalLoadAllowed(self, *args):
        """
        IncrementalLoadAllowed(Handle_NLPlate_HPG3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IncrementalLoadAllowed(self, *args)


    def IsG0(self, *args):
        """
        IsG0(Handle_NLPlate_HPG3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IsG0(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_NLPlate_HPG3Constraint self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_Orientation(self, *args)


    def G1Target(self, *args):
        """
        :rtype: OCC.wrapper.Plate.Plate_D1

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_G1Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVFreeSliding(self, *args):
        """
        SetUVFreeSliding(Handle_NLPlate_HPG3Constraint self, Standard_Boolean const UVFree)

        :type UVFree: bool

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetUVFreeSliding(self, *args)


    def SetActiveOrder(self, *args):
        """
        SetActiveOrder(Handle_NLPlate_HPG3Constraint self, Standard_Integer const ActiveOrder)

        :type ActiveOrder: int

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetActiveOrder(self, *args)


    def SetUV(self, *args):
        """
        SetUV(Handle_NLPlate_HPG3Constraint self, gp_XY UV)

        :type UV: OCC.wrapper.gp.gp_XY

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetUV(self, *args)


    def SetG0Criterion(self, *args):
        """
        SetG0Criterion(Handle_NLPlate_HPG3Constraint self, Standard_Real const TolDist)

        :type TolDist: float

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetG0Criterion(self, *args)


    def SetG1Criterion(self, *args):
        """
        SetG1Criterion(Handle_NLPlate_HPG3Constraint self, Standard_Real const TolAng)

        :type TolAng: float

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetG1Criterion(self, *args)


    def SetG2Criterion(self, *args):
        """
        SetG2Criterion(Handle_NLPlate_HPG3Constraint self, Standard_Real const TolCurv)

        :type TolCurv: float

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetG2Criterion(self, *args)


    def SetG3Criterion(self, *args):
        """
        SetG3Criterion(Handle_NLPlate_HPG3Constraint self, Standard_Real const TolG3)

        :type TolG3: float

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_SetG3Criterion(self, *args)


    def UVFreeSliding(self, *args):
        """
        UVFreeSliding(Handle_NLPlate_HPG3Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_UVFreeSliding(self, *args)


    def UV(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XY

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_UV(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Target(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _NLPlate.Handle_NLPlate_HPG3Constraint_G0Target(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def G0Criterion(self, *args):
        """
        G0Criterion(Handle_NLPlate_HPG3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_G0Criterion(self, *args)


    def G1Criterion(self, *args):
        """
        G1Criterion(Handle_NLPlate_HPG3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_G1Criterion(self, *args)


    def G2Criterion(self, *args):
        """
        G2Criterion(Handle_NLPlate_HPG3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_G2Criterion(self, *args)


    def G3Criterion(self, *args):
        """
        G3Criterion(Handle_NLPlate_HPG3Constraint self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_G3Criterion(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_NLPlate_HPG3Constraint self)

        Memory deallocator for transient classes


        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_NLPlate_HPG3Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_NLPlate_HPG3Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_NLPlate_HPG3Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_NLPlate_HPG3Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_NLPlate_HPG3Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_NLPlate_HPG3Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_NLPlate_HPG3Constraint self)

        Increments the reference counter of this object


        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_NLPlate_HPG3Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.Handle_NLPlate_HPG3Constraint_DecrementRefCounter(self, *args)

Handle_NLPlate_HPG3Constraint_swigregister = _NLPlate.Handle_NLPlate_HPG3Constraint_swigregister
Handle_NLPlate_HPG3Constraint_swigregister(Handle_NLPlate_HPG3Constraint)

def Handle_NLPlate_HPG3Constraint_DownCast(thing):
    return _NLPlate.Handle_NLPlate_HPG3Constraint_DownCast(thing)
Handle_NLPlate_HPG3Constraint_DownCast = _NLPlate.Handle_NLPlate_HPG3Constraint_DownCast

class NCollection_Sequence_Handle_NLPlate_HGPPConstraint(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _NLPlate.new_NCollection_Sequence_Handle_NLPlate_HGPPConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self)

        Reverse sequence


        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theOther) -> NCollection_Sequence_Handle_NLPlate_HGPPConstraint

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theOther) -> NCollection_Sequence_Handle_NLPlate_HGPPConstraint

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Handle_NLPlate_HGPPConstraint theItem)
        Append(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Handle_NLPlate_HGPPConstraint theItem)
        Prepend(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, Handle_NLPlate_HGPPConstraint theItem)
        InsertBefore(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, NCollection_Sequence< opencascade::handle< NLPlate_HGPPConstraint > >::Iterator & thePosition, Handle_NLPlate_HGPPConstraint theItem)
        InsertAfter(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theSeq)
        InsertAfter(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, Handle_NLPlate_HGPPConstraint theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, NCollection_Sequence_Handle_NLPlate_HGPPConstraint theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Handle_NLPlate_HGPPConstraint

        First item access

        :rtype: TheItemType &

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self) -> Handle_NLPlate_HGPPConstraint

        Last item access

        :rtype: TheItemType &

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex) -> Handle_NLPlate_HGPPConstraint

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_NLPlate_HGPPConstraint self, Standard_Integer const theIndex, Handle_NLPlate_HGPPConstraint theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_SetValue(self, *args)


    def __iter__(self):
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint___iter__(self)
    __swig_destroy__ = _NLPlate.delete_NCollection_Sequence_Handle_NLPlate_HGPPConstraint
NCollection_Sequence_Handle_NLPlate_HGPPConstraint_swigregister = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_swigregister
NCollection_Sequence_Handle_NLPlate_HGPPConstraint_swigregister(NCollection_Sequence_Handle_NLPlate_HGPPConstraint)

def NCollection_Sequence_Handle_NLPlate_HGPPConstraint_delNode(*args):
    """
    NCollection_Sequence_Handle_NLPlate_HGPPConstraint_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_delNode(*args)

class NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _NLPlate.new_NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NLPlate.delete_NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper

    def __next__(self):
        return _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper___next__(self)
NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper_swigregister = _NLPlate.NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper_swigregister
NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper_swigregister(NCollection_Sequence_Handle_NLPlate_HGPPConstraint_IteratorHelper)


try:
	NLPlate_SequenceOfHGPPConstraint = NCollection_Sequence_Handle_NLPlate_HGPPConstraint
except NameError:
	pass # does not exist, probably ignored



