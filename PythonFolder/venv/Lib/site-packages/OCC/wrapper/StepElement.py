# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepElement')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepElement')
    _StepElement = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepElement', [dirname(__file__)])
        except ImportError:
            import _StepElement
            return _StepElement
        try:
            _mod = imp.load_module('_StepElement', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepElement = swig_import_helper()
    del swig_import_helper
else:
    import _StepElement
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepElement.delete_SwigPyIterator

    def value(self):
        return _StepElement.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepElement.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepElement.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepElement.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepElement.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepElement.SwigPyIterator_copy(self)

    def next(self):
        return _StepElement.SwigPyIterator_next(self)

    def __next__(self):
        return _StepElement.SwigPyIterator___next__(self)

    def previous(self):
        return _StepElement.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepElement.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepElement.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepElement.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepElement.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepElement.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepElement.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepElement.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepElement.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepElement.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepElement.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepElement.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepElement.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepElement.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepElement.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepElement.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepElement.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepElement.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepElement.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepElement.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepElement.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepElement.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepElement.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepElement.ptr_to_number(item)
ptr_to_number = _StepElement.ptr_to_number

def HashCode(*args):
    return _StepElement.HashCode(*args)
HashCode = _StepElement.HashCode

def ptr_equal(a, b):
    return _StepElement.ptr_equal(a, b)
ptr_equal = _StepElement.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
StepElement_XTranslation = _StepElement.StepElement_XTranslation
StepElement_YTranslation = _StepElement.StepElement_YTranslation
StepElement_ZTranslation = _StepElement.StepElement_ZTranslation
StepElement_XRotation = _StepElement.StepElement_XRotation
StepElement_YRotation = _StepElement.StepElement_YRotation
StepElement_ZRotation = _StepElement.StepElement_ZRotation
StepElement_Warp = _StepElement.StepElement_Warp
StepElement_None = _StepElement.StepElement_None
StepElement_Unspecified = _StepElement.StepElement_Unspecified
StepElement_StressDisplacement = _StepElement.StepElement_StressDisplacement
StepElement_MembraneDirect = _StepElement.StepElement_MembraneDirect
StepElement_MembraneShear = _StepElement.StepElement_MembraneShear
StepElement_BendingDirect = _StepElement.StepElement_BendingDirect
StepElement_BendingTorsion = _StepElement.StepElement_BendingTorsion
StepElement_NormalToPlaneShear = _StepElement.StepElement_NormalToPlaneShear
StepElement_Linear = _StepElement.StepElement_Linear
StepElement_Quadratic = _StepElement.StepElement_Quadratic
StepElement_Cubic = _StepElement.StepElement_Cubic
StepElement_ElementEdge = _StepElement.StepElement_ElementEdge
StepElement_Axial = _StepElement.StepElement_Axial
StepElement_YYBending = _StepElement.StepElement_YYBending
StepElement_ZZBending = _StepElement.StepElement_ZZBending
StepElement_Torsion = _StepElement.StepElement_Torsion
StepElement_XYShear = _StepElement.StepElement_XYShear
StepElement_XZShear = _StepElement.StepElement_XZShear
StepElement_Warping = _StepElement.StepElement_Warping
StepElement_Quadrilateral = _StepElement.StepElement_Quadrilateral
StepElement_Triangle = _StepElement.StepElement_Triangle
StepElement_Volume = _StepElement.StepElement_Volume
StepElement_Hexahedron = _StepElement.StepElement_Hexahedron
StepElement_Wedge = _StepElement.StepElement_Wedge
StepElement_Tetrahedron = _StepElement.StepElement_Tetrahedron
StepElement_Pyramid = _StepElement.StepElement_Pyramid
class StepElement_ElementDescriptor(Standard.Standard_Transient):
    """Representation of STEP entity ElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_ElementDescriptor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_ElementDescriptor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_ElementDescriptor self) -> StepElement_ElementDescriptor

        Empty constructor


        """
        this = _StepElement.new_StepElement_ElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_ElementDescriptor self, StepElement_ElementOrder const aTopologyOrder, Handle_TCollection_HAsciiString aDescription)

        Initialize all fields (own and inherited)

        :type aTopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementDescriptor_Init(self, *args)


    def TopologyOrder(self, *args):
        """
        TopologyOrder(StepElement_ElementDescriptor self) -> StepElement_ElementOrder

        Returns field TopologyOrder

        :rtype: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.StepElement_ElementDescriptor_TopologyOrder(self, *args)


    def SetTopologyOrder(self, *args):
        """
        SetTopologyOrder(StepElement_ElementDescriptor self, StepElement_ElementOrder const TopologyOrder)

        Set field TopologyOrder

        :type TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.StepElement_ElementDescriptor_SetTopologyOrder(self, *args)


    def Description(self, *args):
        """
        Description(StepElement_ElementDescriptor self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementDescriptor_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepElement_ElementDescriptor self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementDescriptor_SetDescription(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_ElementDescriptor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_ElementDescriptor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_ElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_ElementDescriptor
StepElement_ElementDescriptor_swigregister = _StepElement.StepElement_ElementDescriptor_swigregister
StepElement_ElementDescriptor_swigregister(StepElement_ElementDescriptor)

def StepElement_ElementDescriptor_get_type_name(*args):
    """
    StepElement_ElementDescriptor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_ElementDescriptor_get_type_name(*args)

def StepElement_ElementDescriptor_get_type_descriptor(*args):
    """
    StepElement_ElementDescriptor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_ElementDescriptor_get_type_descriptor(*args)

class StepElement_SurfaceSection(Standard.Standard_Transient):
    """Representation of STEP entity SurfaceSection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceSection
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceSection(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceSection self) -> StepElement_SurfaceSection

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue aOffset, StepElement_MeasureOrUnspecifiedValue aNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aNonStructuralMassOffset)

        Initialize all fields (own and inherited)

        :type aOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aNonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aNonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_Init(self, *args)


    def Offset(self, *args):
        """
        Offset(StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field Offset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue Offset)

        Set field Offset

        :type Offset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_SetOffset(self, *args)


    def NonStructuralMass(self, *args):
        """
        NonStructuralMass(StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMass

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_NonStructuralMass(self, *args)


    def SetNonStructuralMass(self, *args):
        """
        SetNonStructuralMass(StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMass)

        Set field NonStructuralMass

        :type NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_SetNonStructuralMass(self, *args)


    def NonStructuralMassOffset(self, *args):
        """
        NonStructuralMassOffset(StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMassOffset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_NonStructuralMassOffset(self, *args)


    def SetNonStructuralMassOffset(self, *args):
        """
        SetNonStructuralMassOffset(StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMassOffset)

        Set field NonStructuralMassOffset

        :type NonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_SurfaceSection_SetNonStructuralMassOffset(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceSection_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceSection_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceSection
StepElement_SurfaceSection_swigregister = _StepElement.StepElement_SurfaceSection_swigregister
StepElement_SurfaceSection_swigregister(StepElement_SurfaceSection)

def StepElement_SurfaceSection_get_type_name(*args):
    """
    StepElement_SurfaceSection_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceSection_get_type_name(*args)

def StepElement_SurfaceSection_get_type_descriptor(*args):
    """
    StepElement_SurfaceSection_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceSection_get_type_descriptor(*args)

class StepElement_SurfaceElementPurpose(StepData.StepData_SelectType):
    """Representation of STEP SELECT type SurfaceElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceElementPurpose self) -> StepElement_SurfaceElementPurpose

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_SurfaceElementPurpose self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of SurfaceElementPurpose select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_SurfaceElementPurpose_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_SurfaceElementPurpose self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member SurfaceElementPurposeMember
        1 -> EnumeratedSurfaceElementPurpose
        2 -> ApplicationDefinedElementPurpose
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_SurfaceElementPurpose_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_SurfaceElementPurpose self) -> Handle_StepData_SelectMember

        Returns a new select member the type SurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_SurfaceElementPurpose_NewMember(self, *args)


    def SetEnumeratedSurfaceElementPurpose(self, *args):
        """
        SetEnumeratedSurfaceElementPurpose(StepElement_SurfaceElementPurpose self, StepElement_EnumeratedSurfaceElementPurpose const aVal)

        Set Value for EnumeratedSurfaceElementPurpose

        :type aVal: OCC.wrapper.StepElement.StepElement_EnumeratedSurfaceElementPurpose

        """
        return _StepElement.StepElement_SurfaceElementPurpose_SetEnumeratedSurfaceElementPurpose(self, *args)


    def EnumeratedSurfaceElementPurpose(self, *args):
        """
        EnumeratedSurfaceElementPurpose(StepElement_SurfaceElementPurpose self) -> StepElement_EnumeratedSurfaceElementPurpose

        Returns Value as EnumeratedSurfaceElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_EnumeratedSurfaceElementPurpose

        """
        return _StepElement.StepElement_SurfaceElementPurpose_EnumeratedSurfaceElementPurpose(self, *args)


    def SetApplicationDefinedElementPurpose(self, *args):
        """
        SetApplicationDefinedElementPurpose(StepElement_SurfaceElementPurpose self, Handle_TCollection_HAsciiString aVal)

        Set Value for ApplicationDefinedElementPurpose

        :type aVal: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementPurpose_SetApplicationDefinedElementPurpose(self, *args)


    def ApplicationDefinedElementPurpose(self, *args):
        """
        ApplicationDefinedElementPurpose(StepElement_SurfaceElementPurpose self) -> Handle_TCollection_HAsciiString

        Returns Value as ApplicationDefinedElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementPurpose_ApplicationDefinedElementPurpose(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceElementPurpose
StepElement_SurfaceElementPurpose_swigregister = _StepElement.StepElement_SurfaceElementPurpose_swigregister
StepElement_SurfaceElementPurpose_swigregister(StepElement_SurfaceElementPurpose)

class StepElement_MeasureOrUnspecifiedValue(StepData.StepData_SelectType):
    """Representation of STEP SELECT type MeasureOrUnspecifiedValue"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_MeasureOrUnspecifiedValue self) -> StepElement_MeasureOrUnspecifiedValue

        Empty constructor


        """
        this = _StepElement.new_StepElement_MeasureOrUnspecifiedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_MeasureOrUnspecifiedValue self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of MeasureOrUnspecifiedValue select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_MeasureOrUnspecifiedValue self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member MeasureOrUnspecifiedValueMember
        1 -> ContextDependentMeasure
        2 -> UnspecifiedValue
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_MeasureOrUnspecifiedValue self) -> Handle_StepData_SelectMember

        Returns a new select member the type MeasureOrUnspecifiedValueMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_NewMember(self, *args)


    def SetContextDependentMeasure(self, *args):
        """
        SetContextDependentMeasure(StepElement_MeasureOrUnspecifiedValue self, Standard_Real const aVal)

        Set Value for ContextDependentMeasure

        :type aVal: float

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_SetContextDependentMeasure(self, *args)


    def ContextDependentMeasure(self, *args):
        """
        ContextDependentMeasure(StepElement_MeasureOrUnspecifiedValue self) -> Standard_Real

        Returns Value as ContextDependentMeasure (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_ContextDependentMeasure(self, *args)


    def SetUnspecifiedValue(self, *args):
        """
        SetUnspecifiedValue(StepElement_MeasureOrUnspecifiedValue self, StepElement_UnspecifiedValue const aVal)

        Set Value for UnspecifiedValue

        :type aVal: OCC.wrapper.StepElement.StepElement_UnspecifiedValue

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_SetUnspecifiedValue(self, *args)


    def UnspecifiedValue(self, *args):
        """
        UnspecifiedValue(StepElement_MeasureOrUnspecifiedValue self) -> StepElement_UnspecifiedValue

        Returns Value as UnspecifiedValue (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_UnspecifiedValue

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValue_UnspecifiedValue(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_MeasureOrUnspecifiedValue
StepElement_MeasureOrUnspecifiedValue_swigregister = _StepElement.StepElement_MeasureOrUnspecifiedValue_swigregister
StepElement_MeasureOrUnspecifiedValue_swigregister(StepElement_MeasureOrUnspecifiedValue)

class StepElement_CurveElementEndReleasePacket(Standard.Standard_Transient):
    """Representation of STEP entity CurveElementEndReleasePacket"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_CurveElementEndReleasePacket
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_CurveElementEndReleasePacket(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementEndReleasePacket

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementFreedom aReleaseFreedom, Standard_Real const aReleaseStiffness)

        Initialize all fields (own and inherited)

        :type aReleaseFreedom: OCC.wrapper.StepElement.StepElement_CurveElementFreedom
        :type aReleaseStiffness: float

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_Init(self, *args)


    def ReleaseFreedom(self, *args):
        """
        ReleaseFreedom(StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementFreedom

        Returns field ReleaseFreedom

        :rtype: OCC.wrapper.StepElement.StepElement_CurveElementFreedom

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_ReleaseFreedom(self, *args)


    def SetReleaseFreedom(self, *args):
        """
        SetReleaseFreedom(StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementFreedom ReleaseFreedom)

        Set field ReleaseFreedom

        :type ReleaseFreedom: OCC.wrapper.StepElement.StepElement_CurveElementFreedom

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_SetReleaseFreedom(self, *args)


    def ReleaseStiffness(self, *args):
        """
        ReleaseStiffness(StepElement_CurveElementEndReleasePacket self) -> Standard_Real

        Returns field ReleaseStiffness

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_ReleaseStiffness(self, *args)


    def SetReleaseStiffness(self, *args):
        """
        SetReleaseStiffness(StepElement_CurveElementEndReleasePacket self, Standard_Real const ReleaseStiffness)

        Set field ReleaseStiffness

        :type ReleaseStiffness: float

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_SetReleaseStiffness(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_CurveElementEndReleasePacket_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_CurveElementEndReleasePacket_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementEndReleasePacket
StepElement_CurveElementEndReleasePacket_swigregister = _StepElement.StepElement_CurveElementEndReleasePacket_swigregister
StepElement_CurveElementEndReleasePacket_swigregister(StepElement_CurveElementEndReleasePacket)

def StepElement_CurveElementEndReleasePacket_get_type_name(*args):
    """
    StepElement_CurveElementEndReleasePacket_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_CurveElementEndReleasePacket_get_type_name(*args)

def StepElement_CurveElementEndReleasePacket_get_type_descriptor(*args):
    """
    StepElement_CurveElementEndReleasePacket_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_CurveElementEndReleasePacket_get_type_descriptor(*args)

class StepElement_HSequenceOfCurveElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HSequenceOfCurveElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HSequenceOfCurveElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HSequenceOfCurveElementPurposeMember self) -> StepElement_HSequenceOfCurveElementPurposeMember
        __init__(StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theOther) -> StepElement_HSequenceOfCurveElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        this = _StepElement.new_StepElement_HSequenceOfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        res = _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepElement_HSequenceOfCurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theItem)
        Append(StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HSequenceOfCurveElementPurposeMember
StepElement_HSequenceOfCurveElementPurposeMember_swigregister = _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_swigregister
StepElement_HSequenceOfCurveElementPurposeMember_swigregister(StepElement_HSequenceOfCurveElementPurposeMember)

def StepElement_HSequenceOfCurveElementPurposeMember_get_type_name(*args):
    """
    StepElement_HSequenceOfCurveElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_get_type_name(*args)

def StepElement_HSequenceOfCurveElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HSequenceOfCurveElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HSequenceOfCurveElementPurposeMember_get_type_descriptor(*args)

class StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        __init__(StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theValue) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        __init__(StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theOther) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember

        """
        this = _StepElement.new_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember

        """
        res = _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister = _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister
StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister(StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember)

def StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_name(*args):
    """
    StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_name(*args)

def StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args)

class StepElement_SurfaceSectionField(Standard.Standard_Transient):
    """Representation of STEP entity SurfaceSectionField"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceSectionField
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceSectionField(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceSectionField self) -> StepElement_SurfaceSectionField

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceSectionField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceSectionField_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceSectionField_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceSectionField_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceSectionField
StepElement_SurfaceSectionField_swigregister = _StepElement.StepElement_SurfaceSectionField_swigregister
StepElement_SurfaceSectionField_swigregister(StepElement_SurfaceSectionField)

def StepElement_SurfaceSectionField_get_type_name(*args):
    """
    StepElement_SurfaceSectionField_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceSectionField_get_type_name(*args)

def StepElement_SurfaceSectionField_get_type_descriptor(*args):
    """
    StepElement_SurfaceSectionField_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceSectionField_get_type_descriptor(*args)

class StepElement_HArray2OfCurveElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray2OfCurveElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray2OfCurveElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray2OfCurveElementPurposeMember self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StepElement_HArray2OfCurveElementPurposeMember
        __init__(StepElement_HArray2OfCurveElementPurposeMember self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_StepElement_CurveElementPurposeMember theValue) -> StepElement_HArray2OfCurveElementPurposeMember
        __init__(StepElement_HArray2OfCurveElementPurposeMember self, NCollection_Array2_Handle_StepElement_CurveElementPurposeMember theOther) -> StepElement_HArray2OfCurveElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_Array2OfCurveElementPurposeMember

        """
        this = _StepElement.new_StepElement_HArray2OfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfCurveElementPurposeMember

        """
        res = _StepElement.StepElement_HArray2OfCurveElementPurposeMember_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StepElement_HArray2OfCurveElementPurposeMember self) -> NCollection_Array2_Handle_StepElement_CurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfCurveElementPurposeMember

        """
        return _StepElement.StepElement_HArray2OfCurveElementPurposeMember_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray2OfCurveElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray2OfCurveElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray2OfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray2OfCurveElementPurposeMember
StepElement_HArray2OfCurveElementPurposeMember_swigregister = _StepElement.StepElement_HArray2OfCurveElementPurposeMember_swigregister
StepElement_HArray2OfCurveElementPurposeMember_swigregister(StepElement_HArray2OfCurveElementPurposeMember)

def StepElement_HArray2OfCurveElementPurposeMember_get_type_name(*args):
    """
    StepElement_HArray2OfCurveElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray2OfCurveElementPurposeMember_get_type_name(*args)

def StepElement_HArray2OfCurveElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HArray2OfCurveElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray2OfCurveElementPurposeMember_get_type_descriptor(*args)

class StepElement_HArray1OfCurveElementSectionDefinition(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfCurveElementSectionDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfCurveElementSectionDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfCurveElementSectionDefinition self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfCurveElementSectionDefinition
        __init__(StepElement_HArray1OfCurveElementSectionDefinition self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_CurveElementSectionDefinition theValue) -> StepElement_HArray1OfCurveElementSectionDefinition
        __init__(StepElement_HArray1OfCurveElementSectionDefinition self, NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition theOther) -> StepElement_HArray1OfCurveElementSectionDefinition

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementSectionDefinition

        """
        this = _StepElement.new_StepElement_HArray1OfCurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementSectionDefinition

        """
        res = _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfCurveElementSectionDefinition self) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementSectionDefinition

        """
        return _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfCurveElementSectionDefinition
StepElement_HArray1OfCurveElementSectionDefinition_swigregister = _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_swigregister
StepElement_HArray1OfCurveElementSectionDefinition_swigregister(StepElement_HArray1OfCurveElementSectionDefinition)

def StepElement_HArray1OfCurveElementSectionDefinition_get_type_name(*args):
    """
    StepElement_HArray1OfCurveElementSectionDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_get_type_name(*args)

def StepElement_HArray1OfCurveElementSectionDefinition_get_type_descriptor(*args):
    """
    StepElement_HArray1OfCurveElementSectionDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfCurveElementSectionDefinition_get_type_descriptor(*args)

class StepElement_UniformSurfaceSection(StepElement_SurfaceSection):
    """Representation of STEP entity UniformSurfaceSection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_UniformSurfaceSection
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_UniformSurfaceSection(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_UniformSurfaceSection self) -> StepElement_UniformSurfaceSection

        Empty constructor


        """
        this = _StepElement.new_StepElement_UniformSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_Offset, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_NonStructuralMass, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_NonStructuralMassOffset, Standard_Real const aThickness, StepElement_MeasureOrUnspecifiedValue aBendingThickness, StepElement_MeasureOrUnspecifiedValue aShearThickness)

        Initialize all fields (own and inherited)

        :type aSurfaceSection_Offset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aSurfaceSection_NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aSurfaceSection_NonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aThickness: float
        :type aBendingThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aShearThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_UniformSurfaceSection_Init(self, *args)


    def Thickness(self, *args):
        """
        Thickness(StepElement_UniformSurfaceSection self) -> Standard_Real

        Returns field Thickness

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_UniformSurfaceSection_Thickness(self, *args)


    def SetThickness(self, *args):
        """
        SetThickness(StepElement_UniformSurfaceSection self, Standard_Real const Thickness)

        Set field Thickness

        :type Thickness: float

        """
        return _StepElement.StepElement_UniformSurfaceSection_SetThickness(self, *args)


    def BendingThickness(self, *args):
        """
        BendingThickness(StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field BendingThickness

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_UniformSurfaceSection_BendingThickness(self, *args)


    def SetBendingThickness(self, *args):
        """
        SetBendingThickness(StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue BendingThickness)

        Set field BendingThickness

        :type BendingThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_UniformSurfaceSection_SetBendingThickness(self, *args)


    def ShearThickness(self, *args):
        """
        ShearThickness(StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field ShearThickness

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_UniformSurfaceSection_ShearThickness(self, *args)


    def SetShearThickness(self, *args):
        """
        SetShearThickness(StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue ShearThickness)

        Set field ShearThickness

        :type ShearThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_UniformSurfaceSection_SetShearThickness(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_UniformSurfaceSection_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_UniformSurfaceSection_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_UniformSurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_UniformSurfaceSection
StepElement_UniformSurfaceSection_swigregister = _StepElement.StepElement_UniformSurfaceSection_swigregister
StepElement_UniformSurfaceSection_swigregister(StepElement_UniformSurfaceSection)

def StepElement_UniformSurfaceSection_get_type_name(*args):
    """
    StepElement_UniformSurfaceSection_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_UniformSurfaceSection_get_type_name(*args)

def StepElement_UniformSurfaceSection_get_type_descriptor(*args):
    """
    StepElement_UniformSurfaceSection_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_UniformSurfaceSection_get_type_descriptor(*args)

class StepElement_SurfaceElementPurposeMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type SurfaceElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceElementPurposeMember self) -> StepElement_SurfaceElementPurposeMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_SurfaceElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_SurfaceElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_SurfaceElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_SurfaceElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceElementPurposeMember
StepElement_SurfaceElementPurposeMember_swigregister = _StepElement.StepElement_SurfaceElementPurposeMember_swigregister
StepElement_SurfaceElementPurposeMember_swigregister(StepElement_SurfaceElementPurposeMember)

def StepElement_SurfaceElementPurposeMember_get_type_name(*args):
    """
    StepElement_SurfaceElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceElementPurposeMember_get_type_name(*args)

def StepElement_SurfaceElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_SurfaceElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceElementPurposeMember_get_type_descriptor(*args)

class StepElement_VolumeElementPurpose(StepData.StepData_SelectType):
    """Representation of STEP SELECT type VolumeElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_VolumeElementPurpose self) -> StepElement_VolumeElementPurpose

        Empty constructor


        """
        this = _StepElement.new_StepElement_VolumeElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_VolumeElementPurpose self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of VolumeElementPurpose select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_VolumeElementPurpose_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_VolumeElementPurpose self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member VolumeElementPurposeMember
        1 -> EnumeratedVolumeElementPurpose
        2 -> ApplicationDefinedElementPurpose
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_VolumeElementPurpose_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_VolumeElementPurpose self) -> Handle_StepData_SelectMember

        Returns a new select member the type VolumeElementPurposeMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_VolumeElementPurpose_NewMember(self, *args)


    def SetEnumeratedVolumeElementPurpose(self, *args):
        """
        SetEnumeratedVolumeElementPurpose(StepElement_VolumeElementPurpose self, StepElement_EnumeratedVolumeElementPurpose const aVal)

        Set Value for EnumeratedVolumeElementPurpose

        :type aVal: OCC.wrapper.StepElement.StepElement_EnumeratedVolumeElementPurpose

        """
        return _StepElement.StepElement_VolumeElementPurpose_SetEnumeratedVolumeElementPurpose(self, *args)


    def EnumeratedVolumeElementPurpose(self, *args):
        """
        EnumeratedVolumeElementPurpose(StepElement_VolumeElementPurpose self) -> StepElement_EnumeratedVolumeElementPurpose

        Returns Value as EnumeratedVolumeElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_EnumeratedVolumeElementPurpose

        """
        return _StepElement.StepElement_VolumeElementPurpose_EnumeratedVolumeElementPurpose(self, *args)


    def SetApplicationDefinedElementPurpose(self, *args):
        """
        SetApplicationDefinedElementPurpose(StepElement_VolumeElementPurpose self, Handle_TCollection_HAsciiString aVal)

        Set Value for ApplicationDefinedElementPurpose

        :type aVal: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_VolumeElementPurpose_SetApplicationDefinedElementPurpose(self, *args)


    def ApplicationDefinedElementPurpose(self, *args):
        """
        ApplicationDefinedElementPurpose(StepElement_VolumeElementPurpose self) -> Handle_TCollection_HAsciiString

        Returns Value as ApplicationDefinedElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_VolumeElementPurpose_ApplicationDefinedElementPurpose(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_VolumeElementPurpose
StepElement_VolumeElementPurpose_swigregister = _StepElement.StepElement_VolumeElementPurpose_swigregister
StepElement_VolumeElementPurpose_swigregister(StepElement_VolumeElementPurpose)

class StepElement_CurveElementPurposeMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type CurveElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_CurveElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_CurveElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementPurposeMember self) -> StepElement_CurveElementPurposeMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_CurveElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_CurveElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_CurveElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_CurveElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_CurveElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementPurposeMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_CurveElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_CurveElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_CurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementPurposeMember
StepElement_CurveElementPurposeMember_swigregister = _StepElement.StepElement_CurveElementPurposeMember_swigregister
StepElement_CurveElementPurposeMember_swigregister(StepElement_CurveElementPurposeMember)

def StepElement_CurveElementPurposeMember_get_type_name(*args):
    """
    StepElement_CurveElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_CurveElementPurposeMember_get_type_name(*args)

def StepElement_CurveElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_CurveElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_CurveElementPurposeMember_get_type_descriptor(*args)

class StepElement_Surface3dElementDescriptor(StepElement_ElementDescriptor):
    """Representation of STEP entity Surface3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_Surface3dElementDescriptor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_Surface3dElementDescriptor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_Surface3dElementDescriptor self) -> StepElement_Surface3dElementDescriptor

        Empty constructor


        """
        this = _StepElement.new_StepElement_Surface3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_Surface3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember aPurpose, StepElement_Element2dShape const aShape)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        :type aShape: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(StepElement_Surface3dElementDescriptor self) -> Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(StepElement_Surface3dElementDescriptor self, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_SetPurpose(self, *args)


    def Shape(self, *args):
        """
        Shape(StepElement_Surface3dElementDescriptor self) -> StepElement_Element2dShape

        Returns field Shape

        :rtype: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_Shape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(StepElement_Surface3dElementDescriptor self, StepElement_Element2dShape const Shape)

        Set field Shape

        :type Shape: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_SetShape(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_Surface3dElementDescriptor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_Surface3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_Surface3dElementDescriptor
StepElement_Surface3dElementDescriptor_swigregister = _StepElement.StepElement_Surface3dElementDescriptor_swigregister
StepElement_Surface3dElementDescriptor_swigregister(StepElement_Surface3dElementDescriptor)

def StepElement_Surface3dElementDescriptor_get_type_name(*args):
    """
    StepElement_Surface3dElementDescriptor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_Surface3dElementDescriptor_get_type_name(*args)

def StepElement_Surface3dElementDescriptor_get_type_descriptor(*args):
    """
    StepElement_Surface3dElementDescriptor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_Surface3dElementDescriptor_get_type_descriptor(*args)

class StepElement_ElementMaterial(Standard.Standard_Transient):
    """Representation of STEP entity ElementMaterial"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_ElementMaterial
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_ElementMaterial(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_ElementMaterial self) -> StepElement_ElementMaterial

        Empty constructor


        """
        this = _StepElement.new_StepElement_ElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_ElementMaterial self, Handle_TCollection_HAsciiString aMaterialId, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation aProperties)

        Initialize all fields (own and inherited)

        :type aMaterialId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProperties: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.StepElement_ElementMaterial_Init(self, *args)


    def MaterialId(self, *args):
        """
        MaterialId(StepElement_ElementMaterial self) -> Handle_TCollection_HAsciiString

        Returns field MaterialId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementMaterial_MaterialId(self, *args)


    def SetMaterialId(self, *args):
        """
        SetMaterialId(StepElement_ElementMaterial self, Handle_TCollection_HAsciiString MaterialId)

        Set field MaterialId

        :type MaterialId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementMaterial_SetMaterialId(self, *args)


    def Description(self, *args):
        """
        Description(StepElement_ElementMaterial self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementMaterial_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepElement_ElementMaterial self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_ElementMaterial_SetDescription(self, *args)


    def Properties(self, *args):
        """
        Properties(StepElement_ElementMaterial self) -> Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        Returns field Properties

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.StepElement_ElementMaterial_Properties(self, *args)


    def SetProperties(self, *args):
        """
        SetProperties(StepElement_ElementMaterial self, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation Properties)

        Set field Properties

        :type Properties: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.StepElement_ElementMaterial_SetProperties(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_ElementMaterial_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_ElementMaterial_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_ElementMaterial_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_ElementMaterial
StepElement_ElementMaterial_swigregister = _StepElement.StepElement_ElementMaterial_swigregister
StepElement_ElementMaterial_swigregister(StepElement_ElementMaterial)

def StepElement_ElementMaterial_get_type_name(*args):
    """
    StepElement_ElementMaterial_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_ElementMaterial_get_type_name(*args)

def StepElement_ElementMaterial_get_type_descriptor(*args):
    """
    StepElement_ElementMaterial_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_ElementMaterial_get_type_descriptor(*args)

class StepElement_HSequenceOfSurfaceElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HSequenceOfSurfaceElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HSequenceOfSurfaceElementPurposeMember self) -> StepElement_HSequenceOfSurfaceElementPurposeMember
        __init__(StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theOther) -> StepElement_HSequenceOfSurfaceElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        this = _StepElement.new_StepElement_HSequenceOfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        res = _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theItem)
        Append(StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HSequenceOfSurfaceElementPurposeMember
StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister = _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister
StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister(StepElement_HSequenceOfSurfaceElementPurposeMember)

def StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_name(*args):
    """
    StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_name(*args)

def StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_descriptor(*args)

class StepElement_HArray1OfVolumeElementPurpose(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfVolumeElementPurpose
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfVolumeElementPurpose(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfVolumeElementPurpose self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfVolumeElementPurpose
        __init__(StepElement_HArray1OfVolumeElementPurpose self, Standard_Integer const theLower, Standard_Integer const theUpper, StepElement_VolumeElementPurpose theValue) -> StepElement_HArray1OfVolumeElementPurpose
        __init__(StepElement_HArray1OfVolumeElementPurpose self, NCollection_Array1_StepElement_VolumeElementPurpose theOther) -> StepElement_HArray1OfVolumeElementPurpose

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurpose

        """
        this = _StepElement.new_StepElement_HArray1OfVolumeElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurpose

        """
        res = _StepElement.StepElement_HArray1OfVolumeElementPurpose_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfVolumeElementPurpose self) -> NCollection_Array1_StepElement_VolumeElementPurpose

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurpose

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurpose_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurpose_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurpose_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfVolumeElementPurpose_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfVolumeElementPurpose
StepElement_HArray1OfVolumeElementPurpose_swigregister = _StepElement.StepElement_HArray1OfVolumeElementPurpose_swigregister
StepElement_HArray1OfVolumeElementPurpose_swigregister(StepElement_HArray1OfVolumeElementPurpose)

def StepElement_HArray1OfVolumeElementPurpose_get_type_name(*args):
    """
    StepElement_HArray1OfVolumeElementPurpose_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfVolumeElementPurpose_get_type_name(*args)

def StepElement_HArray1OfVolumeElementPurpose_get_type_descriptor(*args):
    """
    StepElement_HArray1OfVolumeElementPurpose_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfVolumeElementPurpose_get_type_descriptor(*args)

class StepElement_HArray2OfSurfaceElementPurpose(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray2OfSurfaceElementPurpose
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray2OfSurfaceElementPurpose(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray2OfSurfaceElementPurpose self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StepElement_HArray2OfSurfaceElementPurpose
        __init__(StepElement_HArray2OfSurfaceElementPurpose self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, StepElement_SurfaceElementPurpose theValue) -> StepElement_HArray2OfSurfaceElementPurpose
        __init__(StepElement_HArray2OfSurfaceElementPurpose self, NCollection_Array2_StepElement_SurfaceElementPurpose theOther) -> StepElement_HArray2OfSurfaceElementPurpose

        :type theOther: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurpose

        """
        this = _StepElement.new_StepElement_HArray2OfSurfaceElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurpose

        """
        res = _StepElement.StepElement_HArray2OfSurfaceElementPurpose_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StepElement_HArray2OfSurfaceElementPurpose self) -> NCollection_Array2_StepElement_SurfaceElementPurpose

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurpose

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurpose_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurpose_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurpose_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray2OfSurfaceElementPurpose_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray2OfSurfaceElementPurpose
StepElement_HArray2OfSurfaceElementPurpose_swigregister = _StepElement.StepElement_HArray2OfSurfaceElementPurpose_swigregister
StepElement_HArray2OfSurfaceElementPurpose_swigregister(StepElement_HArray2OfSurfaceElementPurpose)

def StepElement_HArray2OfSurfaceElementPurpose_get_type_name(*args):
    """
    StepElement_HArray2OfSurfaceElementPurpose_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray2OfSurfaceElementPurpose_get_type_name(*args)

def StepElement_HArray2OfSurfaceElementPurpose_get_type_descriptor(*args):
    """
    StepElement_HArray2OfSurfaceElementPurpose_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray2OfSurfaceElementPurpose_get_type_descriptor(*args)

class StepElement_HArray2OfSurfaceElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray2OfSurfaceElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray2OfSurfaceElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray2OfSurfaceElementPurposeMember self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> StepElement_HArray2OfSurfaceElementPurposeMember
        __init__(StepElement_HArray2OfSurfaceElementPurposeMember self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_StepElement_SurfaceElementPurposeMember theValue) -> StepElement_HArray2OfSurfaceElementPurposeMember
        __init__(StepElement_HArray2OfSurfaceElementPurposeMember self, NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember theOther) -> StepElement_HArray2OfSurfaceElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurposeMember

        """
        this = _StepElement.new_StepElement_HArray2OfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurposeMember

        """
        res = _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(StepElement_HArray2OfSurfaceElementPurposeMember self) -> NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurposeMember

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray2OfSurfaceElementPurposeMember
StepElement_HArray2OfSurfaceElementPurposeMember_swigregister = _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_swigregister
StepElement_HArray2OfSurfaceElementPurposeMember_swigregister(StepElement_HArray2OfSurfaceElementPurposeMember)

def StepElement_HArray2OfSurfaceElementPurposeMember_get_type_name(*args):
    """
    StepElement_HArray2OfSurfaceElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_get_type_name(*args)

def StepElement_HArray2OfSurfaceElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HArray2OfSurfaceElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray2OfSurfaceElementPurposeMember_get_type_descriptor(*args)

class StepElement_CurveElementSectionDefinition(Standard.Standard_Transient):
    """Representation of STEP entity CurveElementSectionDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_CurveElementSectionDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_CurveElementSectionDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementSectionDefinition self) -> StepElement_CurveElementSectionDefinition

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_CurveElementSectionDefinition self, Handle_TCollection_HAsciiString aDescription, Standard_Real const aSectionAngle)

        Initialize all fields (own and inherited)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSectionAngle: float

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_Init(self, *args)


    def Description(self, *args):
        """
        Description(StepElement_CurveElementSectionDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepElement_CurveElementSectionDefinition self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_SetDescription(self, *args)


    def SectionAngle(self, *args):
        """
        SectionAngle(StepElement_CurveElementSectionDefinition self) -> Standard_Real

        Returns field SectionAngle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_SectionAngle(self, *args)


    def SetSectionAngle(self, *args):
        """
        SetSectionAngle(StepElement_CurveElementSectionDefinition self, Standard_Real const SectionAngle)

        Set field SectionAngle

        :type SectionAngle: float

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_SetSectionAngle(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_CurveElementSectionDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_CurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementSectionDefinition
StepElement_CurveElementSectionDefinition_swigregister = _StepElement.StepElement_CurveElementSectionDefinition_swigregister
StepElement_CurveElementSectionDefinition_swigregister(StepElement_CurveElementSectionDefinition)

def StepElement_CurveElementSectionDefinition_get_type_name(*args):
    """
    StepElement_CurveElementSectionDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_CurveElementSectionDefinition_get_type_name(*args)

def StepElement_CurveElementSectionDefinition_get_type_descriptor(*args):
    """
    StepElement_CurveElementSectionDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_CurveElementSectionDefinition_get_type_descriptor(*args)

class StepElement_HArray1OfHSequenceOfCurveElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
        __init__(StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_HSequenceOfCurveElementPurposeMember theValue) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
        __init__(StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember theOther) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfCurveElementPurposeMember

        """
        this = _StepElement.new_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfCurveElementPurposeMember

        """
        res = _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister = _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister
StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister(StepElement_HArray1OfHSequenceOfCurveElementPurposeMember)

def StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_name(*args):
    """
    StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_name(*args)

def StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_descriptor(*args)

class StepElement_VolumeElementPurposeMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type VolumeElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_VolumeElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_VolumeElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_VolumeElementPurposeMember self) -> StepElement_VolumeElementPurposeMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_VolumeElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_VolumeElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_VolumeElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_VolumeElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_VolumeElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_VolumeElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_VolumeElementPurposeMember
StepElement_VolumeElementPurposeMember_swigregister = _StepElement.StepElement_VolumeElementPurposeMember_swigregister
StepElement_VolumeElementPurposeMember_swigregister(StepElement_VolumeElementPurposeMember)

def StepElement_VolumeElementPurposeMember_get_type_name(*args):
    """
    StepElement_VolumeElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_VolumeElementPurposeMember_get_type_name(*args)

def StepElement_VolumeElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_VolumeElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_VolumeElementPurposeMember_get_type_descriptor(*args)

class StepElement_MeasureOrUnspecifiedValueMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type MeasureOrUnspecifiedValue"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_MeasureOrUnspecifiedValueMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_MeasureOrUnspecifiedValueMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_MeasureOrUnspecifiedValueMember self) -> StepElement_MeasureOrUnspecifiedValueMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_MeasureOrUnspecifiedValueMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_MeasureOrUnspecifiedValueMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_MeasureOrUnspecifiedValueMember
StepElement_MeasureOrUnspecifiedValueMember_swigregister = _StepElement.StepElement_MeasureOrUnspecifiedValueMember_swigregister
StepElement_MeasureOrUnspecifiedValueMember_swigregister(StepElement_MeasureOrUnspecifiedValueMember)

def StepElement_MeasureOrUnspecifiedValueMember_get_type_name(*args):
    """
    StepElement_MeasureOrUnspecifiedValueMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_get_type_name(*args)

def StepElement_MeasureOrUnspecifiedValueMember_get_type_descriptor(*args):
    """
    StepElement_MeasureOrUnspecifiedValueMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_MeasureOrUnspecifiedValueMember_get_type_descriptor(*args)

class StepElement_SurfaceSectionFieldVarying(StepElement_SurfaceSectionField):
    """Representation of STEP entity SurfaceSectionFieldVarying"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceSectionFieldVarying
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceSectionFieldVarying(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceSectionFieldVarying self) -> StepElement_SurfaceSectionFieldVarying

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceSectionFieldVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_HArray1OfSurfaceSection aDefinitions, Standard_Boolean const aAdditionalNodeValues)

        Initialize all fields (own and inherited)

        :type aDefinitions: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection
        :type aAdditionalNodeValues: bool

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_Init(self, *args)


    def Definitions(self, *args):
        """
        Definitions(StepElement_SurfaceSectionFieldVarying self) -> Handle_StepElement_HArray1OfSurfaceSection

        Returns field Definitions

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_Definitions(self, *args)


    def SetDefinitions(self, *args):
        """
        SetDefinitions(StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_HArray1OfSurfaceSection Definitions)

        Set field Definitions

        :type Definitions: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_SetDefinitions(self, *args)


    def AdditionalNodeValues(self, *args):
        """
        AdditionalNodeValues(StepElement_SurfaceSectionFieldVarying self) -> Standard_Boolean

        Returns field AdditionalNodeValues

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_AdditionalNodeValues(self, *args)


    def SetAdditionalNodeValues(self, *args):
        """
        SetAdditionalNodeValues(StepElement_SurfaceSectionFieldVarying self, Standard_Boolean const AdditionalNodeValues)

        Set field AdditionalNodeValues

        :type AdditionalNodeValues: bool

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_SetAdditionalNodeValues(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceSectionFieldVarying_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceSectionFieldVarying_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceSectionFieldVarying
StepElement_SurfaceSectionFieldVarying_swigregister = _StepElement.StepElement_SurfaceSectionFieldVarying_swigregister
StepElement_SurfaceSectionFieldVarying_swigregister(StepElement_SurfaceSectionFieldVarying)

def StepElement_SurfaceSectionFieldVarying_get_type_name(*args):
    """
    StepElement_SurfaceSectionFieldVarying_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceSectionFieldVarying_get_type_name(*args)

def StepElement_SurfaceSectionFieldVarying_get_type_descriptor(*args):
    """
    StepElement_SurfaceSectionFieldVarying_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceSectionFieldVarying_get_type_descriptor(*args)

class StepElement_Curve3dElementDescriptor(StepElement_ElementDescriptor):
    """Representation of STEP entity Curve3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_Curve3dElementDescriptor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_Curve3dElementDescriptor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_Curve3dElementDescriptor self) -> StepElement_Curve3dElementDescriptor

        Empty constructor


        """
        this = _StepElement.new_StepElement_Curve3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_Curve3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember aPurpose)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_Curve3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(StepElement_Curve3dElementDescriptor self) -> Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_Curve3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(StepElement_Curve3dElementDescriptor self, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.StepElement_Curve3dElementDescriptor_SetPurpose(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_Curve3dElementDescriptor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_Curve3dElementDescriptor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_Curve3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_Curve3dElementDescriptor
StepElement_Curve3dElementDescriptor_swigregister = _StepElement.StepElement_Curve3dElementDescriptor_swigregister
StepElement_Curve3dElementDescriptor_swigregister(StepElement_Curve3dElementDescriptor)

def StepElement_Curve3dElementDescriptor_get_type_name(*args):
    """
    StepElement_Curve3dElementDescriptor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_Curve3dElementDescriptor_get_type_name(*args)

def StepElement_Curve3dElementDescriptor_get_type_descriptor(*args):
    """
    StepElement_Curve3dElementDescriptor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_Curve3dElementDescriptor_get_type_descriptor(*args)

class StepElement_HArray1OfVolumeElementPurposeMember(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfVolumeElementPurposeMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfVolumeElementPurposeMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfVolumeElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfVolumeElementPurposeMember
        __init__(StepElement_HArray1OfVolumeElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_VolumeElementPurposeMember theValue) -> StepElement_HArray1OfVolumeElementPurposeMember
        __init__(StepElement_HArray1OfVolumeElementPurposeMember self, NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember theOther) -> StepElement_HArray1OfVolumeElementPurposeMember

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurposeMember

        """
        this = _StepElement.new_StepElement_HArray1OfVolumeElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurposeMember

        """
        res = _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfVolumeElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurposeMember

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfVolumeElementPurposeMember
StepElement_HArray1OfVolumeElementPurposeMember_swigregister = _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_swigregister
StepElement_HArray1OfVolumeElementPurposeMember_swigregister(StepElement_HArray1OfVolumeElementPurposeMember)

def StepElement_HArray1OfVolumeElementPurposeMember_get_type_name(*args):
    """
    StepElement_HArray1OfVolumeElementPurposeMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_get_type_name(*args)

def StepElement_HArray1OfVolumeElementPurposeMember_get_type_descriptor(*args):
    """
    StepElement_HArray1OfVolumeElementPurposeMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfVolumeElementPurposeMember_get_type_descriptor(*args)

class StepElement_ElementAspectMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type ElementAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_ElementAspectMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_ElementAspectMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_ElementAspectMember self) -> StepElement_ElementAspectMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_ElementAspectMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_ElementAspectMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_ElementAspectMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_ElementAspectMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_ElementAspectMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_ElementAspectMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_ElementAspectMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_ElementAspectMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_ElementAspectMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_ElementAspectMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_ElementAspectMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_ElementAspectMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_ElementAspectMember
StepElement_ElementAspectMember_swigregister = _StepElement.StepElement_ElementAspectMember_swigregister
StepElement_ElementAspectMember_swigregister(StepElement_ElementAspectMember)

def StepElement_ElementAspectMember_get_type_name(*args):
    """
    StepElement_ElementAspectMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_ElementAspectMember_get_type_name(*args)

def StepElement_ElementAspectMember_get_type_descriptor(*args):
    """
    StepElement_ElementAspectMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_ElementAspectMember_get_type_descriptor(*args)

class StepElement_HArray1OfSurfaceSection(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfSurfaceSection
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfSurfaceSection(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfSurfaceSection self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfSurfaceSection
        __init__(StepElement_HArray1OfSurfaceSection self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_SurfaceSection theValue) -> StepElement_HArray1OfSurfaceSection
        __init__(StepElement_HArray1OfSurfaceSection self, NCollection_Array1_Handle_StepElement_SurfaceSection theOther) -> StepElement_HArray1OfSurfaceSection

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfSurfaceSection

        """
        this = _StepElement.new_StepElement_HArray1OfSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfSurfaceSection

        """
        res = _StepElement.StepElement_HArray1OfSurfaceSection_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfSurfaceSection self) -> NCollection_Array1_Handle_StepElement_SurfaceSection

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfSurfaceSection

        """
        return _StepElement.StepElement_HArray1OfSurfaceSection_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfSurfaceSection_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfSurfaceSection_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfSurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfSurfaceSection
StepElement_HArray1OfSurfaceSection_swigregister = _StepElement.StepElement_HArray1OfSurfaceSection_swigregister
StepElement_HArray1OfSurfaceSection_swigregister(StepElement_HArray1OfSurfaceSection)

def StepElement_HArray1OfSurfaceSection_get_type_name(*args):
    """
    StepElement_HArray1OfSurfaceSection_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfSurfaceSection_get_type_name(*args)

def StepElement_HArray1OfSurfaceSection_get_type_descriptor(*args):
    """
    StepElement_HArray1OfSurfaceSection_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfSurfaceSection_get_type_descriptor(*args)

class StepElement_AnalysisItemWithinRepresentation(Standard.Standard_Transient):
    """Representation of STEP entity AnalysisItemWithinRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_AnalysisItemWithinRepresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_AnalysisItemWithinRepresentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_AnalysisItemWithinRepresentation self) -> StepElement_AnalysisItemWithinRepresentation

        Empty constructor


        """
        this = _StepElement.new_StepElement_AnalysisItemWithinRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_RepresentationItem aItem, Handle_StepRepr_Representation aRep)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aRep: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_Init(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_AnalysisItemWithinRepresentation self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_SetName(self, *args)


    def Description(self, *args):
        """
        Description(StepElement_AnalysisItemWithinRepresentation self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_SetDescription(self, *args)


    def Item(self, *args):
        """
        Item(StepElement_AnalysisItemWithinRepresentation self) -> Handle_StepRepr_RepresentationItem

        Returns field Item

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_Item(self, *args)


    def SetItem(self, *args):
        """
        SetItem(StepElement_AnalysisItemWithinRepresentation self, Handle_StepRepr_RepresentationItem Item)

        Set field Item

        :type Item: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_SetItem(self, *args)


    def Rep(self, *args):
        """
        Rep(StepElement_AnalysisItemWithinRepresentation self) -> Handle_StepRepr_Representation

        Returns field Rep

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_Rep(self, *args)


    def SetRep(self, *args):
        """
        SetRep(StepElement_AnalysisItemWithinRepresentation self, Handle_StepRepr_Representation Rep)

        Set field Rep

        :type Rep: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_SetRep(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_AnalysisItemWithinRepresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_AnalysisItemWithinRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_AnalysisItemWithinRepresentation
StepElement_AnalysisItemWithinRepresentation_swigregister = _StepElement.StepElement_AnalysisItemWithinRepresentation_swigregister
StepElement_AnalysisItemWithinRepresentation_swigregister(StepElement_AnalysisItemWithinRepresentation)

def StepElement_AnalysisItemWithinRepresentation_get_type_name(*args):
    """
    StepElement_AnalysisItemWithinRepresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_AnalysisItemWithinRepresentation_get_type_name(*args)

def StepElement_AnalysisItemWithinRepresentation_get_type_descriptor(*args):
    """
    StepElement_AnalysisItemWithinRepresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_AnalysisItemWithinRepresentation_get_type_descriptor(*args)

class NCollection_Array1_StepElement_VolumeElementPurpose(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepElement_VolumeElementPurpose self) -> NCollection_Array1< StepElement_VolumeElementPurpose >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepElement_VolumeElementPurpose self) -> NCollection_Array1< StepElement_VolumeElementPurpose >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepElement_VolumeElementPurpose self) -> NCollection_Array1< StepElement_VolumeElementPurpose >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepElement_VolumeElementPurpose self) -> NCollection_Array1< StepElement_VolumeElementPurpose >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_StepElement_VolumeElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepElement_VolumeElementPurpose self, StepElement_VolumeElementPurpose theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepElement_VolumeElementPurpose self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepElement_VolumeElementPurpose self, NCollection_Array1_StepElement_VolumeElementPurpose theOther) -> NCollection_Array1_StepElement_VolumeElementPurpose

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepElement_VolumeElementPurpose self, NCollection_Array1_StepElement_VolumeElementPurpose theOther) -> NCollection_Array1_StepElement_VolumeElementPurpose

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepElement_VolumeElementPurpose self, NCollection_Array1_StepElement_VolumeElementPurpose theOther) -> NCollection_Array1_StepElement_VolumeElementPurpose
        assign(NCollection_Array1_StepElement_VolumeElementPurpose self, NCollection_Array1_StepElement_VolumeElementPurpose theOther) -> NCollection_Array1_StepElement_VolumeElementPurpose

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepElement_VolumeElementPurpose self) -> StepElement_VolumeElementPurpose

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepElement_VolumeElementPurpose self) -> StepElement_VolumeElementPurpose

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepElement_VolumeElementPurpose self, Standard_Integer const theIndex) -> StepElement_VolumeElementPurpose

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepElement_VolumeElementPurpose self, Standard_Integer const theIndex, StepElement_VolumeElementPurpose theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepElement_VolumeElementPurpose self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_StepElement_VolumeElementPurpose
NCollection_Array1_StepElement_VolumeElementPurpose_swigregister = _StepElement.NCollection_Array1_StepElement_VolumeElementPurpose_swigregister
NCollection_Array1_StepElement_VolumeElementPurpose_swigregister(NCollection_Array1_StepElement_VolumeElementPurpose)


try:
	StepElement_Array1OfVolumeElementPurpose = NCollection_Array1_StepElement_VolumeElementPurpose
except NameError:
	pass # does not exist, probably ignored

class StepElement_CurveElementSectionDerivedDefinitions(StepElement_CurveElementSectionDefinition):
    """Representation of STEP entity CurveElementSectionDerivedDefinitions"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_CurveElementSectionDerivedDefinitions
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_CurveElementSectionDerivedDefinitions(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_CurveElementSectionDerivedDefinitions

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementSectionDerivedDefinitions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_CurveElementSectionDerivedDefinitions self, Handle_TCollection_HAsciiString aCurveElementSectionDefinition_Description, Standard_Real const aCurveElementSectionDefinition_SectionAngle, Standard_Real const aCrossSectionalArea, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aShearArea, Handle_TColStd_HArray1OfReal aSecondMomentOfArea, Standard_Real const aTorsionalConstant, StepElement_MeasureOrUnspecifiedValue aWarpingConstant, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfCentroid, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfShearCentre, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aPolarMoment)

        Initialize all fields (own and inherited)

        :type aCurveElementSectionDefinition_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurveElementSectionDefinition_SectionAngle: float
        :type aCrossSectionalArea: float
        :type aShearArea: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aSecondMomentOfArea: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aTorsionalConstant: float
        :type aWarpingConstant: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aLocationOfCentroid: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aLocationOfShearCentre: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aLocationOfNonStructuralMass: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aNonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aPolarMoment: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_Init(self, *args)


    def CrossSectionalArea(self, *args):
        """
        CrossSectionalArea(StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Real

        Returns field CrossSectionalArea

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_CrossSectionalArea(self, *args)


    def SetCrossSectionalArea(self, *args):
        """
        SetCrossSectionalArea(StepElement_CurveElementSectionDerivedDefinitions self, Standard_Real const CrossSectionalArea)

        Set field CrossSectionalArea

        :type CrossSectionalArea: float

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetCrossSectionalArea(self, *args)


    def ShearArea(self, *args):
        """
        ShearArea(StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field ShearArea

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_ShearArea(self, *args)


    def SetShearArea(self, *args):
        """
        SetShearArea(StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue ShearArea)

        Set field ShearArea

        :type ShearArea: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetShearArea(self, *args)


    def SecondMomentOfArea(self, *args):
        """
        SecondMomentOfArea(StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_TColStd_HArray1OfReal

        Returns field SecondMomentOfArea

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SecondMomentOfArea(self, *args)


    def SetSecondMomentOfArea(self, *args):
        """
        SetSecondMomentOfArea(StepElement_CurveElementSectionDerivedDefinitions self, Handle_TColStd_HArray1OfReal SecondMomentOfArea)

        Set field SecondMomentOfArea

        :type SecondMomentOfArea: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetSecondMomentOfArea(self, *args)


    def TorsionalConstant(self, *args):
        """
        TorsionalConstant(StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Real

        Returns field TorsionalConstant

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_TorsionalConstant(self, *args)


    def SetTorsionalConstant(self, *args):
        """
        SetTorsionalConstant(StepElement_CurveElementSectionDerivedDefinitions self, Standard_Real const TorsionalConstant)

        Set field TorsionalConstant

        :type TorsionalConstant: float

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetTorsionalConstant(self, *args)


    def WarpingConstant(self, *args):
        """
        WarpingConstant(StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field WarpingConstant

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_WarpingConstant(self, *args)


    def SetWarpingConstant(self, *args):
        """
        SetWarpingConstant(StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue WarpingConstant)

        Set field WarpingConstant

        :type WarpingConstant: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetWarpingConstant(self, *args)


    def LocationOfCentroid(self, *args):
        """
        LocationOfCentroid(StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfCentroid

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_LocationOfCentroid(self, *args)


    def SetLocationOfCentroid(self, *args):
        """
        SetLocationOfCentroid(StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfCentroid)

        Set field LocationOfCentroid

        :type LocationOfCentroid: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfCentroid(self, *args)


    def LocationOfShearCentre(self, *args):
        """
        LocationOfShearCentre(StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfShearCentre

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_LocationOfShearCentre(self, *args)


    def SetLocationOfShearCentre(self, *args):
        """
        SetLocationOfShearCentre(StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfShearCentre)

        Set field LocationOfShearCentre

        :type LocationOfShearCentre: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfShearCentre(self, *args)


    def LocationOfNonStructuralMass(self, *args):
        """
        LocationOfNonStructuralMass(StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfNonStructuralMass

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_LocationOfNonStructuralMass(self, *args)


    def SetLocationOfNonStructuralMass(self, *args):
        """
        SetLocationOfNonStructuralMass(StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfNonStructuralMass)

        Set field LocationOfNonStructuralMass

        :type LocationOfNonStructuralMass: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfNonStructuralMass(self, *args)


    def NonStructuralMass(self, *args):
        """
        NonStructuralMass(StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMass

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_NonStructuralMass(self, *args)


    def SetNonStructuralMass(self, *args):
        """
        SetNonStructuralMass(StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue NonStructuralMass)

        Set field NonStructuralMass

        :type NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetNonStructuralMass(self, *args)


    def PolarMoment(self, *args):
        """
        PolarMoment(StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field PolarMoment

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_PolarMoment(self, *args)


    def SetPolarMoment(self, *args):
        """
        SetPolarMoment(StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue PolarMoment)

        Set field PolarMoment

        :type PolarMoment: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_SetPolarMoment(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_CurveElementSectionDerivedDefinitions_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementSectionDerivedDefinitions
StepElement_CurveElementSectionDerivedDefinitions_swigregister = _StepElement.StepElement_CurveElementSectionDerivedDefinitions_swigregister
StepElement_CurveElementSectionDerivedDefinitions_swigregister(StepElement_CurveElementSectionDerivedDefinitions)

def StepElement_CurveElementSectionDerivedDefinitions_get_type_name(*args):
    """
    StepElement_CurveElementSectionDerivedDefinitions_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_get_type_name(*args)

def StepElement_CurveElementSectionDerivedDefinitions_get_type_descriptor(*args):
    """
    StepElement_CurveElementSectionDerivedDefinitions_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_CurveElementSectionDerivedDefinitions_get_type_descriptor(*args)

class StepElement_HSequenceOfElementMaterial(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HSequenceOfElementMaterial
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HSequenceOfElementMaterial(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HSequenceOfElementMaterial self) -> StepElement_HSequenceOfElementMaterial
        __init__(StepElement_HSequenceOfElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theOther) -> StepElement_HSequenceOfElementMaterial

        :type theOther: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        this = _StepElement.new_StepElement_HSequenceOfElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        res = _StepElement.StepElement_HSequenceOfElementMaterial_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepElement_HSequenceOfElementMaterial self, Handle_StepElement_ElementMaterial theItem)
        Append(StepElement_HSequenceOfElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        return _StepElement.StepElement_HSequenceOfElementMaterial_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepElement_HSequenceOfElementMaterial self) -> NCollection_Sequence_Handle_StepElement_ElementMaterial

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        return _StepElement.StepElement_HSequenceOfElementMaterial_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HSequenceOfElementMaterial_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HSequenceOfElementMaterial_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HSequenceOfElementMaterial_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HSequenceOfElementMaterial
StepElement_HSequenceOfElementMaterial_swigregister = _StepElement.StepElement_HSequenceOfElementMaterial_swigregister
StepElement_HSequenceOfElementMaterial_swigregister(StepElement_HSequenceOfElementMaterial)

def StepElement_HSequenceOfElementMaterial_get_type_name(*args):
    """
    StepElement_HSequenceOfElementMaterial_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HSequenceOfElementMaterial_get_type_name(*args)

def StepElement_HSequenceOfElementMaterial_get_type_descriptor(*args):
    """
    StepElement_HSequenceOfElementMaterial_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HSequenceOfElementMaterial_get_type_descriptor(*args)

class Handle_StepElement_HArray1OfCurveElementSectionDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfCurveElementSectionDefinition self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, StepElement_HArray1OfCurveElementSectionDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Handle_StepElement_HArray1OfCurveElementSectionDefinition theHandle) -> Handle_StepElement_HArray1OfCurveElementSectionDefinition
        assign(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, StepElement_HArray1OfCurveElementSectionDefinition thePtr) -> Handle_StepElement_HArray1OfCurveElementSectionDefinition
        assign(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Handle_StepElement_HArray1OfCurveElementSectionDefinition theHandle) -> Handle_StepElement_HArray1OfCurveElementSectionDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> StepElement_HArray1OfCurveElementSectionDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> StepElement_HArray1OfCurveElementSectionDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> StepElement_HArray1OfCurveElementSectionDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfCurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfCurveElementSectionDefinition

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementSectionDefinition

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementSectionDefinition

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfCurveElementSectionDefinition self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfCurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfCurveElementSectionDefinition self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfCurveElementSectionDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfCurveElementSectionDefinition_swigregister = _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_swigregister
Handle_StepElement_HArray1OfCurveElementSectionDefinition_swigregister(Handle_StepElement_HArray1OfCurveElementSectionDefinition)

def Handle_StepElement_HArray1OfCurveElementSectionDefinition_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_DownCast(thing)
Handle_StepElement_HArray1OfCurveElementSectionDefinition_DownCast = _StepElement.Handle_StepElement_HArray1OfCurveElementSectionDefinition_DownCast

class StepElement_SurfaceElementProperty(Standard.Standard_Transient):
    """Representation of STEP entity SurfaceElementProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceElementProperty
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceElementProperty(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceElementProperty self) -> StepElement_SurfaceElementProperty

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString aPropertyId, Handle_TCollection_HAsciiString aDescription, Handle_StepElement_SurfaceSectionField aSection)

        Initialize all fields (own and inherited)

        :type aPropertyId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSection: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.StepElement_SurfaceElementProperty_Init(self, *args)


    def PropertyId(self, *args):
        """
        PropertyId(StepElement_SurfaceElementProperty self) -> Handle_TCollection_HAsciiString

        Returns field PropertyId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementProperty_PropertyId(self, *args)


    def SetPropertyId(self, *args):
        """
        SetPropertyId(StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString PropertyId)

        Set field PropertyId

        :type PropertyId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementProperty_SetPropertyId(self, *args)


    def Description(self, *args):
        """
        Description(StepElement_SurfaceElementProperty self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_SurfaceElementProperty_SetDescription(self, *args)


    def Section(self, *args):
        """
        Section(StepElement_SurfaceElementProperty self) -> Handle_StepElement_SurfaceSectionField

        Returns field Section

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.StepElement_SurfaceElementProperty_Section(self, *args)


    def SetSection(self, *args):
        """
        SetSection(StepElement_SurfaceElementProperty self, Handle_StepElement_SurfaceSectionField Section)

        Set field Section

        :type Section: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.StepElement_SurfaceElementProperty_SetSection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceElementProperty_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceElementProperty_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceElementProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceElementProperty
StepElement_SurfaceElementProperty_swigregister = _StepElement.StepElement_SurfaceElementProperty_swigregister
StepElement_SurfaceElementProperty_swigregister(StepElement_SurfaceElementProperty)

def StepElement_SurfaceElementProperty_get_type_name(*args):
    """
    StepElement_SurfaceElementProperty_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceElementProperty_get_type_name(*args)

def StepElement_SurfaceElementProperty_get_type_descriptor(*args):
    """
    StepElement_SurfaceElementProperty_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceElementProperty_get_type_descriptor(*args)

class Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        assign(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember thePtr) -> Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        assign(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister
Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_swigregister(Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember)

def Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DownCast(thing)
Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember_DownCast

class Handle_StepElement_SurfaceSection(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceSection self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceSection_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceSection self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSection_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceSection self, StepElement_SurfaceSection thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSection_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceSection self, Handle_StepElement_SurfaceSection theHandle) -> Handle_StepElement_SurfaceSection
        assign(Handle_StepElement_SurfaceSection self, StepElement_SurfaceSection thePtr) -> Handle_StepElement_SurfaceSection
        assign(Handle_StepElement_SurfaceSection self, Handle_StepElement_SurfaceSection theHandle) -> Handle_StepElement_SurfaceSection

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceSection_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceSection self) -> StepElement_SurfaceSection

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSection_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceSection self) -> StepElement_SurfaceSection

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSection___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceSection self) -> StepElement_SurfaceSection

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceSection___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceSection___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceSection___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceSection_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceSection

    def Init(self, *args):
        """
        Init(Handle_StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue aOffset, StepElement_MeasureOrUnspecifiedValue aNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aNonStructuralMassOffset)

        Initialize all fields (own and inherited)

        :type aOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aNonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aNonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_Init(self, *args)


    def Offset(self, *args):
        """
        Offset(Handle_StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field Offset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(Handle_StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue Offset)

        Set field Offset

        :type Offset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_SetOffset(self, *args)


    def NonStructuralMass(self, *args):
        """
        NonStructuralMass(Handle_StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMass

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_NonStructuralMass(self, *args)


    def SetNonStructuralMass(self, *args):
        """
        SetNonStructuralMass(Handle_StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMass)

        Set field NonStructuralMass

        :type NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_SetNonStructuralMass(self, *args)


    def NonStructuralMassOffset(self, *args):
        """
        NonStructuralMassOffset(Handle_StepElement_SurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMassOffset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_NonStructuralMassOffset(self, *args)


    def SetNonStructuralMassOffset(self, *args):
        """
        SetNonStructuralMassOffset(Handle_StepElement_SurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMassOffset)

        Set field NonStructuralMassOffset

        :type NonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_SurfaceSection_SetNonStructuralMassOffset(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceSection self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceSection_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSection_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceSection self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceSection_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSection_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSection_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceSection self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceSection_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSection_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceSection self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceSection_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSection_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceSection_swigregister = _StepElement.Handle_StepElement_SurfaceSection_swigregister
Handle_StepElement_SurfaceSection_swigregister(Handle_StepElement_SurfaceSection)

def Handle_StepElement_SurfaceSection_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceSection_DownCast(thing)
Handle_StepElement_SurfaceSection_DownCast = _StepElement.Handle_StepElement_SurfaceSection_DownCast

class NCollection_Array2_StepElement_SurfaceElementPurpose(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StepElement.new_NCollection_Array2_StepElement_SurfaceElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_StepElement_SurfaceElementPurpose self, StepElement_SurfaceElementPurpose theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_StepElement_SurfaceElementPurpose self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_StepElement_SurfaceElementPurpose self, NCollection_Array2_StepElement_SurfaceElementPurpose theOther) -> NCollection_Array2_StepElement_SurfaceElementPurpose

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_StepElement_SurfaceElementPurpose self, NCollection_Array2_StepElement_SurfaceElementPurpose theOther) -> NCollection_Array2_StepElement_SurfaceElementPurpose

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_StepElement_SurfaceElementPurpose self, Standard_Integer const theRow, Standard_Integer const theCol) -> StepElement_SurfaceElementPurpose

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_StepElement_SurfaceElementPurpose self, Standard_Integer const theRow, Standard_Integer const theCol, StepElement_SurfaceElementPurpose theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_SetValue(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array2_StepElement_SurfaceElementPurpose
NCollection_Array2_StepElement_SurfaceElementPurpose_swigregister = _StepElement.NCollection_Array2_StepElement_SurfaceElementPurpose_swigregister
NCollection_Array2_StepElement_SurfaceElementPurpose_swigregister(NCollection_Array2_StepElement_SurfaceElementPurpose)


try:
	StepElement_Array2OfSurfaceElementPurpose = NCollection_Array2_StepElement_SurfaceElementPurpose
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, Handle_StepElement_CurveElementEndReleasePacket theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket
        assign(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Handle_StepElement_CurveElementEndReleasePacket

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self) -> Handle_StepElement_CurveElementEndReleasePacket

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, Standard_Integer const theIndex) -> Handle_StepElement_CurveElementEndReleasePacket

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, Standard_Integer const theIndex, Handle_StepElement_CurveElementEndReleasePacket theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket
NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_swigregister
NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket_swigregister(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket)


try:
	StepElement_Array1OfCurveElementEndReleasePacket = NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_HSequenceOfElementMaterial(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HSequenceOfElementMaterial self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HSequenceOfElementMaterial self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HSequenceOfElementMaterial self, StepElement_HSequenceOfElementMaterial thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HSequenceOfElementMaterial self, Handle_StepElement_HSequenceOfElementMaterial theHandle) -> Handle_StepElement_HSequenceOfElementMaterial
        assign(Handle_StepElement_HSequenceOfElementMaterial self, StepElement_HSequenceOfElementMaterial thePtr) -> Handle_StepElement_HSequenceOfElementMaterial
        assign(Handle_StepElement_HSequenceOfElementMaterial self, Handle_StepElement_HSequenceOfElementMaterial theHandle) -> Handle_StepElement_HSequenceOfElementMaterial

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HSequenceOfElementMaterial self) -> StepElement_HSequenceOfElementMaterial

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HSequenceOfElementMaterial self) -> StepElement_HSequenceOfElementMaterial

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HSequenceOfElementMaterial self) -> StepElement_HSequenceOfElementMaterial

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HSequenceOfElementMaterial___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HSequenceOfElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HSequenceOfElementMaterial_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HSequenceOfElementMaterial

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        res = _StepElement.Handle_StepElement_HSequenceOfElementMaterial_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepElement_HSequenceOfElementMaterial self, Handle_StepElement_ElementMaterial theItem)
        Append(Handle_StepElement_HSequenceOfElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepElement_HSequenceOfElementMaterial self) -> NCollection_Sequence_Handle_StepElement_ElementMaterial

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfElementMaterial

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HSequenceOfElementMaterial self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfElementMaterial_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfElementMaterial_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HSequenceOfElementMaterial self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HSequenceOfElementMaterial self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HSequenceOfElementMaterial self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HSequenceOfElementMaterial self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HSequenceOfElementMaterial self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HSequenceOfElementMaterial self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HSequenceOfElementMaterial self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HSequenceOfElementMaterial self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HSequenceOfElementMaterial self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_DecrementRefCounter(self, *args)

Handle_StepElement_HSequenceOfElementMaterial_swigregister = _StepElement.Handle_StepElement_HSequenceOfElementMaterial_swigregister
Handle_StepElement_HSequenceOfElementMaterial_swigregister(Handle_StepElement_HSequenceOfElementMaterial)

def Handle_StepElement_HSequenceOfElementMaterial_DownCast(thing):
    return _StepElement.Handle_StepElement_HSequenceOfElementMaterial_DownCast(thing)
Handle_StepElement_HSequenceOfElementMaterial_DownCast = _StepElement.Handle_StepElement_HSequenceOfElementMaterial_DownCast

class Handle_StepElement_ElementDescriptor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_ElementDescriptor self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_ElementDescriptor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_ElementDescriptor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_ElementDescriptor self, StepElement_ElementDescriptor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_ElementDescriptor self, Handle_StepElement_ElementDescriptor theHandle) -> Handle_StepElement_ElementDescriptor
        assign(Handle_StepElement_ElementDescriptor self, StepElement_ElementDescriptor thePtr) -> Handle_StepElement_ElementDescriptor
        assign(Handle_StepElement_ElementDescriptor self, Handle_StepElement_ElementDescriptor theHandle) -> Handle_StepElement_ElementDescriptor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_ElementDescriptor self) -> StepElement_ElementDescriptor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_ElementDescriptor self) -> StepElement_ElementDescriptor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementDescriptor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_ElementDescriptor self) -> StepElement_ElementDescriptor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_ElementDescriptor___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_ElementDescriptor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_ElementDescriptor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_ElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_ElementDescriptor_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_ElementDescriptor

    def Init(self, *args):
        """
        Init(Handle_StepElement_ElementDescriptor self, StepElement_ElementOrder const aTopologyOrder, Handle_TCollection_HAsciiString aDescription)

        Initialize all fields (own and inherited)

        :type aTopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_Init(self, *args)


    def TopologyOrder(self, *args):
        """
        TopologyOrder(Handle_StepElement_ElementDescriptor self) -> StepElement_ElementOrder

        Returns field TopologyOrder

        :rtype: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_TopologyOrder(self, *args)


    def SetTopologyOrder(self, *args):
        """
        SetTopologyOrder(Handle_StepElement_ElementDescriptor self, StepElement_ElementOrder const TopologyOrder)

        Set field TopologyOrder

        :type TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_SetTopologyOrder(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_ElementDescriptor self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_ElementDescriptor self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_SetDescription(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_ElementDescriptor self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementDescriptor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_ElementDescriptor self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_ElementDescriptor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_ElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_ElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_ElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_ElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_ElementDescriptor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_ElementDescriptor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_ElementDescriptor self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_ElementDescriptor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_ElementDescriptor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementDescriptor_DecrementRefCounter(self, *args)

Handle_StepElement_ElementDescriptor_swigregister = _StepElement.Handle_StepElement_ElementDescriptor_swigregister
Handle_StepElement_ElementDescriptor_swigregister(Handle_StepElement_ElementDescriptor)

def Handle_StepElement_ElementDescriptor_DownCast(thing):
    return _StepElement.Handle_StepElement_ElementDescriptor_DownCast(thing)
Handle_StepElement_ElementDescriptor_DownCast = _StepElement.Handle_StepElement_ElementDescriptor_DownCast

class NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_VolumeElementPurposeMember > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_VolumeElementPurposeMember > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_VolumeElementPurposeMember > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_VolumeElementPurposeMember > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, Handle_StepElement_VolumeElementPurposeMember theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember
        assign(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Handle_StepElement_VolumeElementPurposeMember

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self) -> Handle_StepElement_VolumeElementPurposeMember

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const theIndex) -> Handle_StepElement_VolumeElementPurposeMember

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_VolumeElementPurposeMember theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember
NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_swigregister
NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember_swigregister(NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember)


try:
	StepElement_Array1OfVolumeElementPurposeMember = NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_HSequenceOfCurveElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HSequenceOfCurveElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, StepElement_HSequenceOfCurveElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_StepElement_HSequenceOfCurveElementPurposeMember theHandle) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember
        assign(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, StepElement_HSequenceOfCurveElementPurposeMember thePtr) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember
        assign(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_StepElement_HSequenceOfCurveElementPurposeMember theHandle) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> StepElement_HSequenceOfCurveElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> StepElement_HSequenceOfCurveElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> StepElement_HSequenceOfCurveElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HSequenceOfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HSequenceOfCurveElementPurposeMember

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theItem)
        Append(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HSequenceOfCurveElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HSequenceOfCurveElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister
Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister(Handle_StepElement_HSequenceOfCurveElementPurposeMember)

def Handle_StepElement_HSequenceOfCurveElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_DownCast(thing)
Handle_StepElement_HSequenceOfCurveElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HSequenceOfCurveElementPurposeMember_DownCast

class Handle_StepElement_SurfaceSectionFieldVarying(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceSectionFieldVarying self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceSectionFieldVarying self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceSectionFieldVarying self, StepElement_SurfaceSectionFieldVarying thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_SurfaceSectionFieldVarying theHandle) -> Handle_StepElement_SurfaceSectionFieldVarying
        assign(Handle_StepElement_SurfaceSectionFieldVarying self, StepElement_SurfaceSectionFieldVarying thePtr) -> Handle_StepElement_SurfaceSectionFieldVarying
        assign(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_SurfaceSectionFieldVarying theHandle) -> Handle_StepElement_SurfaceSectionFieldVarying

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceSectionFieldVarying self) -> StepElement_SurfaceSectionFieldVarying

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceSectionFieldVarying self) -> StepElement_SurfaceSectionFieldVarying

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceSectionFieldVarying self) -> StepElement_SurfaceSectionFieldVarying

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceSectionFieldVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceSectionFieldVarying_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceSectionFieldVarying

    def Init(self, *args):
        """
        Init(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_HArray1OfSurfaceSection aDefinitions, Standard_Boolean const aAdditionalNodeValues)

        Initialize all fields (own and inherited)

        :type aDefinitions: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection
        :type aAdditionalNodeValues: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_Init(self, *args)


    def Definitions(self, *args):
        """
        Definitions(Handle_StepElement_SurfaceSectionFieldVarying self) -> Handle_StepElement_HArray1OfSurfaceSection

        Returns field Definitions

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_Definitions(self, *args)


    def SetDefinitions(self, *args):
        """
        SetDefinitions(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_StepElement_HArray1OfSurfaceSection Definitions)

        Set field Definitions

        :type Definitions: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfSurfaceSection

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_SetDefinitions(self, *args)


    def AdditionalNodeValues(self, *args):
        """
        AdditionalNodeValues(Handle_StepElement_SurfaceSectionFieldVarying self) -> Standard_Boolean

        Returns field AdditionalNodeValues

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_AdditionalNodeValues(self, *args)


    def SetAdditionalNodeValues(self, *args):
        """
        SetAdditionalNodeValues(Handle_StepElement_SurfaceSectionFieldVarying self, Standard_Boolean const AdditionalNodeValues)

        Set field AdditionalNodeValues

        :type AdditionalNodeValues: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_SetAdditionalNodeValues(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceSectionFieldVarying self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceSectionFieldVarying self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceSectionFieldVarying self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceSectionFieldVarying self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceSectionFieldVarying self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceSectionFieldVarying self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceSectionFieldVarying self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceSectionFieldVarying self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceSectionFieldVarying self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceSectionFieldVarying_swigregister = _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_swigregister
Handle_StepElement_SurfaceSectionFieldVarying_swigregister(Handle_StepElement_SurfaceSectionFieldVarying)

def Handle_StepElement_SurfaceSectionFieldVarying_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_DownCast(thing)
Handle_StepElement_SurfaceSectionFieldVarying_DownCast = _StepElement.Handle_StepElement_SurfaceSectionFieldVarying_DownCast

class StepElement_ElementAspect(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ElementAspect"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_ElementAspect self) -> StepElement_ElementAspect

        Empty constructor


        """
        this = _StepElement.new_StepElement_ElementAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_ElementAspect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ElementAspect select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_ElementAspect self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member ElementAspectMember
        1 -> ElementVolume
        2 -> Volume3dFace
        3 -> Volume2dFace
        4 -> Volume3dEdge
        5 -> Volume2dEdge
        6 -> Surface3dFace
        7 -> Surface2dFace
        8 -> Surface3dEdge
        9 -> Surface2dEdge
        10 -> CurveEdge
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_ElementAspect self) -> Handle_StepData_SelectMember

        Returns a new select member the type ElementAspectMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_ElementAspect_NewMember(self, *args)


    def SetElementVolume(self, *args):
        """
        SetElementVolume(StepElement_ElementAspect self, StepElement_ElementVolume const aVal)

        Set Value for ElementVolume

        :type aVal: OCC.wrapper.StepElement.StepElement_ElementVolume

        """
        return _StepElement.StepElement_ElementAspect_SetElementVolume(self, *args)


    def ElementVolume(self, *args):
        """
        ElementVolume(StepElement_ElementAspect self) -> StepElement_ElementVolume

        Returns Value as ElementVolume (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_ElementVolume

        """
        return _StepElement.StepElement_ElementAspect_ElementVolume(self, *args)


    def SetVolume3dFace(self, *args):
        """
        SetVolume3dFace(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Volume3dFace

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetVolume3dFace(self, *args)


    def Volume3dFace(self, *args):
        """
        Volume3dFace(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Volume3dFace (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Volume3dFace(self, *args)


    def SetVolume2dFace(self, *args):
        """
        SetVolume2dFace(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Volume2dFace

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetVolume2dFace(self, *args)


    def Volume2dFace(self, *args):
        """
        Volume2dFace(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Volume2dFace (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Volume2dFace(self, *args)


    def SetVolume3dEdge(self, *args):
        """
        SetVolume3dEdge(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Volume3dEdge

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetVolume3dEdge(self, *args)


    def Volume3dEdge(self, *args):
        """
        Volume3dEdge(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Volume3dEdge (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Volume3dEdge(self, *args)


    def SetVolume2dEdge(self, *args):
        """
        SetVolume2dEdge(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Volume2dEdge

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetVolume2dEdge(self, *args)


    def Volume2dEdge(self, *args):
        """
        Volume2dEdge(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Volume2dEdge (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Volume2dEdge(self, *args)


    def SetSurface3dFace(self, *args):
        """
        SetSurface3dFace(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Surface3dFace

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetSurface3dFace(self, *args)


    def Surface3dFace(self, *args):
        """
        Surface3dFace(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Surface3dFace (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Surface3dFace(self, *args)


    def SetSurface2dFace(self, *args):
        """
        SetSurface2dFace(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Surface2dFace

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetSurface2dFace(self, *args)


    def Surface2dFace(self, *args):
        """
        Surface2dFace(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Surface2dFace (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Surface2dFace(self, *args)


    def SetSurface3dEdge(self, *args):
        """
        SetSurface3dEdge(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Surface3dEdge

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetSurface3dEdge(self, *args)


    def Surface3dEdge(self, *args):
        """
        Surface3dEdge(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Surface3dEdge (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Surface3dEdge(self, *args)


    def SetSurface2dEdge(self, *args):
        """
        SetSurface2dEdge(StepElement_ElementAspect self, Standard_Integer const aVal)

        Set Value for Surface2dEdge

        :type aVal: int

        """
        return _StepElement.StepElement_ElementAspect_SetSurface2dEdge(self, *args)


    def Surface2dEdge(self, *args):
        """
        Surface2dEdge(StepElement_ElementAspect self) -> Standard_Integer

        Returns Value as Surface2dEdge (or Null if another type)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_ElementAspect_Surface2dEdge(self, *args)


    def SetCurveEdge(self, *args):
        """
        SetCurveEdge(StepElement_ElementAspect self, StepElement_CurveEdge const aVal)

        Set Value for CurveEdge

        :type aVal: OCC.wrapper.StepElement.StepElement_CurveEdge

        """
        return _StepElement.StepElement_ElementAspect_SetCurveEdge(self, *args)


    def CurveEdge(self, *args):
        """
        CurveEdge(StepElement_ElementAspect self) -> StepElement_CurveEdge

        Returns Value as CurveEdge (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_CurveEdge

        """
        return _StepElement.StepElement_ElementAspect_CurveEdge(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_ElementAspect
StepElement_ElementAspect_swigregister = _StepElement.StepElement_ElementAspect_swigregister
StepElement_ElementAspect_swigregister(StepElement_ElementAspect)

class NCollection_Sequence_Handle_StepElement_ElementMaterial(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_ElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepElement_ElementMaterial self)

        Reverse sequence


        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theOther) -> NCollection_Sequence_Handle_StepElement_ElementMaterial

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theOther) -> NCollection_Sequence_Handle_StepElement_ElementMaterial

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Handle_StepElement_ElementMaterial theItem)
        Append(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Handle_StepElement_ElementMaterial theItem)
        Prepend(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence_Handle_StepElement_ElementMaterial theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, Handle_StepElement_ElementMaterial theItem)
        InsertBefore(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_ElementMaterial theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepElement_ElementMaterial self, NCollection_Sequence< opencascade::handle< StepElement_ElementMaterial > >::Iterator & thePosition, Handle_StepElement_ElementMaterial theItem)
        InsertAfter(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_ElementMaterial theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, Handle_StepElement_ElementMaterial theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_ElementMaterial theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Handle_StepElement_ElementMaterial

        First item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepElement_ElementMaterial self) -> Handle_StepElement_ElementMaterial

        Last item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex) -> Handle_StepElement_ElementMaterial

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepElement_ElementMaterial self, Standard_Integer const theIndex, Handle_StepElement_ElementMaterial theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_SetValue(self, *args)


    def __iter__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial___iter__(self)
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_ElementMaterial
NCollection_Sequence_Handle_StepElement_ElementMaterial_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_swigregister
NCollection_Sequence_Handle_StepElement_ElementMaterial_swigregister(NCollection_Sequence_Handle_StepElement_ElementMaterial)

def NCollection_Sequence_Handle_StepElement_ElementMaterial_delNode(*args):
    """
    NCollection_Sequence_Handle_StepElement_ElementMaterial_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_delNode(*args)

class NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper

    def __next__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepElement_ElementMaterial_IteratorHelper)


try:
	StepElement_SequenceOfElementMaterial = NCollection_Sequence_Handle_StepElement_ElementMaterial
except NameError:
	pass # does not exist, probably ignored

class StepElement_HArray1OfCurveElementEndReleasePacket(NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfCurveElementEndReleasePacket
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfCurveElementEndReleasePacket(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfCurveElementEndReleasePacket
        __init__(StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_StepElement_CurveElementEndReleasePacket theValue) -> StepElement_HArray1OfCurveElementEndReleasePacket
        __init__(StepElement_HArray1OfCurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> StepElement_HArray1OfCurveElementEndReleasePacket

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementEndReleasePacket

        """
        this = _StepElement.new_StepElement_HArray1OfCurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementEndReleasePacket

        """
        res = _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementEndReleasePacket

        """
        return _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfCurveElementEndReleasePacket
StepElement_HArray1OfCurveElementEndReleasePacket_swigregister = _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_swigregister
StepElement_HArray1OfCurveElementEndReleasePacket_swigregister(StepElement_HArray1OfCurveElementEndReleasePacket)

def StepElement_HArray1OfCurveElementEndReleasePacket_get_type_name(*args):
    """
    StepElement_HArray1OfCurveElementEndReleasePacket_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_get_type_name(*args)

def StepElement_HArray1OfCurveElementEndReleasePacket_get_type_descriptor(*args):
    """
    StepElement_HArray1OfCurveElementEndReleasePacket_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfCurveElementEndReleasePacket_get_type_descriptor(*args)

class Handle_StepElement_Surface3dElementDescriptor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_Surface3dElementDescriptor self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_Surface3dElementDescriptor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_Surface3dElementDescriptor self, StepElement_Surface3dElementDescriptor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_Surface3dElementDescriptor self, Handle_StepElement_Surface3dElementDescriptor theHandle) -> Handle_StepElement_Surface3dElementDescriptor
        assign(Handle_StepElement_Surface3dElementDescriptor self, StepElement_Surface3dElementDescriptor thePtr) -> Handle_StepElement_Surface3dElementDescriptor
        assign(Handle_StepElement_Surface3dElementDescriptor self, Handle_StepElement_Surface3dElementDescriptor theHandle) -> Handle_StepElement_Surface3dElementDescriptor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_Surface3dElementDescriptor self) -> StepElement_Surface3dElementDescriptor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_Surface3dElementDescriptor self) -> StepElement_Surface3dElementDescriptor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_Surface3dElementDescriptor self) -> StepElement_Surface3dElementDescriptor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_Surface3dElementDescriptor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_Surface3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_Surface3dElementDescriptor_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_Surface3dElementDescriptor

    def Init(self, *args):
        """
        Init(Handle_StepElement_Surface3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember aPurpose, StepElement_Element2dShape const aShape)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember
        :type aShape: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(Handle_StepElement_Surface3dElementDescriptor self) -> Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(Handle_StepElement_Surface3dElementDescriptor self, Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_SetPurpose(self, *args)


    def Shape(self, *args):
        """
        Shape(Handle_StepElement_Surface3dElementDescriptor self) -> StepElement_Element2dShape

        Returns field Shape

        :rtype: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Shape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(Handle_StepElement_Surface3dElementDescriptor self, StepElement_Element2dShape const Shape)

        Set field Shape

        :type Shape: OCC.wrapper.StepElement.StepElement_Element2dShape

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_SetShape(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_Surface3dElementDescriptor self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Surface3dElementDescriptor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Surface3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TopologyOrder(self, *args):
        """
        TopologyOrder(Handle_StepElement_Surface3dElementDescriptor self) -> StepElement_ElementOrder

        Returns field TopologyOrder

        :rtype: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_TopologyOrder(self, *args)


    def SetTopologyOrder(self, *args):
        """
        SetTopologyOrder(Handle_StepElement_Surface3dElementDescriptor self, StepElement_ElementOrder const TopologyOrder)

        Set field TopologyOrder

        :type TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_SetTopologyOrder(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_Surface3dElementDescriptor self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_Surface3dElementDescriptor self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_SetDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_Surface3dElementDescriptor self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_Surface3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_Surface3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_Surface3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_Surface3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_Surface3dElementDescriptor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_Surface3dElementDescriptor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_Surface3dElementDescriptor self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_Surface3dElementDescriptor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Surface3dElementDescriptor_DecrementRefCounter(self, *args)

Handle_StepElement_Surface3dElementDescriptor_swigregister = _StepElement.Handle_StepElement_Surface3dElementDescriptor_swigregister
Handle_StepElement_Surface3dElementDescriptor_swigregister(Handle_StepElement_Surface3dElementDescriptor)

def Handle_StepElement_Surface3dElementDescriptor_DownCast(thing):
    return _StepElement.Handle_StepElement_Surface3dElementDescriptor_DownCast(thing)
Handle_StepElement_Surface3dElementDescriptor_DownCast = _StepElement.Handle_StepElement_Surface3dElementDescriptor_DownCast

class StepElement_SurfaceSectionFieldConstant(StepElement_SurfaceSectionField):
    """Representation of STEP entity SurfaceSectionFieldConstant"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_SurfaceSectionFieldConstant
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_SurfaceSectionFieldConstant(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_SurfaceSectionFieldConstant self) -> StepElement_SurfaceSectionFieldConstant

        Empty constructor


        """
        this = _StepElement.new_StepElement_SurfaceSectionFieldConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSection aDefinition)

        Initialize all fields (own and inherited)

        :type aDefinition: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.StepElement_SurfaceSectionFieldConstant_Init(self, *args)


    def Definition(self, *args):
        """
        Definition(StepElement_SurfaceSectionFieldConstant self) -> Handle_StepElement_SurfaceSection

        Returns field Definition

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.StepElement_SurfaceSectionFieldConstant_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSection Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.StepElement_SurfaceSectionFieldConstant_SetDefinition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_SurfaceSectionFieldConstant_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_SurfaceSectionFieldConstant_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_SurfaceSectionFieldConstant_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_SurfaceSectionFieldConstant
StepElement_SurfaceSectionFieldConstant_swigregister = _StepElement.StepElement_SurfaceSectionFieldConstant_swigregister
StepElement_SurfaceSectionFieldConstant_swigregister(StepElement_SurfaceSectionFieldConstant)

def StepElement_SurfaceSectionFieldConstant_get_type_name(*args):
    """
    StepElement_SurfaceSectionFieldConstant_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_SurfaceSectionFieldConstant_get_type_name(*args)

def StepElement_SurfaceSectionFieldConstant_get_type_descriptor(*args):
    """
    StepElement_SurfaceSectionFieldConstant_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_SurfaceSectionFieldConstant_get_type_descriptor(*args)

class Handle_StepElement_UniformSurfaceSection(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_UniformSurfaceSection self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_UniformSurfaceSection self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_UniformSurfaceSection self, StepElement_UniformSurfaceSection thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_UniformSurfaceSection self, Handle_StepElement_UniformSurfaceSection theHandle) -> Handle_StepElement_UniformSurfaceSection
        assign(Handle_StepElement_UniformSurfaceSection self, StepElement_UniformSurfaceSection thePtr) -> Handle_StepElement_UniformSurfaceSection
        assign(Handle_StepElement_UniformSurfaceSection self, Handle_StepElement_UniformSurfaceSection theHandle) -> Handle_StepElement_UniformSurfaceSection

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_UniformSurfaceSection self) -> StepElement_UniformSurfaceSection

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_UniformSurfaceSection self) -> StepElement_UniformSurfaceSection

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_UniformSurfaceSection self) -> StepElement_UniformSurfaceSection

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_UniformSurfaceSection___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_UniformSurfaceSection___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_UniformSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_UniformSurfaceSection_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_UniformSurfaceSection

    def Init(self, *args):
        """
        Init(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_Offset, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_NonStructuralMass, StepElement_MeasureOrUnspecifiedValue aSurfaceSection_NonStructuralMassOffset, Standard_Real const aThickness, StepElement_MeasureOrUnspecifiedValue aBendingThickness, StepElement_MeasureOrUnspecifiedValue aShearThickness)

        Initialize all fields (own and inherited)

        :type aSurfaceSection_Offset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aSurfaceSection_NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aSurfaceSection_NonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aThickness: float
        :type aBendingThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aShearThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_Init(self, *args)


    def Thickness(self, *args):
        """
        Thickness(Handle_StepElement_UniformSurfaceSection self) -> Standard_Real

        Returns field Thickness

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_Thickness(self, *args)


    def SetThickness(self, *args):
        """
        SetThickness(Handle_StepElement_UniformSurfaceSection self, Standard_Real const Thickness)

        Set field Thickness

        :type Thickness: float

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetThickness(self, *args)


    def BendingThickness(self, *args):
        """
        BendingThickness(Handle_StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field BendingThickness

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_BendingThickness(self, *args)


    def SetBendingThickness(self, *args):
        """
        SetBendingThickness(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue BendingThickness)

        Set field BendingThickness

        :type BendingThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetBendingThickness(self, *args)


    def ShearThickness(self, *args):
        """
        ShearThickness(Handle_StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field ShearThickness

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_ShearThickness(self, *args)


    def SetShearThickness(self, *args):
        """
        SetShearThickness(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue ShearThickness)

        Set field ShearThickness

        :type ShearThickness: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetShearThickness(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_UniformSurfaceSection self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_UniformSurfaceSection_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_UniformSurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Offset(self, *args):
        """
        Offset(Handle_StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field Offset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue Offset)

        Set field Offset

        :type Offset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetOffset(self, *args)


    def NonStructuralMass(self, *args):
        """
        NonStructuralMass(Handle_StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMass

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_NonStructuralMass(self, *args)


    def SetNonStructuralMass(self, *args):
        """
        SetNonStructuralMass(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMass)

        Set field NonStructuralMass

        :type NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetNonStructuralMass(self, *args)


    def NonStructuralMassOffset(self, *args):
        """
        NonStructuralMassOffset(Handle_StepElement_UniformSurfaceSection self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMassOffset

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_NonStructuralMassOffset(self, *args)


    def SetNonStructuralMassOffset(self, *args):
        """
        SetNonStructuralMassOffset(Handle_StepElement_UniformSurfaceSection self, StepElement_MeasureOrUnspecifiedValue NonStructuralMassOffset)

        Set field NonStructuralMassOffset

        :type NonStructuralMassOffset: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_SetNonStructuralMassOffset(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_UniformSurfaceSection self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_UniformSurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_UniformSurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_UniformSurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_UniformSurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_UniformSurfaceSection self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_UniformSurfaceSection self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_UniformSurfaceSection self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_UniformSurfaceSection self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_UniformSurfaceSection_DecrementRefCounter(self, *args)

Handle_StepElement_UniformSurfaceSection_swigregister = _StepElement.Handle_StepElement_UniformSurfaceSection_swigregister
Handle_StepElement_UniformSurfaceSection_swigregister(Handle_StepElement_UniformSurfaceSection)

def Handle_StepElement_UniformSurfaceSection_DownCast(thing):
    return _StepElement.Handle_StepElement_UniformSurfaceSection_DownCast(thing)
Handle_StepElement_UniformSurfaceSection_DownCast = _StepElement.Handle_StepElement_UniformSurfaceSection_DownCast

class Handle_StepElement_SurfaceElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceElementPurposeMember self, StepElement_SurfaceElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theHandle) -> Handle_StepElement_SurfaceElementPurposeMember
        assign(Handle_StepElement_SurfaceElementPurposeMember self, StepElement_SurfaceElementPurposeMember thePtr) -> Handle_StepElement_SurfaceElementPurposeMember
        assign(Handle_StepElement_SurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theHandle) -> Handle_StepElement_SurfaceElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceElementPurposeMember self) -> StepElement_SurfaceElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceElementPurposeMember self) -> StepElement_SurfaceElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceElementPurposeMember self) -> StepElement_SurfaceElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceElementPurposeMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_SurfaceElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_SurfaceElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_SurfaceElementPurposeMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_SurfaceElementPurposeMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_SurfaceElementPurposeMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_SurfaceElementPurposeMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_SurfaceElementPurposeMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceElementPurposeMember_swigregister = _StepElement.Handle_StepElement_SurfaceElementPurposeMember_swigregister
Handle_StepElement_SurfaceElementPurposeMember_swigregister(Handle_StepElement_SurfaceElementPurposeMember)

def Handle_StepElement_SurfaceElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceElementPurposeMember_DownCast(thing)
Handle_StepElement_SurfaceElementPurposeMember_DownCast = _StepElement.Handle_StepElement_SurfaceElementPurposeMember_DownCast

class Handle_StepElement_HArray1OfCurveElementEndReleasePacket(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, StepElement_HArray1OfCurveElementEndReleasePacket thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Handle_StepElement_HArray1OfCurveElementEndReleasePacket theHandle) -> Handle_StepElement_HArray1OfCurveElementEndReleasePacket
        assign(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, StepElement_HArray1OfCurveElementEndReleasePacket thePtr) -> Handle_StepElement_HArray1OfCurveElementEndReleasePacket
        assign(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Handle_StepElement_HArray1OfCurveElementEndReleasePacket theHandle) -> Handle_StepElement_HArray1OfCurveElementEndReleasePacket

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> StepElement_HArray1OfCurveElementEndReleasePacket

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> StepElement_HArray1OfCurveElementEndReleasePacket

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> StepElement_HArray1OfCurveElementEndReleasePacket

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfCurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfCurveElementEndReleasePacket

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementEndReleasePacket

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfCurveElementEndReleasePacket

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementEndReleasePacket > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Handle_StepElement_CurveElementEndReleasePacket theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket theOther) -> NCollection_Array1_Handle_StepElement_CurveElementEndReleasePacket

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Handle_StepElement_CurveElementEndReleasePacket

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Handle_StepElement_CurveElementEndReleasePacket

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_Integer const theIndex) -> Handle_StepElement_CurveElementEndReleasePacket

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_Integer const theIndex, Handle_StepElement_CurveElementEndReleasePacket theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfCurveElementEndReleasePacket self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfCurveElementEndReleasePacket_swigregister = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_swigregister
Handle_StepElement_HArray1OfCurveElementEndReleasePacket_swigregister(Handle_StepElement_HArray1OfCurveElementEndReleasePacket)

def Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DownCast(thing)
Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DownCast = _StepElement.Handle_StepElement_HArray1OfCurveElementEndReleasePacket_DownCast

class NCollection_Array1_StepElement_MeasureOrUnspecifiedValue(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_StepElement_MeasureOrUnspecifiedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, StepElement_MeasureOrUnspecifiedValue theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue
        assign(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> StepElement_MeasureOrUnspecifiedValue

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self) -> StepElement_MeasureOrUnspecifiedValue

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, Standard_Integer const theIndex) -> StepElement_MeasureOrUnspecifiedValue

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, Standard_Integer const theIndex, StepElement_MeasureOrUnspecifiedValue theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_StepElement_MeasureOrUnspecifiedValue
NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_swigregister = _StepElement.NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_swigregister
NCollection_Array1_StepElement_MeasureOrUnspecifiedValue_swigregister(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue)


try:
	StepElement_Array1OfMeasureOrUnspecifiedValue = NCollection_Array1_StepElement_MeasureOrUnspecifiedValue
except NameError:
	pass # does not exist, probably ignored

class StepElement_HSequenceOfCurveElementSectionDefinition(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HSequenceOfCurveElementSectionDefinition
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HSequenceOfCurveElementSectionDefinition(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HSequenceOfCurveElementSectionDefinition self) -> StepElement_HSequenceOfCurveElementSectionDefinition
        __init__(StepElement_HSequenceOfCurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theOther) -> StepElement_HSequenceOfCurveElementSectionDefinition

        :type theOther: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        this = _StepElement.new_StepElement_HSequenceOfCurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        res = _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theItem)
        Append(StepElement_HSequenceOfCurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(StepElement_HSequenceOfCurveElementSectionDefinition self) -> NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HSequenceOfCurveElementSectionDefinition
StepElement_HSequenceOfCurveElementSectionDefinition_swigregister = _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_swigregister
StepElement_HSequenceOfCurveElementSectionDefinition_swigregister(StepElement_HSequenceOfCurveElementSectionDefinition)

def StepElement_HSequenceOfCurveElementSectionDefinition_get_type_name(*args):
    """
    StepElement_HSequenceOfCurveElementSectionDefinition_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_get_type_name(*args)

def StepElement_HSequenceOfCurveElementSectionDefinition_get_type_descriptor(*args):
    """
    StepElement_HSequenceOfCurveElementSectionDefinition_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HSequenceOfCurveElementSectionDefinition_get_type_descriptor(*args)

class Handle_StepElement_VolumeElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_VolumeElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_VolumeElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_VolumeElementPurposeMember self, StepElement_VolumeElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_VolumeElementPurposeMember self, Handle_StepElement_VolumeElementPurposeMember theHandle) -> Handle_StepElement_VolumeElementPurposeMember
        assign(Handle_StepElement_VolumeElementPurposeMember self, StepElement_VolumeElementPurposeMember thePtr) -> Handle_StepElement_VolumeElementPurposeMember
        assign(Handle_StepElement_VolumeElementPurposeMember self, Handle_StepElement_VolumeElementPurposeMember theHandle) -> Handle_StepElement_VolumeElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_VolumeElementPurposeMember self) -> StepElement_VolumeElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_VolumeElementPurposeMember self) -> StepElement_VolumeElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_VolumeElementPurposeMember self) -> StepElement_VolumeElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_VolumeElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_VolumeElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_VolumeElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_VolumeElementPurposeMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_VolumeElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_VolumeElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_VolumeElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_VolumeElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_VolumeElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_VolumeElementPurposeMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_VolumeElementPurposeMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_VolumeElementPurposeMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_VolumeElementPurposeMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_VolumeElementPurposeMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_VolumeElementPurposeMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_VolumeElementPurposeMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_VolumeElementPurposeMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_VolumeElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_VolumeElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_VolumeElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_VolumeElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_VolumeElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_VolumeElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_VolumeElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_VolumeElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_VolumeElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_VolumeElementPurposeMember_swigregister = _StepElement.Handle_StepElement_VolumeElementPurposeMember_swigregister
Handle_StepElement_VolumeElementPurposeMember_swigregister(Handle_StepElement_VolumeElementPurposeMember)

def Handle_StepElement_VolumeElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_VolumeElementPurposeMember_DownCast(thing)
Handle_StepElement_VolumeElementPurposeMember_DownCast = _StepElement.Handle_StepElement_VolumeElementPurposeMember_DownCast

class StepElement_Volume3dElementDescriptor(StepElement_ElementDescriptor):
    """Representation of STEP entity Volume3dElementDescriptor"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_Volume3dElementDescriptor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_Volume3dElementDescriptor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementDescriptor

        Empty constructor


        """
        this = _StepElement.new_StepElement_Volume3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepElement_Volume3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfVolumeElementPurposeMember aPurpose, StepElement_Volume3dElementShape const aShape)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember
        :type aShape: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(StepElement_Volume3dElementDescriptor self) -> Handle_StepElement_HArray1OfVolumeElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(StepElement_Volume3dElementDescriptor self, Handle_StepElement_HArray1OfVolumeElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_SetPurpose(self, *args)


    def Shape(self, *args):
        """
        Shape(StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementShape

        Returns field Shape

        :rtype: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_Shape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(StepElement_Volume3dElementDescriptor self, StepElement_Volume3dElementShape const Shape)

        Set field Shape

        :type Shape: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_SetShape(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_Volume3dElementDescriptor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_Volume3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_Volume3dElementDescriptor
StepElement_Volume3dElementDescriptor_swigregister = _StepElement.StepElement_Volume3dElementDescriptor_swigregister
StepElement_Volume3dElementDescriptor_swigregister(StepElement_Volume3dElementDescriptor)

def StepElement_Volume3dElementDescriptor_get_type_name(*args):
    """
    StepElement_Volume3dElementDescriptor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_Volume3dElementDescriptor_get_type_name(*args)

def StepElement_Volume3dElementDescriptor_get_type_descriptor(*args):
    """
    StepElement_Volume3dElementDescriptor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_Volume3dElementDescriptor_get_type_descriptor(*args)

class Handle_StepElement_HArray2OfCurveElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray2OfCurveElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray2OfCurveElementPurposeMember self, StepElement_HArray2OfCurveElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Handle_StepElement_HArray2OfCurveElementPurposeMember theHandle) -> Handle_StepElement_HArray2OfCurveElementPurposeMember
        assign(Handle_StepElement_HArray2OfCurveElementPurposeMember self, StepElement_HArray2OfCurveElementPurposeMember thePtr) -> Handle_StepElement_HArray2OfCurveElementPurposeMember
        assign(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Handle_StepElement_HArray2OfCurveElementPurposeMember theHandle) -> Handle_StepElement_HArray2OfCurveElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> StepElement_HArray2OfCurveElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> StepElement_HArray2OfCurveElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> StepElement_HArray2OfCurveElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray2OfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray2OfCurveElementPurposeMember

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfCurveElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> NCollection_Array2_Handle_StepElement_CurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray2OfCurveElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray2OfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray2OfCurveElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray2OfCurveElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HArray2OfCurveElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_swigregister
Handle_StepElement_HArray2OfCurveElementPurposeMember_swigregister(Handle_StepElement_HArray2OfCurveElementPurposeMember)

def Handle_StepElement_HArray2OfCurveElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_DownCast(thing)
Handle_StepElement_HArray2OfCurveElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HArray2OfCurveElementPurposeMember_DownCast

class NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfSurfaceElementPurposeMember > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfSurfaceElementPurposeMember > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfSurfaceElementPurposeMember > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfSurfaceElementPurposeMember > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
        assign(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Standard_Integer const theIndex) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister
NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister(NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember)


try:
	StepElement_Array1OfHSequenceOfSurfaceElementPurposeMember = NCollection_Array1_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, StepElement_HArray1OfHSequenceOfCurveElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
        assign(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, StepElement_HArray1OfHSequenceOfCurveElementPurposeMember thePtr) -> Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember
        assign(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfCurveElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister
Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_swigregister(Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember)

def Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DownCast(thing)
Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember_DownCast

class Handle_StepElement_CurveElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_CurveElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_CurveElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_CurveElementPurposeMember self, StepElement_CurveElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_CurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theHandle) -> Handle_StepElement_CurveElementPurposeMember
        assign(Handle_StepElement_CurveElementPurposeMember self, StepElement_CurveElementPurposeMember thePtr) -> Handle_StepElement_CurveElementPurposeMember
        assign(Handle_StepElement_CurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theHandle) -> Handle_StepElement_CurveElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_CurveElementPurposeMember self) -> StepElement_CurveElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_CurveElementPurposeMember self) -> StepElement_CurveElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_CurveElementPurposeMember self) -> StepElement_CurveElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_CurveElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_CurveElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_CurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_CurveElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_CurveElementPurposeMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_CurveElementPurposeMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_CurveElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_CurveElementPurposeMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_CurveElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_CurveElementPurposeMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_CurveElementPurposeMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_CurveElementPurposeMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_CurveElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_CurveElementPurposeMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_CurveElementPurposeMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_CurveElementPurposeMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_CurveElementPurposeMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_CurveElementPurposeMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_CurveElementPurposeMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_CurveElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_CurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_CurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_CurveElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_CurveElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_CurveElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_CurveElementPurposeMember_swigregister = _StepElement.Handle_StepElement_CurveElementPurposeMember_swigregister
Handle_StepElement_CurveElementPurposeMember_swigregister(Handle_StepElement_CurveElementPurposeMember)

def Handle_StepElement_CurveElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_CurveElementPurposeMember_DownCast(thing)
Handle_StepElement_CurveElementPurposeMember_DownCast = _StepElement.Handle_StepElement_CurveElementPurposeMember_DownCast

class Handle_StepElement_HArray1OfVolumeElementPurpose(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfVolumeElementPurpose self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfVolumeElementPurpose self, StepElement_HArray1OfVolumeElementPurpose thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfVolumeElementPurpose self, Handle_StepElement_HArray1OfVolumeElementPurpose theHandle) -> Handle_StepElement_HArray1OfVolumeElementPurpose
        assign(Handle_StepElement_HArray1OfVolumeElementPurpose self, StepElement_HArray1OfVolumeElementPurpose thePtr) -> Handle_StepElement_HArray1OfVolumeElementPurpose
        assign(Handle_StepElement_HArray1OfVolumeElementPurpose self, Handle_StepElement_HArray1OfVolumeElementPurpose theHandle) -> Handle_StepElement_HArray1OfVolumeElementPurpose

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> StepElement_HArray1OfVolumeElementPurpose

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> StepElement_HArray1OfVolumeElementPurpose

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> StepElement_HArray1OfVolumeElementPurpose

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfVolumeElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfVolumeElementPurpose

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurpose

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> NCollection_Array1_StepElement_VolumeElementPurpose

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurpose

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfVolumeElementPurpose self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfVolumeElementPurpose self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfVolumeElementPurpose self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfVolumeElementPurpose self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfVolumeElementPurpose self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfVolumeElementPurpose self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfVolumeElementPurpose self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfVolumeElementPurpose_swigregister = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_swigregister
Handle_StepElement_HArray1OfVolumeElementPurpose_swigregister(Handle_StepElement_HArray1OfVolumeElementPurpose)

def Handle_StepElement_HArray1OfVolumeElementPurpose_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_DownCast(thing)
Handle_StepElement_HArray1OfVolumeElementPurpose_DownCast = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurpose_DownCast

class NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self)

        Reverse sequence


        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theOther) -> NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theOther) -> NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theItem)
        Append(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theItem)
        Prepend(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_SurfaceElementPurposeMember theItem)
        InsertBefore(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Sequence< opencascade::handle< StepElement_SurfaceElementPurposeMember > >::Iterator & thePosition, Handle_StepElement_SurfaceElementPurposeMember theItem)
        InsertAfter(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_SurfaceElementPurposeMember theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Handle_StepElement_SurfaceElementPurposeMember

        First item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self) -> Handle_StepElement_SurfaceElementPurposeMember

        Last item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex) -> Handle_StepElement_SurfaceElementPurposeMember

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_SurfaceElementPurposeMember theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_SetValue(self, *args)


    def __iter__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember___iter__(self)
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember
NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_swigregister
NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_swigregister(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember)

def NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_delNode(*args):
    """
    NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_delNode(*args)

class NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper

    def __next__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember_IteratorHelper)


try:
	StepElement_SequenceOfSurfaceElementPurposeMember = NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_SurfaceSectionFieldConstant(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceSectionFieldConstant self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceSectionFieldConstant self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceSectionFieldConstant self, StepElement_SurfaceSectionFieldConstant thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSectionFieldConstant theHandle) -> Handle_StepElement_SurfaceSectionFieldConstant
        assign(Handle_StepElement_SurfaceSectionFieldConstant self, StepElement_SurfaceSectionFieldConstant thePtr) -> Handle_StepElement_SurfaceSectionFieldConstant
        assign(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSectionFieldConstant theHandle) -> Handle_StepElement_SurfaceSectionFieldConstant

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceSectionFieldConstant self) -> StepElement_SurfaceSectionFieldConstant

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceSectionFieldConstant self) -> StepElement_SurfaceSectionFieldConstant

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceSectionFieldConstant self) -> StepElement_SurfaceSectionFieldConstant

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceSectionFieldConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceSectionFieldConstant_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceSectionFieldConstant

    def Init(self, *args):
        """
        Init(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSection aDefinition)

        Initialize all fields (own and inherited)

        :type aDefinition: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_Init(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_StepElement_SurfaceSectionFieldConstant self) -> Handle_StepElement_SurfaceSection

        Returns field Definition

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_Definition(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_StepElement_SurfaceSection Definition)

        Set field Definition

        :type Definition: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSection

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_SetDefinition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceSectionFieldConstant self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceSectionFieldConstant self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceSectionFieldConstant self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceSectionFieldConstant self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceSectionFieldConstant self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceSectionFieldConstant self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceSectionFieldConstant self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceSectionFieldConstant self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceSectionFieldConstant self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceSectionFieldConstant_swigregister = _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_swigregister
Handle_StepElement_SurfaceSectionFieldConstant_swigregister(Handle_StepElement_SurfaceSectionFieldConstant)

def Handle_StepElement_SurfaceSectionFieldConstant_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_DownCast(thing)
Handle_StepElement_SurfaceSectionFieldConstant_DownCast = _StepElement.Handle_StepElement_SurfaceSectionFieldConstant_DownCast

class StepElement_HArray1OfMeasureOrUnspecifiedValue(NCollection_Array1_StepElement_MeasureOrUnspecifiedValue, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepElement_HArray1OfMeasureOrUnspecifiedValue
        __init__(StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_Integer const theLower, Standard_Integer const theUpper, StepElement_MeasureOrUnspecifiedValue theValue) -> StepElement_HArray1OfMeasureOrUnspecifiedValue
        __init__(StepElement_HArray1OfMeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> StepElement_HArray1OfMeasureOrUnspecifiedValue

        :type theOther: OCC.wrapper.StepElement.StepElement_Array1OfMeasureOrUnspecifiedValue

        """
        this = _StepElement.new_StepElement_HArray1OfMeasureOrUnspecifiedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfMeasureOrUnspecifiedValue

        """
        res = _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_HArray1OfMeasureOrUnspecifiedValue
StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister = _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister
StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister(StepElement_HArray1OfMeasureOrUnspecifiedValue)

def StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_name(*args):
    """
    StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_name(*args)

def StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_descriptor(*args):
    """
    StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_descriptor(*args)

class NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self)

        Reverse sequence


        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theOther) -> NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theOther) -> NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theItem)
        Append(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theItem)
        Prepend(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_CurveElementPurposeMember theItem)
        InsertBefore(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, NCollection_Sequence< opencascade::handle< StepElement_CurveElementPurposeMember > >::Iterator & thePosition, Handle_StepElement_CurveElementPurposeMember theItem)
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_CurveElementPurposeMember theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Handle_StepElement_CurveElementPurposeMember

        First item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self) -> Handle_StepElement_CurveElementPurposeMember

        Last item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex) -> Handle_StepElement_CurveElementPurposeMember

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_CurveElementPurposeMember theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_SetValue(self, *args)


    def __iter__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember___iter__(self)
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember
NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_swigregister
NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_swigregister(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember)

def NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_delNode(*args):
    """
    NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_delNode(*args)

class NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper

    def __next__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember_IteratorHelper)


try:
	StepElement_SequenceOfCurveElementPurposeMember = NCollection_Sequence_Handle_StepElement_CurveElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_AnalysisItemWithinRepresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_AnalysisItemWithinRepresentation self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_AnalysisItemWithinRepresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_AnalysisItemWithinRepresentation self, StepElement_AnalysisItemWithinRepresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_StepElement_AnalysisItemWithinRepresentation theHandle) -> Handle_StepElement_AnalysisItemWithinRepresentation
        assign(Handle_StepElement_AnalysisItemWithinRepresentation self, StepElement_AnalysisItemWithinRepresentation thePtr) -> Handle_StepElement_AnalysisItemWithinRepresentation
        assign(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_StepElement_AnalysisItemWithinRepresentation theHandle) -> Handle_StepElement_AnalysisItemWithinRepresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_AnalysisItemWithinRepresentation self) -> StepElement_AnalysisItemWithinRepresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_AnalysisItemWithinRepresentation self) -> StepElement_AnalysisItemWithinRepresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_AnalysisItemWithinRepresentation self) -> StepElement_AnalysisItemWithinRepresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_AnalysisItemWithinRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_AnalysisItemWithinRepresentation

    def Init(self, *args):
        """
        Init(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_RepresentationItem aItem, Handle_StepRepr_Representation aRep)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem
        :type aRep: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_SetDescription(self, *args)


    def Item(self, *args):
        """
        Item(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Handle_StepRepr_RepresentationItem

        Returns field Item

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Item(self, *args)


    def SetItem(self, *args):
        """
        SetItem(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_StepRepr_RepresentationItem Item)

        Set field Item

        :type Item: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_SetItem(self, *args)


    def Rep(self, *args):
        """
        Rep(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Handle_StepRepr_Representation

        Returns field Rep

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Rep(self, *args)


    def SetRep(self, *args):
        """
        SetRep(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_StepRepr_Representation Rep)

        Set field Rep

        :type Rep: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_SetRep(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_AnalysisItemWithinRepresentation self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_AnalysisItemWithinRepresentation self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_AnalysisItemWithinRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_AnalysisItemWithinRepresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_AnalysisItemWithinRepresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_AnalysisItemWithinRepresentation self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_AnalysisItemWithinRepresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_DecrementRefCounter(self, *args)

Handle_StepElement_AnalysisItemWithinRepresentation_swigregister = _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_swigregister
Handle_StepElement_AnalysisItemWithinRepresentation_swigregister(Handle_StepElement_AnalysisItemWithinRepresentation)

def Handle_StepElement_AnalysisItemWithinRepresentation_DownCast(thing):
    return _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_DownCast(thing)
Handle_StepElement_AnalysisItemWithinRepresentation_DownCast = _StepElement.Handle_StepElement_AnalysisItemWithinRepresentation_DownCast

class Handle_StepElement_SurfaceSectionField(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceSectionField self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceSectionField self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceSectionField self, StepElement_SurfaceSectionField thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceSectionField self, Handle_StepElement_SurfaceSectionField theHandle) -> Handle_StepElement_SurfaceSectionField
        assign(Handle_StepElement_SurfaceSectionField self, StepElement_SurfaceSectionField thePtr) -> Handle_StepElement_SurfaceSectionField
        assign(Handle_StepElement_SurfaceSectionField self, Handle_StepElement_SurfaceSectionField theHandle) -> Handle_StepElement_SurfaceSectionField

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceSectionField self) -> StepElement_SurfaceSectionField

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceSectionField self) -> StepElement_SurfaceSectionField

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceSectionField self) -> StepElement_SurfaceSectionField

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceSectionField___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceSectionField___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceSectionField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceSectionField_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceSectionField

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceSectionField self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionField_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceSectionField_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceSectionField self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceSectionField self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceSectionField self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceSectionField self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceSectionField self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceSectionField self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceSectionField self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceSectionField self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceSectionField self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceSectionField_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceSectionField_swigregister = _StepElement.Handle_StepElement_SurfaceSectionField_swigregister
Handle_StepElement_SurfaceSectionField_swigregister(Handle_StepElement_SurfaceSectionField)

def Handle_StepElement_SurfaceSectionField_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceSectionField_DownCast(thing)
Handle_StepElement_SurfaceSectionField_DownCast = _StepElement.Handle_StepElement_SurfaceSectionField_DownCast

class Handle_StepElement_CurveElementSectionDerivedDefinitions(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_CurveElementSectionDerivedDefinitions self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_CurveElementSectionDerivedDefinitions self, StepElement_CurveElementSectionDerivedDefinitions thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_CurveElementSectionDerivedDefinitions theHandle) -> Handle_StepElement_CurveElementSectionDerivedDefinitions
        assign(Handle_StepElement_CurveElementSectionDerivedDefinitions self, StepElement_CurveElementSectionDerivedDefinitions thePtr) -> Handle_StepElement_CurveElementSectionDerivedDefinitions
        assign(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_CurveElementSectionDerivedDefinitions theHandle) -> Handle_StepElement_CurveElementSectionDerivedDefinitions

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_CurveElementSectionDerivedDefinitions

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_CurveElementSectionDerivedDefinitions

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_CurveElementSectionDerivedDefinitions

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_CurveElementSectionDerivedDefinitions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_CurveElementSectionDerivedDefinitions

    def Init(self, *args):
        """
        Init(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_TCollection_HAsciiString aCurveElementSectionDefinition_Description, Standard_Real const aCurveElementSectionDefinition_SectionAngle, Standard_Real const aCrossSectionalArea, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aShearArea, Handle_TColStd_HArray1OfReal aSecondMomentOfArea, Standard_Real const aTorsionalConstant, StepElement_MeasureOrUnspecifiedValue aWarpingConstant, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfCentroid, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfShearCentre, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue aLocationOfNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aNonStructuralMass, StepElement_MeasureOrUnspecifiedValue aPolarMoment)

        Initialize all fields (own and inherited)

        :type aCurveElementSectionDefinition_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aCurveElementSectionDefinition_SectionAngle: float
        :type aCrossSectionalArea: float
        :type aShearArea: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aSecondMomentOfArea: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aTorsionalConstant: float
        :type aWarpingConstant: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aLocationOfCentroid: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aLocationOfShearCentre: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aLocationOfNonStructuralMass: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        :type aNonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue
        :type aPolarMoment: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_Init(self, *args)


    def CrossSectionalArea(self, *args):
        """
        CrossSectionalArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Real

        Returns field CrossSectionalArea

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_CrossSectionalArea(self, *args)


    def SetCrossSectionalArea(self, *args):
        """
        SetCrossSectionalArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Standard_Real const CrossSectionalArea)

        Set field CrossSectionalArea

        :type CrossSectionalArea: float

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetCrossSectionalArea(self, *args)


    def ShearArea(self, *args):
        """
        ShearArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field ShearArea

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_ShearArea(self, *args)


    def SetShearArea(self, *args):
        """
        SetShearArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue ShearArea)

        Set field ShearArea

        :type ShearArea: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetShearArea(self, *args)


    def SecondMomentOfArea(self, *args):
        """
        SecondMomentOfArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_TColStd_HArray1OfReal

        Returns field SecondMomentOfArea

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SecondMomentOfArea(self, *args)


    def SetSecondMomentOfArea(self, *args):
        """
        SetSecondMomentOfArea(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_TColStd_HArray1OfReal SecondMomentOfArea)

        Set field SecondMomentOfArea

        :type SecondMomentOfArea: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetSecondMomentOfArea(self, *args)


    def TorsionalConstant(self, *args):
        """
        TorsionalConstant(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Real

        Returns field TorsionalConstant

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_TorsionalConstant(self, *args)


    def SetTorsionalConstant(self, *args):
        """
        SetTorsionalConstant(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Standard_Real const TorsionalConstant)

        Set field TorsionalConstant

        :type TorsionalConstant: float

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetTorsionalConstant(self, *args)


    def WarpingConstant(self, *args):
        """
        WarpingConstant(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field WarpingConstant

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_WarpingConstant(self, *args)


    def SetWarpingConstant(self, *args):
        """
        SetWarpingConstant(Handle_StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue WarpingConstant)

        Set field WarpingConstant

        :type WarpingConstant: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetWarpingConstant(self, *args)


    def LocationOfCentroid(self, *args):
        """
        LocationOfCentroid(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfCentroid

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_LocationOfCentroid(self, *args)


    def SetLocationOfCentroid(self, *args):
        """
        SetLocationOfCentroid(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfCentroid)

        Set field LocationOfCentroid

        :type LocationOfCentroid: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfCentroid(self, *args)


    def LocationOfShearCentre(self, *args):
        """
        LocationOfShearCentre(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfShearCentre

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_LocationOfShearCentre(self, *args)


    def SetLocationOfShearCentre(self, *args):
        """
        SetLocationOfShearCentre(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfShearCentre)

        Set field LocationOfShearCentre

        :type LocationOfShearCentre: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfShearCentre(self, *args)


    def LocationOfNonStructuralMass(self, *args):
        """
        LocationOfNonStructuralMass(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Returns field LocationOfNonStructuralMass

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_LocationOfNonStructuralMass(self, *args)


    def SetLocationOfNonStructuralMass(self, *args):
        """
        SetLocationOfNonStructuralMass(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue LocationOfNonStructuralMass)

        Set field LocationOfNonStructuralMass

        :type LocationOfNonStructuralMass: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetLocationOfNonStructuralMass(self, *args)


    def NonStructuralMass(self, *args):
        """
        NonStructuralMass(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field NonStructuralMass

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_NonStructuralMass(self, *args)


    def SetNonStructuralMass(self, *args):
        """
        SetNonStructuralMass(Handle_StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue NonStructuralMass)

        Set field NonStructuralMass

        :type NonStructuralMass: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetNonStructuralMass(self, *args)


    def PolarMoment(self, *args):
        """
        PolarMoment(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> StepElement_MeasureOrUnspecifiedValue

        Returns field PolarMoment

        :rtype: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_PolarMoment(self, *args)


    def SetPolarMoment(self, *args):
        """
        SetPolarMoment(Handle_StepElement_CurveElementSectionDerivedDefinitions self, StepElement_MeasureOrUnspecifiedValue PolarMoment)

        Set field PolarMoment

        :type PolarMoment: OCC.wrapper.StepElement.StepElement_MeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetPolarMoment(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Description(self, *args):
        """
        Description(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetDescription(self, *args)


    def SectionAngle(self, *args):
        """
        SectionAngle(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Real

        Returns field SectionAngle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SectionAngle(self, *args)


    def SetSectionAngle(self, *args):
        """
        SetSectionAngle(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Standard_Real const SectionAngle)

        Set field SectionAngle

        :type SectionAngle: float

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_SetSectionAngle(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_CurveElementSectionDerivedDefinitions self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_CurveElementSectionDerivedDefinitions self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_CurveElementSectionDerivedDefinitions self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_CurveElementSectionDerivedDefinitions self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_DecrementRefCounter(self, *args)

Handle_StepElement_CurveElementSectionDerivedDefinitions_swigregister = _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_swigregister
Handle_StepElement_CurveElementSectionDerivedDefinitions_swigregister(Handle_StepElement_CurveElementSectionDerivedDefinitions)

def Handle_StepElement_CurveElementSectionDerivedDefinitions_DownCast(thing):
    return _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_DownCast(thing)
Handle_StepElement_CurveElementSectionDerivedDefinitions_DownCast = _StepElement.Handle_StepElement_CurveElementSectionDerivedDefinitions_DownCast

class Handle_StepElement_HArray2OfSurfaceElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, StepElement_HArray2OfSurfaceElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Handle_StepElement_HArray2OfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HArray2OfSurfaceElementPurposeMember
        assign(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, StepElement_HArray2OfSurfaceElementPurposeMember thePtr) -> Handle_StepElement_HArray2OfSurfaceElementPurposeMember
        assign(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Handle_StepElement_HArray2OfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HArray2OfSurfaceElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> StepElement_HArray2OfSurfaceElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> StepElement_HArray2OfSurfaceElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> StepElement_HArray2OfSurfaceElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray2OfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray2OfSurfaceElementPurposeMember

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray2OfSurfaceElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HArray2OfSurfaceElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_swigregister
Handle_StepElement_HArray2OfSurfaceElementPurposeMember_swigregister(Handle_StepElement_HArray2OfSurfaceElementPurposeMember)

def Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DownCast(thing)
Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurposeMember_DownCast

class Handle_StepElement_ElementAspectMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_ElementAspectMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_ElementAspectMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_ElementAspectMember self, StepElement_ElementAspectMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_ElementAspectMember self, Handle_StepElement_ElementAspectMember theHandle) -> Handle_StepElement_ElementAspectMember
        assign(Handle_StepElement_ElementAspectMember self, StepElement_ElementAspectMember thePtr) -> Handle_StepElement_ElementAspectMember
        assign(Handle_StepElement_ElementAspectMember self, Handle_StepElement_ElementAspectMember theHandle) -> Handle_StepElement_ElementAspectMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_ElementAspectMember self) -> StepElement_ElementAspectMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_ElementAspectMember self) -> StepElement_ElementAspectMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementAspectMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_ElementAspectMember self) -> StepElement_ElementAspectMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_ElementAspectMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_ElementAspectMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_ElementAspectMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_ElementAspectMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_ElementAspectMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_ElementAspectMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_ElementAspectMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_ElementAspectMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_ElementAspectMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_ElementAspectMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_ElementAspectMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementAspectMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementAspectMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_ElementAspectMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_ElementAspectMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_ElementAspectMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_ElementAspectMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_ElementAspectMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_ElementAspectMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_ElementAspectMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_ElementAspectMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_ElementAspectMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_ElementAspectMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_ElementAspectMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_ElementAspectMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_ElementAspectMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_ElementAspectMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_ElementAspectMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_ElementAspectMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_ElementAspectMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_ElementAspectMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_ElementAspectMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_ElementAspectMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_ElementAspectMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_ElementAspectMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_ElementAspectMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_ElementAspectMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_ElementAspectMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_ElementAspectMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_ElementAspectMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementAspectMember_DecrementRefCounter(self, *args)

Handle_StepElement_ElementAspectMember_swigregister = _StepElement.Handle_StepElement_ElementAspectMember_swigregister
Handle_StepElement_ElementAspectMember_swigregister(Handle_StepElement_ElementAspectMember)

def Handle_StepElement_ElementAspectMember_DownCast(thing):
    return _StepElement.Handle_StepElement_ElementAspectMember_DownCast(thing)
Handle_StepElement_ElementAspectMember_DownCast = _StepElement.Handle_StepElement_ElementAspectMember_DownCast

class NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementSectionDefinition > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementSectionDefinition > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementSectionDefinition > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Array1< opencascade::handle< StepElement_CurveElementSectionDefinition > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition
        assign(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Handle_StepElement_CurveElementSectionDefinition

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self) -> Handle_StepElement_CurveElementSectionDefinition

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex) -> Handle_StepElement_CurveElementSectionDefinition

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, Handle_StepElement_CurveElementSectionDefinition theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition
NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_swigregister
NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition_swigregister(NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition)


try:
	StepElement_Array1OfCurveElementSectionDefinition = NCollection_Array1_Handle_StepElement_CurveElementSectionDefinition
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_CurveElementEndReleasePacket(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_CurveElementEndReleasePacket self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_CurveElementEndReleasePacket self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementEndReleasePacket thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_CurveElementEndReleasePacket self, Handle_StepElement_CurveElementEndReleasePacket theHandle) -> Handle_StepElement_CurveElementEndReleasePacket
        assign(Handle_StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementEndReleasePacket thePtr) -> Handle_StepElement_CurveElementEndReleasePacket
        assign(Handle_StepElement_CurveElementEndReleasePacket self, Handle_StepElement_CurveElementEndReleasePacket theHandle) -> Handle_StepElement_CurveElementEndReleasePacket

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementEndReleasePacket

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementEndReleasePacket

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementEndReleasePacket

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_CurveElementEndReleasePacket___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_CurveElementEndReleasePacket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_CurveElementEndReleasePacket_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_CurveElementEndReleasePacket

    def Init(self, *args):
        """
        Init(Handle_StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementFreedom aReleaseFreedom, Standard_Real const aReleaseStiffness)

        Initialize all fields (own and inherited)

        :type aReleaseFreedom: OCC.wrapper.StepElement.StepElement_CurveElementFreedom
        :type aReleaseStiffness: float

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_Init(self, *args)


    def ReleaseFreedom(self, *args):
        """
        ReleaseFreedom(Handle_StepElement_CurveElementEndReleasePacket self) -> StepElement_CurveElementFreedom

        Returns field ReleaseFreedom

        :rtype: OCC.wrapper.StepElement.StepElement_CurveElementFreedom

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_ReleaseFreedom(self, *args)


    def SetReleaseFreedom(self, *args):
        """
        SetReleaseFreedom(Handle_StepElement_CurveElementEndReleasePacket self, StepElement_CurveElementFreedom ReleaseFreedom)

        Set field ReleaseFreedom

        :type ReleaseFreedom: OCC.wrapper.StepElement.StepElement_CurveElementFreedom

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_SetReleaseFreedom(self, *args)


    def ReleaseStiffness(self, *args):
        """
        ReleaseStiffness(Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Real

        Returns field ReleaseStiffness

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_ReleaseStiffness(self, *args)


    def SetReleaseStiffness(self, *args):
        """
        SetReleaseStiffness(Handle_StepElement_CurveElementEndReleasePacket self, Standard_Real const ReleaseStiffness)

        Set field ReleaseStiffness

        :type ReleaseStiffness: float

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_SetReleaseStiffness(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_CurveElementEndReleasePacket self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementEndReleasePacket_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementEndReleasePacket_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_CurveElementEndReleasePacket self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_CurveElementEndReleasePacket self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_CurveElementEndReleasePacket self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_CurveElementEndReleasePacket self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_CurveElementEndReleasePacket self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_CurveElementEndReleasePacket self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_CurveElementEndReleasePacket self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_DecrementRefCounter(self, *args)

Handle_StepElement_CurveElementEndReleasePacket_swigregister = _StepElement.Handle_StepElement_CurveElementEndReleasePacket_swigregister
Handle_StepElement_CurveElementEndReleasePacket_swigregister(Handle_StepElement_CurveElementEndReleasePacket)

def Handle_StepElement_CurveElementEndReleasePacket_DownCast(thing):
    return _StepElement.Handle_StepElement_CurveElementEndReleasePacket_DownCast(thing)
Handle_StepElement_CurveElementEndReleasePacket_DownCast = _StepElement.Handle_StepElement_CurveElementEndReleasePacket_DownCast

class StepElement_CurveElementFreedom(StepData.StepData_SelectType):
    """Representation of STEP SELECT type CurveElementFreedom"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementFreedom self) -> StepElement_CurveElementFreedom

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementFreedom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_CurveElementFreedom self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of CurveElementFreedom select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_CurveElementFreedom_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_CurveElementFreedom self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member CurveElementFreedomMember
        1 -> EnumeratedCurveElementFreedom
        2 -> ApplicationDefinedDegreeOfFreedom
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_CurveElementFreedom_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_CurveElementFreedom self) -> Handle_StepData_SelectMember

        Returns a new select member the type CurveElementFreedomMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_CurveElementFreedom_NewMember(self, *args)


    def SetEnumeratedCurveElementFreedom(self, *args):
        """
        SetEnumeratedCurveElementFreedom(StepElement_CurveElementFreedom self, StepElement_EnumeratedCurveElementFreedom const aVal)

        Set Value for EnumeratedCurveElementFreedom

        :type aVal: OCC.wrapper.StepElement.StepElement_EnumeratedCurveElementFreedom

        """
        return _StepElement.StepElement_CurveElementFreedom_SetEnumeratedCurveElementFreedom(self, *args)


    def EnumeratedCurveElementFreedom(self, *args):
        """
        EnumeratedCurveElementFreedom(StepElement_CurveElementFreedom self) -> StepElement_EnumeratedCurveElementFreedom

        Returns Value as EnumeratedCurveElementFreedom (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_EnumeratedCurveElementFreedom

        """
        return _StepElement.StepElement_CurveElementFreedom_EnumeratedCurveElementFreedom(self, *args)


    def SetApplicationDefinedDegreeOfFreedom(self, *args):
        """
        SetApplicationDefinedDegreeOfFreedom(StepElement_CurveElementFreedom self, Handle_TCollection_HAsciiString aVal)

        Set Value for ApplicationDefinedDegreeOfFreedom

        :type aVal: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementFreedom_SetApplicationDefinedDegreeOfFreedom(self, *args)


    def ApplicationDefinedDegreeOfFreedom(self, *args):
        """
        ApplicationDefinedDegreeOfFreedom(StepElement_CurveElementFreedom self) -> Handle_TCollection_HAsciiString

        Returns Value as ApplicationDefinedDegreeOfFreedom (or Null if another type)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementFreedom_ApplicationDefinedDegreeOfFreedom(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementFreedom
StepElement_CurveElementFreedom_swigregister = _StepElement.StepElement_CurveElementFreedom_swigregister
StepElement_CurveElementFreedom_swigregister(StepElement_CurveElementFreedom)

class Handle_StepElement_HSequenceOfSurfaceElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, StepElement_HSequenceOfSurfaceElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
        assign(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, StepElement_HSequenceOfSurfaceElementPurposeMember thePtr) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember
        assign(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_HSequenceOfSurfaceElementPurposeMember theHandle) -> Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> StepElement_HSequenceOfSurfaceElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> StepElement_HSequenceOfSurfaceElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> StepElement_HSequenceOfSurfaceElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HSequenceOfSurfaceElementPurposeMember

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theItem)
        Append(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> NCollection_Sequence_Handle_StepElement_SurfaceElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfSurfaceElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister
Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_swigregister(Handle_StepElement_HSequenceOfSurfaceElementPurposeMember)

def Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DownCast(thing)
Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HSequenceOfSurfaceElementPurposeMember_DownCast

class Handle_StepElement_HArray2OfSurfaceElementPurpose(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray2OfSurfaceElementPurpose self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray2OfSurfaceElementPurpose self, StepElement_HArray2OfSurfaceElementPurpose thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Handle_StepElement_HArray2OfSurfaceElementPurpose theHandle) -> Handle_StepElement_HArray2OfSurfaceElementPurpose
        assign(Handle_StepElement_HArray2OfSurfaceElementPurpose self, StepElement_HArray2OfSurfaceElementPurpose thePtr) -> Handle_StepElement_HArray2OfSurfaceElementPurpose
        assign(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Handle_StepElement_HArray2OfSurfaceElementPurpose theHandle) -> Handle_StepElement_HArray2OfSurfaceElementPurpose

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> StepElement_HArray2OfSurfaceElementPurpose

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> StepElement_HArray2OfSurfaceElementPurpose

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> StepElement_HArray2OfSurfaceElementPurpose

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray2OfSurfaceElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray2OfSurfaceElementPurpose

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurpose

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> NCollection_Array2_StepElement_SurfaceElementPurpose

        :rtype: OCC.wrapper.StepElement.StepElement_Array2OfSurfaceElementPurpose

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray2OfSurfaceElementPurpose self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray2OfSurfaceElementPurpose self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray2OfSurfaceElementPurpose self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray2OfSurfaceElementPurpose self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_DecrementRefCounter(self, *args)

Handle_StepElement_HArray2OfSurfaceElementPurpose_swigregister = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_swigregister
Handle_StepElement_HArray2OfSurfaceElementPurpose_swigregister(Handle_StepElement_HArray2OfSurfaceElementPurpose)

def Handle_StepElement_HArray2OfSurfaceElementPurpose_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_DownCast(thing)
Handle_StepElement_HArray2OfSurfaceElementPurpose_DownCast = _StepElement.Handle_StepElement_HArray2OfSurfaceElementPurpose_DownCast

class Handle_StepElement_CurveElementSectionDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_CurveElementSectionDefinition self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_CurveElementSectionDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_CurveElementSectionDefinition self, StepElement_CurveElementSectionDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_CurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theHandle) -> Handle_StepElement_CurveElementSectionDefinition
        assign(Handle_StepElement_CurveElementSectionDefinition self, StepElement_CurveElementSectionDefinition thePtr) -> Handle_StepElement_CurveElementSectionDefinition
        assign(Handle_StepElement_CurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theHandle) -> Handle_StepElement_CurveElementSectionDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_CurveElementSectionDefinition self) -> StepElement_CurveElementSectionDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_CurveElementSectionDefinition self) -> StepElement_CurveElementSectionDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_CurveElementSectionDefinition self) -> StepElement_CurveElementSectionDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_CurveElementSectionDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_CurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_CurveElementSectionDefinition_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_CurveElementSectionDefinition

    def Init(self, *args):
        """
        Init(Handle_StepElement_CurveElementSectionDefinition self, Handle_TCollection_HAsciiString aDescription, Standard_Real const aSectionAngle)

        Initialize all fields (own and inherited)

        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSectionAngle: float

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_Init(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_CurveElementSectionDefinition self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_CurveElementSectionDefinition self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_SetDescription(self, *args)


    def SectionAngle(self, *args):
        """
        SectionAngle(Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Real

        Returns field SectionAngle

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_SectionAngle(self, *args)


    def SetSectionAngle(self, *args):
        """
        SetSectionAngle(Handle_StepElement_CurveElementSectionDefinition self, Standard_Real const SectionAngle)

        Set field SectionAngle

        :type SectionAngle: float

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_SetSectionAngle(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_CurveElementSectionDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementSectionDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_CurveElementSectionDefinition self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_CurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_CurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_CurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_CurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_CurveElementSectionDefinition self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementSectionDefinition_DecrementRefCounter(self, *args)

Handle_StepElement_CurveElementSectionDefinition_swigregister = _StepElement.Handle_StepElement_CurveElementSectionDefinition_swigregister
Handle_StepElement_CurveElementSectionDefinition_swigregister(Handle_StepElement_CurveElementSectionDefinition)

def Handle_StepElement_CurveElementSectionDefinition_DownCast(thing):
    return _StepElement.Handle_StepElement_CurveElementSectionDefinition_DownCast(thing)
Handle_StepElement_CurveElementSectionDefinition_DownCast = _StepElement.Handle_StepElement_CurveElementSectionDefinition_DownCast

class Handle_StepElement_HArray1OfVolumeElementPurposeMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfVolumeElementPurposeMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, StepElement_HArray1OfVolumeElementPurposeMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Handle_StepElement_HArray1OfVolumeElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfVolumeElementPurposeMember
        assign(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, StepElement_HArray1OfVolumeElementPurposeMember thePtr) -> Handle_StepElement_HArray1OfVolumeElementPurposeMember
        assign(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Handle_StepElement_HArray1OfVolumeElementPurposeMember theHandle) -> Handle_StepElement_HArray1OfVolumeElementPurposeMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> StepElement_HArray1OfVolumeElementPurposeMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> StepElement_HArray1OfVolumeElementPurposeMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> StepElement_HArray1OfVolumeElementPurposeMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfVolumeElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfVolumeElementPurposeMember

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurposeMember

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> NCollection_Array1_Handle_StepElement_VolumeElementPurposeMember

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfVolumeElementPurposeMember

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfVolumeElementPurposeMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfVolumeElementPurposeMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfVolumeElementPurposeMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfVolumeElementPurposeMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfVolumeElementPurposeMember_swigregister = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_swigregister
Handle_StepElement_HArray1OfVolumeElementPurposeMember_swigregister(Handle_StepElement_HArray1OfVolumeElementPurposeMember)

def Handle_StepElement_HArray1OfVolumeElementPurposeMember_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_DownCast(thing)
Handle_StepElement_HArray1OfVolumeElementPurposeMember_DownCast = _StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember_DownCast

class Handle_StepElement_SurfaceElementProperty(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_SurfaceElementProperty self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_SurfaceElementProperty self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_SurfaceElementProperty self, StepElement_SurfaceElementProperty thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_SurfaceElementProperty self, Handle_StepElement_SurfaceElementProperty theHandle) -> Handle_StepElement_SurfaceElementProperty
        assign(Handle_StepElement_SurfaceElementProperty self, StepElement_SurfaceElementProperty thePtr) -> Handle_StepElement_SurfaceElementProperty
        assign(Handle_StepElement_SurfaceElementProperty self, Handle_StepElement_SurfaceElementProperty theHandle) -> Handle_StepElement_SurfaceElementProperty

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_SurfaceElementProperty self) -> StepElement_SurfaceElementProperty

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_SurfaceElementProperty self) -> StepElement_SurfaceElementProperty

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_SurfaceElementProperty self) -> StepElement_SurfaceElementProperty

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_SurfaceElementProperty___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_SurfaceElementProperty___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_SurfaceElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_SurfaceElementProperty_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_SurfaceElementProperty

    def Init(self, *args):
        """
        Init(Handle_StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString aPropertyId, Handle_TCollection_HAsciiString aDescription, Handle_StepElement_SurfaceSectionField aSection)

        Initialize all fields (own and inherited)

        :type aPropertyId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aSection: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_Init(self, *args)


    def PropertyId(self, *args):
        """
        PropertyId(Handle_StepElement_SurfaceElementProperty self) -> Handle_TCollection_HAsciiString

        Returns field PropertyId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_PropertyId(self, *args)


    def SetPropertyId(self, *args):
        """
        SetPropertyId(Handle_StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString PropertyId)

        Set field PropertyId

        :type PropertyId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_SetPropertyId(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_SurfaceElementProperty self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_SurfaceElementProperty self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_SetDescription(self, *args)


    def Section(self, *args):
        """
        Section(Handle_StepElement_SurfaceElementProperty self) -> Handle_StepElement_SurfaceSectionField

        Returns field Section

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_Section(self, *args)


    def SetSection(self, *args):
        """
        SetSection(Handle_StepElement_SurfaceElementProperty self, Handle_StepElement_SurfaceSectionField Section)

        Set field Section

        :type Section: OCC.wrapper.StepElement.Handle_StepElement_SurfaceSectionField

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_SetSection(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_SurfaceElementProperty self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceElementProperty_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_SurfaceElementProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_SurfaceElementProperty self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_SurfaceElementProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_SurfaceElementProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_SurfaceElementProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_SurfaceElementProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_SurfaceElementProperty self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_SurfaceElementProperty self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_SurfaceElementProperty self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_SurfaceElementProperty self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_SurfaceElementProperty_DecrementRefCounter(self, *args)

Handle_StepElement_SurfaceElementProperty_swigregister = _StepElement.Handle_StepElement_SurfaceElementProperty_swigregister
Handle_StepElement_SurfaceElementProperty_swigregister(Handle_StepElement_SurfaceElementProperty)

def Handle_StepElement_SurfaceElementProperty_DownCast(thing):
    return _StepElement.Handle_StepElement_SurfaceElementProperty_DownCast(thing)
Handle_StepElement_SurfaceElementProperty_DownCast = _StepElement.Handle_StepElement_SurfaceElementProperty_DownCast

class Handle_StepElement_Curve3dElementDescriptor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_Curve3dElementDescriptor self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_Curve3dElementDescriptor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_Curve3dElementDescriptor self, StepElement_Curve3dElementDescriptor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_Curve3dElementDescriptor self, Handle_StepElement_Curve3dElementDescriptor theHandle) -> Handle_StepElement_Curve3dElementDescriptor
        assign(Handle_StepElement_Curve3dElementDescriptor self, StepElement_Curve3dElementDescriptor thePtr) -> Handle_StepElement_Curve3dElementDescriptor
        assign(Handle_StepElement_Curve3dElementDescriptor self, Handle_StepElement_Curve3dElementDescriptor theHandle) -> Handle_StepElement_Curve3dElementDescriptor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_Curve3dElementDescriptor self) -> StepElement_Curve3dElementDescriptor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_Curve3dElementDescriptor self) -> StepElement_Curve3dElementDescriptor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_Curve3dElementDescriptor self) -> StepElement_Curve3dElementDescriptor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_Curve3dElementDescriptor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_Curve3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_Curve3dElementDescriptor_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_Curve3dElementDescriptor

    def Init(self, *args):
        """
        Init(Handle_StepElement_Curve3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember aPurpose)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(Handle_StepElement_Curve3dElementDescriptor self) -> Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(Handle_StepElement_Curve3dElementDescriptor self, Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfHSequenceOfCurveElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_SetPurpose(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_Curve3dElementDescriptor self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Curve3dElementDescriptor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Curve3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TopologyOrder(self, *args):
        """
        TopologyOrder(Handle_StepElement_Curve3dElementDescriptor self) -> StepElement_ElementOrder

        Returns field TopologyOrder

        :rtype: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_TopologyOrder(self, *args)


    def SetTopologyOrder(self, *args):
        """
        SetTopologyOrder(Handle_StepElement_Curve3dElementDescriptor self, StepElement_ElementOrder const TopologyOrder)

        Set field TopologyOrder

        :type TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_SetTopologyOrder(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_Curve3dElementDescriptor self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_Curve3dElementDescriptor self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_SetDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_Curve3dElementDescriptor self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_Curve3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_Curve3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_Curve3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_Curve3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_Curve3dElementDescriptor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_Curve3dElementDescriptor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_Curve3dElementDescriptor self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_Curve3dElementDescriptor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Curve3dElementDescriptor_DecrementRefCounter(self, *args)

Handle_StepElement_Curve3dElementDescriptor_swigregister = _StepElement.Handle_StepElement_Curve3dElementDescriptor_swigregister
Handle_StepElement_Curve3dElementDescriptor_swigregister(Handle_StepElement_Curve3dElementDescriptor)

def Handle_StepElement_Curve3dElementDescriptor_DownCast(thing):
    return _StepElement.Handle_StepElement_Curve3dElementDescriptor_DownCast(thing)
Handle_StepElement_Curve3dElementDescriptor_DownCast = _StepElement.Handle_StepElement_Curve3dElementDescriptor_DownCast

class Handle_StepElement_ElementMaterial(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_ElementMaterial self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_ElementMaterial_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_ElementMaterial self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_ElementMaterial_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_ElementMaterial self, StepElement_ElementMaterial thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_ElementMaterial_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_ElementMaterial self, Handle_StepElement_ElementMaterial theHandle) -> Handle_StepElement_ElementMaterial
        assign(Handle_StepElement_ElementMaterial self, StepElement_ElementMaterial thePtr) -> Handle_StepElement_ElementMaterial
        assign(Handle_StepElement_ElementMaterial self, Handle_StepElement_ElementMaterial theHandle) -> Handle_StepElement_ElementMaterial

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_ElementMaterial_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_ElementMaterial self) -> StepElement_ElementMaterial

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementMaterial_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_ElementMaterial self) -> StepElement_ElementMaterial

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_ElementMaterial___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_ElementMaterial self) -> StepElement_ElementMaterial

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_ElementMaterial___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_ElementMaterial___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_ElementMaterial___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_ElementMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_ElementMaterial_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_ElementMaterial

    def Init(self, *args):
        """
        Init(Handle_StepElement_ElementMaterial self, Handle_TCollection_HAsciiString aMaterialId, Handle_TCollection_HAsciiString aDescription, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation aProperties)

        Initialize all fields (own and inherited)

        :type aMaterialId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aProperties: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.Handle_StepElement_ElementMaterial_Init(self, *args)


    def MaterialId(self, *args):
        """
        MaterialId(Handle_StepElement_ElementMaterial self) -> Handle_TCollection_HAsciiString

        Returns field MaterialId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementMaterial_MaterialId(self, *args)


    def SetMaterialId(self, *args):
        """
        SetMaterialId(Handle_StepElement_ElementMaterial self, Handle_TCollection_HAsciiString MaterialId)

        Set field MaterialId

        :type MaterialId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementMaterial_SetMaterialId(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_ElementMaterial self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementMaterial_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_ElementMaterial self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_ElementMaterial_SetDescription(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_StepElement_ElementMaterial self) -> Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        Returns field Properties

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.Handle_StepElement_ElementMaterial_Properties(self, *args)


    def SetProperties(self, *args):
        """
        SetProperties(Handle_StepElement_ElementMaterial self, Handle_StepRepr_HArray1OfMaterialPropertyRepresentation Properties)

        Set field Properties

        :type Properties: OCC.wrapper.StepRepr.Handle_StepRepr_HArray1OfMaterialPropertyRepresentation

        """
        return _StepElement.Handle_StepElement_ElementMaterial_SetProperties(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_ElementMaterial self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_ElementMaterial_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementMaterial_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_ElementMaterial_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_ElementMaterial self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_ElementMaterial_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_ElementMaterial self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_ElementMaterial self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementMaterial_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_ElementMaterial self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_ElementMaterial self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_ElementMaterial_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_ElementMaterial self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_ElementMaterial_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementMaterial_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_ElementMaterial self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_ElementMaterial_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_ElementMaterial self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_ElementMaterial_DecrementRefCounter(self, *args)

Handle_StepElement_ElementMaterial_swigregister = _StepElement.Handle_StepElement_ElementMaterial_swigregister
Handle_StepElement_ElementMaterial_swigregister(Handle_StepElement_ElementMaterial)

def Handle_StepElement_ElementMaterial_DownCast(thing):
    return _StepElement.Handle_StepElement_ElementMaterial_DownCast(thing)
Handle_StepElement_ElementMaterial_DownCast = _StepElement.Handle_StepElement_ElementMaterial_DownCast

class StepElement_CurveElementFreedomMember(StepData.StepData_SelectNamed):
    """Representation of member for  STEP SELECT type CurveElementFreedom"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepElement_CurveElementFreedomMember
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepElement_CurveElementFreedomMember(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementFreedomMember self) -> StepElement_CurveElementFreedomMember

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementFreedomMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def HasName(self, *args):
        """
        HasName(StepElement_CurveElementFreedomMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementFreedomMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(StepElement_CurveElementFreedomMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.StepElement_CurveElementFreedomMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(StepElement_CurveElementFreedomMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementFreedomMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(StepElement_CurveElementFreedomMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.StepElement_CurveElementFreedomMember_Matches(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepElement.StepElement_CurveElementFreedomMember_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepElement.StepElement_CurveElementFreedomMember_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.StepElement_CurveElementFreedomMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementFreedomMember
StepElement_CurveElementFreedomMember_swigregister = _StepElement.StepElement_CurveElementFreedomMember_swigregister
StepElement_CurveElementFreedomMember_swigregister(StepElement_CurveElementFreedomMember)

def StepElement_CurveElementFreedomMember_get_type_name(*args):
    """
    StepElement_CurveElementFreedomMember_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepElement.StepElement_CurveElementFreedomMember_get_type_name(*args)

def StepElement_CurveElementFreedomMember_get_type_descriptor(*args):
    """
    StepElement_CurveElementFreedomMember_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepElement.StepElement_CurveElementFreedomMember_get_type_descriptor(*args)

class StepElement_CurveElementPurpose(StepData.StepData_SelectType):
    """Representation of STEP SELECT type CurveElementPurpose"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepElement_CurveElementPurpose self) -> StepElement_CurveElementPurpose

        Empty constructor


        """
        this = _StepElement.new_StepElement_CurveElementPurpose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepElement_CurveElementPurpose self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of CurveElementPurpose select type
        return 0

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_CurveElementPurpose_CaseNum(self, *args)


    def CaseMem(self, *args):
        """
        CaseMem(StepElement_CurveElementPurpose self, Handle_StepData_SelectMember ent) -> Standard_Integer

        Recognizes a items of select member CurveElementPurposeMember
        1 -> EnumeratedCurveElementPurpose
        2 -> ApplicationDefinedElementPurpose
        0 else

        :type ent: OCC.wrapper.StepData.Handle_StepData_SelectMember
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.StepElement_CurveElementPurpose_CaseMem(self, *args)


    def NewMember(self, *args):
        """
        NewMember(StepElement_CurveElementPurpose self) -> Handle_StepData_SelectMember

        Returns a new select member the type CurveElementPurposeMember

        :rtype: OCC.wrapper.StepData.Handle_StepData_SelectMember

        """
        return _StepElement.StepElement_CurveElementPurpose_NewMember(self, *args)


    def SetEnumeratedCurveElementPurpose(self, *args):
        """
        SetEnumeratedCurveElementPurpose(StepElement_CurveElementPurpose self, StepElement_EnumeratedCurveElementPurpose const aVal)

        Set Value for EnumeratedCurveElementPurpose

        :type aVal: OCC.wrapper.StepElement.StepElement_EnumeratedCurveElementPurpose

        """
        return _StepElement.StepElement_CurveElementPurpose_SetEnumeratedCurveElementPurpose(self, *args)


    def EnumeratedCurveElementPurpose(self, *args):
        """
        EnumeratedCurveElementPurpose(StepElement_CurveElementPurpose self) -> StepElement_EnumeratedCurveElementPurpose

        Returns Value as EnumeratedCurveElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.StepElement.StepElement_EnumeratedCurveElementPurpose

        """
        return _StepElement.StepElement_CurveElementPurpose_EnumeratedCurveElementPurpose(self, *args)


    def SetApplicationDefinedElementPurpose(self, *args):
        """
        SetApplicationDefinedElementPurpose(StepElement_CurveElementPurpose self, Handle_TCollection_HAsciiString aVal)

        Set Value for ApplicationDefinedElementPurpose

        :type aVal: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementPurpose_SetApplicationDefinedElementPurpose(self, *args)


    def ApplicationDefinedElementPurpose(self, *args):
        """
        ApplicationDefinedElementPurpose(StepElement_CurveElementPurpose self) -> Handle_TCollection_HAsciiString

        Returns Value as ApplicationDefinedElementPurpose (or Null if another type)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.StepElement_CurveElementPurpose_ApplicationDefinedElementPurpose(self, *args)

    __swig_destroy__ = _StepElement.delete_StepElement_CurveElementPurpose
StepElement_CurveElementPurpose_swigregister = _StepElement.StepElement_CurveElementPurpose_swigregister
StepElement_CurveElementPurpose_swigregister(StepElement_CurveElementPurpose)

class Handle_StepElement_MeasureOrUnspecifiedValueMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_MeasureOrUnspecifiedValueMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_MeasureOrUnspecifiedValueMember self, StepElement_MeasureOrUnspecifiedValueMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Handle_StepElement_MeasureOrUnspecifiedValueMember theHandle) -> Handle_StepElement_MeasureOrUnspecifiedValueMember
        assign(Handle_StepElement_MeasureOrUnspecifiedValueMember self, StepElement_MeasureOrUnspecifiedValueMember thePtr) -> Handle_StepElement_MeasureOrUnspecifiedValueMember
        assign(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Handle_StepElement_MeasureOrUnspecifiedValueMember theHandle) -> Handle_StepElement_MeasureOrUnspecifiedValueMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> StepElement_MeasureOrUnspecifiedValueMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> StepElement_MeasureOrUnspecifiedValueMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> StepElement_MeasureOrUnspecifiedValueMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_MeasureOrUnspecifiedValueMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_MeasureOrUnspecifiedValueMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_MeasureOrUnspecifiedValueMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_MeasureOrUnspecifiedValueMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_MeasureOrUnspecifiedValueMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_MeasureOrUnspecifiedValueMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_MeasureOrUnspecifiedValueMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_DecrementRefCounter(self, *args)

Handle_StepElement_MeasureOrUnspecifiedValueMember_swigregister = _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_swigregister
Handle_StepElement_MeasureOrUnspecifiedValueMember_swigregister(Handle_StepElement_MeasureOrUnspecifiedValueMember)

def Handle_StepElement_MeasureOrUnspecifiedValueMember_DownCast(thing):
    return _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_DownCast(thing)
Handle_StepElement_MeasureOrUnspecifiedValueMember_DownCast = _StepElement.Handle_StepElement_MeasureOrUnspecifiedValueMember_DownCast

class NCollection_Array1_Handle_StepElement_SurfaceSection(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> NCollection_Array1< opencascade::handle< StepElement_SurfaceSection > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> NCollection_Array1< opencascade::handle< StepElement_SurfaceSection > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> NCollection_Array1< opencascade::handle< StepElement_SurfaceSection > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> NCollection_Array1< opencascade::handle< StepElement_SurfaceSection > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_SurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_SurfaceSection self, Handle_StepElement_SurfaceSection theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_SurfaceSection self, NCollection_Array1_Handle_StepElement_SurfaceSection theOther) -> NCollection_Array1_Handle_StepElement_SurfaceSection

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_SurfaceSection self, NCollection_Array1_Handle_StepElement_SurfaceSection theOther) -> NCollection_Array1_Handle_StepElement_SurfaceSection

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_SurfaceSection self, NCollection_Array1_Handle_StepElement_SurfaceSection theOther) -> NCollection_Array1_Handle_StepElement_SurfaceSection
        assign(NCollection_Array1_Handle_StepElement_SurfaceSection self, NCollection_Array1_Handle_StepElement_SurfaceSection theOther) -> NCollection_Array1_Handle_StepElement_SurfaceSection

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Handle_StepElement_SurfaceSection

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_SurfaceSection self) -> Handle_StepElement_SurfaceSection

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_SurfaceSection self, Standard_Integer const theIndex) -> Handle_StepElement_SurfaceSection

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_SurfaceSection self, Standard_Integer const theIndex, Handle_StepElement_SurfaceSection theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_SurfaceSection self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_SurfaceSection
NCollection_Array1_Handle_StepElement_SurfaceSection_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_SurfaceSection_swigregister
NCollection_Array1_Handle_StepElement_SurfaceSection_swigregister(NCollection_Array1_Handle_StepElement_SurfaceSection)


try:
	StepElement_Array1OfSurfaceSection = NCollection_Array1_Handle_StepElement_SurfaceSection
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_CurveElementFreedomMember(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_CurveElementFreedomMember self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_CurveElementFreedomMember self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_CurveElementFreedomMember self, StepElement_CurveElementFreedomMember thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_CurveElementFreedomMember self, Handle_StepElement_CurveElementFreedomMember theHandle) -> Handle_StepElement_CurveElementFreedomMember
        assign(Handle_StepElement_CurveElementFreedomMember self, StepElement_CurveElementFreedomMember thePtr) -> Handle_StepElement_CurveElementFreedomMember
        assign(Handle_StepElement_CurveElementFreedomMember self, Handle_StepElement_CurveElementFreedomMember theHandle) -> Handle_StepElement_CurveElementFreedomMember

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_CurveElementFreedomMember self) -> StepElement_CurveElementFreedomMember

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_CurveElementFreedomMember self) -> StepElement_CurveElementFreedomMember

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_CurveElementFreedomMember self) -> StepElement_CurveElementFreedomMember

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_CurveElementFreedomMember___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_CurveElementFreedomMember___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_CurveElementFreedomMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_CurveElementFreedomMember_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_CurveElementFreedomMember

    def HasName(self, *args):
        """
        HasName(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Boolean

        Returns True if has name

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_HasName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepElement_CurveElementFreedomMember self) -> Standard_CString

        Returns set name

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepElement_CurveElementFreedomMember self, Standard_CString const name) -> Standard_Boolean

        Set name

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetName(self, *args)


    def Matches(self, *args):
        """
        Matches(Handle_StepElement_CurveElementFreedomMember self, Standard_CString const name) -> Standard_Boolean

        Tells if the name of a SelectMember matches a given one;

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Matches(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_CurveElementFreedomMember self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementFreedomMember_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_CurveElementFreedomMember_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Field(self, *args):
        """
        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        res = _StepElement.Handle_StepElement_CurveElementFreedomMember_Field(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CField(self, *args):
        """
        CField(Handle_StepElement_CurveElementFreedomMember self) -> StepData_Field

        :rtype: OCC.wrapper.StepData.StepData_Field

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_CField(self, *args)


    def Kind(self, *args):
        """
        Kind(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Kind(self, *args)


    def SetKind(self, *args):
        """
        SetKind(Handle_StepElement_CurveElementFreedomMember self, Standard_Integer const kind)

        :type kind: int

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetKind(self, *args)


    def Int(self, *args):
        """
        Int(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        This internal method gives access to a value implemented by an
        Integer (to read it)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Int(self, *args)


    def SetInt(self, *args):
        """
        SetInt(Handle_StepElement_CurveElementFreedomMember self, Standard_Integer const val)

        This internal method gives access to a value implemented by an
        Integer (to set it)

        :type val: int

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetInt(self, *args)


    def Real(self, *args):
        """
        Real(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Real(self, *args)


    def SetReal(self, *args):
        """
        SetReal(Handle_StepElement_CurveElementFreedomMember self, Standard_Real const val)

        :type val: float

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetReal(self, *args)


    def String(self, *args):
        """
        String(Handle_StepElement_CurveElementFreedomMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_String(self, *args)


    def SetString(self, *args):
        """
        SetString(Handle_StepElement_CurveElementFreedomMember self, Standard_CString const val)

        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetString(self, *args)


    def ParamType(self, *args):
        """
        ParamType(Handle_StepElement_CurveElementFreedomMember self) -> Interface_ParamType

        Returns the Kind of the SelectMember, under the form of an
        enum ParamType

        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_ParamType(self, *args)


    def Integer(self, *args):
        """
        Integer(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        Gets the value as an Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Integer(self, *args)


    def SetInteger(self, *args):
        """
        SetInteger(Handle_StepElement_CurveElementFreedomMember self, Standard_Integer const val)

        :type val: int

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetInteger(self, *args)


    def Boolean(self, *args):
        """
        Boolean(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Boolean(self, *args)


    def SetBoolean(self, *args):
        """
        SetBoolean(Handle_StepElement_CurveElementFreedomMember self, Standard_Boolean const val)

        :type val: bool

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetBoolean(self, *args)


    def Logical(self, *args):
        """
        Logical(Handle_StepElement_CurveElementFreedomMember self) -> StepData_Logical

        :rtype: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Logical(self, *args)


    def SetLogical(self, *args):
        """
        SetLogical(Handle_StepElement_CurveElementFreedomMember self, StepData_Logical const val)

        :type val: OCC.wrapper.StepData.StepData_Logical

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetLogical(self, *args)


    def Enum(self, *args):
        """
        Enum(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Enum(self, *args)


    def EnumText(self, *args):
        """
        EnumText(Handle_StepElement_CurveElementFreedomMember self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_EnumText(self, *args)


    def SetEnum(self, *args):
        """
        SetEnum(Handle_StepElement_CurveElementFreedomMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetEnum(self, *args)


    def SetEnumText(self, *args):
        """
        SetEnumText(Handle_StepElement_CurveElementFreedomMember self, Standard_Integer const val, Standard_CString const text)

        :type val: int
        :type text: OCC.wrapper.Standard.Standard_CString

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_SetEnumText(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_CurveElementFreedomMember self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_CurveElementFreedomMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_CurveElementFreedomMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_CurveElementFreedomMember self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_CurveElementFreedomMember self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_CurveElementFreedomMember self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_CurveElementFreedomMember self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_CurveElementFreedomMember_DecrementRefCounter(self, *args)

Handle_StepElement_CurveElementFreedomMember_swigregister = _StepElement.Handle_StepElement_CurveElementFreedomMember_swigregister
Handle_StepElement_CurveElementFreedomMember_swigregister(Handle_StepElement_CurveElementFreedomMember)

def Handle_StepElement_CurveElementFreedomMember_DownCast(thing):
    return _StepElement.Handle_StepElement_CurveElementFreedomMember_DownCast(thing)
Handle_StepElement_CurveElementFreedomMember_DownCast = _StepElement.Handle_StepElement_CurveElementFreedomMember_DownCast

class Handle_StepElement_HArray1OfSurfaceSection(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfSurfaceSection self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfSurfaceSection self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfSurfaceSection self, StepElement_HArray1OfSurfaceSection thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfSurfaceSection self, Handle_StepElement_HArray1OfSurfaceSection theHandle) -> Handle_StepElement_HArray1OfSurfaceSection
        assign(Handle_StepElement_HArray1OfSurfaceSection self, StepElement_HArray1OfSurfaceSection thePtr) -> Handle_StepElement_HArray1OfSurfaceSection
        assign(Handle_StepElement_HArray1OfSurfaceSection self, Handle_StepElement_HArray1OfSurfaceSection theHandle) -> Handle_StepElement_HArray1OfSurfaceSection

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfSurfaceSection self) -> StepElement_HArray1OfSurfaceSection

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfSurfaceSection self) -> StepElement_HArray1OfSurfaceSection

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfSurfaceSection self) -> StepElement_HArray1OfSurfaceSection

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfSurfaceSection___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfSurfaceSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfSurfaceSection_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfSurfaceSection

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfSurfaceSection

        """
        res = _StepElement.Handle_StepElement_HArray1OfSurfaceSection_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfSurfaceSection self) -> NCollection_Array1_Handle_StepElement_SurfaceSection

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfSurfaceSection

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfSurfaceSection self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfSurfaceSection_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfSurfaceSection_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfSurfaceSection self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfSurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfSurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfSurfaceSection self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfSurfaceSection self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfSurfaceSection self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfSurfaceSection self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfSurfaceSection self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfSurfaceSection self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfSurfaceSection_swigregister = _StepElement.Handle_StepElement_HArray1OfSurfaceSection_swigregister
Handle_StepElement_HArray1OfSurfaceSection_swigregister(Handle_StepElement_HArray1OfSurfaceSection)

def Handle_StepElement_HArray1OfSurfaceSection_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfSurfaceSection_DownCast(thing)
Handle_StepElement_HArray1OfSurfaceSection_DownCast = _StepElement.Handle_StepElement_HArray1OfSurfaceSection_DownCast

class Handle_StepElement_Volume3dElementDescriptor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_Volume3dElementDescriptor self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_Volume3dElementDescriptor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_Volume3dElementDescriptor self, StepElement_Volume3dElementDescriptor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_Volume3dElementDescriptor self, Handle_StepElement_Volume3dElementDescriptor theHandle) -> Handle_StepElement_Volume3dElementDescriptor
        assign(Handle_StepElement_Volume3dElementDescriptor self, StepElement_Volume3dElementDescriptor thePtr) -> Handle_StepElement_Volume3dElementDescriptor
        assign(Handle_StepElement_Volume3dElementDescriptor self, Handle_StepElement_Volume3dElementDescriptor theHandle) -> Handle_StepElement_Volume3dElementDescriptor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementDescriptor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementDescriptor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementDescriptor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_Volume3dElementDescriptor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_Volume3dElementDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_Volume3dElementDescriptor_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_Volume3dElementDescriptor

    def Init(self, *args):
        """
        Init(Handle_StepElement_Volume3dElementDescriptor self, StepElement_ElementOrder const aElementDescriptor_TopologyOrder, Handle_TCollection_HAsciiString aElementDescriptor_Description, Handle_StepElement_HArray1OfVolumeElementPurposeMember aPurpose, StepElement_Volume3dElementShape const aShape)

        Initialize all fields (own and inherited)

        :type aElementDescriptor_TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder
        :type aElementDescriptor_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aPurpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember
        :type aShape: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Init(self, *args)


    def Purpose(self, *args):
        """
        Purpose(Handle_StepElement_Volume3dElementDescriptor self) -> Handle_StepElement_HArray1OfVolumeElementPurposeMember

        Returns field Purpose

        :rtype: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Purpose(self, *args)


    def SetPurpose(self, *args):
        """
        SetPurpose(Handle_StepElement_Volume3dElementDescriptor self, Handle_StepElement_HArray1OfVolumeElementPurposeMember Purpose)

        Set field Purpose

        :type Purpose: OCC.wrapper.StepElement.Handle_StepElement_HArray1OfVolumeElementPurposeMember

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_SetPurpose(self, *args)


    def Shape(self, *args):
        """
        Shape(Handle_StepElement_Volume3dElementDescriptor self) -> StepElement_Volume3dElementShape

        Returns field Shape

        :rtype: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Shape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(Handle_StepElement_Volume3dElementDescriptor self, StepElement_Volume3dElementShape const Shape)

        Set field Shape

        :type Shape: OCC.wrapper.StepElement.StepElement_Volume3dElementShape

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_SetShape(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_Volume3dElementDescriptor self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Volume3dElementDescriptor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_Volume3dElementDescriptor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TopologyOrder(self, *args):
        """
        TopologyOrder(Handle_StepElement_Volume3dElementDescriptor self) -> StepElement_ElementOrder

        Returns field TopologyOrder

        :rtype: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_TopologyOrder(self, *args)


    def SetTopologyOrder(self, *args):
        """
        SetTopologyOrder(Handle_StepElement_Volume3dElementDescriptor self, StepElement_ElementOrder const TopologyOrder)

        Set field TopologyOrder

        :type TopologyOrder: OCC.wrapper.StepElement.StepElement_ElementOrder

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_SetTopologyOrder(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepElement_Volume3dElementDescriptor self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepElement_Volume3dElementDescriptor self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_SetDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_Volume3dElementDescriptor self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_Volume3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_Volume3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_Volume3dElementDescriptor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_Volume3dElementDescriptor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_Volume3dElementDescriptor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_Volume3dElementDescriptor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_Volume3dElementDescriptor self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_Volume3dElementDescriptor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_Volume3dElementDescriptor_DecrementRefCounter(self, *args)

Handle_StepElement_Volume3dElementDescriptor_swigregister = _StepElement.Handle_StepElement_Volume3dElementDescriptor_swigregister
Handle_StepElement_Volume3dElementDescriptor_swigregister(Handle_StepElement_Volume3dElementDescriptor)

def Handle_StepElement_Volume3dElementDescriptor_DownCast(thing):
    return _StepElement.Handle_StepElement_Volume3dElementDescriptor_DownCast(thing)
Handle_StepElement_Volume3dElementDescriptor_DownCast = _StepElement.Handle_StepElement_Volume3dElementDescriptor_DownCast

class NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self)

        Reverse sequence


        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theOther) -> NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theItem)
        Append(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theItem)
        Prepend(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, Handle_StepElement_CurveElementSectionDefinition theItem)
        InsertBefore(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, NCollection_Sequence< opencascade::handle< StepElement_CurveElementSectionDefinition > >::Iterator & thePosition, Handle_StepElement_CurveElementSectionDefinition theItem)
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSeq)
        InsertAfter(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, Handle_StepElement_CurveElementSectionDefinition theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Handle_StepElement_CurveElementSectionDefinition

        First item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self) -> Handle_StepElement_CurveElementSectionDefinition

        Last item access

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex) -> Handle_StepElement_CurveElementSectionDefinition

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition self, Standard_Integer const theIndex, Handle_StepElement_CurveElementSectionDefinition theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_SetValue(self, *args)


    def __iter__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition___iter__(self)
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition
NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_swigregister
NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_swigregister(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition)

def NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_delNode(*args):
    """
    NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_delNode(*args)

class NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _StepElement.new_NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepElement.delete_NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper

    def __next__(self):
        return _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper___next__(self)
NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper_swigregister = _StepElement.NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper_swigregister
NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper_swigregister(NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition_IteratorHelper)


try:
	StepElement_SequenceOfCurveElementSectionDefinition = NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfCurveElementPurposeMember > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfCurveElementPurposeMember > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfCurveElementPurposeMember > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> NCollection_Array1< opencascade::handle< StepElement_HSequenceOfCurveElementPurposeMember > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepElement.new_NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Handle_StepElement_HSequenceOfCurveElementPurposeMember theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember
        assign(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember theOther) -> NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Standard_Integer const theIndex) -> Handle_StepElement_HSequenceOfCurveElementPurposeMember

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Standard_Integer const theIndex, Handle_StepElement_HSequenceOfCurveElementPurposeMember theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_Resize(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember
NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister = _StepElement.NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister
NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember_swigregister(NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember)


try:
	StepElement_Array1OfHSequenceOfCurveElementPurposeMember = NCollection_Array1_Handle_StepElement_HSequenceOfCurveElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_Handle_StepElement_CurveElementPurposeMember(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StepElement.new_NCollection_Array2_Handle_StepElement_CurveElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self, Handle_StepElement_CurveElementPurposeMember theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self, NCollection_Array2_Handle_StepElement_CurveElementPurposeMember theOther) -> NCollection_Array2_Handle_StepElement_CurveElementPurposeMember

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self, NCollection_Array2_Handle_StepElement_CurveElementPurposeMember theOther) -> NCollection_Array2_Handle_StepElement_CurveElementPurposeMember

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_StepElement_CurveElementPurposeMember

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_StepElement_CurveElementPurposeMember theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_SetValue(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array2_Handle_StepElement_CurveElementPurposeMember
NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_swigregister = _StepElement.NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_swigregister
NCollection_Array2_Handle_StepElement_CurveElementPurposeMember_swigregister(NCollection_Array2_Handle_StepElement_CurveElementPurposeMember)


try:
	StepElement_Array2OfCurveElementPurposeMember = NCollection_Array2_Handle_StepElement_CurveElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, StepElement_HArray1OfMeasureOrUnspecifiedValue thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue theHandle) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        assign(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, StepElement_HArray1OfMeasureOrUnspecifiedValue thePtr) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue
        assign(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue theHandle) -> Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> StepElement_HArray1OfMeasureOrUnspecifiedValue

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> StepElement_HArray1OfMeasureOrUnspecifiedValue

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> StepElement_HArray1OfMeasureOrUnspecifiedValue

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfMeasureOrUnspecifiedValue

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        :rtype: OCC.wrapper.StepElement.StepElement_Array1OfMeasureOrUnspecifiedValue

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> NCollection_Array1< StepElement_MeasureOrUnspecifiedValue >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, StepElement_MeasureOrUnspecifiedValue theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, NCollection_Array1_StepElement_MeasureOrUnspecifiedValue theOther) -> NCollection_Array1_StepElement_MeasureOrUnspecifiedValue

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> StepElement_MeasureOrUnspecifiedValue

        @return first element

        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> StepElement_MeasureOrUnspecifiedValue

        @return last element

        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_Integer const theIndex) -> StepElement_MeasureOrUnspecifiedValue

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_Integer const theIndex, StepElement_MeasureOrUnspecifiedValue theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DecrementRefCounter(self, *args)

Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister
Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_swigregister(Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue)

def Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DownCast(thing):
    return _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DownCast(thing)
Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DownCast = _StepElement.Handle_StepElement_HArray1OfMeasureOrUnspecifiedValue_DownCast

class NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _StepElement.new_NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self, Handle_StepElement_SurfaceElementPurposeMember theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember theOther) -> NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self, NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember theOther) -> NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_StepElement_SurfaceElementPurposeMember

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_StepElement_SurfaceElementPurposeMember theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_SetValue(self, *args)

    __swig_destroy__ = _StepElement.delete_NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember
NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_swigregister = _StepElement.NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_swigregister
NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember_swigregister(NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember)


try:
	StepElement_Array2OfSurfaceElementPurposeMember = NCollection_Array2_Handle_StepElement_SurfaceElementPurposeMember
except NameError:
	pass # does not exist, probably ignored

class Handle_StepElement_HSequenceOfCurveElementSectionDefinition(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self)

        Nullify the handle


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, StepElement_HSequenceOfCurveElementSectionDefinition thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_StepElement_HSequenceOfCurveElementSectionDefinition theHandle) -> Handle_StepElement_HSequenceOfCurveElementSectionDefinition
        assign(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, StepElement_HSequenceOfCurveElementSectionDefinition thePtr) -> Handle_StepElement_HSequenceOfCurveElementSectionDefinition
        assign(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_StepElement_HSequenceOfCurveElementSectionDefinition theHandle) -> Handle_StepElement_HSequenceOfCurveElementSectionDefinition

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> StepElement_HSequenceOfCurveElementSectionDefinition

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> StepElement_HSequenceOfCurveElementSectionDefinition

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> StepElement_HSequenceOfCurveElementSectionDefinition

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition___ref__(self, *args)


    def __hash__(self):
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepElement.new_Handle_StepElement_HSequenceOfCurveElementSectionDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DownCast)
    __swig_destroy__ = _StepElement.delete_Handle_StepElement_HSequenceOfCurveElementSectionDefinition

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_StepElement_CurveElementSectionDefinition theItem)
        Append(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition theSequence)

        :type theSequence: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> NCollection_Sequence_Handle_StepElement_CurveElementSectionDefinition

        :rtype: OCC.wrapper.StepElement.StepElement_SequenceOfCurveElementSectionDefinition

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> char const *

        :rtype: const char *

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self)

        Memory deallocator for transient classes


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self)

        Increments the reference counter of this object


        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepElement_HSequenceOfCurveElementSectionDefinition self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DecrementRefCounter(self, *args)

Handle_StepElement_HSequenceOfCurveElementSectionDefinition_swigregister = _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_swigregister
Handle_StepElement_HSequenceOfCurveElementSectionDefinition_swigregister(Handle_StepElement_HSequenceOfCurveElementSectionDefinition)

def Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DownCast(thing):
    return _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DownCast(thing)
Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DownCast = _StepElement.Handle_StepElement_HSequenceOfCurveElementSectionDefinition_DownCast



