# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XCAFDoc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XCAFDoc')
    _XCAFDoc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XCAFDoc', [dirname(__file__)])
        except ImportError:
            import _XCAFDoc
            return _XCAFDoc
        try:
            _mod = imp.load_module('_XCAFDoc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XCAFDoc = swig_import_helper()
    del swig_import_helper
else:
    import _XCAFDoc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XCAFDoc.delete_SwigPyIterator

    def value(self):
        return _XCAFDoc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XCAFDoc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XCAFDoc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XCAFDoc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XCAFDoc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XCAFDoc.SwigPyIterator_copy(self)

    def next(self):
        return _XCAFDoc.SwigPyIterator_next(self)

    def __next__(self):
        return _XCAFDoc.SwigPyIterator___next__(self)

    def previous(self):
        return _XCAFDoc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XCAFDoc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XCAFDoc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XCAFDoc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XCAFDoc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XCAFDoc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XCAFDoc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XCAFDoc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XCAFDoc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFDoc.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFDoc.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFDoc.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XCAFDoc.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XCAFDoc.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XCAFDoc.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XCAFDoc.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XCAFDoc.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XCAFDoc.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XCAFDoc.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XCAFDoc.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XCAFDoc.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XCAFDoc.ptr_to_number(item)
ptr_to_number = _XCAFDoc.ptr_to_number

def HashCode(*args):
    return _XCAFDoc.HashCode(*args)
HashCode = _XCAFDoc.HashCode

def ptr_equal(a, b):
    return _XCAFDoc.ptr_equal(a, b)
ptr_equal = _XCAFDoc.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XCAFView
else:
    import XCAFView
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XCAFNoteObjects
else:
    import XCAFNoteObjects
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XCAFDimTolObjects
else:
    import XCAFDimTolObjects
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
XCAFDoc_ColorGen = _XCAFDoc.XCAFDoc_ColorGen
XCAFDoc_ColorSurf = _XCAFDoc.XCAFDoc_ColorSurf
XCAFDoc_ColorCurv = _XCAFDoc.XCAFDoc_ColorCurv
class XCAFDoc_Note(TDF.TDF_Attribute):
    """
    A base note attribute.
    Any note contains the name of the user created the note
    and the creation timestamp.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Note
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Note(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Note_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Note_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Note_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMine(*args):
        """
        IsMine(TDF_Label theLabel) -> Standard_Boolean

        Checks if the given label represents a note.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Note_IsMine(*args)

    IsMine = staticmethod(IsMine)

    def Get(*args):
        """
        Get(TDF_Label theLabel) -> Handle_XCAFDoc_Note

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.XCAFDoc_Note_Get(*args)

    Get = staticmethod(Get)

    def Set(self, *args):
        """
        Set(XCAFDoc_Note self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp)

        Sets the user name and the timestamp of the note.
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        @return A handle to the attribute instance.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.XCAFDoc_Note_Set(self, *args)


    def UserName(self, *args):
        """
        Returns the user name, who created the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.XCAFDoc_Note_UserName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TimeStamp(self, *args):
        """
        Returns the timestamp of the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.XCAFDoc_Note_TimeStamp(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOrphan(self, *args):
        """
        IsOrphan(XCAFDoc_Note self) -> Standard_Boolean

        Checks if the note isn't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Note_IsOrphan(self, *args)


    def GetObject(self, *args):
        """
        GetObject(XCAFDoc_Note self) -> Handle_XCAFNoteObjects_NoteObject

        Returns auxiliary data object

        :rtype: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.XCAFDoc_Note_GetObject(self, *args)


    def SetObject(self, *args):
        """
        SetObject(XCAFDoc_Note self, Handle_XCAFNoteObjects_NoteObject theObject)

        Updates auxiliary data

        :type theObject: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.XCAFDoc_Note_SetObject(self, *args)


    def Restore(self, *args):
        """
        Restore(XCAFDoc_Note self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Note_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Note self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Note_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_Note self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_Note_Dump(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Note
XCAFDoc_Note_swigregister = _XCAFDoc.XCAFDoc_Note_swigregister
XCAFDoc_Note_swigregister(XCAFDoc_Note)

def XCAFDoc_Note_get_type_name(*args):
    """
    XCAFDoc_Note_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Note_get_type_name(*args)

def XCAFDoc_Note_get_type_descriptor(*args):
    """
    XCAFDoc_Note_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Note_get_type_descriptor(*args)

def XCAFDoc_Note_IsMine(*args):
    """
    XCAFDoc_Note_IsMine(TDF_Label theLabel) -> Standard_Boolean

    Checks if the given label represents a note.

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_Note_IsMine(*args)

def XCAFDoc_Note_Get(*args):
    """
    XCAFDoc_Note_Get(TDF_Label theLabel) -> Handle_XCAFDoc_Note

    Finds a reference attribute on the given label and returns it, if it is found

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

    """
    return _XCAFDoc.XCAFDoc_Note_Get(*args)

class XCAFDoc_NoteComment(XCAFDoc_Note):
    """
    A comment note attribute.
    Contains a textual comment.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_NoteComment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_NoteComment(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_NoteComment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_NoteComment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_NoteComment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_NoteComment_GetID(*args)

    GetID = staticmethod(GetID)

    def Get(*args):
        """
        Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteComment

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteComment

        """
        return _XCAFDoc.XCAFDoc_NoteComment_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_NoteComment self) -> XCAFDoc_NoteComment

        Creates an empty comment note.


        """
        this = _XCAFDoc.new_XCAFDoc_NoteComment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(XCAFDoc_NoteComment self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_NoteComment
        Set(XCAFDoc_NoteComment self, TCollection_ExtendedString theComment)

        Sets the comment text.

        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.XCAFDoc_NoteComment_Set(self, *args)


    def Comment(self, *args):
        """
        Returns the comment text.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.XCAFDoc_NoteComment_Comment(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_NoteComment_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_NoteComment self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NoteComment_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(XCAFDoc_NoteComment self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NoteComment_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_NoteComment self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_NoteComment_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_NoteComment self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_NoteComment_Dump(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteComment
XCAFDoc_NoteComment_swigregister = _XCAFDoc.XCAFDoc_NoteComment_swigregister
XCAFDoc_NoteComment_swigregister(XCAFDoc_NoteComment)

def XCAFDoc_NoteComment_get_type_name(*args):
    """
    XCAFDoc_NoteComment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_NoteComment_get_type_name(*args)

def XCAFDoc_NoteComment_get_type_descriptor(*args):
    """
    XCAFDoc_NoteComment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_NoteComment_get_type_descriptor(*args)

def XCAFDoc_NoteComment_GetID(*args):
    """
    XCAFDoc_NoteComment_GetID() -> Standard_GUID

    Returns default attribute GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_NoteComment_GetID(*args)

def XCAFDoc_NoteComment_Get(*args):
    """
    XCAFDoc_NoteComment_Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteComment

    Finds a reference attribute on the given label and returns it, if it is found

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteComment

    """
    return _XCAFDoc.XCAFDoc_NoteComment_Get(*args)

class XCAFDoc_ClippingPlaneTool(TDF.TDF_Attribute):
    """
    Provide tool for management of ClippingPlane section of document.
    Provide tool to store, retrieve, remove and modify clipping planes.
    Each clipping plane consists of gp_Pln and its name.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_ClippingPlaneTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_ClippingPlaneTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_ClippingPlaneTool self) -> XCAFDoc_ClippingPlaneTool

        Provide tool for management of ClippingPlane section of document.
        Provide tool to store, retrieve, remove and modify clipping planes.
        Each clipping plane consists of gp_Pln and its name.
        """
        this = _XCAFDoc.new_XCAFDoc_ClippingPlaneTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label theLabel) -> Handle_XCAFDoc_ClippingPlaneTool

        Creates (if not exist) ClippingPlaneTool.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_ClippingPlaneTool self) -> TDF_Label

        returns the label under which ClippingPlanes are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_BaseLabel(self, *args)


    def IsClippingPlane(self, *args):
        """
        IsClippingPlane(XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel) -> Standard_Boolean

        Returns True if label belongs to a ClippingPlane table and
        is a ClippingPlane definition

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_IsClippingPlane(self, *args)


    def GetClippingPlane(self, *args):
        """
        GetClippingPlane(XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel, gp_Pln thePlane, TCollection_ExtendedString theName) -> Standard_Boolean
        GetClippingPlane(XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel, gp_Pln thePlane, Handle_TCollection_HAsciiString theName) -> Standard_Boolean

        Returns ClippingPlane defined by label lab
        Returns False if the label is not in ClippingPlane table
        or does not define a ClippingPlane

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theCapping: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlane(self, *args)


    def AddClippingPlane(self, *args):
        """
        AddClippingPlane(XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, TCollection_ExtendedString theName, Standard_Boolean const theCapping) -> TDF_Label
        AddClippingPlane(XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, Handle_TCollection_HAsciiString theName, Standard_Boolean const theCapping) -> TDF_Label
        AddClippingPlane(XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, TCollection_ExtendedString theName) -> TDF_Label
        AddClippingPlane(XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, Handle_TCollection_HAsciiString theName) -> TDF_Label

        Adds a clipping plane definition to a ClippingPlane table and returns
        its label (returns existing label if the same clipping plane
        is already defined)

        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_AddClippingPlane(self, *args)


    def RemoveClippingPlane(self, *args):
        """
        RemoveClippingPlane(XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel) -> Standard_Boolean

        Removes clipping plane from the ClippingPlane table
        Return false and do nothing if clipping plane is referenced in at least one View

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_RemoveClippingPlane(self, *args)


    def GetClippingPlanes(self, *args):
        """
        GetClippingPlanes(XCAFDoc_ClippingPlaneTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of clipping planes currently stored
        in the ClippingPlane table

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetClippingPlanes(self, *args)


    def UpdateClippingPlane(self, *args):
        """
        UpdateClippingPlane(XCAFDoc_ClippingPlaneTool self, TDF_Label theLabelL, gp_Pln thePlane, TCollection_ExtendedString theName)

        Sets new value of plane and name to the given clipping plane label
        or do nothing, if the given label is not a clipping plane label

        :type theLabelL: OCC.wrapper.TDF.TDF_Label
        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_UpdateClippingPlane(self, *args)


    def SetCapping(self, *args):
        """
        SetCapping(XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL, Standard_Boolean const theCapping)

        Set new value of capping for given clipping plane label

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theCapping: bool

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_SetCapping(self, *args)


    def GetCapping(self, *args):
        """
        GetCapping(XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL) -> Standard_Boolean
        GetCapping(XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL) -> Standard_Boolean

        Get capping value for given clipping plane label
        Return true if Label is valid abd capping is exist.

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theCapping: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetCapping(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_ClippingPlaneTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_ClippingPlaneTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_ClippingPlaneTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_ClippingPlaneTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_ClippingPlaneTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ClippingPlaneTool
XCAFDoc_ClippingPlaneTool_swigregister = _XCAFDoc.XCAFDoc_ClippingPlaneTool_swigregister
XCAFDoc_ClippingPlaneTool_swigregister(XCAFDoc_ClippingPlaneTool)

def XCAFDoc_ClippingPlaneTool_Set(*args):
    """
    XCAFDoc_ClippingPlaneTool_Set(TDF_Label theLabel) -> Handle_XCAFDoc_ClippingPlaneTool

    Creates (if not exist) ClippingPlaneTool.

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

    """
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_Set(*args)

def XCAFDoc_ClippingPlaneTool_GetID(*args):
    """
    XCAFDoc_ClippingPlaneTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_GetID(*args)

def XCAFDoc_ClippingPlaneTool_get_type_name(*args):
    """
    XCAFDoc_ClippingPlaneTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_get_type_name(*args)

def XCAFDoc_ClippingPlaneTool_get_type_descriptor(*args):
    """
    XCAFDoc_ClippingPlaneTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_ClippingPlaneTool_get_type_descriptor(*args)

class XCAFDoc_NoteBalloon(XCAFDoc_NoteComment):
    """
    A comment note attribute.
    Contains a textual comment.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_NoteBalloon
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_NoteBalloon(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_NoteBalloon_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_GetID(*args)

    GetID = staticmethod(GetID)

    def Get(*args):
        """
        Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteBalloon

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_Get(*args)

    Get = staticmethod(Get)

    def Set(*args):
        """
        Set(TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_NoteBalloon

        Create (if not exist) a comment note on the given label.
        \param [in] theLabel     - note label.
        \param [in] theUserName  - the name of the user, who created the note.
        \param [in] theTimeStamp - creation timestamp of the note.
        \param [in] theComment   - comment text.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_NoteBalloon self) -> XCAFDoc_NoteBalloon

        Creates an empty comment note.


        """
        this = _XCAFDoc.new_XCAFDoc_NoteBalloon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_NoteBalloon_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_NoteBalloon self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NoteBalloon_NewEmpty(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteBalloon
XCAFDoc_NoteBalloon_swigregister = _XCAFDoc.XCAFDoc_NoteBalloon_swigregister
XCAFDoc_NoteBalloon_swigregister(XCAFDoc_NoteBalloon)

def XCAFDoc_NoteBalloon_get_type_name(*args):
    """
    XCAFDoc_NoteBalloon_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_get_type_name(*args)

def XCAFDoc_NoteBalloon_get_type_descriptor(*args):
    """
    XCAFDoc_NoteBalloon_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_get_type_descriptor(*args)

def XCAFDoc_NoteBalloon_GetID(*args):
    """
    XCAFDoc_NoteBalloon_GetID() -> Standard_GUID

    Returns default attribute GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_GetID(*args)

def XCAFDoc_NoteBalloon_Get(*args):
    """
    XCAFDoc_NoteBalloon_Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteBalloon

    Finds a reference attribute on the given label and returns it, if it is found

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_Get(*args)

def XCAFDoc_NoteBalloon_Set(*args):
    """
    XCAFDoc_NoteBalloon_Set(TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_NoteBalloon

    Create (if not exist) a comment note on the given label.
    \param [in] theLabel     - note label.
    \param [in] theUserName  - the name of the user, who created the note.
    \param [in] theTimeStamp - creation timestamp of the note.
    \param [in] theComment   - comment text.

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

    """
    return _XCAFDoc.XCAFDoc_NoteBalloon_Set(*args)

class XCAFDoc_MaterialTool(TDF.TDF_Attribute):
    """
    Provides tools to store and retrieve attributes (materials)
    of TopoDS_Shape in and from TDocStd_Document
    A Document is intended to hold different
    attributes of ONE shape and it's sub-shapes
    Provide tools for management of Materialss section of document.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_MaterialTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_MaterialTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_MaterialTool self) -> XCAFDoc_MaterialTool

        Provides tools to store and retrieve attributes (materials)
        of TopoDS_Shape in and from TDocStd_Document
        A Document is intended to hold different
        attributes of ONE shape and it's sub-shapes
        Provide tools for management of Materialss section of document.
        """
        this = _XCAFDoc.new_XCAFDoc_MaterialTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_MaterialTool

        Creates (if not exist) MaterialTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_MaterialTool self) -> TDF_Label

        returns the label under which colors are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.XCAFDoc_MaterialTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMaterial(self, *args):
        """
        IsMaterial(XCAFDoc_MaterialTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a material table and
        is a Material definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_IsMaterial(self, *args)


    def GetMaterialLabels(self, *args):
        """
        GetMaterialLabels(XCAFDoc_MaterialTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of materials currently stored
        in the material table

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterialLabels(self, *args)


    def AddMaterial(self, *args):
        """
        AddMaterial(XCAFDoc_MaterialTool self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> TDF_Label

        Adds a Material definition to a table and returns its label

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_AddMaterial(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(XCAFDoc_MaterialTool self, TDF_Label L, TDF_Label MatL)
        SetMaterial(XCAFDoc_MaterialTool self, TDF_Label L, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType)

        Sets a link with GUID
        Adds a Material as necessary

        :type L: OCC.wrapper.TDF.TDF_Label
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_SetMaterial(self, *args)


    def GetMaterial(self, *args):
        """
        GetMaterial(XCAFDoc_MaterialTool self, TDF_Label MatL, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> Standard_Boolean

        Returns Material assigned to <MatL>
        Returns False if no such Material is assigned

        :type MatL: OCC.wrapper.TDF.TDF_Label
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetMaterial(self, *args)


    def GetDensityForShape(*args):
        """
        GetDensityForShape(TDF_Label ShapeL) -> Standard_Real

        Find referred material and return density from it
        if no material --> return 0

        :type ShapeL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

    GetDensityForShape = staticmethod(GetDensityForShape)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_MaterialTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_MaterialTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_MaterialTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_MaterialTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_MaterialTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_MaterialTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_MaterialTool
XCAFDoc_MaterialTool_swigregister = _XCAFDoc.XCAFDoc_MaterialTool_swigregister
XCAFDoc_MaterialTool_swigregister(XCAFDoc_MaterialTool)

def XCAFDoc_MaterialTool_Set(*args):
    """
    XCAFDoc_MaterialTool_Set(TDF_Label L) -> Handle_XCAFDoc_MaterialTool

    Creates (if not exist) MaterialTool.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

    """
    return _XCAFDoc.XCAFDoc_MaterialTool_Set(*args)

def XCAFDoc_MaterialTool_GetID(*args):
    """
    XCAFDoc_MaterialTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_MaterialTool_GetID(*args)

def XCAFDoc_MaterialTool_GetDensityForShape(*args):
    """
    XCAFDoc_MaterialTool_GetDensityForShape(TDF_Label ShapeL) -> Standard_Real

    Find referred material and return density from it
    if no material --> return 0

    :type ShapeL: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _XCAFDoc.XCAFDoc_MaterialTool_GetDensityForShape(*args)

def XCAFDoc_MaterialTool_get_type_name(*args):
    """
    XCAFDoc_MaterialTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_MaterialTool_get_type_name(*args)

def XCAFDoc_MaterialTool_get_type_descriptor(*args):
    """
    XCAFDoc_MaterialTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_MaterialTool_get_type_descriptor(*args)

class XCAFDoc_DimTolTool(TDF.TDF_Attribute):
    """
    Attribute containing GD&T section of XCAF document.
    Provide tools for GD&T section management.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_DimTolTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_DimTolTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_DimTolTool self) -> XCAFDoc_DimTolTool

        Attribute containing GD&T section of XCAF document.
        Provide tools for GD&T section management.
        """
        this = _XCAFDoc.new_XCAFDoc_DimTolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_DimTolTool

        Creates (if not exist) DimTolTool attribute.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the standard GD&T tool GUID.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_DimTolTool self) -> TDF_Label

        Returns the label under which GD&T table is stored.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.XCAFDoc_DimTolTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDimension(self, *args):
        """
        IsDimension(XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if the label belongs to a GD&T table and
        is a Dimension definition.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsDimension(self, *args)


    def GetDimensionLabels(self, *args):
        """
        GetDimensionLabels(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of Dimension labels currently stored
        in the GD&T table.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDimensionLabels(self, *args)


    def SetDimension(self, *args):
        """
        SetDimension(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theFirstLS, NCollection_Sequence_TDF_Label theSecondLS, TDF_Label theDimL)
        SetDimension(XCAFDoc_DimTolTool self, TDF_Label theFirstL, TDF_Label theSecondL, TDF_Label theDimL)
        SetDimension(XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theDimL)

        Sets a dimension to the target label.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theDimL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDimension(self, *args)


    def GetRefDimensionLabels(self, *args):
        """
        GetRefDimensionLabels(XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDimensions) -> Standard_Boolean

        Returns all Dimension labels defined for theShapeL.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDimensions: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefDimensionLabels(self, *args)


    def AddDimension(self, *args):
        """
        AddDimension(XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a dimension definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddDimension(self, *args)


    def IsGeomTolerance(self, *args):
        """
        IsGeomTolerance(XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if the label belongs to the GD&T table and is a dimension tolerance.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsGeomTolerance(self, *args)


    def GetGeomToleranceLabels(self, *args):
        """
        GetGeomToleranceLabels(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of Tolerance labels currently stored in the GD&T table.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetGeomToleranceLabels(self, *args)


    def SetGeomTolerance(self, *args):
        """
        SetGeomTolerance(XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theGeomTolL)
        SetGeomTolerance(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theL, TDF_Label theGeomTolL)

        Sets a geometry tolerance from theGeomTolL to sequence of labels theL.
        Checks if theGeomTolL is a geometry tolerance definition first.

        :type theL: OCC.wrapper.TDF.TDF_LabelSequence
        :type theGeomTolL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetGeomTolerance(self, *args)


    def GetRefGeomToleranceLabels(self, *args):
        """
        GetRefGeomToleranceLabels(XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDimTols) -> Standard_Boolean

        Returns all GeomTolerance labels defined for theShapeL.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDimTols: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefGeomToleranceLabels(self, *args)


    def AddGeomTolerance(self, *args):
        """
        AddGeomTolerance(XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a GeomTolerance definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddGeomTolerance(self, *args)


    def IsDimTol(self, *args):
        """
        IsDimTol(XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if theLab belongs to the GD&T table and is a dmension tolerance.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsDimTol(self, *args)


    def GetDimTolLabels(self, *args):
        """
        GetDimTolLabels(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of D&GTs currently stored in the GD&T table.

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDimTolLabels(self, *args)


    def FindDimTol(self, *args):
        """
        FindDimTol(XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, TDF_Label lab) -> Standard_Boolean
        FindDimTol(XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Finds a dimension tolerance in the GD&T table 
        sutisfying the specified kind, values, name and description
        and returns its label if found (or Null label else).

        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_FindDimTol(self, *args)


    def AddDimTol(self, *args):
        """
        AddDimTol(XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Adds a a dimension tolerance definition with the specified
        kind, value, name and description to the GD&T table and returns its label.

        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddDimTol(self, *args)


    def SetDimTol(self, *args):
        """
        SetDimTol(XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theDimTolL)
        SetDimTol(XCAFDoc_DimTolTool self, TDF_Label theL, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Creates a dimension tolerance and sets it to theL label.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDimTol(self, *args)


    def GetRefShapeLabel(self, *args):
        """
        GetRefShapeLabel(XCAFDoc_DimTolTool self, TDF_Label theL, NCollection_Sequence_TDF_Label theShapeLFirst, NCollection_Sequence_TDF_Label theShapeLSecond) -> Standard_Boolean

        Gets all shape labels reffered by theL label of the GD&T table.
        Returns False if there are no shape labels added to the sequences.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theShapeLFirst: OCC.wrapper.TDF.TDF_LabelSequence
        :type theShapeLSecond: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefShapeLabel(self, *args)


    def GetDimTol(self, *args):
        """
        GetDimTol(XCAFDoc_DimTolTool self, TDF_Label theDimTolL, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> Standard_Boolean

        Returns dimension tolerance assigned to theDimTolL label.
        Returns False if no such dimension tolerance is assigned.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDimTol(self, *args)


    def IsDatum(self, *args):
        """
        IsDatum(XCAFDoc_DimTolTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to the GD&T table and
        is a Datum definition.

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsDatum(self, *args)


    def GetDatumLabels(self, *args):
        """
        GetDatumLabels(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of Datums currently stored
        in the GD&T table.

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatumLabels(self, *args)


    def FindDatum(self, *args):
        """
        FindDatum(XCAFDoc_DimTolTool self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification, TDF_Label lab) -> Standard_Boolean

        Finds a datum sutisfying the specified name, description and
        identification and returns its label if found.

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_FindDatum(self, *args)


    def AddDatum(self, *args):
        """
        AddDatum(XCAFDoc_DimTolTool self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification) -> TDF_Label
        AddDatum(XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a datum definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_AddDatum(self, *args)


    def SetDatum(self, *args):
        """
        SetDatum(XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theShapeLabels, TDF_Label theDatumL)
        SetDatum(XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theTolerL, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification)

        Sets a datum to theL label and binds it with theTolerL label.
        A datum with the specified name, description and identification
        is created if it isn't found in the GD&T table.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theTolerL: OCC.wrapper.TDF.TDF_Label
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDatum(self, *args)


    def SetDatumToGeomTol(self, *args):
        """
        SetDatumToGeomTol(XCAFDoc_DimTolTool self, TDF_Label theDatumL, TDF_Label theTolerL)

        Sets a datum from theDatumL label to theToletL label.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theTolerL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetDatumToGeomTol(self, *args)


    def GetDatum(self, *args):
        """
        GetDatum(XCAFDoc_DimTolTool self, TDF_Label theDatumL, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification) -> Standard_Boolean

        Returns datum assigned to theDatumL label.
        Returns False if no such datum is assigned.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatum(self, *args)


    def GetDatumOfTolerLabels(self, *args):
        """
        GetDatumOfTolerLabels(XCAFDoc_DimTolTool self, TDF_Label theDimTolL, NCollection_Sequence_TDF_Label theDatums) -> Standard_Boolean

        Returns all Datum labels defined for theDimTolL label.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theDatums: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatumOfTolerLabels(self, *args)


    def GetDatumWithObjectOfTolerLabels(self, *args):
        """
        GetDatumWithObjectOfTolerLabels(XCAFDoc_DimTolTool self, TDF_Label theDimTolL, NCollection_Sequence_TDF_Label theDatums) -> Standard_Boolean

        Returns all Datum labels with XCAFDimTolObjects_DatumObject defined for label theDimTolL.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theDatums: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetDatumWithObjectOfTolerLabels(self, *args)


    def GetTolerOfDatumLabels(self, *args):
        """
        GetTolerOfDatumLabels(XCAFDoc_DimTolTool self, TDF_Label theDatumL, NCollection_Sequence_TDF_Label theTols) -> Standard_Boolean

        Returns all GeomToleranses labels defined for theDatumL label.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theTols: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetTolerOfDatumLabels(self, *args)


    def GetRefDatumLabel(self, *args):
        """
        GetRefDatumLabel(XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDatum) -> Standard_Boolean

        Returns Datum label defined for theShapeL label.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDatum: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetRefDatumLabel(self, *args)


    def IsLocked(self, *args):
        """
        IsLocked(XCAFDoc_DimTolTool self, TDF_Label theViewL) -> Standard_Boolean

        Returns true if the given GDT is marked as locked.

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_IsLocked(self, *args)


    def Lock(self, *args):
        """
        Lock(XCAFDoc_DimTolTool self, TDF_Label theViewL)

        Mark the given GDT as locked.

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Lock(self, *args)


    def GetGDTPresentations(self, *args):
        """
        GetGDTPresentations(XCAFDoc_DimTolTool self, NCollection_IndexedDataMap< TDF_Label,TopoDS_Shape,TDF_LabelMapHasher > & theGDTLabelToShape)

        fill the map GDT label -> shape presentation 

        :type theGDTLabelToShape: OCC.wrapper.XCAFDoc.NCollection_IndexedDataMap_TDF_Label_TopoDS_Shape_TDF_LabelMapHasher

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_GetGDTPresentations(self, *args)


    def SetGDTPresentations(self, *args):
        """
        SetGDTPresentations(XCAFDoc_DimTolTool self, NCollection_IndexedDataMap< TDF_Label,TopoDS_Shape,TDF_LabelMapHasher > & theGDTLabelToPrs)

        Set shape presentation for GDT labels according to given map (theGDTLabelToPrs)
        theGDTLabelToPrsName map is an additional argument, can be used to set presentation names.
        If label is not in the theGDTLabelToPrsName map, the presentation name will be empty

        :type theGDTLabelToPrs: OCC.wrapper.XCAFDoc.NCollection_IndexedDataMap_TDF_Label_TopoDS_Shape_TDF_LabelMapHasher

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_SetGDTPresentations(self, *args)


    def Unlock(self, *args):
        """
        Unlock(XCAFDoc_DimTolTool self, TDF_Label theViewL)

        Unlock the given GDT.

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Unlock(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_DimTolTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_DimTolTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_DimTolTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_DimTolTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_DimTolTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_DimTolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DimTolTool
XCAFDoc_DimTolTool_swigregister = _XCAFDoc.XCAFDoc_DimTolTool_swigregister
XCAFDoc_DimTolTool_swigregister(XCAFDoc_DimTolTool)

def XCAFDoc_DimTolTool_Set(*args):
    """
    XCAFDoc_DimTolTool_Set(TDF_Label L) -> Handle_XCAFDoc_DimTolTool

    Creates (if not exist) DimTolTool attribute.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

    """
    return _XCAFDoc.XCAFDoc_DimTolTool_Set(*args)

def XCAFDoc_DimTolTool_GetID(*args):
    """
    XCAFDoc_DimTolTool_GetID() -> Standard_GUID

    Returns the standard GD&T tool GUID.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_DimTolTool_GetID(*args)

def XCAFDoc_DimTolTool_get_type_name(*args):
    """
    XCAFDoc_DimTolTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_DimTolTool_get_type_name(*args)

def XCAFDoc_DimTolTool_get_type_descriptor(*args):
    """
    XCAFDoc_DimTolTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_DimTolTool_get_type_descriptor(*args)

class XCAFDoc_LayerTool(TDF.TDF_Attribute):
    """
    Provides tools to store and retrieve attributes (Layers)
    of TopoDS_Shape in and from TDocStd_Document
    A Document is intended to hold different
    attributes of ONE shape and it's sub-shapes
    Provide tools for management of Layers section of document.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_LayerTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_LayerTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_LayerTool self) -> XCAFDoc_LayerTool

        Provides tools to store and retrieve attributes (Layers)
        of TopoDS_Shape in and from TDocStd_Document
        A Document is intended to hold different
        attributes of ONE shape and it's sub-shapes
        Provide tools for management of Layers section of document.
        """
        this = _XCAFDoc.new_XCAFDoc_LayerTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_LayerTool

        Creates (if not exist) LayerTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_LayerTool self) -> TDF_Label

        returns the label under which Layers are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.XCAFDoc_LayerTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsLayer(self, *args):
        """
        IsLayer(XCAFDoc_LayerTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a Layertable and
        is a Layer definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsLayer(self, *args)


    def GetLayer(self, *args):
        """
        GetLayer(XCAFDoc_LayerTool self, TDF_Label lab, TCollection_ExtendedString aLayer) -> Standard_Boolean

        Returns Layer defined by label lab
        Returns False if the label is not in Layertable
        or does not define a Layer

        :type lab: OCC.wrapper.TDF.TDF_Label
        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayer(self, *args)


    def FindLayer(self, *args):
        """
        FindLayer(XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer, TDF_Label lab) -> Standard_Boolean
        FindLayer(XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer) -> TDF_Label

        Finds a Layer definition in a Layertable and returns
        its label if found (or Null label else)

        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_FindLayer(self, *args)


    def AddLayer(self, *args):
        """
        AddLayer(XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer) -> TDF_Label

        Adds a Layer definition to a Layertable and returns
        its label (returns existing label if the same Layer
        is already defined)

        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_AddLayer(self, *args)


    def RemoveLayer(self, *args):
        """
        RemoveLayer(XCAFDoc_LayerTool self, TDF_Label lab)

        Removes Layer from the Layertable

        :type lab: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_LayerTool_RemoveLayer(self, *args)


    def GetLayerLabels(self, *args):
        """
        GetLayerLabels(XCAFDoc_LayerTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of Layers currently stored
        in the Layertable

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayerLabels(self, *args)


    def GetShapesOfLayer(self, *args):
        """
        GetShapesOfLayer(XCAFDoc_LayerTool self, TDF_Label layerL, NCollection_Sequence_TDF_Label ShLabels)

        Return sequanese of shape labels that assigned with layers to <ShLabels>.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :type ShLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetShapesOfLayer(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(XCAFDoc_LayerTool self, TDF_Label layerL) -> Standard_Boolean

        Return TRUE if layer is visible, FALSE if invisible.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsVisible(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(XCAFDoc_LayerTool self, TDF_Label layerL, Standard_Boolean const isvisible)

        Set the visibility of layer. If layer is invisible when on it's layer
        will set UAttribute with corresponding GUID.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :type isvisible: bool

        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetVisibility(self, *args)


    def SetLayer(self, *args):
        """
        SetLayer(XCAFDoc_LayerTool self, TDF_Label L, TDF_Label LayerL, Standard_Boolean const shapeInOneLayer)
        SetLayer(XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer, Standard_Boolean const shapeInOneLayer)
        SetLayer(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label LayerL, Standard_Boolean const shapeInOneLayer) -> Standard_Boolean
        SetLayer(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer, Standard_Boolean const shapeInOneLayer) -> Standard_Boolean

        Sets a link from label that containig shape <Sh>
        with layer <aLayer>. Add <aLayer> to LayerTable if nessesery.
        optional parametr <shapeInOneLayer> show could shape be
        in number of layers or only in one.
        return FALSE if no such shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type shapeInOneLayer: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_SetLayer(self, *args)


    def UnSetLayers(self, *args):
        """
        UnSetLayers(XCAFDoc_LayerTool self, TDF_Label L)
        UnSetLayers(XCAFDoc_LayerTool self, TopoDS_Shape Sh) -> Standard_Boolean

        Remove link between shape <Sh> and all Layers at LayerTable.
        return FALSE if no such shape <Sh> in XCAF Document.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetLayers(self, *args)


    def UnSetOneLayer(self, *args):
        """
        UnSetOneLayer(XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer) -> Standard_Boolean
        UnSetOneLayer(XCAFDoc_LayerTool self, TDF_Label L, TDF_Label aLayerL) -> Standard_Boolean
        UnSetOneLayer(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer) -> Standard_Boolean
        UnSetOneLayer(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label aLayerL) -> Standard_Boolean

        Remove link between shape <Sh> and layer <aLayerL>.
        returns FALSE if no such layer <aLayerL> or shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_UnSetOneLayer(self, *args)


    def IsSet(self, *args):
        """
        IsSet(XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer) -> Standard_Boolean
        IsSet(XCAFDoc_LayerTool self, TDF_Label L, TDF_Label aLayerL) -> Standard_Boolean
        IsSet(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer) -> Standard_Boolean
        IsSet(XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label aLayerL) -> Standard_Boolean

        Returns True if shape <Sh> has a Layer assosiated
        with the <aLayerL>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_LayerTool_IsSet(self, *args)


    def GetLayers(self, *args):
        """
        GetLayers(XCAFDoc_LayerTool self, TDF_Label L, Handle_TColStd_HSequenceOfExtendedString aLayerS) -> Standard_Boolean
        GetLayers(XCAFDoc_LayerTool self, TDF_Label L, NCollection_Sequence_TDF_Label aLayerLS) -> Standard_Boolean
        GetLayers(XCAFDoc_LayerTool self, TDF_Label L) -> Handle_TColStd_HSequenceOfExtendedString
        GetLayers(XCAFDoc_LayerTool self, TopoDS_Shape Sh, Handle_TColStd_HSequenceOfExtendedString aLayerS) -> Standard_Boolean
        GetLayers(XCAFDoc_LayerTool self, TopoDS_Shape Sh, NCollection_Sequence_TDF_Label aLayerLS) -> Standard_Boolean
        GetLayers(XCAFDoc_LayerTool self, TopoDS_Shape Sh) -> Handle_TColStd_HSequenceOfExtendedString

        Return sequence of strings that assosiated with shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfExtendedString

        """
        return _XCAFDoc.XCAFDoc_LayerTool_GetLayers(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_LayerTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_LayerTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_LayerTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_LayerTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_LayerTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_LayerTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_LayerTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_LayerTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_LayerTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_LayerTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_LayerTool
XCAFDoc_LayerTool_swigregister = _XCAFDoc.XCAFDoc_LayerTool_swigregister
XCAFDoc_LayerTool_swigregister(XCAFDoc_LayerTool)

def XCAFDoc_LayerTool_Set(*args):
    """
    XCAFDoc_LayerTool_Set(TDF_Label L) -> Handle_XCAFDoc_LayerTool

    Creates (if not exist) LayerTool.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

    """
    return _XCAFDoc.XCAFDoc_LayerTool_Set(*args)

def XCAFDoc_LayerTool_GetID(*args):
    """
    XCAFDoc_LayerTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_LayerTool_GetID(*args)

def XCAFDoc_LayerTool_get_type_name(*args):
    """
    XCAFDoc_LayerTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_LayerTool_get_type_name(*args)

def XCAFDoc_LayerTool_get_type_descriptor(*args):
    """
    XCAFDoc_LayerTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_LayerTool_get_type_descriptor(*args)

class XCAFDoc_GraphNode(TDF.TDF_Attribute):
    """
    This attribute allow user multirelation tree of labels.
    This GraphNode is experimental Graph that not control looping and redundance.
    Attribute containg sequence of father's and child's labels.
    Provide create and work with Graph in XCAFDocument.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_GraphNode
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_GraphNode(self) 
            return h


    def Find(*args):
        """
        Find(TDF_Label L, Handle_XCAFDoc_GraphNode G) -> Standard_Boolean

        class  methods working on the node
        ===================================
        Shortcut to search  a Graph node attribute with default
        GraphID.  Returns true if found.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type G: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

    Find = staticmethod(Find)

    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_GraphNode
        Set(TDF_Label L, Standard_GUID ExplicitGraphID) -> Handle_XCAFDoc_GraphNode

        Finds  or Creates a   GraphNode attribute on  the label
        <L>, with an   explicit tree ID.  <ExplicitGraphID>  is
        the  ID   returned by    <TDF_Attribute::ID>   method.
        Returns the found/created GraphNode attribute.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type ExplicitGraphID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

    Set = staticmethod(Set)

    def GetDefaultGraphID(*args):
        """
        GetDefaultGraphID() -> Standard_GUID

        returns a default  Graph ID.  this  ID is  used by the
        <Set> method without explicit tree ID.
        Instance methods:
        ================

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

    GetDefaultGraphID = staticmethod(GetDefaultGraphID)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_GraphNode self) -> XCAFDoc_GraphNode

        This attribute allow user multirelation tree of labels.
        This GraphNode is experimental Graph that not control looping and redundance.
        Attribute containg sequence of father's and child's labels.
        Provide create and work with Graph in XCAFDocument.
        """
        this = _XCAFDoc.new_XCAFDoc_GraphNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetGraphID(self, *args):
        """
        SetGraphID(XCAFDoc_GraphNode self, Standard_GUID explicitID)

        :type explicitID: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetGraphID(self, *args)


    def SetFather(self, *args):
        """
        SetFather(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Integer

        Set GraphNode <F> as father of me and returns index of <F>
        in Sequence that containing Fathers GraphNodes.
        return index of <F> from GraphNodeSequnece

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetFather(self, *args)


    def SetChild(self, *args):
        """
        SetChild(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Integer

        Set GraphNode <Ch> as child of me and returns index of <Ch>
        in Sequence that containing Children GraphNodes.
        return index of <Ch> from GraphNodeSequnece

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_SetChild(self, *args)


    def UnSetFather(self, *args):
        """
        UnSetFather(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F)
        UnSetFather(XCAFDoc_GraphNode self, Standard_Integer const Findex)

        Remove Father GraphNode by index from Fathers GraphNodeSequence.
        and remove link between father and child.

        :type Findex: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetFather(self, *args)


    def UnSetChild(self, *args):
        """
        UnSetChild(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch)
        UnSetChild(XCAFDoc_GraphNode self, Standard_Integer const Chindex)

        Remove Child GraphNode by index from Children GraphNodeSequence.
        and remove link between father and child.

        :type Chindex: int

        """
        return _XCAFDoc.XCAFDoc_GraphNode_UnSetChild(self, *args)


    def GetFather(self, *args):
        """
        GetFather(XCAFDoc_GraphNode self, Standard_Integer const Findex) -> Handle_XCAFDoc_GraphNode

        Return GraphNode by index from GraphNodeSequence.

        :type Findex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetFather(self, *args)


    def GetChild(self, *args):
        """
        GetChild(XCAFDoc_GraphNode self, Standard_Integer const Chindex) -> Handle_XCAFDoc_GraphNode

        Return GraphNode by index from GraphNodeSequence.

        :type Chindex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_GraphNode_GetChild(self, *args)


    def FatherIndex(self, *args):
        """
        FatherIndex(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Integer

        Return index of <F>, or zero if there is no such Graphnode.

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_FatherIndex(self, *args)


    def ChildIndex(self, *args):
        """
        ChildIndex(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Integer

        Return index of <Ch>, or zero if there is no such Graphnode.

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_ChildIndex(self, *args)


    def IsFather(self, *args):
        """
        IsFather(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Boolean

        returns TRUE if <me> is father of <Ch>.

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsFather(self, *args)


    def IsChild(self, *args):
        """
        IsChild(XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Boolean

        returns TRUE if <me> is child of <F>.

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_GraphNode_IsChild(self, *args)


    def NbFathers(self, *args):
        """
        NbFathers(XCAFDoc_GraphNode self) -> Standard_Integer

        return Number of Fathers GraphNodes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbFathers(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(XCAFDoc_GraphNode self) -> Standard_Integer

        return Number of Childrens GraphNodes.
        Implementation of Attribute methods:
        ===================================

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_GraphNode_NbChildren(self, *args)


    def ID(self, *args):
        """
        Returns the Graph ID (default or explicit one depending
        onthe Set method used).

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_GraphNode_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_GraphNode self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_GraphNode self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Paste(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_GraphNode self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_GraphNode_NewEmpty(self, *args)


    def References(self, *args):
        """
        References(XCAFDoc_GraphNode self, Handle_TDF_DataSet aDataSet)

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.XCAFDoc_GraphNode_References(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_GraphNode self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_GraphNode_Dump(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(XCAFDoc_GraphNode self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.XCAFDoc_GraphNode_BeforeForget(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_GraphNode_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_GraphNode_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_GraphNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_GraphNode
XCAFDoc_GraphNode_swigregister = _XCAFDoc.XCAFDoc_GraphNode_swigregister
XCAFDoc_GraphNode_swigregister(XCAFDoc_GraphNode)

def XCAFDoc_GraphNode_Find(*args):
    """
    XCAFDoc_GraphNode_Find(TDF_Label L, Handle_XCAFDoc_GraphNode G) -> Standard_Boolean

    class  methods working on the node
    ===================================
    Shortcut to search  a Graph node attribute with default
    GraphID.  Returns true if found.

    :type L: OCC.wrapper.TDF.TDF_Label
    :type G: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_GraphNode_Find(*args)

def XCAFDoc_GraphNode_Set(*args):
    """
    Set(TDF_Label L) -> Handle_XCAFDoc_GraphNode
    XCAFDoc_GraphNode_Set(TDF_Label L, Standard_GUID ExplicitGraphID) -> Handle_XCAFDoc_GraphNode

    Finds  or Creates a   GraphNode attribute on  the label
    <L>, with an   explicit tree ID.  <ExplicitGraphID>  is
    the  ID   returned by    <TDF_Attribute::ID>   method.
    Returns the found/created GraphNode attribute.

    :type L: OCC.wrapper.TDF.TDF_Label
    :type ExplicitGraphID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

    """
    return _XCAFDoc.XCAFDoc_GraphNode_Set(*args)

def XCAFDoc_GraphNode_GetDefaultGraphID(*args):
    """
    XCAFDoc_GraphNode_GetDefaultGraphID() -> Standard_GUID

    returns a default  Graph ID.  this  ID is  used by the
    <Set> method without explicit tree ID.
    Instance methods:
    ================

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_GraphNode_GetDefaultGraphID(*args)

def XCAFDoc_GraphNode_get_type_name(*args):
    """
    XCAFDoc_GraphNode_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_GraphNode_get_type_name(*args)

def XCAFDoc_GraphNode_get_type_descriptor(*args):
    """
    XCAFDoc_GraphNode_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_GraphNode_get_type_descriptor(*args)

class XCAFDoc_ViewTool(TDF.TDF_Attribute):
    """
    Provides tools to store and retrieve Views
    in and from TDocStd_Document
    Each View contains parts XCAFDoc_View attribute
    with all information about camera and view window.
    Also each view contain information of displayed shapes and GDTs
    as sets of shape and GDT labels.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_ViewTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_ViewTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_ViewTool self) -> XCAFDoc_ViewTool

        Provides tools to store and retrieve Views
        in and from TDocStd_Document
        Each View contains parts XCAFDoc_View attribute
        with all information about camera and view window.
        Also each view contain information of displayed shapes and GDTs
        as sets of shape and GDT labels.
        """
        this = _XCAFDoc.new_XCAFDoc_ViewTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_ViewTool

        Creates (if not exist) ViewTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

        """
        return _XCAFDoc.XCAFDoc_ViewTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_ViewTool self) -> TDF_Label

        Returns the label under which Views are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_BaseLabel(self, *args)


    def IsView(self, *args):
        """
        IsView(XCAFDoc_ViewTool self, TDF_Label theLabel) -> Standard_Boolean

        Returns True if label belongs to a View table and
        is a View definition

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_IsView(self, *args)


    def GetViewLabels(self, *args):
        """
        GetViewLabels(XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of View labels currently stored
        in the View table

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabels(self, *args)


    def SetView(self, *args):
        """
        SetView(XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, NCollection_Sequence_TDF_Label theClippingPlanes, NCollection_Sequence_TDF_Label theNotes, NCollection_Sequence_TDF_Label theAnnotations, TDF_Label theViewL)
        SetView(XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, NCollection_Sequence_TDF_Label theClippingPlanes, TDF_Label theViewL)
        SetView(XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, TDF_Label theViewL)

        Sets a link with GUID

        :type theShapes: OCC.wrapper.TDF.TDF_LabelSequence
        :type theGDTs: OCC.wrapper.TDF.TDF_LabelSequence
        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_SetView(self, *args)


    def SetClippingPlanes(self, *args):
        """
        SetClippingPlanes(XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theClippingPlaneLabels, TDF_Label theViewL)

        Set Clipping planes to  given View

        :type theClippingPlaneLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_SetClippingPlanes(self, *args)


    def RemoveView(self, *args):
        """
        RemoveView(XCAFDoc_ViewTool self, TDF_Label theViewL)

        Remove View

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_RemoveView(self, *args)


    def GetViewLabelsForShape(self, *args):
        """
        GetViewLabelsForShape(XCAFDoc_ViewTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label ShapeL

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForShape(self, *args)


    def GetViewLabelsForGDT(self, *args):
        """
        GetViewLabelsForGDT(XCAFDoc_ViewTool self, TDF_Label theGDTL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label GDTL

        :type theGDTL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForGDT(self, *args)


    def GetViewLabelsForClippingPlane(self, *args):
        """
        GetViewLabelsForClippingPlane(XCAFDoc_ViewTool self, TDF_Label theClippingPlaneL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label ClippingPlaneL

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForClippingPlane(self, *args)


    def GetViewLabelsForNote(self, *args):
        """
        GetViewLabelsForNote(XCAFDoc_ViewTool self, TDF_Label theNoteL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label NoteL

        :type theNoteL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForNote(self, *args)


    def GetViewLabelsForAnnotation(self, *args):
        """
        GetViewLabelsForAnnotation(XCAFDoc_ViewTool self, TDF_Label theAnnotationL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label AnnotationL

        :type theAnnotationL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetViewLabelsForAnnotation(self, *args)


    def AddView(self, *args):
        """
        AddView(XCAFDoc_ViewTool self) -> TDF_Label

        Adds a view definition to a View table and returns its label

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_AddView(self, *args)


    def GetRefShapeLabel(self, *args):
        """
        GetRefShapeLabel(XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theShapeLabels) -> Standard_Boolean

        Returns shape labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theShapeLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefShapeLabel(self, *args)


    def GetRefGDTLabel(self, *args):
        """
        GetRefGDTLabel(XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theGDTLabels) -> Standard_Boolean

        Returns GDT labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theGDTLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefGDTLabel(self, *args)


    def GetRefClippingPlaneLabel(self, *args):
        """
        GetRefClippingPlaneLabel(XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theClippingPlaneLabels) -> Standard_Boolean

        Returns ClippingPlane labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theClippingPlaneLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefClippingPlaneLabel(self, *args)


    def GetRefNoteLabel(self, *args):
        """
        GetRefNoteLabel(XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Boolean

        Returns Notes labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefNoteLabel(self, *args)


    def GetRefAnnotationLabel(self, *args):
        """
        GetRefAnnotationLabel(XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theAnnotationLabels) -> Standard_Boolean

        Returns Annotation labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theAnnotationLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_GetRefAnnotationLabel(self, *args)


    def IsLocked(self, *args):
        """
        IsLocked(XCAFDoc_ViewTool self, TDF_Label theViewL) -> Standard_Boolean

        Returns true if the given View is marked as locked

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ViewTool_IsLocked(self, *args)


    def Lock(self, *args):
        """
        Lock(XCAFDoc_ViewTool self, TDF_Label theViewL)

        Mark the given View as locked

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_Lock(self, *args)


    def Unlock(self, *args):
        """
        Unlock(XCAFDoc_ViewTool self, TDF_Label theViewL)

        Unlock the given View

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ViewTool_Unlock(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_ViewTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_ViewTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ViewTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_ViewTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ViewTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_ViewTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_ViewTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_ViewTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_ViewTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_ViewTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ViewTool
XCAFDoc_ViewTool_swigregister = _XCAFDoc.XCAFDoc_ViewTool_swigregister
XCAFDoc_ViewTool_swigregister(XCAFDoc_ViewTool)

def XCAFDoc_ViewTool_Set(*args):
    """
    XCAFDoc_ViewTool_Set(TDF_Label L) -> Handle_XCAFDoc_ViewTool

    Creates (if not exist) ViewTool.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

    """
    return _XCAFDoc.XCAFDoc_ViewTool_Set(*args)

def XCAFDoc_ViewTool_GetID(*args):
    """
    XCAFDoc_ViewTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_ViewTool_GetID(*args)

def XCAFDoc_ViewTool_get_type_name(*args):
    """
    XCAFDoc_ViewTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_ViewTool_get_type_name(*args)

def XCAFDoc_ViewTool_get_type_descriptor(*args):
    """
    XCAFDoc_ViewTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_ViewTool_get_type_descriptor(*args)

class XCAFDoc_Material(TDF.TDF_Attribute):
    """attribute to store material"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Material
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Material(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Material self) -> XCAFDoc_Material

        attribute to store material
        """
        this = _XCAFDoc.new_XCAFDoc_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Material_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_Material self, TDF_Label label, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> Handle_XCAFDoc_Material
        Set(XCAFDoc_Material self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_Set(self, *args)


    def GetName(self, *args):
        """
        GetName(XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDescription(self, *args)


    def GetDensity(self, *args):
        """
        GetDensity(XCAFDoc_Material self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensity(self, *args)


    def GetDensName(self, *args):
        """
        GetDensName(XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensName(self, *args)


    def GetDensValType(self, *args):
        """
        GetDensValType(XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Material_GetDensValType(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Material_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Material self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Material_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Material self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Material_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Material self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Material_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Material_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Material_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Material_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Material
XCAFDoc_Material_swigregister = _XCAFDoc.XCAFDoc_Material_swigregister
XCAFDoc_Material_swigregister(XCAFDoc_Material)

def XCAFDoc_Material_GetID(*args):
    """
    XCAFDoc_Material_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Material_GetID(*args)

def XCAFDoc_Material_get_type_name(*args):
    """
    XCAFDoc_Material_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Material_get_type_name(*args)

def XCAFDoc_Material_get_type_descriptor(*args):
    """
    XCAFDoc_Material_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Material_get_type_descriptor(*args)

class XCAFDoc_ShapeMapTool(TDF.TDF_Attribute):
    """attribute containing map of sub shapes"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_ShapeMapTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_ShapeMapTool(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_ShapeMapTool

        Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeMapTool

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_ShapeMapTool self) -> XCAFDoc_ShapeMapTool

        Creates an empty tool


        """
        this = _XCAFDoc.new_XCAFDoc_ShapeMapTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsSubShape(self, *args):
        """
        IsSubShape(XCAFDoc_ShapeMapTool self, TopoDS_Shape sub) -> Standard_Boolean

        Checks whether shape <sub> is subshape of shape stored on
        label shapeL

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_IsSubShape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(XCAFDoc_ShapeMapTool self, TopoDS_Shape S)

        Sets representation (TopoDS_Shape) for top-level shape

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_SetShape(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_ShapeMapTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_ShapeMapTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_ShapeMapTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_ShapeMapTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_Paste(self, *args)


    def GetMap(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape

        """
        res = _XCAFDoc.XCAFDoc_ShapeMapTool_GetMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_ShapeMapTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_ShapeMapTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ShapeMapTool
XCAFDoc_ShapeMapTool_swigregister = _XCAFDoc.XCAFDoc_ShapeMapTool_swigregister
XCAFDoc_ShapeMapTool_swigregister(XCAFDoc_ShapeMapTool)

def XCAFDoc_ShapeMapTool_GetID(*args):
    """
    XCAFDoc_ShapeMapTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_ShapeMapTool_GetID(*args)

def XCAFDoc_ShapeMapTool_Set(*args):
    """
    XCAFDoc_ShapeMapTool_Set(TDF_Label L) -> Handle_XCAFDoc_ShapeMapTool

    Create (if not exist) ShapeTool from XCAFDoc on <L>.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeMapTool

    """
    return _XCAFDoc.XCAFDoc_ShapeMapTool_Set(*args)

def XCAFDoc_ShapeMapTool_get_type_name(*args):
    """
    XCAFDoc_ShapeMapTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_ShapeMapTool_get_type_name(*args)

def XCAFDoc_ShapeMapTool_get_type_descriptor(*args):
    """
    XCAFDoc_ShapeMapTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_ShapeMapTool_get_type_descriptor(*args)

class XCAFDoc_Color(TDF.TDF_Attribute):
    """attribute to store color"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Color
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Color(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Color self) -> XCAFDoc_Color

        attribute to store color
        """
        this = _XCAFDoc.new_XCAFDoc_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Color_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_Color self, TDF_Label label, Quantity_Color C) -> Handle_XCAFDoc_Color
        Set(XCAFDoc_Color self, TDF_Label label, Quantity_ColorRGBA C) -> Handle_XCAFDoc_Color
        Set(XCAFDoc_Color self, TDF_Label label, Quantity_NameOfColor const C) -> Handle_XCAFDoc_Color
        Set(XCAFDoc_Color self, TDF_Label label, Standard_Real const R, Standard_Real const G, Standard_Real const B, Standard_Real const alpha=1.0) -> Handle_XCAFDoc_Color
        Set(XCAFDoc_Color self, Quantity_Color C)
        Set(XCAFDoc_Color self, Quantity_ColorRGBA C)
        Set(XCAFDoc_Color self, Quantity_NameOfColor const C)
        Set(XCAFDoc_Color self, Standard_Real const R, Standard_Real const G, Standard_Real const B, Standard_Real const alpha=1.0)

        :type R: float
        :type G: float
        :type B: float
        :type alpha: float

        """
        return _XCAFDoc.XCAFDoc_Color_Set(self, *args)


    def GetColor(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _XCAFDoc.XCAFDoc_Color_GetColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetColorRGBA(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _XCAFDoc.XCAFDoc_Color_GetColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNOC(self, *args):
        """
        GetNOC(XCAFDoc_Color self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _XCAFDoc.XCAFDoc_Color_GetNOC(self, *args)


    def GetRGB(self, *args):
        """
        GetRGB(XCAFDoc_Color self)

        :type R: float
        :type G: float
        :type B: float

        """
        return _XCAFDoc.XCAFDoc_Color_GetRGB(self, *args)


    def GetAlpha(self, *args):
        """
        GetAlpha(XCAFDoc_Color self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _XCAFDoc.XCAFDoc_Color_GetAlpha(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Color_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Color self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Color_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Color self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Color_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Color self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Color_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Color_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Color_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Color_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Color
XCAFDoc_Color_swigregister = _XCAFDoc.XCAFDoc_Color_swigregister
XCAFDoc_Color_swigregister(XCAFDoc_Color)

def XCAFDoc_Color_GetID(*args):
    """
    XCAFDoc_Color_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Color_GetID(*args)

def XCAFDoc_Color_get_type_name(*args):
    """
    XCAFDoc_Color_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Color_get_type_name(*args)

def XCAFDoc_Color_get_type_descriptor(*args):
    """
    XCAFDoc_Color_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Color_get_type_descriptor(*args)

class XCAFDoc_ColorTool(TDF.TDF_Attribute):
    """
    Provides tools to store and retrieve attributes (colors)
    of TopoDS_Shape in and from TDocStd_Document
    A Document is intended to hold different
    attributes of ONE shape and it's sub-shapes
    Provide tools for management of Colors section of document.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_ColorTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_ColorTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_ColorTool self) -> XCAFDoc_ColorTool

        Provides tools to store and retrieve attributes (colors)
        of TopoDS_Shape in and from TDocStd_Document
        A Document is intended to hold different
        attributes of ONE shape and it's sub-shapes
        Provide tools for management of Colors section of document.
        """
        this = _XCAFDoc.new_XCAFDoc_ColorTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_ColorTool

        Creates (if not exist) ColorTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

    Set = staticmethod(Set)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

    GetID = staticmethod(GetID)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_ColorTool self) -> TDF_Label

        returns the label under which colors are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.XCAFDoc_ColorTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsColor(self, *args):
        """
        IsColor(XCAFDoc_ColorTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a colortable and
        is a color definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsColor(self, *args)


    def FindColor(self, *args):
        """
        FindColor(XCAFDoc_ColorTool self, Quantity_Color col, TDF_Label lab) -> Standard_Boolean
        FindColor(XCAFDoc_ColorTool self, Quantity_ColorRGBA col, TDF_Label lab) -> Standard_Boolean
        FindColor(XCAFDoc_ColorTool self, Quantity_Color col) -> TDF_Label
        FindColor(XCAFDoc_ColorTool self, Quantity_ColorRGBA col) -> TDF_Label

        Finds a color definition in a colortable and returns
        its label if found (or Null label else)

        :type col: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_FindColor(self, *args)


    def AddColor(self, *args):
        """
        AddColor(XCAFDoc_ColorTool self, Quantity_Color col) -> TDF_Label
        AddColor(XCAFDoc_ColorTool self, Quantity_ColorRGBA col) -> TDF_Label

        Adds a color definition to a colortable and returns
        its label (returns existing label if the same color
        is already defined)

        :type col: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_AddColor(self, *args)


    def RemoveColor(self, *args):
        """
        RemoveColor(XCAFDoc_ColorTool self, TDF_Label lab)

        Removes color from the colortable

        :type lab: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ColorTool_RemoveColor(self, *args)


    def GetColors(self, *args):
        """
        GetColors(XCAFDoc_ColorTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of colors currently stored
        in the colortable

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColors(self, *args)


    def SetColor(self, *args):
        """
        SetColor(XCAFDoc_ColorTool self, TDF_Label L, TDF_Label colorL, XCAFDoc_ColorType const type)
        SetColor(XCAFDoc_ColorTool self, TDF_Label L, Quantity_Color Color, XCAFDoc_ColorType const type)
        SetColor(XCAFDoc_ColorTool self, TDF_Label L, Quantity_ColorRGBA Color, XCAFDoc_ColorType const type)
        SetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, TDF_Label colorL, XCAFDoc_ColorType const type) -> Standard_Boolean
        SetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, Quantity_Color Color, XCAFDoc_ColorType const type) -> Standard_Boolean
        SetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, Quantity_ColorRGBA Color, XCAFDoc_ColorType const type) -> Standard_Boolean

        Sets a link with GUID defined by <type> (see
        XCAFDoc::ColorRefGUID()) from label <L> to color <Color>
        in the colortable
        Adds a color as necessary
        Returns False if cannot find a label for shape S

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetColor(self, *args)


    def UnSetColor(self, *args):
        """
        UnSetColor(XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type)
        UnSetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type) -> Standard_Boolean

        Removes a link with GUID defined by <type> (see
        XCAFDoc::ColorRefGUID()) from label <L> to color
        Returns True if such link existed

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_UnSetColor(self, *args)


    def IsSet(self, *args):
        """
        IsSet(XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type) -> Standard_Boolean
        IsSet(XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type) -> Standard_Boolean

        Returns True if label <L> has a color assignment
        of the type <type>

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsSet(self, *args)


    def GetColor(self, *args):
        """
        GetColor(XCAFDoc_ColorTool self, TDF_Label lab, Quantity_Color col) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TDF_Label lab, Quantity_ColorRGBA col) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, TDF_Label colorL) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, TDF_Label colorL) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetColor(XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean

        Returns color assigned to <L> as <type>
        Returns False if no such color is assigned

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetColor(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(XCAFDoc_ColorTool self, TDF_Label L) -> Standard_Boolean

        Return TRUE if object on this label is visible, FALSE if invisible.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsVisible(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(XCAFDoc_ColorTool self, TDF_Label shapeLabel, Standard_Boolean const isvisible)

        Set the visibility of object on label. Do nothing if there no any object.
        Set UAttribute with corresponding GUID.

        :type shapeLabel: OCC.wrapper.TDF.TDF_Label
        :type isvisible: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetVisibility(self, *args)


    def IsColorByLayer(self, *args):
        """
        IsColorByLayer(XCAFDoc_ColorTool self, TDF_Label L) -> Standard_Boolean

        Return TRUE if object color defined by its Layer, FALSE if not.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsColorByLayer(self, *args)


    def SetColorByLayer(self, *args):
        """
        SetColorByLayer(XCAFDoc_ColorTool self, TDF_Label shapeLabel, Standard_Boolean const isColorByLayer)

        Set the Color defined by Layer flag on label. Do nothing if there no any object.
        Set UAttribute with corresponding GUID.

        :type shapeLabel: OCC.wrapper.TDF.TDF_Label
        :type isColorByLayer: bool

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetColorByLayer(self, *args)


    def SetInstanceColor(self, *args):
        """
        SetInstanceColor(XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_Color color, Standard_Boolean const isCreateSHUO) -> Standard_Boolean
        SetInstanceColor(XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_ColorRGBA color, Standard_Boolean const isCreateSHUO) -> Standard_Boolean

        Sets the color of component that styled with SHUO structure
        Returns FALSE if no sush component found
        NOTE: create SHUO structeure if it is necessary and if <isCreateSHUO>

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :type isCreateSHUO: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_SetInstanceColor(self, *args)


    def GetInstanceColor(self, *args):
        """
        GetInstanceColor(XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetInstanceColor(XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean

        Gets the color of component that styled with SHUO structure
        Returns FALSE if no sush component or color type

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_GetInstanceColor(self, *args)


    def IsInstanceVisible(self, *args):
        """
        IsInstanceVisible(XCAFDoc_ColorTool self, TopoDS_Shape theShape) -> Standard_Boolean

        Gets the visibility status of component that styled with SHUO structure
        Returns FALSE if no sush component

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_IsInstanceVisible(self, *args)


    def ReverseChainsOfTreeNodes(self, *args):
        """
        ReverseChainsOfTreeNodes(XCAFDoc_ColorTool self) -> Standard_Boolean

        Reverses order in chains of TreeNodes (from Last to First) under
        each Color Label since we became to use function ::Prepend()
        instead of ::Append() in method SetColor() for acceleration

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ColorTool_ReverseChainsOfTreeNodes(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_ColorTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_ColorTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ColorTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_ColorTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ColorTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_ColorTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_ColorTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_ColorTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_ColorTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_ColorTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ColorTool
XCAFDoc_ColorTool_swigregister = _XCAFDoc.XCAFDoc_ColorTool_swigregister
XCAFDoc_ColorTool_swigregister(XCAFDoc_ColorTool)

def XCAFDoc_ColorTool_Set(*args):
    """
    XCAFDoc_ColorTool_Set(TDF_Label L) -> Handle_XCAFDoc_ColorTool

    Creates (if not exist) ColorTool.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

    """
    return _XCAFDoc.XCAFDoc_ColorTool_Set(*args)

def XCAFDoc_ColorTool_GetID(*args):
    """
    XCAFDoc_ColorTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_ColorTool_GetID(*args)

def XCAFDoc_ColorTool_get_type_name(*args):
    """
    XCAFDoc_ColorTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_ColorTool_get_type_name(*args)

def XCAFDoc_ColorTool_get_type_descriptor(*args):
    """
    XCAFDoc_ColorTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_ColorTool_get_type_descriptor(*args)

class XCAFDoc_Dimension(TDF.TDF_Attribute):
    """
    Attribute that identifies a dimension in the GD&T table.
    Its parent label is used as a container to store data provided 
    by XCAFDimTolObjects_DimensionObject.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Dimension
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Dimension(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Dimension self) -> XCAFDoc_Dimension

        Attribute that identifies a dimension in the GD&T table.
        Its parent label is used as a container to store data provided 
        by XCAFDimTolObjects_DimensionObject.
        """
        this = _XCAFDoc.new_XCAFDoc_Dimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Dimension_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label theLabel) -> Handle_XCAFDoc_Dimension

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Dimension

        """
        return _XCAFDoc.XCAFDoc_Dimension_Set(*args)

    Set = staticmethod(Set)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Dimension_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Dimension self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Dimension_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Dimension self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Dimension_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Dimension self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Dimension_Paste(self, *args)


    def SetObject(self, *args):
        """
        SetObject(XCAFDoc_Dimension self, Handle_XCAFDimTolObjects_DimensionObject theDimensionObject)

        Updates parent's label and its sub-labels with data taken from theDimensionObject.
        Old data associated with the label will be lost.

        :type theDimensionObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject

        """
        return _XCAFDoc.XCAFDoc_Dimension_SetObject(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Dimension_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Dimension_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Dimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Dimension
XCAFDoc_Dimension_swigregister = _XCAFDoc.XCAFDoc_Dimension_swigregister
XCAFDoc_Dimension_swigregister(XCAFDoc_Dimension)

def XCAFDoc_Dimension_GetID(*args):
    """
    XCAFDoc_Dimension_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Dimension_GetID(*args)

def XCAFDoc_Dimension_Set(*args):
    """
    XCAFDoc_Dimension_Set(TDF_Label theLabel) -> Handle_XCAFDoc_Dimension

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Dimension

    """
    return _XCAFDoc.XCAFDoc_Dimension_Set(*args)

def XCAFDoc_Dimension_get_type_name(*args):
    """
    XCAFDoc_Dimension_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Dimension_get_type_name(*args)

def XCAFDoc_Dimension_get_type_descriptor(*args):
    """
    XCAFDoc_Dimension_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Dimension_get_type_descriptor(*args)

class XCAFDoc_Centroid(TDF.TDF_Attribute):
    """attribute to store centroid"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Centroid
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Centroid(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Centroid self) -> XCAFDoc_Centroid

        class methods
        =============


        """
        this = _XCAFDoc.new_XCAFDoc_Centroid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_Centroid self, TDF_Label label, gp_Pnt pnt) -> Handle_XCAFDoc_Centroid
        Set(XCAFDoc_Centroid self, gp_Pnt pnt)

        :type pnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDoc.XCAFDoc_Centroid_Set(self, *args)


    def Get(*args):
        """
        Get() -> gp_Pnt
        Get(TDF_Label label, gp_Pnt pnt) -> Standard_Boolean

        Returns point as argument
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type pnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

    Get = staticmethod(Get)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Centroid_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Centroid self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Centroid_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Centroid self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Centroid_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Centroid self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Centroid_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_Centroid self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_Centroid_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Centroid_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Centroid_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Centroid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Centroid
XCAFDoc_Centroid_swigregister = _XCAFDoc.XCAFDoc_Centroid_swigregister
XCAFDoc_Centroid_swigregister(XCAFDoc_Centroid)

def XCAFDoc_Centroid_GetID(*args):
    """
    XCAFDoc_Centroid_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Centroid_GetID(*args)

def XCAFDoc_Centroid_Get(*args):
    """
    Get() -> gp_Pnt
    XCAFDoc_Centroid_Get(TDF_Label label, gp_Pnt pnt) -> Standard_Boolean

    Returns point as argument
    returns false if no such attribute at the <label>

    :type label: OCC.wrapper.TDF.TDF_Label
    :type pnt: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_Centroid_Get(*args)

def XCAFDoc_Centroid_get_type_name(*args):
    """
    XCAFDoc_Centroid_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Centroid_get_type_name(*args)

def XCAFDoc_Centroid_get_type_descriptor(*args):
    """
    XCAFDoc_Centroid_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Centroid_get_type_descriptor(*args)

class XCAFDoc_Datum(TDF.TDF_Attribute):
    """attribute to store datum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Datum
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Datum(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Datum self) -> XCAFDoc_Datum

        attribute to store datum
        """
        this = _XCAFDoc.new_XCAFDoc_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_Datum self, TDF_Label label, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString anIdentification) -> Handle_XCAFDoc_Datum
        Set(XCAFDoc_Datum self, TDF_Label theLabel) -> Handle_XCAFDoc_Datum
        Set(XCAFDoc_Datum self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString anIdentification)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_Set(self, *args)


    def GetName(self, *args):
        """
        GetName(XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetDescription(self, *args)


    def GetIdentification(self, *args):
        """
        GetIdentification(XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_Datum_GetIdentification(self, *args)


    def SetObject(self, *args):
        """
        SetObject(XCAFDoc_Datum self, Handle_XCAFDimTolObjects_DatumObject theDatumObject)

        Updates parent's label and its sub-labels with data taken from theDatumObject.
        Old data associated with the label will be lost.

        :type theDatumObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject

        """
        return _XCAFDoc.XCAFDoc_Datum_SetObject(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Datum_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Datum self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Datum_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Datum self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Datum_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Datum self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Datum_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Datum_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Datum_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Datum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Datum
XCAFDoc_Datum_swigregister = _XCAFDoc.XCAFDoc_Datum_swigregister
XCAFDoc_Datum_swigregister(XCAFDoc_Datum)

def XCAFDoc_Datum_GetID(*args):
    """
    XCAFDoc_Datum_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Datum_GetID(*args)

def XCAFDoc_Datum_get_type_name(*args):
    """
    XCAFDoc_Datum_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Datum_get_type_name(*args)

def XCAFDoc_Datum_get_type_descriptor(*args):
    """
    XCAFDoc_Datum_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Datum_get_type_descriptor(*args)

class XCAFDoc_GeomTolerance(TDF.TDF_Attribute):
    """Attribute to store dimension and tolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_GeomTolerance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_GeomTolerance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_GeomTolerance self) -> XCAFDoc_GeomTolerance

        Attribute to store dimension and tolerance
        """
        this = _XCAFDoc.new_XCAFDoc_GeomTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label theLabel) -> Handle_XCAFDoc_GeomTolerance

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GeomTolerance

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_Set(*args)

    Set = staticmethod(Set)

    def SetObject(self, *args):
        """
        SetObject(XCAFDoc_GeomTolerance self, Handle_XCAFDimTolObjects_GeomToleranceObject theGeomToleranceObject)

        Updates parent's label and its sub-labels with data taken from theGeomToleranceObject.
        Old data associated with the label will be lost.

        :type theGeomToleranceObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_SetObject(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_GeomTolerance_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_GeomTolerance self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_GeomTolerance self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_GeomTolerance self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_GeomTolerance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_GeomTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_GeomTolerance
XCAFDoc_GeomTolerance_swigregister = _XCAFDoc.XCAFDoc_GeomTolerance_swigregister
XCAFDoc_GeomTolerance_swigregister(XCAFDoc_GeomTolerance)

def XCAFDoc_GeomTolerance_GetID(*args):
    """
    XCAFDoc_GeomTolerance_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_GeomTolerance_GetID(*args)

def XCAFDoc_GeomTolerance_Set(*args):
    """
    XCAFDoc_GeomTolerance_Set(TDF_Label theLabel) -> Handle_XCAFDoc_GeomTolerance

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GeomTolerance

    """
    return _XCAFDoc.XCAFDoc_GeomTolerance_Set(*args)

def XCAFDoc_GeomTolerance_get_type_name(*args):
    """
    XCAFDoc_GeomTolerance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_GeomTolerance_get_type_name(*args)

def XCAFDoc_GeomTolerance_get_type_descriptor(*args):
    """
    XCAFDoc_GeomTolerance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_GeomTolerance_get_type_descriptor(*args)

class Handle_XCAFDoc_ClippingPlaneTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_ClippingPlaneTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_ClippingPlaneTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_ClippingPlaneTool self, XCAFDoc_ClippingPlaneTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_ClippingPlaneTool self, Handle_XCAFDoc_ClippingPlaneTool theHandle) -> Handle_XCAFDoc_ClippingPlaneTool
        assign(Handle_XCAFDoc_ClippingPlaneTool self, XCAFDoc_ClippingPlaneTool thePtr) -> Handle_XCAFDoc_ClippingPlaneTool
        assign(Handle_XCAFDoc_ClippingPlaneTool self, Handle_XCAFDoc_ClippingPlaneTool theHandle) -> Handle_XCAFDoc_ClippingPlaneTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_ClippingPlaneTool self) -> XCAFDoc_ClippingPlaneTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_ClippingPlaneTool self) -> XCAFDoc_ClippingPlaneTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_ClippingPlaneTool self) -> XCAFDoc_ClippingPlaneTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_ClippingPlaneTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_ClippingPlaneTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel) -> Handle_XCAFDoc_ClippingPlaneTool

        Creates (if not exist) ClippingPlaneTool.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Set(self, *args)


    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_ClippingPlaneTool self) -> TDF_Label

        returns the label under which ClippingPlanes are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BaseLabel(self, *args)


    def IsClippingPlane(self, *args):
        """
        IsClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel) -> Standard_Boolean

        Returns True if label belongs to a ClippingPlane table and
        is a ClippingPlane definition

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsClippingPlane(self, *args)


    def GetClippingPlane(self, *args):
        """
        GetClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel, gp_Pln thePlane, TCollection_ExtendedString theName) -> Standard_Boolean
        GetClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel, gp_Pln thePlane, Handle_TCollection_HAsciiString theName) -> Standard_Boolean

        Returns ClippingPlane defined by label lab
        Returns False if the label is not in ClippingPlane table
        or does not define a ClippingPlane

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theCapping: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_GetClippingPlane(self, *args)


    def AddClippingPlane(self, *args):
        """
        AddClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, TCollection_ExtendedString theName, Standard_Boolean const theCapping) -> TDF_Label
        AddClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, Handle_TCollection_HAsciiString theName, Standard_Boolean const theCapping) -> TDF_Label
        AddClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, TCollection_ExtendedString theName) -> TDF_Label
        AddClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, gp_Pln thePlane, Handle_TCollection_HAsciiString theName) -> TDF_Label

        Adds a clipping plane definition to a ClippingPlane table and returns
        its label (returns existing label if the same clipping plane
        is already defined)

        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AddClippingPlane(self, *args)


    def RemoveClippingPlane(self, *args):
        """
        RemoveClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabel) -> Standard_Boolean

        Removes clipping plane from the ClippingPlane table
        Return false and do nothing if clipping plane is referenced in at least one View

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_RemoveClippingPlane(self, *args)


    def GetClippingPlanes(self, *args):
        """
        GetClippingPlanes(Handle_XCAFDoc_ClippingPlaneTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of clipping planes currently stored
        in the ClippingPlane table

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_GetClippingPlanes(self, *args)


    def UpdateClippingPlane(self, *args):
        """
        UpdateClippingPlane(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theLabelL, gp_Pln thePlane, TCollection_ExtendedString theName)

        Sets new value of plane and name to the given clipping plane label
        or do nothing, if the given label is not a clipping plane label

        :type theLabelL: OCC.wrapper.TDF.TDF_Label
        :type thePlane: OCC.wrapper.gp.gp_Pln
        :type theName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_UpdateClippingPlane(self, *args)


    def SetCapping(self, *args):
        """
        SetCapping(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL, Standard_Boolean const theCapping)

        Set new value of capping for given clipping plane label

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theCapping: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_SetCapping(self, *args)


    def GetCapping(self, *args):
        """
        GetCapping(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL) -> Standard_Boolean
        GetCapping(Handle_XCAFDoc_ClippingPlaneTool self, TDF_Label theClippingPlaneL) -> Standard_Boolean

        Get capping value for given clipping plane label
        Return true if Label is valid abd capping is exist.

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theCapping: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_GetCapping(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_ClippingPlaneTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_ClippingPlaneTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_ClippingPlaneTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_ClippingPlaneTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_ClippingPlaneTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_ClippingPlaneTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_ClippingPlaneTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_ClippingPlaneTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_ClippingPlaneTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_ClippingPlaneTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_ClippingPlaneTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_ClippingPlaneTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_ClippingPlaneTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_ClippingPlaneTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_ClippingPlaneTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_ClippingPlaneTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_ClippingPlaneTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_ClippingPlaneTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_ClippingPlaneTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_ClippingPlaneTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_ClippingPlaneTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_ClippingPlaneTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_ClippingPlaneTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_ClippingPlaneTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_ClippingPlaneTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_ClippingPlaneTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_ClippingPlaneTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_ClippingPlaneTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_ClippingPlaneTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_swigregister
Handle_XCAFDoc_ClippingPlaneTool_swigregister(Handle_XCAFDoc_ClippingPlaneTool)

def Handle_XCAFDoc_ClippingPlaneTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DownCast(thing)
Handle_XCAFDoc_ClippingPlaneTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool_DownCast

class XCAFDoc_NoteBinData(XCAFDoc_Note):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_NoteBinData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_NoteBinData(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_NoteBinData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_GetID(*args)

    GetID = staticmethod(GetID)

    def Get(*args):
        """
        Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteBinData

        Finds a binary data attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBinData

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_NoteBinData self) -> XCAFDoc_NoteBinData

        Creates an empty binary data note.


        """
        this = _XCAFDoc.new_XCAFDoc_NoteBinData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(XCAFDoc_NoteBinData self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Handle_XCAFDoc_NoteBinData
        Set(XCAFDoc_NoteBinData self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData) -> Handle_XCAFDoc_NoteBinData
        Set(XCAFDoc_NoteBinData self, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Standard_Boolean
        Set(XCAFDoc_NoteBinData self, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData)

        Sets title, MIME type and data from a byte array.
        \param [in] theTitle     - data title.
        \param [in] theMIMEtype  - MIME type of data.
        \param [in] theData      - byte data array.

        :type theTitle: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMIMEtype: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Set(self, *args)


    def Title(self, *args):
        """
        Returns the note title.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.XCAFDoc_NoteBinData_Title(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MIMEtype(self, *args):
        """
        Returns data MIME type.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XCAFDoc.XCAFDoc_NoteBinData_MIMEtype(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Size(self, *args):
        """
        Size(XCAFDoc_NoteBinData self) -> Standard_Integer

        Size of data in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Size(self, *args)


    def Data(self, *args):
        """
        Returns byte data array.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        res = _XCAFDoc.XCAFDoc_NoteBinData_Data(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_NoteBinData_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_NoteBinData self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(XCAFDoc_NoteBinData self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_NoteBinData self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_NoteBinData self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_NoteBinData_Dump(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NoteBinData
XCAFDoc_NoteBinData_swigregister = _XCAFDoc.XCAFDoc_NoteBinData_swigregister
XCAFDoc_NoteBinData_swigregister(XCAFDoc_NoteBinData)

def XCAFDoc_NoteBinData_get_type_name(*args):
    """
    XCAFDoc_NoteBinData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_NoteBinData_get_type_name(*args)

def XCAFDoc_NoteBinData_get_type_descriptor(*args):
    """
    XCAFDoc_NoteBinData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_NoteBinData_get_type_descriptor(*args)

def XCAFDoc_NoteBinData_GetID(*args):
    """
    XCAFDoc_NoteBinData_GetID() -> Standard_GUID

    Returns default attribute GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_NoteBinData_GetID(*args)

def XCAFDoc_NoteBinData_Get(*args):
    """
    XCAFDoc_NoteBinData_Get(TDF_Label theLabel) -> Handle_XCAFDoc_NoteBinData

    Finds a binary data attribute on the given label and returns it, if it is found

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBinData

    """
    return _XCAFDoc.XCAFDoc_NoteBinData_Get(*args)

class NCollection_Sequence_Handle_XCAFDoc_GraphNode(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _XCAFDoc.new_NCollection_Sequence_Handle_XCAFDoc_GraphNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_XCAFDoc_GraphNode self)

        Reverse sequence


        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence_Handle_XCAFDoc_GraphNode theOther) -> NCollection_Sequence_Handle_XCAFDoc_GraphNode

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence_Handle_XCAFDoc_GraphNode theOther) -> NCollection_Sequence_Handle_XCAFDoc_GraphNode

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode theItem)
        Append(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence_Handle_XCAFDoc_GraphNode theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode theItem)
        Prepend(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence_Handle_XCAFDoc_GraphNode theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, Handle_XCAFDoc_GraphNode theItem)
        InsertBefore(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDoc_GraphNode theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, NCollection_Sequence< opencascade::handle< XCAFDoc_GraphNode > >::Iterator & thePosition, Handle_XCAFDoc_GraphNode theItem)
        InsertAfter(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDoc_GraphNode theSeq)
        InsertAfter(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, Handle_XCAFDoc_GraphNode theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, NCollection_Sequence_Handle_XCAFDoc_GraphNode theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Handle_XCAFDoc_GraphNode

        First item access

        :rtype: TheItemType &

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_XCAFDoc_GraphNode self) -> Handle_XCAFDoc_GraphNode

        Last item access

        :rtype: TheItemType &

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex) -> Handle_XCAFDoc_GraphNode

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_XCAFDoc_GraphNode self, Standard_Integer const theIndex, Handle_XCAFDoc_GraphNode theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_SetValue(self, *args)


    def __iter__(self):
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode___iter__(self)
    __swig_destroy__ = _XCAFDoc.delete_NCollection_Sequence_Handle_XCAFDoc_GraphNode
NCollection_Sequence_Handle_XCAFDoc_GraphNode_swigregister = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_swigregister
NCollection_Sequence_Handle_XCAFDoc_GraphNode_swigregister(NCollection_Sequence_Handle_XCAFDoc_GraphNode)

def NCollection_Sequence_Handle_XCAFDoc_GraphNode_delNode(*args):
    """
    NCollection_Sequence_Handle_XCAFDoc_GraphNode_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_delNode(*args)

class NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDoc.new_NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper

    def __next__(self):
        return _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper___next__(self)
NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper_swigregister = _XCAFDoc.NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper_swigregister
NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper_swigregister(NCollection_Sequence_Handle_XCAFDoc_GraphNode_IteratorHelper)


try:
	XCAFDoc_GraphNodeSequence = NCollection_Sequence_Handle_XCAFDoc_GraphNode
except NameError:
	pass # does not exist, probably ignored

class XCAFDoc_(object):
    """
    Definition of general structure of DECAF document
    and tools to work with it

    The document is composed of sections, each section
    storing its own kind of data and managing by corresponding
    tool
    Some properties can be attached directly to shapes. These properties are:
    * Name (the standard definition from OCAF) - class TDataStd_Name
    * Centroid (for the validation of transfer) - class XCAFDoc_Centroid
    * Volume (for the validation of transfer) - class XCAFDoc_Volume
    * Area (for the validation of transfer) - class XCafDoc_Area
    Management of these attributes is realized by OCAF. For getting
    the attributes attached to a label the method class
    TDF_Label::FindAttribute() should be used.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AssemblyGUID(*args):
        """
        AssemblyGUID() -> Standard_GUID

        class for containing GraphNodes.
        Returns GUID for UAttribute identifying assembly

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__AssemblyGUID(*args)

    AssemblyGUID = staticmethod(AssemblyGUID)

    def ShapeRefGUID(*args):
        """
        ShapeRefGUID() -> Standard_GUID

        Returns GUID for TreeNode representing assembly link

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ShapeRefGUID(*args)

    ShapeRefGUID = staticmethod(ShapeRefGUID)

    def ColorRefGUID(*args):
        """
        ColorRefGUID(XCAFDoc_ColorType const type) -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of colors

        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ColorRefGUID(*args)

    ColorRefGUID = staticmethod(ColorRefGUID)

    def DimTolRefGUID(*args):
        """
        DimTolRefGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of DGT

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__DimTolRefGUID(*args)

    DimTolRefGUID = staticmethod(DimTolRefGUID)

    def DimensionRefFirstGUID(*args):
        """
        DimensionRefFirstGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of Dimension

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__DimensionRefFirstGUID(*args)

    DimensionRefFirstGUID = staticmethod(DimensionRefFirstGUID)

    def DimensionRefSecondGUID(*args):
        """
        DimensionRefSecondGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of Dimension

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__DimensionRefSecondGUID(*args)

    DimensionRefSecondGUID = staticmethod(DimensionRefSecondGUID)

    def GeomToleranceRefGUID(*args):
        """
        GeomToleranceRefGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of GeomTolerance

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__GeomToleranceRefGUID(*args)

    GeomToleranceRefGUID = staticmethod(GeomToleranceRefGUID)

    def DatumRefGUID(*args):
        """
        DatumRefGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of datum

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__DatumRefGUID(*args)

    DatumRefGUID = staticmethod(DatumRefGUID)

    def DatumTolRefGUID(*args):
        """
        DatumTolRefGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing connections Datum-Toler

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__DatumTolRefGUID(*args)

    DatumTolRefGUID = staticmethod(DatumTolRefGUID)

    def LayerRefGUID(*args):
        """
        LayerRefGUID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__LayerRefGUID(*args)

    LayerRefGUID = staticmethod(LayerRefGUID)

    def MaterialRefGUID(*args):
        """
        MaterialRefGUID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__MaterialRefGUID(*args)

    MaterialRefGUID = staticmethod(MaterialRefGUID)

    def NoteRefGUID(*args):
        """
        NoteRefGUID() -> Standard_GUID

        Return GUIDs for representing notes

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__NoteRefGUID(*args)

    NoteRefGUID = staticmethod(NoteRefGUID)

    def InvisibleGUID(*args):
        """
        InvisibleGUID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__InvisibleGUID(*args)

    InvisibleGUID = staticmethod(InvisibleGUID)

    def ColorByLayerGUID(*args):
        """
        ColorByLayerGUID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ColorByLayerGUID(*args)

    ColorByLayerGUID = staticmethod(ColorByLayerGUID)

    def ExternRefGUID(*args):
        """
        ExternRefGUID() -> Standard_GUID

        Returns GUID for UAttribute identifying external reference on no-step file

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ExternRefGUID(*args)

    ExternRefGUID = staticmethod(ExternRefGUID)

    def SHUORefGUID(*args):
        """
        SHUORefGUID() -> Standard_GUID

        Returns GUID for UAttribute identifying specified higher usage occurrence

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__SHUORefGUID(*args)

    SHUORefGUID = staticmethod(SHUORefGUID)

    def ViewRefGUID(*args):
        """
        ViewRefGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of View

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefGUID(*args)

    ViewRefGUID = staticmethod(ViewRefGUID)

    def ViewRefShapeGUID(*args):
        """
        ViewRefShapeGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of View

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefShapeGUID(*args)

    ViewRefShapeGUID = staticmethod(ViewRefShapeGUID)

    def ViewRefGDTGUID(*args):
        """
        ViewRefGDTGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of View

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefGDTGUID(*args)

    ViewRefGDTGUID = staticmethod(ViewRefGDTGUID)

    def ViewRefPlaneGUID(*args):
        """
        ViewRefPlaneGUID() -> Standard_GUID

        Return GUIDs for TreeNode representing specified types of View

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefPlaneGUID(*args)

    ViewRefPlaneGUID = staticmethod(ViewRefPlaneGUID)

    def ViewRefNoteGUID(*args):
        """
        ViewRefNoteGUID() -> Standard_GUID

        Return GUIDs for GraphNode representing specified types of View

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefNoteGUID(*args)

    ViewRefNoteGUID = staticmethod(ViewRefNoteGUID)

    def ViewRefAnnotationGUID(*args):
        """
        ViewRefAnnotationGUID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__ViewRefAnnotationGUID(*args)

    ViewRefAnnotationGUID = staticmethod(ViewRefAnnotationGUID)

    def LockGUID(*args):
        """
        LockGUID() -> Standard_GUID

        Returns GUID for UAttribute identifying lock flag

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc__LockGUID(*args)

    LockGUID = staticmethod(LockGUID)

    def __init__(self):
        """
        Definition of general structure of DECAF document
        and tools to work with it

        The document is composed of sections, each section
        storing its own kind of data and managing by corresponding
        tool
        Some properties can be attached directly to shapes. These properties are:
        * Name (the standard definition from OCAF) - class TDataStd_Name
        * Centroid (for the validation of transfer) - class XCAFDoc_Centroid
        * Volume (for the validation of transfer) - class XCAFDoc_Volume
        * Area (for the validation of transfer) - class XCafDoc_Area
        Management of these attributes is realized by OCAF. For getting
        the attributes attached to a label the method class
        TDF_Label::FindAttribute() should be used.
        """
        this = _XCAFDoc.new_XCAFDoc_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_
XCAFDoc__swigregister = _XCAFDoc.XCAFDoc__swigregister
XCAFDoc__swigregister(XCAFDoc_)

def XCAFDoc__AssemblyGUID(*args):
    """
    XCAFDoc__AssemblyGUID() -> Standard_GUID

    class for containing GraphNodes.
    Returns GUID for UAttribute identifying assembly

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__AssemblyGUID(*args)

def XCAFDoc__ShapeRefGUID(*args):
    """
    XCAFDoc__ShapeRefGUID() -> Standard_GUID

    Returns GUID for TreeNode representing assembly link

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ShapeRefGUID(*args)

def XCAFDoc__ColorRefGUID(*args):
    """
    XCAFDoc__ColorRefGUID(XCAFDoc_ColorType const type) -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of colors

    :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ColorRefGUID(*args)

def XCAFDoc__DimTolRefGUID(*args):
    """
    XCAFDoc__DimTolRefGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of DGT

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__DimTolRefGUID(*args)

def XCAFDoc__DimensionRefFirstGUID(*args):
    """
    XCAFDoc__DimensionRefFirstGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of Dimension

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__DimensionRefFirstGUID(*args)

def XCAFDoc__DimensionRefSecondGUID(*args):
    """
    XCAFDoc__DimensionRefSecondGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of Dimension

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__DimensionRefSecondGUID(*args)

def XCAFDoc__GeomToleranceRefGUID(*args):
    """
    XCAFDoc__GeomToleranceRefGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of GeomTolerance

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__GeomToleranceRefGUID(*args)

def XCAFDoc__DatumRefGUID(*args):
    """
    XCAFDoc__DatumRefGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of datum

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__DatumRefGUID(*args)

def XCAFDoc__DatumTolRefGUID(*args):
    """
    XCAFDoc__DatumTolRefGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing connections Datum-Toler

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__DatumTolRefGUID(*args)

def XCAFDoc__LayerRefGUID(*args):
    """
    XCAFDoc__LayerRefGUID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__LayerRefGUID(*args)

def XCAFDoc__MaterialRefGUID(*args):
    """
    XCAFDoc__MaterialRefGUID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__MaterialRefGUID(*args)

def XCAFDoc__NoteRefGUID(*args):
    """
    XCAFDoc__NoteRefGUID() -> Standard_GUID

    Return GUIDs for representing notes

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__NoteRefGUID(*args)

def XCAFDoc__InvisibleGUID(*args):
    """
    XCAFDoc__InvisibleGUID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__InvisibleGUID(*args)

def XCAFDoc__ColorByLayerGUID(*args):
    """
    XCAFDoc__ColorByLayerGUID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ColorByLayerGUID(*args)

def XCAFDoc__ExternRefGUID(*args):
    """
    XCAFDoc__ExternRefGUID() -> Standard_GUID

    Returns GUID for UAttribute identifying external reference on no-step file

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ExternRefGUID(*args)

def XCAFDoc__SHUORefGUID(*args):
    """
    XCAFDoc__SHUORefGUID() -> Standard_GUID

    Returns GUID for UAttribute identifying specified higher usage occurrence

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__SHUORefGUID(*args)

def XCAFDoc__ViewRefGUID(*args):
    """
    XCAFDoc__ViewRefGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of View

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefGUID(*args)

def XCAFDoc__ViewRefShapeGUID(*args):
    """
    XCAFDoc__ViewRefShapeGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of View

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefShapeGUID(*args)

def XCAFDoc__ViewRefGDTGUID(*args):
    """
    XCAFDoc__ViewRefGDTGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of View

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefGDTGUID(*args)

def XCAFDoc__ViewRefPlaneGUID(*args):
    """
    XCAFDoc__ViewRefPlaneGUID() -> Standard_GUID

    Return GUIDs for TreeNode representing specified types of View

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefPlaneGUID(*args)

def XCAFDoc__ViewRefNoteGUID(*args):
    """
    XCAFDoc__ViewRefNoteGUID() -> Standard_GUID

    Return GUIDs for GraphNode representing specified types of View

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefNoteGUID(*args)

def XCAFDoc__ViewRefAnnotationGUID(*args):
    """
    XCAFDoc__ViewRefAnnotationGUID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__ViewRefAnnotationGUID(*args)

def XCAFDoc__LockGUID(*args):
    """
    XCAFDoc__LockGUID() -> Standard_GUID

    Returns GUID for UAttribute identifying lock flag

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc__LockGUID(*args)

class XCAFDoc_AssemblyItemRef(TDF.TDF_Attribute):
    """
    An attribute that describes a weak reference to an assembly item
    or to a subshape or to an assembly label attribute.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_AssemblyItemRef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_AssemblyItemRef(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_AssemblyItemRef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetID(*args)

    GetID = staticmethod(GetID)

    def Get(*args):
        """
        Get(TDF_Label theLabel) -> Handle_XCAFDoc_AssemblyItemRef

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Get(*args)

    Get = staticmethod(Get)

    def Set(*args):
        """
        Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId) -> Handle_XCAFDoc_AssemblyItemRef
        Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef
        Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer const theShapeIndex) -> Handle_XCAFDoc_AssemblyItemRef

        Create (if not exist) a reference to an assembly item's subshape.
        \param [in] theLabel      - label to add the attribute.
        \param [in] theItemId     - assembly item ID.
        \param [in] theShapeIndex - assembly item's subshape index.
        @return A handle to the attribute instance.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theShapeIndex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_AssemblyItemRef self) -> XCAFDoc_AssemblyItemRef

        Creates an empty reference attribute.


        """
        this = _XCAFDoc.new_XCAFDoc_AssemblyItemRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsOrphan(self, *args):
        """
        IsOrphan(XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks if the reference points to a really existing item in XDE document.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsOrphan(self, *args)


    def HasExtraRef(self, *args):
        """
        HasExtraRef(XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks if the reference points on an item's shapeindex or attribute.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_HasExtraRef(self, *args)


    def IsGUID(self, *args):
        """
        IsGUID(XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks is the reference points to an item's attribute.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsGUID(self, *args)


    def IsSubshapeIndex(self, *args):
        """
        IsSubshapeIndex(XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks is the reference points to an item's subshape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_IsSubshapeIndex(self, *args)


    def GetGUID(self, *args):
        """
        GetGUID(XCAFDoc_AssemblyItemRef self) -> Standard_GUID

        Returns the assembly item's attribute that the reference points to.
        If the reference doesn't point to an attribute, returns an empty GUID.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetGUID(self, *args)


    def GetSubshapeIndex(self, *args):
        """
        GetSubshapeIndex(XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Returns the assembly item's subshape that the reference points to.
        If the reference doesn't point to a subshape, returns 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetSubshapeIndex(self, *args)


    def GetItem(self, *args):
        """
        Returns the assembly item ID that the reference points to.

        :rtype: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId

        """
        res = _XCAFDoc.XCAFDoc_AssemblyItemRef_GetItem(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetItem(self, *args):
        """
        SetItem(XCAFDoc_AssemblyItemRef self, XCAFDoc_AssemblyItemId theItemId)
        SetItem(XCAFDoc_AssemblyItemRef self, NCollection_List_TCollection_AsciiString thePath)
        SetItem(XCAFDoc_AssemblyItemRef self, TCollection_AsciiString theString)

        Sets the assembly item ID from a formatted path 
        that the reference points to.
        Extra reference data (if any) will be cleared.

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetItem(self, *args)


    def SetGUID(self, *args):
        """
        SetGUID(XCAFDoc_AssemblyItemRef self, Standard_GUID theAttrGUID)

        Sets the assembly item's label attribute that the reference points to.
        The base assembly item will not change.

        :type theAttrGUID: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetGUID(self, *args)


    def SetSubshapeIndex(self, *args):
        """
        SetSubshapeIndex(XCAFDoc_AssemblyItemRef self, Standard_Integer theShapeIndex)

        Sets the assembly item's subshape that the reference points to.
        The base assembly item will not change.

        :type theShapeIndex: int

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_SetSubshapeIndex(self, *args)


    def ClearExtraRef(self, *args):
        """
        ClearExtraRef(XCAFDoc_AssemblyItemRef self)

        Reverts the reference to empty state.


        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_ClearExtraRef(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_AssemblyItemRef_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_AssemblyItemRef self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(XCAFDoc_AssemblyItemRef self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_AssemblyItemRef self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_AssemblyItemRef self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemRef_Dump(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_AssemblyItemRef
XCAFDoc_AssemblyItemRef_swigregister = _XCAFDoc.XCAFDoc_AssemblyItemRef_swigregister
XCAFDoc_AssemblyItemRef_swigregister(XCAFDoc_AssemblyItemRef)

def XCAFDoc_AssemblyItemRef_get_type_name(*args):
    """
    XCAFDoc_AssemblyItemRef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_get_type_name(*args)

def XCAFDoc_AssemblyItemRef_get_type_descriptor(*args):
    """
    XCAFDoc_AssemblyItemRef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_get_type_descriptor(*args)

def XCAFDoc_AssemblyItemRef_GetID(*args):
    """
    XCAFDoc_AssemblyItemRef_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_GetID(*args)

def XCAFDoc_AssemblyItemRef_Get(*args):
    """
    XCAFDoc_AssemblyItemRef_Get(TDF_Label theLabel) -> Handle_XCAFDoc_AssemblyItemRef

    Finds a reference attribute on the given label and returns it, if it is found

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_Get(*args)

def XCAFDoc_AssemblyItemRef_Set(*args):
    """
    Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId) -> Handle_XCAFDoc_AssemblyItemRef
    Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef
    XCAFDoc_AssemblyItemRef_Set(TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer const theShapeIndex) -> Handle_XCAFDoc_AssemblyItemRef

    Create (if not exist) a reference to an assembly item's subshape.
    \param [in] theLabel      - label to add the attribute.
    \param [in] theItemId     - assembly item ID.
    \param [in] theShapeIndex - assembly item's subshape index.
    @return A handle to the attribute instance.

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
    :type theShapeIndex: int
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

    """
    return _XCAFDoc.XCAFDoc_AssemblyItemRef_Set(*args)

class XCAFDoc_ShapeTool(TDF.TDF_Attribute):
    """
    A tool to store shapes in an XDE
    document in the form of assembly structure, and to maintain this structure.
    Attribute containing Shapes section of DECAF document.
    Provide tools for management of Shapes section.
    The API provided by this class allows to work with this
    structure regardless of its low-level implementation.
    All the shapes are stored on child labels of a main label which is
    XCAFDoc_DocumentTool::LabelShapes(). The label for assembly also has
    sub-labels, each of which represents the instance of
    another shape in that assembly (component). Such sub-label
    stores reference to the label of the original shape in the form
    of TDataStd_TreeNode with GUID XCAFDoc::ShapeRefGUID(), and its
    location encapsulated into the NamedShape.
    For correct work with an XDE document, it is necessary to use
    methods for analysis and methods for working with shapes.
    For example:
    if ( STool->IsAssembly(aLabel) )
    { Standard_Boolean subchilds = Standard_False; (default)
    Standard_Integer nbc = STool->NbComponents
    (aLabel[,subchilds]);
    }
    If subchilds is True, commands also consider sub-levels. By
    default, only level one is checked.
    In this example, number of children from the first level of
    assembly will be returned. Methods for creation and initialization:
    Constructor:
    XCAFDoc_ShapeTool::XCAFDoc_ShapeTool()
    Getting a guid:
    Standard_GUID GetID ();
    Creation (if does not exist) of ShapeTool on label L:
    Handle(XCAFDoc_ShapeTool) XCAFDoc_ShapeTool::Set(const TDF_Label& L)
    Analyze whether shape is a simple shape or an instance or a
    component of an assembly or it is an assembly ( methods of analysis).
    For example:
    STool->IsShape(aLabel) ;
    Analyze that the label represents a shape (simple
    shape, assembly or reference) or
    STool->IsTopLevel(aLabel);
    Analyze that the label is a label of a top-level shape.
    Work with simple shapes, assemblies and instances (
    methods for work with shapes).
    For example:
    Add shape:
    Standard_Boolean makeAssembly;
    // True to interpret a Compound as an Assembly, False to take it
    as a whole
    aLabel = STool->AddShape(aShape, makeAssembly);
    Get shape:
    TDF_Label aLabel...
    // A label must be present if
    (aLabel.IsNull()) { ... no such label : abandon .. }
    TopoDS_Shape aShape;
    aShape = STool->GetShape(aLabel);
    if (aShape.IsNull())
    { ... this label is not for a Shape ... }
    To get a label from shape.
    Standard_Boolean findInstance = Standard_False;
    (this is default value)
    aLabel = STool->FindShape(aShape [,findInstance]);
    if (aLabel.IsNull())
    { ... no label found for this shape ... }
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_ShapeTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_ShapeTool(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label L) -> Handle_XCAFDoc_ShapeTool

        Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_ShapeTool self) -> XCAFDoc_ShapeTool

        Creates an empty tool
        Creates a tool to work with a document <Doc>
        Attaches to label XCAFDoc::LabelShapes()


        """
        this = _XCAFDoc.new_XCAFDoc_ShapeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsTopLevel(self, *args):
        """
        IsTopLevel(XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of top-level shape,
        as opposed to component of assembly or subshape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsTopLevel(self, *args)


    def IsFree(*args):
        """
        IsFree(TDF_Label L) -> Standard_Boolean

        Returns True if the label is not used by any assembly, i.e.
        contains sublabels which are assembly components
        This is relevant only if IsShape() is True
        (There  is  no  Father TreeNode on  this  <L>)

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

    IsFree = staticmethod(IsFree)

    def IsShape(*args):
        """
        IsShape(TDF_Label L) -> Standard_Boolean

        Returns True if the label represents a shape (simple shape,
        assembly or reference)

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

    IsShape = staticmethod(IsShape)

    def IsSimpleShape(*args):
        """
        IsSimpleShape(TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of simple shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

    IsSimpleShape = staticmethod(IsSimpleShape)

    def IsReference(*args):
        """
        IsReference(TDF_Label L) -> Standard_Boolean

        Return true if <L> is a located instance of other shape
        i.e. reference

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

    IsReference = staticmethod(IsReference)

    def IsAssembly(*args):
        """
        IsAssembly(TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of assembly, i.e.
        contains sublabels which are assembly components
        This is relevant only if IsShape() is True

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

    IsAssembly = staticmethod(IsAssembly)

    def IsComponent(*args):
        """
        IsComponent(TDF_Label L) -> Standard_Boolean

        Return true if <L> is reference serving as component
        of assembly

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

    IsComponent = staticmethod(IsComponent)

    def IsCompound(*args):
        """
        IsCompound(TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of compound, i.e.
        contains some sublabels
        This is relevant only if IsShape() is True

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

    IsCompound = staticmethod(IsCompound)

    def IsSubShape(self, *args):
        """
        IsSubShape(XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean
        IsSubShape(XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub) -> Standard_Boolean

        Checks whether shape <sub> is subshape of shape stored on
        label shapeL

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsSubShape(self, *args)


    def SearchUsingMap(self, *args):
        """
        SearchUsingMap(XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findWithoutLoc, Standard_Boolean const findSubshape) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :type findWithoutLoc: bool
        :type findSubshape: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SearchUsingMap(self, *args)


    def Search(self, *args):
        """
        Search(XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findInstance, Standard_Boolean const findComponent, Standard_Boolean const findSubshape) -> Standard_Boolean

        General tool to find a (sub) shape in the document
        * If findInstance is True, and S has a non-null location,
        first tries to find the shape among the top-level shapes
        with this location
        * If not found, and findComponent is True, tries to find the shape
        among the components of assemblies
        * If not found, tries to find the shape without location
        among top-level shapes
        * If not found and findSubshape is True, tries to find a
        shape as a subshape of top-level simple shapes
        Returns False if nothing is found

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :type findInstance: bool
        :type findComponent: bool
        :type findSubshape: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Search(self, *args)


    def FindShape(self, *args):
        """
        FindShape(XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findInstance) -> Standard_Boolean
        FindShape(XCAFDoc_ShapeTool self, TopoDS_Shape S, Standard_Boolean const findInstance) -> TDF_Label

        Does the same as previous method
        Returns Null label if not found

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type findInstance: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindShape(self, *args)


    def GetShape(*args):
        """
        GetShape(TDF_Label L, TopoDS_Shape S) -> Standard_Boolean
        GetShape(TDF_Label L) -> TopoDS_Shape

        To get TopoDS_Shape from shape's label
        For component, returns new shape with correct location
        Returns Null shape if label does not contain shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

    GetShape = staticmethod(GetShape)

    def NewShape(self, *args):
        """
        NewShape(XCAFDoc_ShapeTool self) -> TDF_Label

        Creates new (empty) top-level shape.
        Initially it holds empty TopoDS_Compound

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NewShape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(XCAFDoc_ShapeTool self, TDF_Label L, TopoDS_Shape S)

        Sets representation (TopoDS_Shape) for top-level shape.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetShape(self, *args)


    def AddShape(self, *args):
        """
        AddShape(XCAFDoc_ShapeTool self, TopoDS_Shape S, Standard_Boolean const makeAssembly, Standard_Boolean const makePrepare) -> TDF_Label

        Adds a new top-level (creates and returns a new label)
        If makeAssembly is True, treats TopAbs_COMPOUND shapes
        as assemblies (creates assembly structure).
        NOTE: <makePrepare> replace components without location
        in assmebly by located components to avoid some problems.
        If AutoNaming() is True then automatically attaches names.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type makeAssembly: bool
        :type makePrepare: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddShape(self, *args)


    def RemoveShape(self, *args):
        """
        RemoveShape(XCAFDoc_ShapeTool self, TDF_Label L, Standard_Boolean const removeCompletely) -> Standard_Boolean

        Removes shape (whole label and all its sublabels)
        If removeCompletely is true, removes complete shape
        If removeCompletely is false, removes instance(location) only
        Returns False (and does nothing) if shape is not free
        or is not top-level shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :type removeCompletely: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveShape(self, *args)


    def Init(self, *args):
        """
        Init(XCAFDoc_ShapeTool self)

        set hasComponents into false


        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Init(self, *args)


    def SetAutoNaming(*args):
        """
        SetAutoNaming(Standard_Boolean const V)

        Sets auto-naming mode to <V>. If True then for added
        shapes, links, assemblies and SHUO's, the TDataStd_Name attribute
        is automatically added. For shapes it contains a shape type
        (e.g. "SOLID", "SHELL", etc); for links it has a form
        "=>[0:1:1:2]" (where a tag is a label containing a shape
        without a location); for assemblies it is "ASSEMBLY", and
        "SHUO" for SHUO's.
        This setting is global; it cannot be made a member function
        as it is used by static methods as well.
        By default, auto-naming is enabled.
        See also AutoNaming().

        :type V: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

    SetAutoNaming = staticmethod(SetAutoNaming)

    def AutoNaming(*args):
        """
        AutoNaming() -> Standard_Boolean

        Returns current auto-naming mode. See SetAutoNaming() for
        description.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

    AutoNaming = staticmethod(AutoNaming)

    def ComputeShapes(self, *args):
        """
        ComputeShapes(XCAFDoc_ShapeTool self, TDF_Label L)

        recursive

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeShapes(self, *args)


    def ComputeSimpleShapes(self, *args):
        """
        ComputeSimpleShapes(XCAFDoc_ShapeTool self)

        Compute a sequence of simple shapes


        """
        return _XCAFDoc.XCAFDoc_ShapeTool_ComputeSimpleShapes(self, *args)


    def GetShapes(self, *args):
        """
        GetShapes(XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of all top-level shapes

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetShapes(self, *args)


    def GetFreeShapes(self, *args):
        """
        GetFreeShapes(XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label FreeLabels)

        Returns a sequence of all top-level shapes
        which are free (i.e. not referred by any other)

        :type FreeLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetFreeShapes(self, *args)


    def GetUsers(*args):
        """
        GetUsers(TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Integer

        Returns list of labels which refer shape L as component
        Returns number of users (0 if shape is free)

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

    GetUsers = staticmethod(GetUsers)

    def GetLocation(*args):
        """
        GetLocation(TDF_Label L) -> TopLoc_Location

        Returns location of instance

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

    GetLocation = staticmethod(GetLocation)

    def GetReferredShape(*args):
        """
        GetReferredShape(TDF_Label L, TDF_Label Label) -> Standard_Boolean

        Returns label which corresponds to a shape referred by L
        Returns False if label is not reference

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

    GetReferredShape = staticmethod(GetReferredShape)

    def NbComponents(*args):
        """
        NbComponents(TDF_Label L, Standard_Boolean const getsubchilds) -> Standard_Integer

        Returns number of Assembles components

        :type L: OCC.wrapper.TDF.TDF_Label
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

    NbComponents = staticmethod(NbComponents)

    def GetComponents(*args):
        """
        GetComponents(TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Boolean

        Returns list of components of assembly
        Returns False if label is not assembly

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

    GetComponents = staticmethod(GetComponents)

    def AddComponent(self, *args):
        """
        AddComponent(XCAFDoc_ShapeTool self, TDF_Label assembly, TDF_Label comp, TopLoc_Location Loc) -> TDF_Label
        AddComponent(XCAFDoc_ShapeTool self, TDF_Label assembly, TopoDS_Shape comp, Standard_Boolean const expand) -> TDF_Label

        Adds a shape (located) as a component to the assembly
        If necessary, creates an additional top-level shape for
        component and return the Label of component.
        If expand is True and component is Compound, it will
        be created as assembly also
        Note: assembly must be IsAssembly() or IsSimpleShape()

        :type assembly: OCC.wrapper.TDF.TDF_Label
        :type comp: OCC.wrapper.TopoDS.TopoDS_Shape
        :type expand: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddComponent(self, *args)


    def RemoveComponent(self, *args):
        """
        RemoveComponent(XCAFDoc_ShapeTool self, TDF_Label comp)

        Removes a component from its assembly

        :type comp: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveComponent(self, *args)


    def UpdateAssemblies(self, *args):
        """
        UpdateAssemblies(XCAFDoc_ShapeTool self)

        Top-down update for all assembly compounds stored in the document.


        """
        return _XCAFDoc.XCAFDoc_ShapeTool_UpdateAssemblies(self, *args)


    def FindSubShape(self, *args):
        """
        FindSubShape(XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub, TDF_Label L) -> Standard_Boolean

        Finds a label for subshape <sub> of shape stored on
        label shapeL
        Returns Null label if it is not found

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSubShape(self, *args)


    def AddSubShape(self, *args):
        """
        AddSubShape(XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub) -> TDF_Label

        Adds a label for subshape <sub> of shape stored on
        label shapeL
        Returns Null label if it is not subshape

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_AddSubShape(self, *args)


    def FindMainShapeUsingMap(self, *args):
        """
        FindMainShapeUsingMap(XCAFDoc_ShapeTool self, TopoDS_Shape sub) -> TDF_Label

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShapeUsingMap(self, *args)


    def FindMainShape(self, *args):
        """
        FindMainShape(XCAFDoc_ShapeTool self, TopoDS_Shape sub) -> TDF_Label

        Performs a search among top-level shapes to find
        the shape containing <sub> as subshape
        Checks only simple shapes, and returns the first found
        label (which should be the only one for valid model)

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindMainShape(self, *args)


    def GetSubShapes(*args):
        """
        GetSubShapes(TDF_Label L, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns list of labels identifying subshapes of the given shape
        Returns False if no subshapes are placed on that label

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

    GetSubShapes = staticmethod(GetSubShapes)

    def BaseLabel(self, *args):
        """
        BaseLabel(XCAFDoc_ShapeTool self) -> TDF_Label

        returns the label under which shapes are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_BaseLabel(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_ShapeTool self, Standard_OStream & theDumpLog, Standard_Boolean const deep) -> Standard_OStream
        Dump(XCAFDoc_ShapeTool self, Standard_OStream & theDumpLog) -> Standard_OStream &

        :type theDumpLog: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Dump(self, *args)


    def DumpShape(*args):
        """
        DumpShape(Standard_OStream & theDumpLog, TDF_Label L, Standard_Integer const level=0, Standard_Boolean const deep)

        Print to ostream <theDumpLog> type of shape found on <L> label
        and the entry of <L>, with <level> tabs before.
        If <deep>, print also TShape and Location addresses

        :type theDumpLog: OCC.wrapper.Standard.Standard_OStream
        :type L: OCC.wrapper.TDF.TDF_Label
        :type level: int
        :type deep: bool

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

    DumpShape = staticmethod(DumpShape)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_ShapeTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_ShapeTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_ShapeTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_ShapeTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Paste(self, *args)


    def IsExternRef(*args):
        """
        IsExternRef(TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of external references, i.e.
        there are some reference on the no-step files, which are
        described in document only their names

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

    IsExternRef = staticmethod(IsExternRef)

    def SetExternRefs(self, *args):
        """
        SetExternRefs(XCAFDoc_ShapeTool self, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS) -> TDF_Label
        SetExternRefs(XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS)

        Sets the names of references on the no-step files

        :type L: OCC.wrapper.TDF.TDF_Label
        :type SHAS: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetExternRefs(self, *args)


    def GetExternRefs(*args):
        """
        GetExternRefs(TDF_Label L, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS)

        Gets the names of references on the no-step files

        :type L: OCC.wrapper.TDF.TDF_Label
        :type SHAS: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

    GetExternRefs = staticmethod(GetExternRefs)

    def SetSHUO(self, *args):
        """
        SetSHUO(XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label Labels, Handle_XCAFDoc_GraphNode MainSHUOAttr) -> Standard_Boolean

        Sets the SHUO structure between upper_usage and next_usage
        create multy-level (if number of labels > 2) SHUO from first to last
        Initialise out <MainSHUOAttr> by main upper_usage SHUO attribute.
        Returns FALSE if some of labels in not component label

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type MainSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetSHUO(self, *args)


    def GetSHUO(*args):
        """
        GetSHUO(TDF_Label SHUOLabel, Handle_XCAFDoc_GraphNode aSHUOAttr) -> Standard_Boolean

        Returns founded SHUO GraphNode attribute <aSHUOAttr>
        Returns false in other case

        :type SHUOLabel: OCC.wrapper.TDF.TDF_Label
        :type aSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

    GetSHUO = staticmethod(GetSHUO)

    def GetAllComponentSHUO(*args):
        """
        GetAllComponentSHUO(TDF_Label CompLabel, NCollection_Sequence_Handle_TDF_Attribute SHUOAttrs) -> Standard_Boolean

        Returns founded SHUO GraphNodes of indicated component
        Returns false in other case

        :type CompLabel: OCC.wrapper.TDF.TDF_Label
        :type SHUOAttrs: OCC.wrapper.TDF.TDF_AttributeSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

    GetAllComponentSHUO = staticmethod(GetAllComponentSHUO)

    def GetSHUOUpperUsage(*args):
        """
        GetSHUOUpperUsage(TDF_Label NextUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns the sequence of labels of SHUO attributes,
        which is upper_usage for this next_usage SHUO attribute
        (that indicated by label)
        NOTE: returns upper_usages only on one level (not recurse)
        NOTE: do not clear the sequence before filling

        :type NextUsageL: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

    GetSHUOUpperUsage = staticmethod(GetSHUOUpperUsage)

    def GetSHUONextUsage(*args):
        """
        GetSHUONextUsage(TDF_Label UpperUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns the sequence of labels of SHUO attributes,
        which is next_usage for this upper_usage SHUO attribute
        (that indicated by label)
        NOTE: returns next_usages only on one level (not recurse)
        NOTE: do not clear the sequence before filling

        :type UpperUsageL: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

    GetSHUONextUsage = staticmethod(GetSHUONextUsage)

    def RemoveSHUO(self, *args):
        """
        RemoveSHUO(XCAFDoc_ShapeTool self, TDF_Label SHUOLabel) -> Standard_Boolean

        Remove SHUO from component sublabel,
        remove all dependencies on other SHUO.
        Returns FALSE if cannot remove SHUO dependencies.
        NOTE: remove any styles that associated with this SHUO.

        :type SHUOLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_RemoveSHUO(self, *args)


    def FindComponent(self, *args):
        """
        FindComponent(XCAFDoc_ShapeTool self, TopoDS_Shape theShape, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Serach the path of labels in the document,
        that corresponds the component from any assembly
        Try to search the sequence of labels with location that
        produce this shape as component of any assembly
        NOTE: Clear sequence of labels before filling

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindComponent(self, *args)


    def GetSHUOInstance(self, *args):
        """
        GetSHUOInstance(XCAFDoc_ShapeTool self, Handle_XCAFDoc_GraphNode theSHUO) -> TopoDS_Shape

        Search for the component shape that styled by shuo
        Returns null shape if no any shape is found.

        :type theSHUO: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOInstance(self, *args)


    def SetInstanceSHUO(self, *args):
        """
        SetInstanceSHUO(XCAFDoc_ShapeTool self, TopoDS_Shape theShape) -> Handle_XCAFDoc_GraphNode

        Search for the component shape by labelks path
        and set SHUO structure for founded label structure
        Returns null attribute if no component in any assembly found.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_SetInstanceSHUO(self, *args)


    def GetAllSHUOInstances(self, *args):
        """
        GetAllSHUOInstances(XCAFDoc_ShapeTool self, Handle_XCAFDoc_GraphNode theSHUO, NCollection_Sequence_TopoDS_Shape theSHUOShapeSeq) -> Standard_Boolean

        Seaching for component shapes that styled by shuo
        Returns empty sequence of shape if no any shape is found.

        :type theSHUO: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :type theSHUOShapeSeq: OCC.wrapper.TopTools.TopTools_SequenceOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_GetAllSHUOInstances(self, *args)


    def FindSHUO(*args):
        """
        FindSHUO(NCollection_Sequence_TDF_Label Labels, Handle_XCAFDoc_GraphNode theSHUOAttr) -> Standard_Boolean

        Searchs the SHUO by labels of components
        from upper_usage componet to next_usage
        Returns null attribute if no SHUO found

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type theSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

    FindSHUO = staticmethod(FindSHUO)

    def Expand(self, *args):
        """
        Expand(XCAFDoc_ShapeTool self, TDF_Label Shape) -> Standard_Boolean

        Convert Shape (compound/compsolid/shell/wire) to assembly

        :type Shape: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_Expand(self, *args)


    def makeSubShape(self, *args):
        """
        makeSubShape(XCAFDoc_ShapeTool self, TDF_Label thePart, TopoDS_Shape theShape, TopLoc_Location theLoc)

        Make subshape for Part from Shape

        :type thePart: OCC.wrapper.TDF.TDF_Label
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_makeSubShape(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_ShapeTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_ShapeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_ShapeTool
XCAFDoc_ShapeTool_swigregister = _XCAFDoc.XCAFDoc_ShapeTool_swigregister
XCAFDoc_ShapeTool_swigregister(XCAFDoc_ShapeTool)

def XCAFDoc_ShapeTool_GetID(*args):
    """
    XCAFDoc_ShapeTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetID(*args)

def XCAFDoc_ShapeTool_Set(*args):
    """
    XCAFDoc_ShapeTool_Set(TDF_Label L) -> Handle_XCAFDoc_ShapeTool

    Create (if not exist) ShapeTool from XCAFDoc on <L>.

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_Set(*args)

def XCAFDoc_ShapeTool_IsFree(*args):
    """
    XCAFDoc_ShapeTool_IsFree(TDF_Label L) -> Standard_Boolean

    Returns True if the label is not used by any assembly, i.e.
    contains sublabels which are assembly components
    This is relevant only if IsShape() is True
    (There  is  no  Father TreeNode on  this  <L>)

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsFree(*args)

def XCAFDoc_ShapeTool_IsShape(*args):
    """
    XCAFDoc_ShapeTool_IsShape(TDF_Label L) -> Standard_Boolean

    Returns True if the label represents a shape (simple shape,
    assembly or reference)

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsShape(*args)

def XCAFDoc_ShapeTool_IsSimpleShape(*args):
    """
    XCAFDoc_ShapeTool_IsSimpleShape(TDF_Label L) -> Standard_Boolean

    Returns True if the label is a label of simple shape

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsSimpleShape(*args)

def XCAFDoc_ShapeTool_IsReference(*args):
    """
    XCAFDoc_ShapeTool_IsReference(TDF_Label L) -> Standard_Boolean

    Return true if <L> is a located instance of other shape
    i.e. reference

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsReference(*args)

def XCAFDoc_ShapeTool_IsAssembly(*args):
    """
    XCAFDoc_ShapeTool_IsAssembly(TDF_Label L) -> Standard_Boolean

    Returns True if the label is a label of assembly, i.e.
    contains sublabels which are assembly components
    This is relevant only if IsShape() is True

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsAssembly(*args)

def XCAFDoc_ShapeTool_IsComponent(*args):
    """
    XCAFDoc_ShapeTool_IsComponent(TDF_Label L) -> Standard_Boolean

    Return true if <L> is reference serving as component
    of assembly

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsComponent(*args)

def XCAFDoc_ShapeTool_IsCompound(*args):
    """
    XCAFDoc_ShapeTool_IsCompound(TDF_Label L) -> Standard_Boolean

    Returns True if the label is a label of compound, i.e.
    contains some sublabels
    This is relevant only if IsShape() is True

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsCompound(*args)

def XCAFDoc_ShapeTool_GetShape(*args):
    """
    GetShape(TDF_Label L, TopoDS_Shape S) -> Standard_Boolean
    XCAFDoc_ShapeTool_GetShape(TDF_Label L) -> TopoDS_Shape

    To get TopoDS_Shape from shape's label
    For component, returns new shape with correct location
    Returns Null shape if label does not contain shape

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetShape(*args)

def XCAFDoc_ShapeTool_SetAutoNaming(*args):
    """
    XCAFDoc_ShapeTool_SetAutoNaming(Standard_Boolean const V)

    Sets auto-naming mode to <V>. If True then for added
    shapes, links, assemblies and SHUO's, the TDataStd_Name attribute
    is automatically added. For shapes it contains a shape type
    (e.g. "SOLID", "SHELL", etc); for links it has a form
    "=>[0:1:1:2]" (where a tag is a label containing a shape
    without a location); for assemblies it is "ASSEMBLY", and
    "SHUO" for SHUO's.
    This setting is global; it cannot be made a member function
    as it is used by static methods as well.
    By default, auto-naming is enabled.
    See also AutoNaming().

    :type V: bool

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_SetAutoNaming(*args)

def XCAFDoc_ShapeTool_AutoNaming(*args):
    """
    XCAFDoc_ShapeTool_AutoNaming() -> Standard_Boolean

    Returns current auto-naming mode. See SetAutoNaming() for
    description.

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_AutoNaming(*args)

def XCAFDoc_ShapeTool_GetUsers(*args):
    """
    XCAFDoc_ShapeTool_GetUsers(TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Integer

    Returns list of labels which refer shape L as component
    Returns number of users (0 if shape is free)

    :type L: OCC.wrapper.TDF.TDF_Label
    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :type getsubchilds: bool
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetUsers(*args)

def XCAFDoc_ShapeTool_GetLocation(*args):
    """
    XCAFDoc_ShapeTool_GetLocation(TDF_Label L) -> TopLoc_Location

    Returns location of instance

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TopLoc.TopLoc_Location

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetLocation(*args)

def XCAFDoc_ShapeTool_GetReferredShape(*args):
    """
    XCAFDoc_ShapeTool_GetReferredShape(TDF_Label L, TDF_Label Label) -> Standard_Boolean

    Returns label which corresponds to a shape referred by L
    Returns False if label is not reference

    :type L: OCC.wrapper.TDF.TDF_Label
    :type Label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetReferredShape(*args)

def XCAFDoc_ShapeTool_NbComponents(*args):
    """
    XCAFDoc_ShapeTool_NbComponents(TDF_Label L, Standard_Boolean const getsubchilds) -> Standard_Integer

    Returns number of Assembles components

    :type L: OCC.wrapper.TDF.TDF_Label
    :type getsubchilds: bool
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_NbComponents(*args)

def XCAFDoc_ShapeTool_GetComponents(*args):
    """
    XCAFDoc_ShapeTool_GetComponents(TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Boolean

    Returns list of components of assembly
    Returns False if label is not assembly

    :type L: OCC.wrapper.TDF.TDF_Label
    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :type getsubchilds: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetComponents(*args)

def XCAFDoc_ShapeTool_GetSubShapes(*args):
    """
    XCAFDoc_ShapeTool_GetSubShapes(TDF_Label L, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

    Returns list of labels identifying subshapes of the given shape
    Returns False if no subshapes are placed on that label

    :type L: OCC.wrapper.TDF.TDF_Label
    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSubShapes(*args)

def XCAFDoc_ShapeTool_DumpShape(*args):
    """
    XCAFDoc_ShapeTool_DumpShape(Standard_OStream & theDumpLog, TDF_Label L, Standard_Integer const level=0, Standard_Boolean const deep)

    Print to ostream <theDumpLog> type of shape found on <L> label
    and the entry of <L>, with <level> tabs before.
    If <deep>, print also TShape and Location addresses

    :type theDumpLog: OCC.wrapper.Standard.Standard_OStream
    :type L: OCC.wrapper.TDF.TDF_Label
    :type level: int
    :type deep: bool

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_DumpShape(*args)

def XCAFDoc_ShapeTool_IsExternRef(*args):
    """
    XCAFDoc_ShapeTool_IsExternRef(TDF_Label L) -> Standard_Boolean

    Returns True if the label is a label of external references, i.e.
    there are some reference on the no-step files, which are
    described in document only their names

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_IsExternRef(*args)

def XCAFDoc_ShapeTool_GetExternRefs(*args):
    """
    XCAFDoc_ShapeTool_GetExternRefs(TDF_Label L, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS)

    Gets the names of references on the no-step files

    :type L: OCC.wrapper.TDF.TDF_Label
    :type SHAS: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetExternRefs(*args)

def XCAFDoc_ShapeTool_GetSHUO(*args):
    """
    XCAFDoc_ShapeTool_GetSHUO(TDF_Label SHUOLabel, Handle_XCAFDoc_GraphNode aSHUOAttr) -> Standard_Boolean

    Returns founded SHUO GraphNode attribute <aSHUOAttr>
    Returns false in other case

    :type SHUOLabel: OCC.wrapper.TDF.TDF_Label
    :type aSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUO(*args)

def XCAFDoc_ShapeTool_GetAllComponentSHUO(*args):
    """
    XCAFDoc_ShapeTool_GetAllComponentSHUO(TDF_Label CompLabel, NCollection_Sequence_Handle_TDF_Attribute SHUOAttrs) -> Standard_Boolean

    Returns founded SHUO GraphNodes of indicated component
    Returns false in other case

    :type CompLabel: OCC.wrapper.TDF.TDF_Label
    :type SHUOAttrs: OCC.wrapper.TDF.TDF_AttributeSequence
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetAllComponentSHUO(*args)

def XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args):
    """
    XCAFDoc_ShapeTool_GetSHUOUpperUsage(TDF_Label NextUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

    Returns the sequence of labels of SHUO attributes,
    which is upper_usage for this next_usage SHUO attribute
    (that indicated by label)
    NOTE: returns upper_usages only on one level (not recurse)
    NOTE: do not clear the sequence before filling

    :type NextUsageL: OCC.wrapper.TDF.TDF_Label
    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUOUpperUsage(*args)

def XCAFDoc_ShapeTool_GetSHUONextUsage(*args):
    """
    XCAFDoc_ShapeTool_GetSHUONextUsage(TDF_Label UpperUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

    Returns the sequence of labels of SHUO attributes,
    which is next_usage for this upper_usage SHUO attribute
    (that indicated by label)
    NOTE: returns next_usages only on one level (not recurse)
    NOTE: do not clear the sequence before filling

    :type UpperUsageL: OCC.wrapper.TDF.TDF_Label
    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_GetSHUONextUsage(*args)

def XCAFDoc_ShapeTool_FindSHUO(*args):
    """
    XCAFDoc_ShapeTool_FindSHUO(NCollection_Sequence_TDF_Label Labels, Handle_XCAFDoc_GraphNode theSHUOAttr) -> Standard_Boolean

    Searchs the SHUO by labels of components
    from upper_usage componet to next_usage
    Returns null attribute if no SHUO found

    :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
    :type theSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_FindSHUO(*args)

def XCAFDoc_ShapeTool_get_type_name(*args):
    """
    XCAFDoc_ShapeTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_get_type_name(*args)

def XCAFDoc_ShapeTool_get_type_descriptor(*args):
    """
    XCAFDoc_ShapeTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_ShapeTool_get_type_descriptor(*args)

class Handle_XCAFDoc_DimTolTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_DimTolTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_DimTolTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_DimTolTool self, XCAFDoc_DimTolTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_DimTolTool self, Handle_XCAFDoc_DimTolTool theHandle) -> Handle_XCAFDoc_DimTolTool
        assign(Handle_XCAFDoc_DimTolTool self, XCAFDoc_DimTolTool thePtr) -> Handle_XCAFDoc_DimTolTool
        assign(Handle_XCAFDoc_DimTolTool self, Handle_XCAFDoc_DimTolTool theHandle) -> Handle_XCAFDoc_DimTolTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_DimTolTool self) -> XCAFDoc_DimTolTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_DimTolTool self) -> XCAFDoc_DimTolTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_DimTolTool self) -> XCAFDoc_DimTolTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_DimTolTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_DimTolTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_DimTolTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_DimTolTool self, TDF_Label L) -> Handle_XCAFDoc_DimTolTool

        Creates (if not exist) DimTolTool attribute.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Set(self, *args)


    def GetID(self, *args):
        """
        Returns the standard GD&T tool GUID.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_DimTolTool self) -> TDF_Label

        Returns the label under which GD&T table is stored.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTolTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDimension(self, *args):
        """
        IsDimension(Handle_XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if the label belongs to a GD&T table and
        is a Dimension definition.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsDimension(self, *args)


    def GetDimensionLabels(self, *args):
        """
        GetDimensionLabels(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of Dimension labels currently stored
        in the GD&T table.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDimensionLabels(self, *args)


    def SetDimension(self, *args):
        """
        SetDimension(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theFirstLS, NCollection_Sequence_TDF_Label theSecondLS, TDF_Label theDimL)
        SetDimension(Handle_XCAFDoc_DimTolTool self, TDF_Label theFirstL, TDF_Label theSecondL, TDF_Label theDimL)
        SetDimension(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theDimL)

        Sets a dimension to the target label.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theDimL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetDimension(self, *args)


    def GetRefDimensionLabels(self, *args):
        """
        GetRefDimensionLabels(Handle_XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDimensions) -> Standard_Boolean

        Returns all Dimension labels defined for theShapeL.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDimensions: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetRefDimensionLabels(self, *args)


    def AddDimension(self, *args):
        """
        AddDimension(Handle_XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a dimension definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AddDimension(self, *args)


    def IsGeomTolerance(self, *args):
        """
        IsGeomTolerance(Handle_XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if the label belongs to the GD&T table and is a dimension tolerance.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsGeomTolerance(self, *args)


    def GetGeomToleranceLabels(self, *args):
        """
        GetGeomToleranceLabels(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of Tolerance labels currently stored in the GD&T table.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetGeomToleranceLabels(self, *args)


    def SetGeomTolerance(self, *args):
        """
        SetGeomTolerance(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theGeomTolL)
        SetGeomTolerance(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theL, TDF_Label theGeomTolL)

        Sets a geometry tolerance from theGeomTolL to sequence of labels theL.
        Checks if theGeomTolL is a geometry tolerance definition first.

        :type theL: OCC.wrapper.TDF.TDF_LabelSequence
        :type theGeomTolL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetGeomTolerance(self, *args)


    def GetRefGeomToleranceLabels(self, *args):
        """
        GetRefGeomToleranceLabels(Handle_XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDimTols) -> Standard_Boolean

        Returns all GeomTolerance labels defined for theShapeL.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDimTols: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetRefGeomToleranceLabels(self, *args)


    def AddGeomTolerance(self, *args):
        """
        AddGeomTolerance(Handle_XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a GeomTolerance definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AddGeomTolerance(self, *args)


    def IsDimTol(self, *args):
        """
        IsDimTol(Handle_XCAFDoc_DimTolTool self, TDF_Label theLab) -> Standard_Boolean

        Returns True if theLab belongs to the GD&T table and is a dmension tolerance.

        :type theLab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsDimTol(self, *args)


    def GetDimTolLabels(self, *args):
        """
        GetDimTolLabels(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of D&GTs currently stored in the GD&T table.

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDimTolLabels(self, *args)


    def FindDimTol(self, *args):
        """
        FindDimTol(Handle_XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, TDF_Label lab) -> Standard_Boolean
        FindDimTol(Handle_XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Finds a dimension tolerance in the GD&T table 
        sutisfying the specified kind, values, name and description
        and returns its label if found (or Null label else).

        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_FindDimTol(self, *args)


    def AddDimTol(self, *args):
        """
        AddDimTol(Handle_XCAFDoc_DimTolTool self, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Adds a a dimension tolerance definition with the specified
        kind, value, name and description to the GD&T table and returns its label.

        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AddDimTol(self, *args)


    def SetDimTol(self, *args):
        """
        SetDimTol(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theDimTolL)
        SetDimTol(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, Standard_Integer const theKind, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> TDF_Label

        Creates a dimension tolerance and sets it to theL label.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetDimTol(self, *args)


    def GetRefShapeLabel(self, *args):
        """
        GetRefShapeLabel(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, NCollection_Sequence_TDF_Label theShapeLFirst, NCollection_Sequence_TDF_Label theShapeLSecond) -> Standard_Boolean

        Gets all shape labels reffered by theL label of the GD&T table.
        Returns False if there are no shape labels added to the sequences.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theShapeLFirst: OCC.wrapper.TDF.TDF_LabelSequence
        :type theShapeLSecond: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetRefShapeLabel(self, *args)


    def GetDimTol(self, *args):
        """
        GetDimTol(Handle_XCAFDoc_DimTolTool self, TDF_Label theDimTolL, Handle_TColStd_HArray1OfReal theVal, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription) -> Standard_Boolean

        Returns dimension tolerance assigned to theDimTolL label.
        Returns False if no such dimension tolerance is assigned.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theKind: int
        :type theVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDimTol(self, *args)


    def IsDatum(self, *args):
        """
        IsDatum(Handle_XCAFDoc_DimTolTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to the GD&T table and
        is a Datum definition.

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsDatum(self, *args)


    def GetDatumLabels(self, *args):
        """
        GetDatumLabels(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of Datums currently stored
        in the GD&T table.

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDatumLabels(self, *args)


    def FindDatum(self, *args):
        """
        FindDatum(Handle_XCAFDoc_DimTolTool self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification, TDF_Label lab) -> Standard_Boolean

        Finds a datum sutisfying the specified name, description and
        identification and returns its label if found.

        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_FindDatum(self, *args)


    def AddDatum(self, *args):
        """
        AddDatum(Handle_XCAFDoc_DimTolTool self, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification) -> TDF_Label
        AddDatum(Handle_XCAFDoc_DimTolTool self) -> TDF_Label

        Adds a datum definition to the GD&T table and returns its label.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AddDatum(self, *args)


    def SetDatum(self, *args):
        """
        SetDatum(Handle_XCAFDoc_DimTolTool self, NCollection_Sequence_TDF_Label theShapeLabels, TDF_Label theDatumL)
        SetDatum(Handle_XCAFDoc_DimTolTool self, TDF_Label theL, TDF_Label theTolerL, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification)

        Sets a datum to theL label and binds it with theTolerL label.
        A datum with the specified name, description and identification
        is created if it isn't found in the GD&T table.

        :type theL: OCC.wrapper.TDF.TDF_Label
        :type theTolerL: OCC.wrapper.TDF.TDF_Label
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetDatum(self, *args)


    def SetDatumToGeomTol(self, *args):
        """
        SetDatumToGeomTol(Handle_XCAFDoc_DimTolTool self, TDF_Label theDatumL, TDF_Label theTolerL)

        Sets a datum from theDatumL label to theToletL label.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theTolerL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetDatumToGeomTol(self, *args)


    def GetDatum(self, *args):
        """
        GetDatum(Handle_XCAFDoc_DimTolTool self, TDF_Label theDatumL, Handle_TCollection_HAsciiString theName, Handle_TCollection_HAsciiString theDescription, Handle_TCollection_HAsciiString theIdentification) -> Standard_Boolean

        Returns datum assigned to theDatumL label.
        Returns False if no such datum is assigned.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDatum(self, *args)


    def GetDatumOfTolerLabels(self, *args):
        """
        GetDatumOfTolerLabels(Handle_XCAFDoc_DimTolTool self, TDF_Label theDimTolL, NCollection_Sequence_TDF_Label theDatums) -> Standard_Boolean

        Returns all Datum labels defined for theDimTolL label.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theDatums: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDatumOfTolerLabels(self, *args)


    def GetDatumWithObjectOfTolerLabels(self, *args):
        """
        GetDatumWithObjectOfTolerLabels(Handle_XCAFDoc_DimTolTool self, TDF_Label theDimTolL, NCollection_Sequence_TDF_Label theDatums) -> Standard_Boolean

        Returns all Datum labels with XCAFDimTolObjects_DatumObject defined for label theDimTolL.

        :type theDimTolL: OCC.wrapper.TDF.TDF_Label
        :type theDatums: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetDatumWithObjectOfTolerLabels(self, *args)


    def GetTolerOfDatumLabels(self, *args):
        """
        GetTolerOfDatumLabels(Handle_XCAFDoc_DimTolTool self, TDF_Label theDatumL, NCollection_Sequence_TDF_Label theTols) -> Standard_Boolean

        Returns all GeomToleranses labels defined for theDatumL label.

        :type theDatumL: OCC.wrapper.TDF.TDF_Label
        :type theTols: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetTolerOfDatumLabels(self, *args)


    def GetRefDatumLabel(self, *args):
        """
        GetRefDatumLabel(Handle_XCAFDoc_DimTolTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theDatum) -> Standard_Boolean

        Returns Datum label defined for theShapeL label.

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theDatum: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetRefDatumLabel(self, *args)


    def IsLocked(self, *args):
        """
        IsLocked(Handle_XCAFDoc_DimTolTool self, TDF_Label theViewL) -> Standard_Boolean

        Returns true if the given GDT is marked as locked.

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsLocked(self, *args)


    def Lock(self, *args):
        """
        Lock(Handle_XCAFDoc_DimTolTool self, TDF_Label theViewL)

        Mark the given GDT as locked.

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Lock(self, *args)


    def GetGDTPresentations(self, *args):
        """
        GetGDTPresentations(Handle_XCAFDoc_DimTolTool self, NCollection_IndexedDataMap< TDF_Label,TopoDS_Shape,TDF_LabelMapHasher > & theGDTLabelToShape)

        fill the map GDT label -> shape presentation 

        :type theGDTLabelToShape: OCC.wrapper.XCAFDoc.NCollection_IndexedDataMap_TDF_Label_TopoDS_Shape_TDF_LabelMapHasher

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetGDTPresentations(self, *args)


    def SetGDTPresentations(self, *args):
        """
        SetGDTPresentations(Handle_XCAFDoc_DimTolTool self, NCollection_IndexedDataMap< TDF_Label,TopoDS_Shape,TDF_LabelMapHasher > & theGDTLabelToPrs)

        Set shape presentation for GDT labels according to given map (theGDTLabelToPrs)
        theGDTLabelToPrsName map is an additional argument, can be used to set presentation names.
        If label is not in the theGDTLabelToPrsName map, the presentation name will be empty

        :type theGDTLabelToPrs: OCC.wrapper.XCAFDoc.NCollection_IndexedDataMap_TDF_Label_TopoDS_Shape_TDF_LabelMapHasher

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetGDTPresentations(self, *args)


    def Unlock(self, *args):
        """
        Unlock(Handle_XCAFDoc_DimTolTool self, TDF_Label theViewL)

        Unlock the given GDT.

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Unlock(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTolTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_DimTolTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_DimTolTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_DimTolTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTolTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTolTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_DimTolTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_DimTolTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_DimTolTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_DimTolTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_DimTolTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_DimTolTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_DimTolTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_DimTolTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_DimTolTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_DimTolTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_DimTolTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_DimTolTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_DimTolTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_DimTolTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_DimTolTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_DimTolTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_DimTolTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_DimTolTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_DimTolTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_DimTolTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_DimTolTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_DimTolTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_DimTolTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_DimTolTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_DimTolTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_DimTolTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_DimTolTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_DimTolTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_DimTolTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_DimTolTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_DimTolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_DimTolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_DimTolTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_DimTolTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_DimTolTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_DimTolTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_DimTolTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_DimTolTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_DimTolTool_swigregister = _XCAFDoc.Handle_XCAFDoc_DimTolTool_swigregister
Handle_XCAFDoc_DimTolTool_swigregister(Handle_XCAFDoc_DimTolTool)

def Handle_XCAFDoc_DimTolTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast(thing)
Handle_XCAFDoc_DimTolTool_DownCast = _XCAFDoc.Handle_XCAFDoc_DimTolTool_DownCast

class XCAFDoc_DocumentTool(TDF.TDF_Attribute):
    """
    Defines sections structure of an XDE document.
    attribute marking CAF document as being DECAF document.
    Creates the sections structure of the document.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_DocumentTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_DocumentTool(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label L, Standard_Boolean const IsAcces) -> Handle_XCAFDoc_DocumentTool

        Create (if not exist) DocumentTool attribute
        on 0.1 label if <IsAcces> is true, else
        on <L> label.
        This label will be returned by DocLabel();
        If the attribute is already set it won't be reset on
        <L> even if <IsAcces> is false.
        ColorTool and ShapeTool attributes are also set by this method.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type IsAcces: bool
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DocumentTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

    Set = staticmethod(Set)

    def IsXCAFDocument(*args):
        """
        IsXCAFDocument(Handle_TDocStd_Document Doc) -> Standard_Boolean

        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

    IsXCAFDocument = staticmethod(IsXCAFDocument)

    def DocLabel(*args):
        """
        DocLabel(TDF_Label acces) -> TDF_Label

        Returns label where the DocumentTool attribute is or
        0.1 if DocumentTool is not yet set.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

    DocLabel = staticmethod(DocLabel)

    def ShapesLabel(*args):
        """
        ShapesLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 1.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

    ShapesLabel = staticmethod(ShapesLabel)

    def ColorsLabel(*args):
        """
        ColorsLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 2.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

    ColorsLabel = staticmethod(ColorsLabel)

    def LayersLabel(*args):
        """
        LayersLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 3.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

    LayersLabel = staticmethod(LayersLabel)

    def DGTsLabel(*args):
        """
        DGTsLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 4.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

    DGTsLabel = staticmethod(DGTsLabel)

    def MaterialsLabel(*args):
        """
        MaterialsLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 5.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

    MaterialsLabel = staticmethod(MaterialsLabel)

    def ViewsLabel(*args):
        """
        ViewsLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 7.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ViewsLabel(*args)

    ViewsLabel = staticmethod(ViewsLabel)

    def ClippingPlanesLabel(*args):
        """
        ClippingPlanesLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 8.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlanesLabel(*args)

    ClippingPlanesLabel = staticmethod(ClippingPlanesLabel)

    def NotesLabel(*args):
        """
        NotesLabel(TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 9.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_NotesLabel(*args)

    NotesLabel = staticmethod(NotesLabel)

    def ShapeTool(*args):
        """
        ShapeTool(TDF_Label acces) -> Handle_XCAFDoc_ShapeTool

        Creates (if it does not exist) ShapeTool attribute on ShapesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

    ShapeTool = staticmethod(ShapeTool)

    def ColorTool(*args):
        """
        ColorTool(TDF_Label acces) -> Handle_XCAFDoc_ColorTool

        Creates (if it does not exist) ColorTool attribute on ColorsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

    ColorTool = staticmethod(ColorTool)

    def LayerTool(*args):
        """
        LayerTool(TDF_Label acces) -> Handle_XCAFDoc_LayerTool

        Creates (if it does not exist) LayerTool attribute on LayersLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

    LayerTool = staticmethod(LayerTool)

    def DimTolTool(*args):
        """
        DimTolTool(TDF_Label acces) -> Handle_XCAFDoc_DimTolTool

        Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

    DimTolTool = staticmethod(DimTolTool)

    def MaterialTool(*args):
        """
        MaterialTool(TDF_Label acces) -> Handle_XCAFDoc_MaterialTool

        Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

    MaterialTool = staticmethod(MaterialTool)

    def ViewTool(*args):
        """
        ViewTool(TDF_Label acces) -> Handle_XCAFDoc_ViewTool

        Creates (if it does not exist) ViewTool attribute on ViewsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ViewTool(*args)

    ViewTool = staticmethod(ViewTool)

    def ClippingPlaneTool(*args):
        """
        ClippingPlaneTool(TDF_Label acces) -> Handle_XCAFDoc_ClippingPlaneTool

        Creates (if it does not exist) ClippingPlaneTool attribute on ClippingPlanesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlaneTool(*args)

    ClippingPlaneTool = staticmethod(ClippingPlaneTool)

    def NotesTool(*args):
        """
        NotesTool(TDF_Label acces) -> Handle_XCAFDoc_NotesTool

        Creates (if it does not exist) NotesTool attribute on NotesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_NotesTool(*args)

    NotesTool = staticmethod(NotesTool)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_DocumentTool self) -> XCAFDoc_DocumentTool

        Defines sections structure of an XDE document.
        attribute marking CAF document as being DECAF document.
        Creates the sections structure of the document.
        """
        this = _XCAFDoc.new_XCAFDoc_DocumentTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(XCAFDoc_DocumentTool self)

        to be called when reading this attribute from file


        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Init(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_DocumentTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_DocumentTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_DocumentTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_DocumentTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_DocumentTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_DocumentTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DocumentTool
XCAFDoc_DocumentTool_swigregister = _XCAFDoc.XCAFDoc_DocumentTool_swigregister
XCAFDoc_DocumentTool_swigregister(XCAFDoc_DocumentTool)

def XCAFDoc_DocumentTool_GetID(*args):
    """
    XCAFDoc_DocumentTool_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_GetID(*args)

def XCAFDoc_DocumentTool_Set(*args):
    """
    XCAFDoc_DocumentTool_Set(TDF_Label L, Standard_Boolean const IsAcces) -> Handle_XCAFDoc_DocumentTool

    Create (if not exist) DocumentTool attribute
    on 0.1 label if <IsAcces> is true, else
    on <L> label.
    This label will be returned by DocLabel();
    If the attribute is already set it won't be reset on
    <L> even if <IsAcces> is false.
    ColorTool and ShapeTool attributes are also set by this method.

    :type L: OCC.wrapper.TDF.TDF_Label
    :type IsAcces: bool
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DocumentTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_Set(*args)

def XCAFDoc_DocumentTool_IsXCAFDocument(*args):
    """
    XCAFDoc_DocumentTool_IsXCAFDocument(Handle_TDocStd_Document Doc) -> Standard_Boolean

    :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_IsXCAFDocument(*args)

def XCAFDoc_DocumentTool_DocLabel(*args):
    """
    XCAFDoc_DocumentTool_DocLabel(TDF_Label acces) -> TDF_Label

    Returns label where the DocumentTool attribute is or
    0.1 if DocumentTool is not yet set.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DocLabel(*args)

def XCAFDoc_DocumentTool_ShapesLabel(*args):
    """
    XCAFDoc_DocumentTool_ShapesLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 1.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ShapesLabel(*args)

def XCAFDoc_DocumentTool_ColorsLabel(*args):
    """
    XCAFDoc_DocumentTool_ColorsLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 2.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ColorsLabel(*args)

def XCAFDoc_DocumentTool_LayersLabel(*args):
    """
    XCAFDoc_DocumentTool_LayersLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 3.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_LayersLabel(*args)

def XCAFDoc_DocumentTool_DGTsLabel(*args):
    """
    XCAFDoc_DocumentTool_DGTsLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 4.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DGTsLabel(*args)

def XCAFDoc_DocumentTool_MaterialsLabel(*args):
    """
    XCAFDoc_DocumentTool_MaterialsLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 5.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_MaterialsLabel(*args)

def XCAFDoc_DocumentTool_ViewsLabel(*args):
    """
    XCAFDoc_DocumentTool_ViewsLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 7.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ViewsLabel(*args)

def XCAFDoc_DocumentTool_ClippingPlanesLabel(*args):
    """
    XCAFDoc_DocumentTool_ClippingPlanesLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 8.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlanesLabel(*args)

def XCAFDoc_DocumentTool_NotesLabel(*args):
    """
    XCAFDoc_DocumentTool_NotesLabel(TDF_Label acces) -> TDF_Label

    Returns sub-label of DocLabel() with tag 9.

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDF.TDF_Label

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_NotesLabel(*args)

def XCAFDoc_DocumentTool_ShapeTool(*args):
    """
    XCAFDoc_DocumentTool_ShapeTool(TDF_Label acces) -> Handle_XCAFDoc_ShapeTool

    Creates (if it does not exist) ShapeTool attribute on ShapesLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ShapeTool(*args)

def XCAFDoc_DocumentTool_ColorTool(*args):
    """
    XCAFDoc_DocumentTool_ColorTool(TDF_Label acces) -> Handle_XCAFDoc_ColorTool

    Creates (if it does not exist) ColorTool attribute on ColorsLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ColorTool(*args)

def XCAFDoc_DocumentTool_LayerTool(*args):
    """
    XCAFDoc_DocumentTool_LayerTool(TDF_Label acces) -> Handle_XCAFDoc_LayerTool

    Creates (if it does not exist) LayerTool attribute on LayersLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_LayerTool(*args)

def XCAFDoc_DocumentTool_DimTolTool(*args):
    """
    XCAFDoc_DocumentTool_DimTolTool(TDF_Label acces) -> Handle_XCAFDoc_DimTolTool

    Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_DimTolTool(*args)

def XCAFDoc_DocumentTool_MaterialTool(*args):
    """
    XCAFDoc_DocumentTool_MaterialTool(TDF_Label acces) -> Handle_XCAFDoc_MaterialTool

    Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_MaterialTool(*args)

def XCAFDoc_DocumentTool_ViewTool(*args):
    """
    XCAFDoc_DocumentTool_ViewTool(TDF_Label acces) -> Handle_XCAFDoc_ViewTool

    Creates (if it does not exist) ViewTool attribute on ViewsLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ViewTool(*args)

def XCAFDoc_DocumentTool_ClippingPlaneTool(*args):
    """
    XCAFDoc_DocumentTool_ClippingPlaneTool(TDF_Label acces) -> Handle_XCAFDoc_ClippingPlaneTool

    Creates (if it does not exist) ClippingPlaneTool attribute on ClippingPlanesLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_ClippingPlaneTool(*args)

def XCAFDoc_DocumentTool_NotesTool(*args):
    """
    XCAFDoc_DocumentTool_NotesTool(TDF_Label acces) -> Handle_XCAFDoc_NotesTool

    Creates (if it does not exist) NotesTool attribute on NotesLabel().

    :type acces: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_NotesTool(*args)

def XCAFDoc_DocumentTool_get_type_name(*args):
    """
    XCAFDoc_DocumentTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_get_type_name(*args)

def XCAFDoc_DocumentTool_get_type_descriptor(*args):
    """
    XCAFDoc_DocumentTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_DocumentTool_get_type_descriptor(*args)

class Handle_XCAFDoc_MaterialTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_MaterialTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_MaterialTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_MaterialTool self, XCAFDoc_MaterialTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_MaterialTool self, Handle_XCAFDoc_MaterialTool theHandle) -> Handle_XCAFDoc_MaterialTool
        assign(Handle_XCAFDoc_MaterialTool self, XCAFDoc_MaterialTool thePtr) -> Handle_XCAFDoc_MaterialTool
        assign(Handle_XCAFDoc_MaterialTool self, Handle_XCAFDoc_MaterialTool theHandle) -> Handle_XCAFDoc_MaterialTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_MaterialTool self) -> XCAFDoc_MaterialTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_MaterialTool self) -> XCAFDoc_MaterialTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_MaterialTool self) -> XCAFDoc_MaterialTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_MaterialTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_MaterialTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_MaterialTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_MaterialTool self, TDF_Label L) -> Handle_XCAFDoc_MaterialTool

        Creates (if not exist) MaterialTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Set(self, *args)


    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_MaterialTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_MaterialTool self) -> TDF_Label

        returns the label under which colors are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.Handle_XCAFDoc_MaterialTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMaterial(self, *args):
        """
        IsMaterial(Handle_XCAFDoc_MaterialTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a material table and
        is a Material definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsMaterial(self, *args)


    def GetMaterialLabels(self, *args):
        """
        GetMaterialLabels(Handle_XCAFDoc_MaterialTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of materials currently stored
        in the material table

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_GetMaterialLabels(self, *args)


    def AddMaterial(self, *args):
        """
        AddMaterial(Handle_XCAFDoc_MaterialTool self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> TDF_Label

        Adds a Material definition to a table and returns its label

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AddMaterial(self, *args)


    def SetMaterial(self, *args):
        """
        SetMaterial(Handle_XCAFDoc_MaterialTool self, TDF_Label L, TDF_Label MatL)
        SetMaterial(Handle_XCAFDoc_MaterialTool self, TDF_Label L, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType)

        Sets a link with GUID
        Adds a Material as necessary

        :type L: OCC.wrapper.TDF.TDF_Label
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_SetMaterial(self, *args)


    def GetMaterial(self, *args):
        """
        GetMaterial(Handle_XCAFDoc_MaterialTool self, TDF_Label MatL, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> Standard_Boolean

        Returns Material assigned to <MatL>
        Returns False if no such Material is assigned

        :type MatL: OCC.wrapper.TDF.TDF_Label
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_GetMaterial(self, *args)


    def GetDensityForShape(self, *args):
        """
        GetDensityForShape(Handle_XCAFDoc_MaterialTool self, TDF_Label ShapeL) -> Standard_Real

        Find referred material and return density from it
        if no material --> return 0

        :type ShapeL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_GetDensityForShape(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_MaterialTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_MaterialTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_MaterialTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_MaterialTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_MaterialTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_MaterialTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_MaterialTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_MaterialTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_MaterialTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_MaterialTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_MaterialTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_MaterialTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_MaterialTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_MaterialTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_MaterialTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_MaterialTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_MaterialTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_MaterialTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_MaterialTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_MaterialTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_MaterialTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_MaterialTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_MaterialTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_MaterialTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_MaterialTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_MaterialTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_MaterialTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_MaterialTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_MaterialTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_MaterialTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_MaterialTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_MaterialTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_MaterialTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_MaterialTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_MaterialTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_MaterialTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_MaterialTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_MaterialTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_MaterialTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_MaterialTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_MaterialTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_MaterialTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_MaterialTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_MaterialTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_MaterialTool_swigregister = _XCAFDoc.Handle_XCAFDoc_MaterialTool_swigregister
Handle_XCAFDoc_MaterialTool_swigregister(Handle_XCAFDoc_MaterialTool)

def Handle_XCAFDoc_MaterialTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast(thing)
Handle_XCAFDoc_MaterialTool_DownCast = _XCAFDoc.Handle_XCAFDoc_MaterialTool_DownCast

class Handle_XCAFDoc_AssemblyItemRef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_AssemblyItemRef self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_AssemblyItemRef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_AssemblyItemRef self, XCAFDoc_AssemblyItemRef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_AssemblyItemRef self, Handle_XCAFDoc_AssemblyItemRef theHandle) -> Handle_XCAFDoc_AssemblyItemRef
        assign(Handle_XCAFDoc_AssemblyItemRef self, XCAFDoc_AssemblyItemRef thePtr) -> Handle_XCAFDoc_AssemblyItemRef
        assign(Handle_XCAFDoc_AssemblyItemRef self, Handle_XCAFDoc_AssemblyItemRef theHandle) -> Handle_XCAFDoc_AssemblyItemRef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_AssemblyItemRef self) -> XCAFDoc_AssemblyItemRef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_AssemblyItemRef self) -> XCAFDoc_AssemblyItemRef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_AssemblyItemRef self) -> XCAFDoc_AssemblyItemRef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_AssemblyItemRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_AssemblyItemRef

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_AssemblyItemRef self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_AssemblyItemRef self, TDF_Label theLabel) -> Handle_XCAFDoc_AssemblyItemRef

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Get(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_AssemblyItemRef self, TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId) -> Handle_XCAFDoc_AssemblyItemRef
        Set(Handle_XCAFDoc_AssemblyItemRef self, TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef
        Set(Handle_XCAFDoc_AssemblyItemRef self, TDF_Label theLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer const theShapeIndex) -> Handle_XCAFDoc_AssemblyItemRef

        Create (if not exist) a reference to an assembly item's subshape.
        \param [in] theLabel      - label to add the attribute.
        \param [in] theItemId     - assembly item ID.
        \param [in] theShapeIndex - assembly item's subshape index.
        @return A handle to the attribute instance.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theShapeIndex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Set(self, *args)


    def IsOrphan(self, *args):
        """
        IsOrphan(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks if the reference points to a really existing item in XDE document.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsOrphan(self, *args)


    def HasExtraRef(self, *args):
        """
        HasExtraRef(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks if the reference points on an item's shapeindex or attribute.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_HasExtraRef(self, *args)


    def IsGUID(self, *args):
        """
        IsGUID(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks is the reference points to an item's attribute.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsGUID(self, *args)


    def IsSubshapeIndex(self, *args):
        """
        IsSubshapeIndex(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Checks is the reference points to an item's subshape.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsSubshapeIndex(self, *args)


    def GetGUID(self, *args):
        """
        GetGUID(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_GUID

        Returns the assembly item's attribute that the reference points to.
        If the reference doesn't point to an attribute, returns an empty GUID.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_GetGUID(self, *args)


    def GetSubshapeIndex(self, *args):
        """
        GetSubshapeIndex(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Returns the assembly item's subshape that the reference points to.
        If the reference doesn't point to a subshape, returns 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_GetSubshapeIndex(self, *args)


    def GetItem(self, *args):
        """
        Returns the assembly item ID that the reference points to.

        :rtype: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId

        """
        res = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_GetItem(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetItem(self, *args):
        """
        SetItem(Handle_XCAFDoc_AssemblyItemRef self, XCAFDoc_AssemblyItemId theItemId)
        SetItem(Handle_XCAFDoc_AssemblyItemRef self, NCollection_List_TCollection_AsciiString thePath)
        SetItem(Handle_XCAFDoc_AssemblyItemRef self, TCollection_AsciiString theString)

        Sets the assembly item ID from a formatted path 
        that the reference points to.
        Extra reference data (if any) will be cleared.

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_SetItem(self, *args)


    def SetGUID(self, *args):
        """
        SetGUID(Handle_XCAFDoc_AssemblyItemRef self, Standard_GUID theAttrGUID)

        Sets the assembly item's label attribute that the reference points to.
        The base assembly item will not change.

        :type theAttrGUID: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_SetGUID(self, *args)


    def SetSubshapeIndex(self, *args):
        """
        SetSubshapeIndex(Handle_XCAFDoc_AssemblyItemRef self, Standard_Integer theShapeIndex)

        Sets the assembly item's subshape that the reference points to.
        The base assembly item will not change.

        :type theShapeIndex: int

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_SetSubshapeIndex(self, *args)


    def ClearExtraRef(self, *args):
        """
        ClearExtraRef(Handle_XCAFDoc_AssemblyItemRef self)

        Reverts the reference to empty state.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_ClearExtraRef(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_AssemblyItemRef self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Dump(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_AssemblyItemRef self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_AssemblyItemRef self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_AssemblyItemRef self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_AssemblyItemRef self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_AssemblyItemRef self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_AssemblyItemRef self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_AssemblyItemRef self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_AssemblyItemRef self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_AssemblyItemRef self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_AssemblyItemRef self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_AssemblyItemRef self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_AssemblyItemRef self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_AssemblyItemRef self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_AssemblyItemRef self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_AssemblyItemRef self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_AssemblyItemRef self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_AssemblyItemRef self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_AssemblyItemRef self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_AssemblyItemRef self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_AssemblyItemRef self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_AssemblyItemRef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_AssemblyItemRef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_AssemblyItemRef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_AssemblyItemRef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_AssemblyItemRef self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_AssemblyItemRef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DecrementRefCounter(self, *args)

Handle_XCAFDoc_AssemblyItemRef_swigregister = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_swigregister
Handle_XCAFDoc_AssemblyItemRef_swigregister(Handle_XCAFDoc_AssemblyItemRef)

def Handle_XCAFDoc_AssemblyItemRef_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DownCast(thing)
Handle_XCAFDoc_AssemblyItemRef_DownCast = _XCAFDoc.Handle_XCAFDoc_AssemblyItemRef_DownCast

class XCAFDoc_View(TDF.TDF_Attribute):
    """Attribute to store view"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_View
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_View(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_View self) -> XCAFDoc_View

        Attribute to store view
        """
        this = _XCAFDoc.new_XCAFDoc_View(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_View_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label theLabel) -> Handle_XCAFDoc_View

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_View

        """
        return _XCAFDoc.XCAFDoc_View_Set(*args)

    Set = staticmethod(Set)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_View_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_View self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_View_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_View self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_View_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_View self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_View_Paste(self, *args)


    def SetObject(self, *args):
        """
        SetObject(XCAFDoc_View self, Handle_XCAFView_Object theViewObject)

        Updates parent's label and its sub-labels with data taken from theViewObject.
        Old data associated with the label will be lost.

        :type theViewObject: OCC.wrapper.XCAFView.Handle_XCAFView_Object

        """
        return _XCAFDoc.XCAFDoc_View_SetObject(self, *args)


    def GetObject(self, *args):
        """
        GetObject(XCAFDoc_View self) -> Handle_XCAFView_Object

        Returns view object data taken from the paren's label and its sub-labels.

        :rtype: OCC.wrapper.XCAFView.Handle_XCAFView_Object

        """
        return _XCAFDoc.XCAFDoc_View_GetObject(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_View_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_View_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_View_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_View
XCAFDoc_View_swigregister = _XCAFDoc.XCAFDoc_View_swigregister
XCAFDoc_View_swigregister(XCAFDoc_View)

def XCAFDoc_View_GetID(*args):
    """
    XCAFDoc_View_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_View_GetID(*args)

def XCAFDoc_View_Set(*args):
    """
    XCAFDoc_View_Set(TDF_Label theLabel) -> Handle_XCAFDoc_View

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_View

    """
    return _XCAFDoc.XCAFDoc_View_Set(*args)

def XCAFDoc_View_get_type_name(*args):
    """
    XCAFDoc_View_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_View_get_type_name(*args)

def XCAFDoc_View_get_type_descriptor(*args):
    """
    XCAFDoc_View_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_View_get_type_descriptor(*args)

class XCAFDoc_Editor(object):
    """Tool for edit structure of document."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Expand(*args):
        """
        Expand(TDF_Label Doc, TDF_Label Shape, Standard_Boolean const recursively) -> Standard_Boolean
        Expand(TDF_Label Doc, Standard_Boolean const recursively) -> Standard_Boolean

        Convert all compounds in Doc to assembly

        :type Doc: OCC.wrapper.TDF.TDF_Label
        :type recursively: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Editor_Expand(*args)

    Expand = staticmethod(Expand)

    def __init__(self):
        """Tool for edit structure of document."""
        this = _XCAFDoc.new_XCAFDoc_Editor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Editor
XCAFDoc_Editor_swigregister = _XCAFDoc.XCAFDoc_Editor_swigregister
XCAFDoc_Editor_swigregister(XCAFDoc_Editor)

def XCAFDoc_Editor_Expand(*args):
    """
    Expand(TDF_Label Doc, TDF_Label Shape, Standard_Boolean const recursively) -> Standard_Boolean
    XCAFDoc_Editor_Expand(TDF_Label Doc, Standard_Boolean const recursively) -> Standard_Boolean

    Convert all compounds in Doc to assembly

    :type Doc: OCC.wrapper.TDF.TDF_Label
    :type recursively: bool
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_Editor_Expand(*args)

class Handle_XCAFDoc_GeomTolerance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_GeomTolerance self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_GeomTolerance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_GeomTolerance self, XCAFDoc_GeomTolerance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_GeomTolerance self, Handle_XCAFDoc_GeomTolerance theHandle) -> Handle_XCAFDoc_GeomTolerance
        assign(Handle_XCAFDoc_GeomTolerance self, XCAFDoc_GeomTolerance thePtr) -> Handle_XCAFDoc_GeomTolerance
        assign(Handle_XCAFDoc_GeomTolerance self, Handle_XCAFDoc_GeomTolerance theHandle) -> Handle_XCAFDoc_GeomTolerance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_GeomTolerance self) -> XCAFDoc_GeomTolerance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_GeomTolerance self) -> XCAFDoc_GeomTolerance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_GeomTolerance self) -> XCAFDoc_GeomTolerance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_GeomTolerance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_GeomTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_GeomTolerance_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_GeomTolerance

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_GeomTolerance self, TDF_Label theLabel) -> Handle_XCAFDoc_GeomTolerance

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GeomTolerance

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Set(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_GeomTolerance self, Handle_XCAFDimTolObjects_GeomToleranceObject theGeomToleranceObject)

        Updates parent's label and its sub-labels with data taken from theGeomToleranceObject.
        Old data associated with the label will be lost.

        :type theGeomToleranceObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_GeomToleranceObject

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_SetObject(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_GeomTolerance self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_GeomTolerance self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_GeomTolerance self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_GeomTolerance self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_GeomTolerance self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_GeomTolerance self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_GeomTolerance self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_GeomTolerance self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_GeomTolerance self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_GeomTolerance self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_GeomTolerance self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_GeomTolerance self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_GeomTolerance self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_GeomTolerance self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_GeomTolerance self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_GeomTolerance self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_GeomTolerance self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_GeomTolerance self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_GeomTolerance self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_GeomTolerance self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_GeomTolerance self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_GeomTolerance self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_GeomTolerance self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_GeomTolerance self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_GeomTolerance self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_GeomTolerance self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_GeomTolerance self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_GeomTolerance self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_GeomTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_GeomTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_GeomTolerance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_GeomTolerance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_GeomTolerance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_GeomTolerance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_GeomTolerance self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_GeomTolerance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DecrementRefCounter(self, *args)

Handle_XCAFDoc_GeomTolerance_swigregister = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_swigregister
Handle_XCAFDoc_GeomTolerance_swigregister(Handle_XCAFDoc_GeomTolerance)

def Handle_XCAFDoc_GeomTolerance_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DownCast(thing)
Handle_XCAFDoc_GeomTolerance_DownCast = _XCAFDoc.Handle_XCAFDoc_GeomTolerance_DownCast

class Handle_XCAFDoc_Material(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Material self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Material self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Material self, XCAFDoc_Material thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Material self, Handle_XCAFDoc_Material theHandle) -> Handle_XCAFDoc_Material
        assign(Handle_XCAFDoc_Material self, XCAFDoc_Material thePtr) -> Handle_XCAFDoc_Material
        assign(Handle_XCAFDoc_Material self, Handle_XCAFDoc_Material theHandle) -> Handle_XCAFDoc_Material

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Material self) -> XCAFDoc_Material

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Material self) -> XCAFDoc_Material

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Material___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Material self) -> XCAFDoc_Material

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Material___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Material___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Material___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Material(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Material_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Material

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Material_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Material self, TDF_Label label, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType) -> Handle_XCAFDoc_Material
        Set(Handle_XCAFDoc_Material self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Standard_Real const aDensity, Handle_TCollection_HAsciiString aDensName, Handle_TCollection_HAsciiString aDensValType)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensity: float
        :type aDensName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDensValType: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Set(self, *args)


    def GetName(self, *args):
        """
        GetName(Handle_XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(Handle_XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetDescription(self, *args)


    def GetDensity(self, *args):
        """
        GetDensity(Handle_XCAFDoc_Material self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetDensity(self, *args)


    def GetDensName(self, *args):
        """
        GetDensName(Handle_XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetDensName(self, *args)


    def GetDensValType(self, *args):
        """
        GetDensValType(Handle_XCAFDoc_Material self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetDensValType(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Material_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Material self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Material self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Material self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Material self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Material_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Material_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Material self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Material self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Material self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Material self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Material self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Material self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Material self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Material self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Material self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Material self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Material self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Material self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Material self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Material self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Material self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Material self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Material self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Material self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Material self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Material self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Material self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Material self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Material self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Material self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Material self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Material self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Material self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Material self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Material self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Material self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Material self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Material___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Material self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Material self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Material self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Material self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Material self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Material self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Material self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Material self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Material self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Material self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Material_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Material self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Material_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Material_swigregister = _XCAFDoc.Handle_XCAFDoc_Material_swigregister
Handle_XCAFDoc_Material_swigregister(Handle_XCAFDoc_Material)

def Handle_XCAFDoc_Material_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Material_DownCast(thing)
Handle_XCAFDoc_Material_DownCast = _XCAFDoc.Handle_XCAFDoc_Material_DownCast

class XCAFDoc_Location(TDF.TDF_Attribute):
    """attribute to store TopLoc_Location"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Location
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Location(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Location self) -> XCAFDoc_Location

        class methods
        =============


        """
        this = _XCAFDoc.new_XCAFDoc_Location(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Location_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_Location self, TDF_Label label, TopLoc_Location Loc) -> Handle_XCAFDoc_Location
        Set(XCAFDoc_Location self, TopLoc_Location Loc)

        :type Loc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.XCAFDoc_Location_Set(self, *args)


    def Get(self, *args):
        """
        Returns True if there is a reference on the same label

        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        res = _XCAFDoc.XCAFDoc_Location_Get(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Location_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_Location self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Location_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Location self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Location_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Location self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Location_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Location_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Location_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Location_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Location
XCAFDoc_Location_swigregister = _XCAFDoc.XCAFDoc_Location_swigregister
XCAFDoc_Location_swigregister(XCAFDoc_Location)

def XCAFDoc_Location_GetID(*args):
    """
    XCAFDoc_Location_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Location_GetID(*args)

def XCAFDoc_Location_get_type_name(*args):
    """
    XCAFDoc_Location_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Location_get_type_name(*args)

def XCAFDoc_Location_get_type_descriptor(*args):
    """
    XCAFDoc_Location_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Location_get_type_descriptor(*args)

class XCAFDoc_Area(TDF.TDF_Attribute):
    """attribute to store area"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Area
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Area(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Area self) -> XCAFDoc_Area

        class methods
        =============


        """
        this = _XCAFDoc.new_XCAFDoc_Area(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Area_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Area_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(*args):
        """
        Set(Standard_Real const vol)
        Set(TDF_Label label, Standard_Real const area) -> Handle_XCAFDoc_Area

        Find, or create, an Area attribute and set its value

        :type label: OCC.wrapper.TDF.TDF_Label
        :type area: float
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Area

        """
        return _XCAFDoc.XCAFDoc_Area_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get() -> Standard_Real
        Get(TDF_Label label) -> Standard_Boolean

        Returns volume of area as argument and succes status
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type area: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Area_Get(*args)

    Get = staticmethod(Get)

    def Restore(self, *args):
        """
        Restore(XCAFDoc_Area self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Area_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Area self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Area_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Area self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Area_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_Area self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_Area_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Area_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Area_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Area_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Area
XCAFDoc_Area_swigregister = _XCAFDoc.XCAFDoc_Area_swigregister
XCAFDoc_Area_swigregister(XCAFDoc_Area)

def XCAFDoc_Area_GetID(*args):
    """
    XCAFDoc_Area_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Area_GetID(*args)

def XCAFDoc_Area_Set(*args):
    """
    Set(Standard_Real const vol)
    XCAFDoc_Area_Set(TDF_Label label, Standard_Real const area) -> Handle_XCAFDoc_Area

    Find, or create, an Area attribute and set its value

    :type label: OCC.wrapper.TDF.TDF_Label
    :type area: float
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Area

    """
    return _XCAFDoc.XCAFDoc_Area_Set(*args)

def XCAFDoc_Area_Get(*args):
    """
    Get() -> Standard_Real
    XCAFDoc_Area_Get(TDF_Label label) -> Standard_Boolean

    Returns volume of area as argument and succes status
    returns false if no such attribute at the <label>

    :type label: OCC.wrapper.TDF.TDF_Label
    :type area: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_Area_Get(*args)

def XCAFDoc_Area_get_type_name(*args):
    """
    XCAFDoc_Area_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Area_get_type_name(*args)

def XCAFDoc_Area_get_type_descriptor(*args):
    """
    XCAFDoc_Area_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Area_get_type_descriptor(*args)

class XCAFDoc_Volume(TDF.TDF_Attribute):
    """attribute to store volume"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_Volume
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_Volume(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_Volume self) -> XCAFDoc_Volume

        class methods
        =============


        """
        this = _XCAFDoc.new_XCAFDoc_Volume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_Volume_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(*args):
        """
        Set(Standard_Real const vol)
        Set(TDF_Label label, Standard_Real const vol) -> Handle_XCAFDoc_Volume

        Find, or create, an Volume attribute and set its value

        :type label: OCC.wrapper.TDF.TDF_Label
        :type vol: float
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Volume

        """
        return _XCAFDoc.XCAFDoc_Volume_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get() -> Standard_Real
        Get(TDF_Label label) -> Standard_Boolean

        Returns volume as argument
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type vol: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_Volume_Get(*args)

    Get = staticmethod(Get)

    def Restore(self, *args):
        """
        Restore(XCAFDoc_Volume self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Volume_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_Volume self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_Volume_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_Volume self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_Volume_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_Volume self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_Volume_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_Volume_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_Volume_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_Volume_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_Volume
XCAFDoc_Volume_swigregister = _XCAFDoc.XCAFDoc_Volume_swigregister
XCAFDoc_Volume_swigregister(XCAFDoc_Volume)

def XCAFDoc_Volume_GetID(*args):
    """
    XCAFDoc_Volume_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_Volume_GetID(*args)

def XCAFDoc_Volume_Set(*args):
    """
    Set(Standard_Real const vol)
    XCAFDoc_Volume_Set(TDF_Label label, Standard_Real const vol) -> Handle_XCAFDoc_Volume

    Find, or create, an Volume attribute and set its value

    :type label: OCC.wrapper.TDF.TDF_Label
    :type vol: float
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Volume

    """
    return _XCAFDoc.XCAFDoc_Volume_Set(*args)

def XCAFDoc_Volume_Get(*args):
    """
    Get() -> Standard_Real
    XCAFDoc_Volume_Get(TDF_Label label) -> Standard_Boolean

    Returns volume as argument
    returns false if no such attribute at the <label>

    :type label: OCC.wrapper.TDF.TDF_Label
    :type vol: float
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XCAFDoc.XCAFDoc_Volume_Get(*args)

def XCAFDoc_Volume_get_type_name(*args):
    """
    XCAFDoc_Volume_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_Volume_get_type_name(*args)

def XCAFDoc_Volume_get_type_descriptor(*args):
    """
    XCAFDoc_Volume_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_Volume_get_type_descriptor(*args)

class Handle_XCAFDoc_NoteBalloon(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_NoteBalloon self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_NoteBalloon self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_NoteBalloon self, XCAFDoc_NoteBalloon thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_NoteBalloon self, Handle_XCAFDoc_NoteBalloon theHandle) -> Handle_XCAFDoc_NoteBalloon
        assign(Handle_XCAFDoc_NoteBalloon self, XCAFDoc_NoteBalloon thePtr) -> Handle_XCAFDoc_NoteBalloon
        assign(Handle_XCAFDoc_NoteBalloon self, Handle_XCAFDoc_NoteBalloon theHandle) -> Handle_XCAFDoc_NoteBalloon

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_NoteBalloon self) -> XCAFDoc_NoteBalloon

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_NoteBalloon self) -> XCAFDoc_NoteBalloon

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_NoteBalloon self) -> XCAFDoc_NoteBalloon

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_NoteBalloon___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_NoteBalloon(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_NoteBalloon_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_NoteBalloon

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_NoteBalloon self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_NoteBalloon self, TDF_Label theLabel) -> Handle_XCAFDoc_NoteBalloon

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Get(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_NoteBalloon self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_NoteBalloon

        Create (if not exist) a comment note on the given label.
        \param [in] theLabel     - note label.
        \param [in] theUserName  - the name of the user, who created the note.
        \param [in] theTimeStamp - creation timestamp of the note.
        \param [in] theComment   - comment text.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBalloon

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_NewEmpty(self, *args)


    def Comment(self, *args):
        """
        Returns the comment text.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Comment(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_NoteBalloon self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Dump(self, *args)


    def IsMine(self, *args):
        """
        IsMine(Handle_XCAFDoc_NoteBalloon self, TDF_Label theLabel) -> Standard_Boolean

        Checks if the given label represents a note.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsMine(self, *args)


    def UserName(self, *args):
        """
        Returns the user name, who created the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_UserName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TimeStamp(self, *args):
        """
        Returns the timestamp of the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_TimeStamp(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOrphan(self, *args):
        """
        IsOrphan(Handle_XCAFDoc_NoteBalloon self) -> Standard_Boolean

        Checks if the note isn't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsOrphan(self, *args)


    def GetObject(self, *args):
        """
        GetObject(Handle_XCAFDoc_NoteBalloon self) -> Handle_XCAFNoteObjects_NoteObject

        Returns auxiliary data object

        :rtype: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_GetObject(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_NoteBalloon self, Handle_XCAFNoteObjects_NoteObject theObject)

        Updates auxiliary data

        :type theObject: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_SetObject(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_NoteBalloon self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_NoteBalloon self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_NoteBalloon self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_NoteBalloon self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_NoteBalloon self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_NoteBalloon self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_NoteBalloon self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_NoteBalloon self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_NoteBalloon self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_NoteBalloon self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_NoteBalloon self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_NoteBalloon self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_NoteBalloon self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_NoteBalloon self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_NoteBalloon self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_NoteBalloon self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_NoteBalloon self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_NoteBalloon self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_NoteBalloon self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_NoteBalloon self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_NoteBalloon self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_NoteBalloon self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_NoteBalloon self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_NoteBalloon self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_NoteBalloon self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_NoteBalloon self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_NoteBalloon self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_NoteBalloon self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_NoteBalloon self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_NoteBalloon self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_NoteBalloon self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_NoteBalloon self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_NoteBalloon self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_NoteBalloon self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DecrementRefCounter(self, *args)

Handle_XCAFDoc_NoteBalloon_swigregister = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_swigregister
Handle_XCAFDoc_NoteBalloon_swigregister(Handle_XCAFDoc_NoteBalloon)

def Handle_XCAFDoc_NoteBalloon_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DownCast(thing)
Handle_XCAFDoc_NoteBalloon_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteBalloon_DownCast

class Handle_XCAFDoc_Color(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Color self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Color self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Color self, XCAFDoc_Color thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Color self, Handle_XCAFDoc_Color theHandle) -> Handle_XCAFDoc_Color
        assign(Handle_XCAFDoc_Color self, XCAFDoc_Color thePtr) -> Handle_XCAFDoc_Color
        assign(Handle_XCAFDoc_Color self, Handle_XCAFDoc_Color theHandle) -> Handle_XCAFDoc_Color

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Color self) -> XCAFDoc_Color

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Color self) -> XCAFDoc_Color

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Color___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Color self) -> XCAFDoc_Color

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Color___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Color___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Color___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Color_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Color

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Color self, TDF_Label label, Quantity_Color C) -> Handle_XCAFDoc_Color
        Set(Handle_XCAFDoc_Color self, TDF_Label label, Quantity_ColorRGBA C) -> Handle_XCAFDoc_Color
        Set(Handle_XCAFDoc_Color self, TDF_Label label, Quantity_NameOfColor const C) -> Handle_XCAFDoc_Color
        Set(Handle_XCAFDoc_Color self, TDF_Label label, Standard_Real const R, Standard_Real const G, Standard_Real const B, Standard_Real const alpha=1.0) -> Handle_XCAFDoc_Color
        Set(Handle_XCAFDoc_Color self, Quantity_Color C)
        Set(Handle_XCAFDoc_Color self, Quantity_ColorRGBA C)
        Set(Handle_XCAFDoc_Color self, Quantity_NameOfColor const C)
        Set(Handle_XCAFDoc_Color self, Standard_Real const R, Standard_Real const G, Standard_Real const B, Standard_Real const alpha=1.0)

        :type R: float
        :type G: float
        :type B: float
        :type alpha: float

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Set(self, *args)


    def GetColor(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_GetColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetColorRGBA(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_GetColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetNOC(self, *args):
        """
        GetNOC(Handle_XCAFDoc_Color self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_GetNOC(self, *args)


    def GetRGB(self, *args):
        """
        GetRGB(Handle_XCAFDoc_Color self)

        :type R: float
        :type G: float
        :type B: float

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_GetRGB(self, *args)


    def GetAlpha(self, *args):
        """
        GetAlpha(Handle_XCAFDoc_Color self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_GetAlpha(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Color self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Color self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Color self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Color self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Color_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Color self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Color self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Color self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Color self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Color self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Color self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Color self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Color self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Color self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Color self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Color self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Color self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Color self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Color self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Color self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Color self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Color self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Color self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Color self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Color self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Color self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Color self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Color self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Color self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Color self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Color self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Color self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Color self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Color self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Color self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Color self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Color___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Color self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Color self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Color self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Color self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Color self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Color self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Color self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Color self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Color self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Color self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Color_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Color self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Color_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Color_swigregister = _XCAFDoc.Handle_XCAFDoc_Color_swigregister
Handle_XCAFDoc_Color_swigregister(Handle_XCAFDoc_Color)

def Handle_XCAFDoc_Color_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Color_DownCast(thing)
Handle_XCAFDoc_Color_DownCast = _XCAFDoc.Handle_XCAFDoc_Color_DownCast

class Handle_XCAFDoc_LayerTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_LayerTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_LayerTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_LayerTool self, XCAFDoc_LayerTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_LayerTool self, Handle_XCAFDoc_LayerTool theHandle) -> Handle_XCAFDoc_LayerTool
        assign(Handle_XCAFDoc_LayerTool self, XCAFDoc_LayerTool thePtr) -> Handle_XCAFDoc_LayerTool
        assign(Handle_XCAFDoc_LayerTool self, Handle_XCAFDoc_LayerTool theHandle) -> Handle_XCAFDoc_LayerTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_LayerTool self) -> XCAFDoc_LayerTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_LayerTool self) -> XCAFDoc_LayerTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_LayerTool self) -> XCAFDoc_LayerTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_LayerTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_LayerTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_LayerTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_LayerTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_LayerTool self, TDF_Label L) -> Handle_XCAFDoc_LayerTool

        Creates (if not exist) LayerTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Set(self, *args)


    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_LayerTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_LayerTool self) -> TDF_Label

        returns the label under which Layers are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.Handle_XCAFDoc_LayerTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsLayer(self, *args):
        """
        IsLayer(Handle_XCAFDoc_LayerTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a Layertable and
        is a Layer definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsLayer(self, *args)


    def GetLayer(self, *args):
        """
        GetLayer(Handle_XCAFDoc_LayerTool self, TDF_Label lab, TCollection_ExtendedString aLayer) -> Standard_Boolean

        Returns Layer defined by label lab
        Returns False if the label is not in Layertable
        or does not define a Layer

        :type lab: OCC.wrapper.TDF.TDF_Label
        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_GetLayer(self, *args)


    def FindLayer(self, *args):
        """
        FindLayer(Handle_XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer, TDF_Label lab) -> Standard_Boolean
        FindLayer(Handle_XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer) -> TDF_Label

        Finds a Layer definition in a Layertable and returns
        its label if found (or Null label else)

        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_FindLayer(self, *args)


    def AddLayer(self, *args):
        """
        AddLayer(Handle_XCAFDoc_LayerTool self, TCollection_ExtendedString aLayer) -> TDF_Label

        Adds a Layer definition to a Layertable and returns
        its label (returns existing label if the same Layer
        is already defined)

        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AddLayer(self, *args)


    def RemoveLayer(self, *args):
        """
        RemoveLayer(Handle_XCAFDoc_LayerTool self, TDF_Label lab)

        Removes Layer from the Layertable

        :type lab: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_RemoveLayer(self, *args)


    def GetLayerLabels(self, *args):
        """
        GetLayerLabels(Handle_XCAFDoc_LayerTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of Layers currently stored
        in the Layertable

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_GetLayerLabels(self, *args)


    def SetLayer(self, *args):
        """
        SetLayer(Handle_XCAFDoc_LayerTool self, TDF_Label L, TDF_Label LayerL, Standard_Boolean const shapeInOneLayer)
        SetLayer(Handle_XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer, Standard_Boolean const shapeInOneLayer)
        SetLayer(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label LayerL, Standard_Boolean const shapeInOneLayer) -> Standard_Boolean
        SetLayer(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer, Standard_Boolean const shapeInOneLayer) -> Standard_Boolean

        Sets a link from label that containig shape <Sh>
        with layer <aLayer>. Add <aLayer> to LayerTable if nessesery.
        optional parametr <shapeInOneLayer> show could shape be
        in number of layers or only in one.
        return FALSE if no such shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayer: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type shapeInOneLayer: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_SetLayer(self, *args)


    def UnSetLayers(self, *args):
        """
        UnSetLayers(Handle_XCAFDoc_LayerTool self, TDF_Label L)
        UnSetLayers(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh) -> Standard_Boolean

        Remove link between shape <Sh> and all Layers at LayerTable.
        return FALSE if no such shape <Sh> in XCAF Document.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_UnSetLayers(self, *args)


    def UnSetOneLayer(self, *args):
        """
        UnSetOneLayer(Handle_XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer) -> Standard_Boolean
        UnSetOneLayer(Handle_XCAFDoc_LayerTool self, TDF_Label L, TDF_Label aLayerL) -> Standard_Boolean
        UnSetOneLayer(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer) -> Standard_Boolean
        UnSetOneLayer(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label aLayerL) -> Standard_Boolean

        Remove link between shape <Sh> and layer <aLayerL>.
        returns FALSE if no such layer <aLayerL> or shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_UnSetOneLayer(self, *args)


    def IsSet(self, *args):
        """
        IsSet(Handle_XCAFDoc_LayerTool self, TDF_Label L, TCollection_ExtendedString aLayer) -> Standard_Boolean
        IsSet(Handle_XCAFDoc_LayerTool self, TDF_Label L, TDF_Label aLayerL) -> Standard_Boolean
        IsSet(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TCollection_ExtendedString aLayer) -> Standard_Boolean
        IsSet(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, TDF_Label aLayerL) -> Standard_Boolean

        Returns True if shape <Sh> has a Layer assosiated
        with the <aLayerL>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aLayerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsSet(self, *args)


    def GetLayers(self, *args):
        """
        GetLayers(Handle_XCAFDoc_LayerTool self, TDF_Label L, Handle_TColStd_HSequenceOfExtendedString aLayerS) -> Standard_Boolean
        GetLayers(Handle_XCAFDoc_LayerTool self, TDF_Label L, NCollection_Sequence_TDF_Label aLayerLS) -> Standard_Boolean
        GetLayers(Handle_XCAFDoc_LayerTool self, TDF_Label L) -> Handle_TColStd_HSequenceOfExtendedString
        GetLayers(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, Handle_TColStd_HSequenceOfExtendedString aLayerS) -> Standard_Boolean
        GetLayers(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh, NCollection_Sequence_TDF_Label aLayerLS) -> Standard_Boolean
        GetLayers(Handle_XCAFDoc_LayerTool self, TopoDS_Shape Sh) -> Handle_TColStd_HSequenceOfExtendedString

        Return sequence of strings that assosiated with shape <Sh>.

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfExtendedString

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_GetLayers(self, *args)


    def GetShapesOfLayer(self, *args):
        """
        GetShapesOfLayer(Handle_XCAFDoc_LayerTool self, TDF_Label layerL, NCollection_Sequence_TDF_Label ShLabels)

        Return sequanese of shape labels that assigned with layers to <ShLabels>.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :type ShLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_GetShapesOfLayer(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_XCAFDoc_LayerTool self, TDF_Label layerL) -> Standard_Boolean

        Return TRUE if layer is visible, FALSE if invisible.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsVisible(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(Handle_XCAFDoc_LayerTool self, TDF_Label layerL, Standard_Boolean const isvisible)

        Set the visibility of layer. If layer is invisible when on it's layer
        will set UAttribute with corresponding GUID.

        :type layerL: OCC.wrapper.TDF.TDF_Label
        :type isvisible: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_SetVisibility(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_LayerTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_LayerTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_LayerTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_LayerTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_LayerTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_LayerTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_LayerTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_LayerTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_LayerTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_LayerTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_LayerTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_LayerTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_LayerTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_LayerTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_LayerTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_LayerTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_LayerTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_LayerTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_LayerTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_LayerTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_LayerTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_LayerTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_LayerTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_LayerTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_LayerTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_LayerTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_LayerTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_LayerTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_LayerTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_LayerTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_LayerTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_LayerTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_LayerTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_LayerTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_LayerTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_LayerTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_LayerTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_LayerTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_LayerTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_LayerTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_LayerTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_LayerTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_LayerTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_LayerTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_LayerTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_LayerTool_swigregister = _XCAFDoc.Handle_XCAFDoc_LayerTool_swigregister
Handle_XCAFDoc_LayerTool_swigregister(Handle_XCAFDoc_LayerTool)

def Handle_XCAFDoc_LayerTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast(thing)
Handle_XCAFDoc_LayerTool_DownCast = _XCAFDoc.Handle_XCAFDoc_LayerTool_DownCast

class NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher(NCollection.NCollection_BaseMap):
    """
    Purpose:     The DataMap is a Map to store keys with associated
    Items. See Map  from NCollection for  a discussion
    about the number of buckets.

    The DataMap can be seen as an extended array where
    the Keys  are the   indices.  For this reason  the
    operator () is defined on DataMap to fetch an Item
    from a Key. So the following syntax can be used :

    anItem = aMap(aKey);
    aMap(aKey) = anItem;

    This analogy has its  limit.   aMap(aKey) = anItem
    can  be done only  if aKey was previously bound to
    an item in the map.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TDF_Label,TopTools_ShapeMapHasher >::iterator

        Returns an iterator pointing to the first element in the map.

        :rtype: iterator

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TDF_Label,TopTools_ShapeMapHasher >::iterator

        Returns an iterator referring to the past-the-end element in the map.

        :rtype: iterator

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TDF_Label,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator pointing to the first element in the map.

        :rtype: const_iterator

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self) -> NCollection_DataMap< TopoDS_Shape,TDF_Label,TopTools_ShapeMapHasher >::const_iterator

        Returns a const iterator referring to the past-the-end element in the map.

        :rtype: const_iterator

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The DataMap is a Map to store keys with associated
        Items. See Map  from NCollection for  a discussion
        about the number of buckets.

        The DataMap can be seen as an extended array where
        the Keys  are the   indices.  For this reason  the
        operator () is defined on DataMap to fetch an Item
        from a Key. So the following syntax can be used :

        anItem = aMap(aKey);
        aMap(aKey) = anItem;

        This analogy has its  limit.   aMap(aKey) = anItem
        can  be done only  if aKey was previously bound to
        an item in the map.
        """
        this = _XCAFDoc.new_NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Exchange(self, *args):
        """
        Exchange(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher theOther)

        Exchange the content of two maps without re-allocations.
        Notice that allocators will be swapped as well!

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Exchange(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher

        Assignment.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher theOther) -> NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_DataMap
        :rtype: OCC.wrapper.NCollection.NCollection_DataMap

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_assign(self, *args)


    def ReSize(self, *args):
        """
        ReSize(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, Standard_Integer const N)

        ReSize

        :type N: int

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_ReSize(self, *args)


    def Bind(self, *args):
        """
        Bind(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, TDF_Label theItem) -> Standard_Boolean

        Bind binds Item to Key in map.
        @param theKey  key to add/update
        @param theItem new item; overrides value previously bound to the key, if any
        @return Standard_True if Key was not bound already

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Bind(self, *args)


    def Bound(self, *args):
        """
        Bound(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey, TDF_Label theItem) -> TDF_Label

        Bound binds Item to Key in map. Returns modifiable Item 

        :type theKey: const TheKeyType &
        :type theItem: const TheItemType &
        :rtype: TheItemType *

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Bound(self, *args)


    def IsBound(self, *args):
        """
        IsBound(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        IsBound

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IsBound(self, *args)


    def UnBind(self, *args):
        """
        UnBind(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> Standard_Boolean

        UnBind removes Item Key pair from map

        :type theKey: const TheKeyType &
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_UnBind(self, *args)


    def Seek(self, *args):
        """
        Seek(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> TDF_Label

        Seek returns pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: const TheItemType *

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Seek(self, *args)


    def Find(self, *args):
        """
        Find returns the Item for Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Find(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSeek(self, *args):
        """
        ChangeSeek(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> TDF_Label

        ChangeSeek returns modifiable pointer to Item by Key. Returns
        NULL is Key was not bound.

        :type theKey: const TheKeyType &
        :rtype: TheItemType *

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_ChangeSeek(self, *args)


    def ChangeFind(self, *args):
        """
        ChangeFind(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, TopoDS_Shape theKey) -> TDF_Label

        ChangeFind returns mofifiable Item by Key. Raises if Key was not bound

        :type theKey: const TheKeyType &
        :rtype: TheItemType &

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_ChangeFind(self, *args)


    def __call__(self, *args):
        """
        operator ()

        :type theKey: const TheKeyType &
        :rtype: const TheItemType &

        """
        res = _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, Standard_Boolean const doReleaseMemory)
        Clear(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self, Handle_NCollection_BaseAllocator theAllocator)

        Clear data and reset allocator

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Clear(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher self) -> Standard_Integer

        Size

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_Size(self, *args)


    def __iter__(self):
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher___iter__(self)
    __swig_destroy__ = _XCAFDoc.delete_NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher
NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_swigregister = _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_swigregister
NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_swigregister(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher)

class NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _XCAFDoc.new_NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XCAFDoc.delete_NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper

    def __next__(self):
        return _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper___next__(self)
NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper_swigregister = _XCAFDoc.NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper_swigregister
NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper_swigregister(NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher_IteratorHelper)


try:
	XCAFDoc_DataMapOfShapeLabel = NCollection_DataMap_TopoDS_Shape_TDF_Label_TopTools_ShapeMapHasher
except NameError:
	pass # does not exist, probably ignored

class Handle_XCAFDoc_View(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_View self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_View_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_View self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_View self, XCAFDoc_View thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_View_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_View self, Handle_XCAFDoc_View theHandle) -> Handle_XCAFDoc_View
        assign(Handle_XCAFDoc_View self, XCAFDoc_View thePtr) -> Handle_XCAFDoc_View
        assign(Handle_XCAFDoc_View self, Handle_XCAFDoc_View theHandle) -> Handle_XCAFDoc_View

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_View_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_View self) -> XCAFDoc_View

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_View_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_View self) -> XCAFDoc_View

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_View___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_View self) -> XCAFDoc_View

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_View___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_View___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_View___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_View(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_View_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_View

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_View_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_View self, TDF_Label theLabel) -> Handle_XCAFDoc_View

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_View

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_View_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_View self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_View self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_View_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_View self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Paste(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_View self, Handle_XCAFView_Object theViewObject)

        Updates parent's label and its sub-labels with data taken from theViewObject.
        Old data associated with the label will be lost.

        :type theViewObject: OCC.wrapper.XCAFView.Handle_XCAFView_Object

        """
        return _XCAFDoc.Handle_XCAFDoc_View_SetObject(self, *args)


    def GetObject(self, *args):
        """
        GetObject(Handle_XCAFDoc_View self) -> Handle_XCAFView_Object

        Returns view object data taken from the paren's label and its sub-labels.

        :rtype: OCC.wrapper.XCAFView.Handle_XCAFView_Object

        """
        return _XCAFDoc.Handle_XCAFDoc_View_GetObject(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_View self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_View_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_View_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_View_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_View self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_View self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_View_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_View self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_View self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_View self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_View_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_View self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_View self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_View self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_View self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_View self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_View self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_View_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_View self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_View self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_View_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_View self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_View self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_View self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_View self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_View self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_View self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_View self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_View self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_View self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_View_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_View self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_View self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_View_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_View self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_View_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_View self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_View_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_View self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_View_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_View self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_View_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_View self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_View_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_View self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_View self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_View___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_View self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_View_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_View self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_View_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_View self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_View_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_View self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_View self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_View self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_View self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_View_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_View self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_View_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_View self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_View_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_View self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_View_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_View self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_View_DecrementRefCounter(self, *args)

Handle_XCAFDoc_View_swigregister = _XCAFDoc.Handle_XCAFDoc_View_swigregister
Handle_XCAFDoc_View_swigregister(Handle_XCAFDoc_View)

def Handle_XCAFDoc_View_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_View_DownCast(thing)
Handle_XCAFDoc_View_DownCast = _XCAFDoc.Handle_XCAFDoc_View_DownCast

class Handle_XCAFDoc_ViewTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_ViewTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_ViewTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_ViewTool self, XCAFDoc_ViewTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_ViewTool self, Handle_XCAFDoc_ViewTool theHandle) -> Handle_XCAFDoc_ViewTool
        assign(Handle_XCAFDoc_ViewTool self, XCAFDoc_ViewTool thePtr) -> Handle_XCAFDoc_ViewTool
        assign(Handle_XCAFDoc_ViewTool self, Handle_XCAFDoc_ViewTool theHandle) -> Handle_XCAFDoc_ViewTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_ViewTool self) -> XCAFDoc_ViewTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_ViewTool self) -> XCAFDoc_ViewTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_ViewTool self) -> XCAFDoc_ViewTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_ViewTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_ViewTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_ViewTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ViewTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_ViewTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_ViewTool self, TDF_Label L) -> Handle_XCAFDoc_ViewTool

        Creates (if not exist) ViewTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Set(self, *args)


    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ViewTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_ViewTool self) -> TDF_Label

        Returns the label under which Views are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BaseLabel(self, *args)


    def IsView(self, *args):
        """
        IsView(Handle_XCAFDoc_ViewTool self, TDF_Label theLabel) -> Standard_Boolean

        Returns True if label belongs to a View table and
        is a View definition

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsView(self, *args)


    def GetViewLabels(self, *args):
        """
        GetViewLabels(Handle_XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns a sequence of View labels currently stored
        in the View table

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabels(self, *args)


    def SetView(self, *args):
        """
        SetView(Handle_XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, NCollection_Sequence_TDF_Label theClippingPlanes, NCollection_Sequence_TDF_Label theNotes, NCollection_Sequence_TDF_Label theAnnotations, TDF_Label theViewL)
        SetView(Handle_XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, NCollection_Sequence_TDF_Label theClippingPlanes, TDF_Label theViewL)
        SetView(Handle_XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theShapes, NCollection_Sequence_TDF_Label theGDTs, TDF_Label theViewL)

        Sets a link with GUID

        :type theShapes: OCC.wrapper.TDF.TDF_LabelSequence
        :type theGDTs: OCC.wrapper.TDF.TDF_LabelSequence
        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_SetView(self, *args)


    def SetClippingPlanes(self, *args):
        """
        SetClippingPlanes(Handle_XCAFDoc_ViewTool self, NCollection_Sequence_TDF_Label theClippingPlaneLabels, TDF_Label theViewL)

        Set Clipping planes to  given View

        :type theClippingPlaneLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_SetClippingPlanes(self, *args)


    def RemoveView(self, *args):
        """
        RemoveView(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL)

        Remove View

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_RemoveView(self, *args)


    def GetViewLabelsForShape(self, *args):
        """
        GetViewLabelsForShape(Handle_XCAFDoc_ViewTool self, TDF_Label theShapeL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label ShapeL

        :type theShapeL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabelsForShape(self, *args)


    def GetViewLabelsForGDT(self, *args):
        """
        GetViewLabelsForGDT(Handle_XCAFDoc_ViewTool self, TDF_Label theGDTL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label GDTL

        :type theGDTL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabelsForGDT(self, *args)


    def GetViewLabelsForClippingPlane(self, *args):
        """
        GetViewLabelsForClippingPlane(Handle_XCAFDoc_ViewTool self, TDF_Label theClippingPlaneL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label ClippingPlaneL

        :type theClippingPlaneL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabelsForClippingPlane(self, *args)


    def GetViewLabelsForNote(self, *args):
        """
        GetViewLabelsForNote(Handle_XCAFDoc_ViewTool self, TDF_Label theNoteL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label NoteL

        :type theNoteL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabelsForNote(self, *args)


    def GetViewLabelsForAnnotation(self, *args):
        """
        GetViewLabelsForAnnotation(Handle_XCAFDoc_ViewTool self, TDF_Label theAnnotationL, NCollection_Sequence_TDF_Label theViews) -> Standard_Boolean

        Returns all View labels defined for label AnnotationL

        :type theAnnotationL: OCC.wrapper.TDF.TDF_Label
        :type theViews: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetViewLabelsForAnnotation(self, *args)


    def AddView(self, *args):
        """
        AddView(Handle_XCAFDoc_ViewTool self) -> TDF_Label

        Adds a view definition to a View table and returns its label

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AddView(self, *args)


    def GetRefShapeLabel(self, *args):
        """
        GetRefShapeLabel(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theShapeLabels) -> Standard_Boolean

        Returns shape labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theShapeLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefShapeLabel(self, *args)


    def GetRefGDTLabel(self, *args):
        """
        GetRefGDTLabel(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theGDTLabels) -> Standard_Boolean

        Returns GDT labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theGDTLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefGDTLabel(self, *args)


    def GetRefClippingPlaneLabel(self, *args):
        """
        GetRefClippingPlaneLabel(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theClippingPlaneLabels) -> Standard_Boolean

        Returns ClippingPlane labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theClippingPlaneLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefClippingPlaneLabel(self, *args)


    def GetRefNoteLabel(self, *args):
        """
        GetRefNoteLabel(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Boolean

        Returns Notes labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefNoteLabel(self, *args)


    def GetRefAnnotationLabel(self, *args):
        """
        GetRefAnnotationLabel(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL, NCollection_Sequence_TDF_Label theAnnotationLabels) -> Standard_Boolean

        Returns Annotation labels defined for label theViewL
        Returns False if the theViewL is not in View table

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :type theAnnotationLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefAnnotationLabel(self, *args)


    def IsLocked(self, *args):
        """
        IsLocked(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL) -> Standard_Boolean

        Returns true if the given View is marked as locked

        :type theViewL: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsLocked(self, *args)


    def Lock(self, *args):
        """
        Lock(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL)

        Mark the given View as locked

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Lock(self, *args)


    def Unlock(self, *args):
        """
        Unlock(Handle_XCAFDoc_ViewTool self, TDF_Label theViewL)

        Unlock the given View

        :type theViewL: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Unlock(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ViewTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_ViewTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_ViewTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_ViewTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ViewTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ViewTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_ViewTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_ViewTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_ViewTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_ViewTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_ViewTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_ViewTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_ViewTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_ViewTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_ViewTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_ViewTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_ViewTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_ViewTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_ViewTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_ViewTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_ViewTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_ViewTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_ViewTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_ViewTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_ViewTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_ViewTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_ViewTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_ViewTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_ViewTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_ViewTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_ViewTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_ViewTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_ViewTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_ViewTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_ViewTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_ViewTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_ViewTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_ViewTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_ViewTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_ViewTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_ViewTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_ViewTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_ViewTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_ViewTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ViewTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_ViewTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ViewTool_swigregister
Handle_XCAFDoc_ViewTool_swigregister(Handle_XCAFDoc_ViewTool)

def Handle_XCAFDoc_ViewTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_ViewTool_DownCast(thing)
Handle_XCAFDoc_ViewTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ViewTool_DownCast

class XCAFDoc_DimTol(TDF.TDF_Attribute):
    """attribute to store dimension and tolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_DimTol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_DimTol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XCAFDoc_DimTol self) -> XCAFDoc_DimTol

        attribute to store dimension and tolerance
        """
        this = _XCAFDoc.new_XCAFDoc_DimTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(self, *args):
        """
        Set(XCAFDoc_DimTol self, TDF_Label label, Standard_Integer const kind, Handle_TColStd_HArray1OfReal aVal, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription) -> Handle_XCAFDoc_DimTol
        Set(XCAFDoc_DimTol self, Standard_Integer const kind, Handle_TColStd_HArray1OfReal aVal, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription)

        :type kind: int
        :type aVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTol_Set(self, *args)


    def GetKind(self, *args):
        """
        GetKind(XCAFDoc_DimTol self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetKind(self, *args)


    def GetVal(self, *args):
        """
        GetVal(XCAFDoc_DimTol self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetVal(self, *args)


    def GetName(self, *args):
        """
        GetName(XCAFDoc_DimTol self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(XCAFDoc_DimTol self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.XCAFDoc_DimTol_GetDescription(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_DimTol_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(XCAFDoc_DimTol self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DimTol_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_DimTol self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_DimTol_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_DimTol self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_DimTol_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_DimTol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_DimTol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_DimTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_DimTol
XCAFDoc_DimTol_swigregister = _XCAFDoc.XCAFDoc_DimTol_swigregister
XCAFDoc_DimTol_swigregister(XCAFDoc_DimTol)

def XCAFDoc_DimTol_GetID(*args):
    """
    XCAFDoc_DimTol_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_DimTol_GetID(*args)

def XCAFDoc_DimTol_get_type_name(*args):
    """
    XCAFDoc_DimTol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_DimTol_get_type_name(*args)

def XCAFDoc_DimTol_get_type_descriptor(*args):
    """
    XCAFDoc_DimTol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_DimTol_get_type_descriptor(*args)

class Handle_XCAFDoc_Location(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Location self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Location self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Location self, XCAFDoc_Location thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Location self, Handle_XCAFDoc_Location theHandle) -> Handle_XCAFDoc_Location
        assign(Handle_XCAFDoc_Location self, XCAFDoc_Location thePtr) -> Handle_XCAFDoc_Location
        assign(Handle_XCAFDoc_Location self, Handle_XCAFDoc_Location theHandle) -> Handle_XCAFDoc_Location

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Location self) -> XCAFDoc_Location

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Location self) -> XCAFDoc_Location

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Location___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Location self) -> XCAFDoc_Location

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Location___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Location___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Location___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Location(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Location_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Location

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Location_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Location self, TDF_Label label, TopLoc_Location Loc) -> Handle_XCAFDoc_Location
        Set(Handle_XCAFDoc_Location self, TopLoc_Location Loc)

        :type Loc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Set(self, *args)


    def Get(self, *args):
        """
        Returns True if there is a reference on the same label

        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        res = _XCAFDoc.Handle_XCAFDoc_Location_Get(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Location_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Location self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Location self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Location self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Location self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Location_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Location_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Location self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Location self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Location self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Location self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Location self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Location self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Location self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Location self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Location self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Location self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Location self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Location self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Location self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Location self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Location self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Location self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Location self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Location self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Location self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Location self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Location self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Location self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Location self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Location self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Location self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Location self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Location self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Location self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Location self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Location self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Location self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Location___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Location self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Location self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Location self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Location self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Location self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Location self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Location self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Location self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Location self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Location self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Location_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Location self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Location_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Location_swigregister = _XCAFDoc.Handle_XCAFDoc_Location_swigregister
Handle_XCAFDoc_Location_swigregister(Handle_XCAFDoc_Location)

def Handle_XCAFDoc_Location_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Location_DownCast(thing)
Handle_XCAFDoc_Location_DownCast = _XCAFDoc.Handle_XCAFDoc_Location_DownCast

class Handle_XCAFDoc_Centroid(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Centroid self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Centroid self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Centroid self, XCAFDoc_Centroid thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Centroid self, Handle_XCAFDoc_Centroid theHandle) -> Handle_XCAFDoc_Centroid
        assign(Handle_XCAFDoc_Centroid self, XCAFDoc_Centroid thePtr) -> Handle_XCAFDoc_Centroid
        assign(Handle_XCAFDoc_Centroid self, Handle_XCAFDoc_Centroid theHandle) -> Handle_XCAFDoc_Centroid

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Centroid self) -> XCAFDoc_Centroid

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Centroid self) -> XCAFDoc_Centroid

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Centroid self) -> XCAFDoc_Centroid

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Centroid___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Centroid___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Centroid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Centroid_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Centroid

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Centroid_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Centroid self, TDF_Label label, gp_Pnt pnt) -> Handle_XCAFDoc_Centroid
        Set(Handle_XCAFDoc_Centroid self, gp_Pnt pnt)

        :type pnt: OCC.wrapper.gp.gp_Pnt

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_Centroid self) -> gp_Pnt
        Get(Handle_XCAFDoc_Centroid self, TDF_Label label, gp_Pnt pnt) -> Standard_Boolean

        Returns point as argument
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type pnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Get(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Centroid_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Centroid self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Centroid self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Centroid self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Centroid self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Centroid self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Centroid_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Centroid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Centroid self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Centroid self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Centroid self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Centroid self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Centroid self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Centroid self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Centroid self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Centroid self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Centroid self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Centroid self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Centroid self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Centroid self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Centroid self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Centroid self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Centroid self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Centroid self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Centroid self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Centroid self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Centroid self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Centroid self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Centroid self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Centroid self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Centroid self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Centroid self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Centroid self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Centroid self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Centroid self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Centroid self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Centroid self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Centroid self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Centroid self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Centroid self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Centroid self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Centroid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Centroid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Centroid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Centroid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Centroid self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Centroid self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Centroid self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Centroid self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Centroid_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Centroid_swigregister = _XCAFDoc.Handle_XCAFDoc_Centroid_swigregister
Handle_XCAFDoc_Centroid_swigregister(Handle_XCAFDoc_Centroid)

def Handle_XCAFDoc_Centroid_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast(thing)
Handle_XCAFDoc_Centroid_DownCast = _XCAFDoc.Handle_XCAFDoc_Centroid_DownCast

class Handle_XCAFDoc_NoteBinData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_NoteBinData self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_NoteBinData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_NoteBinData self, XCAFDoc_NoteBinData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_NoteBinData self, Handle_XCAFDoc_NoteBinData theHandle) -> Handle_XCAFDoc_NoteBinData
        assign(Handle_XCAFDoc_NoteBinData self, XCAFDoc_NoteBinData thePtr) -> Handle_XCAFDoc_NoteBinData
        assign(Handle_XCAFDoc_NoteBinData self, Handle_XCAFDoc_NoteBinData theHandle) -> Handle_XCAFDoc_NoteBinData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_NoteBinData self) -> XCAFDoc_NoteBinData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_NoteBinData self) -> XCAFDoc_NoteBinData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_NoteBinData self) -> XCAFDoc_NoteBinData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_NoteBinData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_NoteBinData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_NoteBinData_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_NoteBinData

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_NoteBinData self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_NoteBinData self, TDF_Label theLabel) -> Handle_XCAFDoc_NoteBinData

        Finds a binary data attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteBinData

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Get(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_NoteBinData self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Handle_XCAFDoc_NoteBinData
        Set(Handle_XCAFDoc_NoteBinData self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData) -> Handle_XCAFDoc_NoteBinData
        Set(Handle_XCAFDoc_NoteBinData self, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Standard_Boolean
        Set(Handle_XCAFDoc_NoteBinData self, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData)

        Sets title, MIME type and data from a byte array.
        \param [in] theTitle     - data title.
        \param [in] theMIMEtype  - MIME type of data.
        \param [in] theData      - byte data array.

        :type theTitle: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMIMEtype: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Set(self, *args)


    def Title(self, *args):
        """
        Returns the note title.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_Title(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MIMEtype(self, *args):
        """
        Returns data MIME type.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_MIMEtype(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Size(self, *args):
        """
        Size(Handle_XCAFDoc_NoteBinData self) -> Standard_Integer

        Size of data in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Size(self, *args)


    def Data(self, *args):
        """
        Returns byte data array.

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_Data(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_NoteBinData self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_NoteBinData self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_NoteBinData self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Dump(self, *args)


    def IsMine(self, *args):
        """
        IsMine(Handle_XCAFDoc_NoteBinData self, TDF_Label theLabel) -> Standard_Boolean

        Checks if the given label represents a note.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsMine(self, *args)


    def UserName(self, *args):
        """
        Returns the user name, who created the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_UserName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TimeStamp(self, *args):
        """
        Returns the timestamp of the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteBinData_TimeStamp(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOrphan(self, *args):
        """
        IsOrphan(Handle_XCAFDoc_NoteBinData self) -> Standard_Boolean

        Checks if the note isn't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsOrphan(self, *args)


    def GetObject(self, *args):
        """
        GetObject(Handle_XCAFDoc_NoteBinData self) -> Handle_XCAFNoteObjects_NoteObject

        Returns auxiliary data object

        :rtype: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_GetObject(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_NoteBinData self, Handle_XCAFNoteObjects_NoteObject theObject)

        Updates auxiliary data

        :type theObject: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_SetObject(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_NoteBinData self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_NoteBinData self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_NoteBinData self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_NoteBinData self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_NoteBinData self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_NoteBinData self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_NoteBinData self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_NoteBinData self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_NoteBinData self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_NoteBinData self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_NoteBinData self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_NoteBinData self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_NoteBinData self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_NoteBinData self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_NoteBinData self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_NoteBinData self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_NoteBinData self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_NoteBinData self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_NoteBinData self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_NoteBinData self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_NoteBinData self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_NoteBinData self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_NoteBinData self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_NoteBinData self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_NoteBinData self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_NoteBinData self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_NoteBinData self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_NoteBinData self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_NoteBinData self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_NoteBinData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_NoteBinData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_NoteBinData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_NoteBinData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_NoteBinData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_NoteBinData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_NoteBinData self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_NoteBinData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DecrementRefCounter(self, *args)

Handle_XCAFDoc_NoteBinData_swigregister = _XCAFDoc.Handle_XCAFDoc_NoteBinData_swigregister
Handle_XCAFDoc_NoteBinData_swigregister(Handle_XCAFDoc_NoteBinData)

def Handle_XCAFDoc_NoteBinData_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_NoteBinData_DownCast(thing)
Handle_XCAFDoc_NoteBinData_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteBinData_DownCast

class Handle_XCAFDoc_ShapeMapTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_ShapeMapTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_ShapeMapTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_ShapeMapTool self, XCAFDoc_ShapeMapTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_ShapeMapTool self, Handle_XCAFDoc_ShapeMapTool theHandle) -> Handle_XCAFDoc_ShapeMapTool
        assign(Handle_XCAFDoc_ShapeMapTool self, XCAFDoc_ShapeMapTool thePtr) -> Handle_XCAFDoc_ShapeMapTool
        assign(Handle_XCAFDoc_ShapeMapTool self, Handle_XCAFDoc_ShapeMapTool theHandle) -> Handle_XCAFDoc_ShapeMapTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_ShapeMapTool self) -> XCAFDoc_ShapeMapTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_ShapeMapTool self) -> XCAFDoc_ShapeMapTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_ShapeMapTool self) -> XCAFDoc_ShapeMapTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_ShapeMapTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_ShapeMapTool

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_ShapeMapTool self, TDF_Label L) -> Handle_XCAFDoc_ShapeMapTool

        Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeMapTool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Set(self, *args)


    def IsSubShape(self, *args):
        """
        IsSubShape(Handle_XCAFDoc_ShapeMapTool self, TopoDS_Shape sub) -> Standard_Boolean

        Checks whether shape <sub> is subshape of shape stored on
        label shapeL

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsSubShape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(Handle_XCAFDoc_ShapeMapTool self, TopoDS_Shape S)

        Sets representation (TopoDS_Shape) for top-level shape

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_SetShape(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Paste(self, *args)


    def GetMap(self, *args):
        """
        :rtype: OCC.wrapper.TopTools.TopTools_IndexedMapOfShape

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_GetMap(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_ShapeMapTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_ShapeMapTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_ShapeMapTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_ShapeMapTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_ShapeMapTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_ShapeMapTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_ShapeMapTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_ShapeMapTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_ShapeMapTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_ShapeMapTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_ShapeMapTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_ShapeMapTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_ShapeMapTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_ShapeMapTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_ShapeMapTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_ShapeMapTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_ShapeMapTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_ShapeMapTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_ShapeMapTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_ShapeMapTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_ShapeMapTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_ShapeMapTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_ShapeMapTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_ShapeMapTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_ShapeMapTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_ShapeMapTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_ShapeMapTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_ShapeMapTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_ShapeMapTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_swigregister
Handle_XCAFDoc_ShapeMapTool_swigregister(Handle_XCAFDoc_ShapeMapTool)

def Handle_XCAFDoc_ShapeMapTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast(thing)
Handle_XCAFDoc_ShapeMapTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeMapTool_DownCast

class Handle_XCAFDoc_ShapeTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_ShapeTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_ShapeTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_ShapeTool self, XCAFDoc_ShapeTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_ShapeTool self, Handle_XCAFDoc_ShapeTool theHandle) -> Handle_XCAFDoc_ShapeTool
        assign(Handle_XCAFDoc_ShapeTool self, XCAFDoc_ShapeTool thePtr) -> Handle_XCAFDoc_ShapeTool
        assign(Handle_XCAFDoc_ShapeTool self, Handle_XCAFDoc_ShapeTool theHandle) -> Handle_XCAFDoc_ShapeTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_ShapeTool self) -> XCAFDoc_ShapeTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_ShapeTool self) -> XCAFDoc_ShapeTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_ShapeTool self) -> XCAFDoc_ShapeTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_ShapeTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_ShapeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_ShapeTool

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Handle_XCAFDoc_ShapeTool

        Create (if not exist) ShapeTool from XCAFDoc on <L>.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Set(self, *args)


    def IsTopLevel(self, *args):
        """
        IsTopLevel(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of top-level shape,
        as opposed to component of assembly or subshape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsTopLevel(self, *args)


    def IsFree(self, *args):
        """
        IsFree(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is not used by any assembly, i.e.
        contains sublabels which are assembly components
        This is relevant only if IsShape() is True
        (There  is  no  Father TreeNode on  this  <L>)

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsFree(self, *args)


    def IsShape(self, *args):
        """
        IsShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label represents a shape (simple shape,
        assembly or reference)

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsShape(self, *args)


    def IsSimpleShape(self, *args):
        """
        IsSimpleShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of simple shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsSimpleShape(self, *args)


    def IsReference(self, *args):
        """
        IsReference(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Return true if <L> is a located instance of other shape
        i.e. reference

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsReference(self, *args)


    def IsAssembly(self, *args):
        """
        IsAssembly(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of assembly, i.e.
        contains sublabels which are assembly components
        This is relevant only if IsShape() is True

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsAssembly(self, *args)


    def IsComponent(self, *args):
        """
        IsComponent(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Return true if <L> is reference serving as component
        of assembly

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsComponent(self, *args)


    def IsCompound(self, *args):
        """
        IsCompound(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of compound, i.e.
        contains some sublabels
        This is relevant only if IsShape() is True

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsCompound(self, *args)


    def IsSubShape(self, *args):
        """
        IsSubShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean
        IsSubShape(Handle_XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub) -> Standard_Boolean

        Checks whether shape <sub> is subshape of shape stored on
        label shapeL

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsSubShape(self, *args)


    def SearchUsingMap(self, *args):
        """
        SearchUsingMap(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findWithoutLoc, Standard_Boolean const findSubshape) -> Standard_Boolean

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :type findWithoutLoc: bool
        :type findSubshape: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SearchUsingMap(self, *args)


    def Search(self, *args):
        """
        Search(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findInstance, Standard_Boolean const findComponent, Standard_Boolean const findSubshape) -> Standard_Boolean

        General tool to find a (sub) shape in the document
        * If findInstance is True, and S has a non-null location,
        first tries to find the shape among the top-level shapes
        with this location
        * If not found, and findComponent is True, tries to find the shape
        among the components of assemblies
        * If not found, tries to find the shape without location
        among top-level shapes
        * If not found and findSubshape is True, tries to find a
        shape as a subshape of top-level simple shapes
        Returns False if nothing is found

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :type findInstance: bool
        :type findComponent: bool
        :type findSubshape: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Search(self, *args)


    def FindShape(self, *args):
        """
        FindShape(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape S, TDF_Label L, Standard_Boolean const findInstance) -> Standard_Boolean
        FindShape(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape S, Standard_Boolean const findInstance) -> TDF_Label

        Does the same as previous method
        Returns Null label if not found

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type findInstance: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindShape(self, *args)


    def GetShape(self, *args):
        """
        GetShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L, TopoDS_Shape S) -> Standard_Boolean
        GetShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> TopoDS_Shape

        To get TopoDS_Shape from shape's label
        For component, returns new shape with correct location
        Returns Null shape if label does not contain shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetShape(self, *args)


    def NewShape(self, *args):
        """
        NewShape(Handle_XCAFDoc_ShapeTool self) -> TDF_Label

        Creates new (empty) top-level shape.
        Initially it holds empty TopoDS_Compound

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_NewShape(self, *args)


    def SetShape(self, *args):
        """
        SetShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L, TopoDS_Shape S)

        Sets representation (TopoDS_Shape) for top-level shape.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetShape(self, *args)


    def AddShape(self, *args):
        """
        AddShape(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape S, Standard_Boolean const makeAssembly, Standard_Boolean const makePrepare) -> TDF_Label

        Adds a new top-level (creates and returns a new label)
        If makeAssembly is True, treats TopAbs_COMPOUND shapes
        as assemblies (creates assembly structure).
        NOTE: <makePrepare> replace components without location
        in assmebly by located components to avoid some problems.
        If AutoNaming() is True then automatically attaches names.

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type makeAssembly: bool
        :type makePrepare: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AddShape(self, *args)


    def RemoveShape(self, *args):
        """
        RemoveShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L, Standard_Boolean const removeCompletely) -> Standard_Boolean

        Removes shape (whole label and all its sublabels)
        If removeCompletely is true, removes complete shape
        If removeCompletely is false, removes instance(location) only
        Returns False (and does nothing) if shape is not free
        or is not top-level shape

        :type L: OCC.wrapper.TDF.TDF_Label
        :type removeCompletely: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_RemoveShape(self, *args)


    def Init(self, *args):
        """
        Init(Handle_XCAFDoc_ShapeTool self)

        set hasComponents into false


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Init(self, *args)


    def SetAutoNaming(self, *args):
        """
        SetAutoNaming(Handle_XCAFDoc_ShapeTool self, Standard_Boolean const V)

        Sets auto-naming mode to <V>. If True then for added
        shapes, links, assemblies and SHUO's, the TDataStd_Name attribute
        is automatically added. For shapes it contains a shape type
        (e.g. "SOLID", "SHELL", etc); for links it has a form
        "=>[0:1:1:2]" (where a tag is a label containing a shape
        without a location); for assemblies it is "ASSEMBLY", and
        "SHUO" for SHUO's.
        This setting is global; it cannot be made a member function
        as it is used by static methods as well.
        By default, auto-naming is enabled.
        See also AutoNaming().

        :type V: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetAutoNaming(self, *args)


    def AutoNaming(self, *args):
        """
        AutoNaming(Handle_XCAFDoc_ShapeTool self) -> Standard_Boolean

        Returns current auto-naming mode. See SetAutoNaming() for
        description.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AutoNaming(self, *args)


    def ComputeShapes(self, *args):
        """
        ComputeShapes(Handle_XCAFDoc_ShapeTool self, TDF_Label L)

        recursive

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_ComputeShapes(self, *args)


    def ComputeSimpleShapes(self, *args):
        """
        ComputeSimpleShapes(Handle_XCAFDoc_ShapeTool self)

        Compute a sequence of simple shapes


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_ComputeSimpleShapes(self, *args)


    def GetShapes(self, *args):
        """
        GetShapes(Handle_XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of all top-level shapes

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetShapes(self, *args)


    def GetFreeShapes(self, *args):
        """
        GetFreeShapes(Handle_XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label FreeLabels)

        Returns a sequence of all top-level shapes
        which are free (i.e. not referred by any other)

        :type FreeLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetFreeShapes(self, *args)


    def GetUsers(self, *args):
        """
        GetUsers(Handle_XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Integer

        Returns list of labels which refer shape L as component
        Returns number of users (0 if shape is free)

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetUsers(self, *args)


    def GetLocation(self, *args):
        """
        GetLocation(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> TopLoc_Location

        Returns location of instance

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetLocation(self, *args)


    def GetReferredShape(self, *args):
        """
        GetReferredShape(Handle_XCAFDoc_ShapeTool self, TDF_Label L, TDF_Label Label) -> Standard_Boolean

        Returns label which corresponds to a shape referred by L
        Returns False if label is not reference

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetReferredShape(self, *args)


    def NbComponents(self, *args):
        """
        NbComponents(Handle_XCAFDoc_ShapeTool self, TDF_Label L, Standard_Boolean const getsubchilds) -> Standard_Integer

        Returns number of Assembles components

        :type L: OCC.wrapper.TDF.TDF_Label
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_NbComponents(self, *args)


    def GetComponents(self, *args):
        """
        GetComponents(Handle_XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_TDF_Label Labels, Standard_Boolean const getsubchilds) -> Standard_Boolean

        Returns list of components of assembly
        Returns False if label is not assembly

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type getsubchilds: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetComponents(self, *args)


    def AddComponent(self, *args):
        """
        AddComponent(Handle_XCAFDoc_ShapeTool self, TDF_Label assembly, TDF_Label comp, TopLoc_Location Loc) -> TDF_Label
        AddComponent(Handle_XCAFDoc_ShapeTool self, TDF_Label assembly, TopoDS_Shape comp, Standard_Boolean const expand) -> TDF_Label

        Adds a shape (located) as a component to the assembly
        If necessary, creates an additional top-level shape for
        component and return the Label of component.
        If expand is True and component is Compound, it will
        be created as assembly also
        Note: assembly must be IsAssembly() or IsSimpleShape()

        :type assembly: OCC.wrapper.TDF.TDF_Label
        :type comp: OCC.wrapper.TopoDS.TopoDS_Shape
        :type expand: bool
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AddComponent(self, *args)


    def RemoveComponent(self, *args):
        """
        RemoveComponent(Handle_XCAFDoc_ShapeTool self, TDF_Label comp)

        Removes a component from its assembly

        :type comp: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_RemoveComponent(self, *args)


    def UpdateAssemblies(self, *args):
        """
        UpdateAssemblies(Handle_XCAFDoc_ShapeTool self)

        Top-down update for all assembly compounds stored in the document.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_UpdateAssemblies(self, *args)


    def FindSubShape(self, *args):
        """
        FindSubShape(Handle_XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub, TDF_Label L) -> Standard_Boolean

        Finds a label for subshape <sub> of shape stored on
        label shapeL
        Returns Null label if it is not found

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindSubShape(self, *args)


    def AddSubShape(self, *args):
        """
        AddSubShape(Handle_XCAFDoc_ShapeTool self, TDF_Label shapeL, TopoDS_Shape sub) -> TDF_Label

        Adds a label for subshape <sub> of shape stored on
        label shapeL
        Returns Null label if it is not subshape

        :type shapeL: OCC.wrapper.TDF.TDF_Label
        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AddSubShape(self, *args)


    def FindMainShapeUsingMap(self, *args):
        """
        FindMainShapeUsingMap(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape sub) -> TDF_Label

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindMainShapeUsingMap(self, *args)


    def FindMainShape(self, *args):
        """
        FindMainShape(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape sub) -> TDF_Label

        Performs a search among top-level shapes to find
        the shape containing <sub> as subshape
        Checks only simple shapes, and returns the first found
        label (which should be the only one for valid model)

        :type sub: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindMainShape(self, *args)


    def GetSubShapes(self, *args):
        """
        GetSubShapes(Handle_XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns list of labels identifying subshapes of the given shape
        Returns False if no subshapes are placed on that label

        :type L: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetSubShapes(self, *args)


    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_ShapeTool self) -> TDF_Label

        returns the label under which shapes are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BaseLabel(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_ShapeTool self, Standard_OStream & theDumpLog, Standard_Boolean const deep) -> Standard_OStream
        Dump(Handle_XCAFDoc_ShapeTool self, Standard_OStream & theDumpLog) -> Standard_OStream &

        :type theDumpLog: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Dump(self, *args)


    def DumpShape(self, *args):
        """
        DumpShape(Handle_XCAFDoc_ShapeTool self, Standard_OStream & theDumpLog, TDF_Label L, Standard_Integer const level=0, Standard_Boolean const deep)

        Print to ostream <theDumpLog> type of shape found on <L> label
        and the entry of <L>, with <level> tabs before.
        If <deep>, print also TShape and Location addresses

        :type theDumpLog: OCC.wrapper.Standard.Standard_OStream
        :type L: OCC.wrapper.TDF.TDF_Label
        :type level: int
        :type deep: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DumpShape(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_ShapeTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_ShapeTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Paste(self, *args)


    def IsExternRef(self, *args):
        """
        IsExternRef(Handle_XCAFDoc_ShapeTool self, TDF_Label L) -> Standard_Boolean

        Returns True if the label is a label of external references, i.e.
        there are some reference on the no-step files, which are
        described in document only their names

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsExternRef(self, *args)


    def SetExternRefs(self, *args):
        """
        SetExternRefs(Handle_XCAFDoc_ShapeTool self, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS) -> TDF_Label
        SetExternRefs(Handle_XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS)

        Sets the names of references on the no-step files

        :type L: OCC.wrapper.TDF.TDF_Label
        :type SHAS: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetExternRefs(self, *args)


    def GetExternRefs(self, *args):
        """
        GetExternRefs(Handle_XCAFDoc_ShapeTool self, TDF_Label L, NCollection_Sequence_Handle_TCollection_HAsciiString SHAS)

        Gets the names of references on the no-step files

        :type L: OCC.wrapper.TDF.TDF_Label
        :type SHAS: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetExternRefs(self, *args)


    def SetSHUO(self, *args):
        """
        SetSHUO(Handle_XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label Labels, Handle_XCAFDoc_GraphNode MainSHUOAttr) -> Standard_Boolean

        Sets the SHUO structure between upper_usage and next_usage
        create multy-level (if number of labels > 2) SHUO from first to last
        Initialise out <MainSHUOAttr> by main upper_usage SHUO attribute.
        Returns FALSE if some of labels in not component label

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type MainSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetSHUO(self, *args)


    def GetSHUO(self, *args):
        """
        GetSHUO(Handle_XCAFDoc_ShapeTool self, TDF_Label SHUOLabel, Handle_XCAFDoc_GraphNode aSHUOAttr) -> Standard_Boolean

        Returns founded SHUO GraphNode attribute <aSHUOAttr>
        Returns false in other case

        :type SHUOLabel: OCC.wrapper.TDF.TDF_Label
        :type aSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetSHUO(self, *args)


    def GetAllComponentSHUO(self, *args):
        """
        GetAllComponentSHUO(Handle_XCAFDoc_ShapeTool self, TDF_Label CompLabel, NCollection_Sequence_Handle_TDF_Attribute SHUOAttrs) -> Standard_Boolean

        Returns founded SHUO GraphNodes of indicated component
        Returns false in other case

        :type CompLabel: OCC.wrapper.TDF.TDF_Label
        :type SHUOAttrs: OCC.wrapper.TDF.TDF_AttributeSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetAllComponentSHUO(self, *args)


    def GetSHUOUpperUsage(self, *args):
        """
        GetSHUOUpperUsage(Handle_XCAFDoc_ShapeTool self, TDF_Label NextUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns the sequence of labels of SHUO attributes,
        which is upper_usage for this next_usage SHUO attribute
        (that indicated by label)
        NOTE: returns upper_usages only on one level (not recurse)
        NOTE: do not clear the sequence before filling

        :type NextUsageL: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetSHUOUpperUsage(self, *args)


    def GetSHUONextUsage(self, *args):
        """
        GetSHUONextUsage(Handle_XCAFDoc_ShapeTool self, TDF_Label UpperUsageL, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Returns the sequence of labels of SHUO attributes,
        which is next_usage for this upper_usage SHUO attribute
        (that indicated by label)
        NOTE: returns next_usages only on one level (not recurse)
        NOTE: do not clear the sequence before filling

        :type UpperUsageL: OCC.wrapper.TDF.TDF_Label
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetSHUONextUsage(self, *args)


    def RemoveSHUO(self, *args):
        """
        RemoveSHUO(Handle_XCAFDoc_ShapeTool self, TDF_Label SHUOLabel) -> Standard_Boolean

        Remove SHUO from component sublabel,
        remove all dependencies on other SHUO.
        Returns FALSE if cannot remove SHUO dependencies.
        NOTE: remove any styles that associated with this SHUO.

        :type SHUOLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_RemoveSHUO(self, *args)


    def FindComponent(self, *args):
        """
        FindComponent(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape theShape, NCollection_Sequence_TDF_Label Labels) -> Standard_Boolean

        Serach the path of labels in the document,
        that corresponds the component from any assembly
        Try to search the sequence of labels with location that
        produce this shape as component of any assembly
        NOTE: Clear sequence of labels before filling

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindComponent(self, *args)


    def GetSHUOInstance(self, *args):
        """
        GetSHUOInstance(Handle_XCAFDoc_ShapeTool self, Handle_XCAFDoc_GraphNode theSHUO) -> TopoDS_Shape

        Search for the component shape that styled by shuo
        Returns null shape if no any shape is found.

        :type theSHUO: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetSHUOInstance(self, *args)


    def SetInstanceSHUO(self, *args):
        """
        SetInstanceSHUO(Handle_XCAFDoc_ShapeTool self, TopoDS_Shape theShape) -> Handle_XCAFDoc_GraphNode

        Search for the component shape by labelks path
        and set SHUO structure for founded label structure
        Returns null attribute if no component in any assembly found.

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetInstanceSHUO(self, *args)


    def GetAllSHUOInstances(self, *args):
        """
        GetAllSHUOInstances(Handle_XCAFDoc_ShapeTool self, Handle_XCAFDoc_GraphNode theSHUO, NCollection_Sequence_TopoDS_Shape theSHUOShapeSeq) -> Standard_Boolean

        Seaching for component shapes that styled by shuo
        Returns empty sequence of shape if no any shape is found.

        :type theSHUO: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :type theSHUOShapeSeq: OCC.wrapper.TopTools.TopTools_SequenceOfShape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetAllSHUOInstances(self, *args)


    def FindSHUO(self, *args):
        """
        FindSHUO(Handle_XCAFDoc_ShapeTool self, NCollection_Sequence_TDF_Label Labels, Handle_XCAFDoc_GraphNode theSHUOAttr) -> Standard_Boolean

        Searchs the SHUO by labels of components
        from upper_usage componet to next_usage
        Returns null attribute if no SHUO found

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence
        :type theSHUOAttr: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindSHUO(self, *args)


    def Expand(self, *args):
        """
        Expand(Handle_XCAFDoc_ShapeTool self, TDF_Label Shape) -> Standard_Boolean

        Convert Shape (compound/compsolid/shell/wire) to assembly

        :type Shape: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Expand(self, *args)


    def makeSubShape(self, *args):
        """
        makeSubShape(Handle_XCAFDoc_ShapeTool self, TDF_Label thePart, TopoDS_Shape theShape, TopLoc_Location theLoc)

        Make subshape for Part from Shape

        :type thePart: OCC.wrapper.TDF.TDF_Label
        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type theLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_makeSubShape(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_ShapeTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ShapeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_ShapeTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_ShapeTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_ShapeTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_ShapeTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_ShapeTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_ShapeTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_ShapeTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_ShapeTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_ShapeTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_ShapeTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_ShapeTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_ShapeTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_ShapeTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_ShapeTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_ShapeTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_ShapeTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_ShapeTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_ShapeTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_ShapeTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_ShapeTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_ShapeTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_ShapeTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_ShapeTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_ShapeTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_ShapeTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_ShapeTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_ShapeTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_ShapeTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_ShapeTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_ShapeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_ShapeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_ShapeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_ShapeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_ShapeTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_ShapeTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_ShapeTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_ShapeTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_ShapeTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ShapeTool_swigregister
Handle_XCAFDoc_ShapeTool_swigregister(Handle_XCAFDoc_ShapeTool)

def Handle_XCAFDoc_ShapeTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast(thing)
Handle_XCAFDoc_ShapeTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ShapeTool_DownCast

class XCAFDoc_AssemblyItemId(object):
    """
    Unique item identifier in the hierarchical product structure.
    A full path to an assembly component in the "part-of" graph starting from 
    the root node. 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XCAFDoc_AssemblyItemId self) -> XCAFDoc_AssemblyItemId
        __init__(XCAFDoc_AssemblyItemId self, NCollection_List_TCollection_AsciiString thePath) -> XCAFDoc_AssemblyItemId
        __init__(XCAFDoc_AssemblyItemId self, TCollection_AsciiString theString) -> XCAFDoc_AssemblyItemId

        Constructs an item ID from a formatted path, where label entries
        are separated by '/' symbol.
        \param [in] theString - formatted full path.

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _XCAFDoc.new_XCAFDoc_AssemblyItemId(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(XCAFDoc_AssemblyItemId self, NCollection_List_TCollection_AsciiString thePath)
        Init(XCAFDoc_AssemblyItemId self, TCollection_AsciiString theString)

        Initializes the item ID from a formatted path, where label entries
        are separated by '/' symbol.
        \param [in] theString - formatted full path.

        :type theString: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_Init(self, *args)


    def IsNull(self, *args):
        """
        IsNull(XCAFDoc_AssemblyItemId self) -> Standard_Boolean

        Returns true if the full path is empty, otherwise - false.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsNull(self, *args)


    def Nullify(self, *args):
        """
        Nullify(XCAFDoc_AssemblyItemId self)

        Clears the full path.


        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_Nullify(self, *args)


    def IsChild(self, *args):
        """
        IsChild(XCAFDoc_AssemblyItemId self, XCAFDoc_AssemblyItemId theOther) -> Standard_Boolean

        Checks if this item is a child of the given item.
        \param [in] theOther - potentially ancestor item.
        @return true if the item is a child of theOther item, otherwise - false.

        :type theOther: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsChild(self, *args)


    def IsDirectChild(self, *args):
        """
        IsDirectChild(XCAFDoc_AssemblyItemId self, XCAFDoc_AssemblyItemId theOther) -> Standard_Boolean

        Checks if this item is a direct child of the given item.
        \param [in] theOther - potentially parent item.
        @return true if the item is a direct child of theOther item, otherwise - false.

        :type theOther: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsDirectChild(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(XCAFDoc_AssemblyItemId self, XCAFDoc_AssemblyItemId theOther) -> Standard_Boolean

        Checks for item IDs equality.
        \param [in] theOther - the item ID to check equality with.
        @return true if this ID is equal to theOther, otherwise - false.

        :type theOther: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_IsEqual(self, *args)


    def GetPath(self, *args):
        """
        Returns the full path as a list of label entries.

        :rtype: OCC.wrapper.TColStd.TColStd_ListOfAsciiString

        """
        res = _XCAFDoc.XCAFDoc_AssemblyItemId_GetPath(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ToString(self, *args):
        """
        ToString(XCAFDoc_AssemblyItemId self) -> TCollection_AsciiString

        Returns the full pass as a formatted string.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _XCAFDoc.XCAFDoc_AssemblyItemId_ToString(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_AssemblyItemId
XCAFDoc_AssemblyItemId_swigregister = _XCAFDoc.XCAFDoc_AssemblyItemId_swigregister
XCAFDoc_AssemblyItemId_swigregister(XCAFDoc_AssemblyItemId)

class Handle_XCAFDoc_Area(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Area self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Area self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Area self, XCAFDoc_Area thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Area self, Handle_XCAFDoc_Area theHandle) -> Handle_XCAFDoc_Area
        assign(Handle_XCAFDoc_Area self, XCAFDoc_Area thePtr) -> Handle_XCAFDoc_Area
        assign(Handle_XCAFDoc_Area self, Handle_XCAFDoc_Area theHandle) -> Handle_XCAFDoc_Area

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Area self) -> XCAFDoc_Area

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Area self) -> XCAFDoc_Area

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Area___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Area self) -> XCAFDoc_Area

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Area___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Area___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Area___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Area(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Area_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Area

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Area_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Area_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Area self, Standard_Real const vol)
        Set(Handle_XCAFDoc_Area self, TDF_Label label, Standard_Real const area) -> Handle_XCAFDoc_Area

        Find, or create, an Area attribute and set its value

        :type label: OCC.wrapper.TDF.TDF_Label
        :type area: float
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Area

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_Area self) -> Standard_Real
        Get(Handle_XCAFDoc_Area self, TDF_Label label) -> Standard_Boolean

        Returns volume of area as argument and succes status
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type area: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Get(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Area self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Area self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Area self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Area self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Area self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Area_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Area_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Area self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Area self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Area self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Area self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Area self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Area self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Area self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Area self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Area self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Area self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Area self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Area self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Area self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Area self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Area self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Area self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Area self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Area self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Area self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Area self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Area self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Area self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Area self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Area self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Area self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Area self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Area self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Area self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Area self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Area self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Area___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Area self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Area self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Area self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Area self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Area self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Area self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Area self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Area self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Area self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Area self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Area_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Area self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Area_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Area_swigregister = _XCAFDoc.Handle_XCAFDoc_Area_swigregister
Handle_XCAFDoc_Area_swigregister(Handle_XCAFDoc_Area)

def Handle_XCAFDoc_Area_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Area_DownCast(thing)
Handle_XCAFDoc_Area_DownCast = _XCAFDoc.Handle_XCAFDoc_Area_DownCast

class Handle_XCAFDoc_Note(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Note self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Note self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Note self, XCAFDoc_Note thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Note self, Handle_XCAFDoc_Note theHandle) -> Handle_XCAFDoc_Note
        assign(Handle_XCAFDoc_Note self, XCAFDoc_Note thePtr) -> Handle_XCAFDoc_Note
        assign(Handle_XCAFDoc_Note self, Handle_XCAFDoc_Note theHandle) -> Handle_XCAFDoc_Note

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Note self) -> XCAFDoc_Note

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Note self) -> XCAFDoc_Note

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Note___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Note self) -> XCAFDoc_Note

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Note___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Note___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Note___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Note(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Note_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Note

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Note self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Note_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Note_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsMine(self, *args):
        """
        IsMine(Handle_XCAFDoc_Note self, TDF_Label theLabel) -> Standard_Boolean

        Checks if the given label represents a note.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsMine(self, *args)


    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_Note self, TDF_Label theLabel) -> Handle_XCAFDoc_Note

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Get(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Note self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp)

        Sets the user name and the timestamp of the note.
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        @return A handle to the attribute instance.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Set(self, *args)


    def UserName(self, *args):
        """
        Returns the user name, who created the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_Note_UserName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TimeStamp(self, *args):
        """
        Returns the timestamp of the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_Note_TimeStamp(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOrphan(self, *args):
        """
        IsOrphan(Handle_XCAFDoc_Note self) -> Standard_Boolean

        Checks if the note isn't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsOrphan(self, *args)


    def GetObject(self, *args):
        """
        GetObject(Handle_XCAFDoc_Note self) -> Handle_XCAFNoteObjects_NoteObject

        Returns auxiliary data object

        :rtype: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_GetObject(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_Note self, Handle_XCAFNoteObjects_NoteObject theObject)

        Updates auxiliary data

        :type theObject: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_SetObject(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Note self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Note self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Note self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Dump(self, *args)


    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Note_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Note self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Note self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Note self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Note self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Note self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Note self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Note self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Note self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Note self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Note self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Note self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Note self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Note self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Note self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Note self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Note self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Note self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Note self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Note self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Note self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Note self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Note self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Note self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Note self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Note self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Note self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Note self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Note self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_DeltaOnRemoval(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Note self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_NewEmpty(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Note self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Note self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Note___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Note self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Note self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Note self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Note self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Note self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Note self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Note self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Note self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Note self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Note self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Note_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Note self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Note_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Note_swigregister = _XCAFDoc.Handle_XCAFDoc_Note_swigregister
Handle_XCAFDoc_Note_swigregister(Handle_XCAFDoc_Note)

def Handle_XCAFDoc_Note_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Note_DownCast(thing)
Handle_XCAFDoc_Note_DownCast = _XCAFDoc.Handle_XCAFDoc_Note_DownCast

class XCAFDoc_NotesTool(TDF.TDF_Attribute):
    """
    A tool to annotate items in the hierarchical product structure.
    There are two basic entities, which operates the notes tool: notes
    and annotated items. A note is a user defined data structure derived
    from ef XCAFDoc_Note attribute that is attached to a separate label under
    the notes hive. An annotated item is represented by ef XCAFDoc_AssemblyItemRef
    attribute attached to a separate label under the annotated items
    hive. Notes are linked with annotated items by means of ef XCAFDoc_GraphNode
    attribute. Notes play parent roles and annotated items - child roles.

    ------------------------
    | XCAFDoc_DocumentTool |
    |          0:1         |
    ------------------------
    |1
    ------------------------
    |  XCAFDoc_NotesTool   |
    |         0:1:9        |
    ------------------------
    |1
    |   -------------------     ---------------------------
    +___|      Notes      |-----|       XCAFDoc_Note      |
    |  1|     0:1:9:1     |1   *|         0:1:9:1:*       |
    |   -------------------     ---------------------------
    |                                        !*
    |                              { XCAFDoc_GraphNode }
    |                                       *!
    |   -------------------     ---------------------------
    +___| Annotated items |-----| XCAFDoc_AssemblyItemRef |
    1|     0:1:9:2     |1   *|         0:1:9:2:*       |
    -------------------     ---------------------------

    A typical annotation procedure is illustrated by the code example below:
    \code{.c++}
    // Get the notes tool from a XCAF document
    Handle(XCAFDoc_NotesTool) aNotesTool = XCAFDoc_DocumentTool::NotesTool(aDoc->Main());
    // Create new comment note
    Handle(XCAFDoc_Note) aNote = aNotesTool->CreateComment(aUserName, aTimestamp, aComment);
    if (!aNote.IsNull()) {
    Handle(XCAFDoc_AssemblyItemRef) aRef = aNotesTool->AddNote(aNote->Label(), anAssemblyItemId);
    if (aRef.IsNull()) {
    // Process error...
    }
    }
    ndcode
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XCAFDoc_NotesTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XCAFDoc_NotesTool(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.XCAFDoc_NotesTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XCAFDoc.XCAFDoc_NotesTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.XCAFDoc_NotesTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label theLabel) -> Handle_XCAFDoc_NotesTool

        Create (if not exist) a notes tool from XCAFDoc on theLabel.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

        """
        return _XCAFDoc.XCAFDoc_NotesTool_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(XCAFDoc_NotesTool self) -> XCAFDoc_NotesTool

        Creates an empty notes tool.


        """
        this = _XCAFDoc.new_XCAFDoc_NotesTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetNotesLabel(self, *args):
        """
        GetNotesLabel(XCAFDoc_NotesTool self) -> TDF_Label

        Returns the label of the notes hive.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetNotesLabel(self, *args)


    def GetAnnotatedItemsLabel(self, *args):
        """
        GetAnnotatedItemsLabel(XCAFDoc_NotesTool self) -> TDF_Label

        Returns the label of the annotated items hive.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItemsLabel(self, *args)


    def NbNotes(self, *args):
        """
        NbNotes(XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the number of labels in the notes hive.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbNotes(self, *args)


    def NbAnnotatedItems(self, *args):
        """
        NbAnnotatedItems(XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the number of labels in the annotated items hive.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbAnnotatedItems(self, *args)


    def GetAnnotatedItems(self, *args):
        """
        GetAnnotatedItems(XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns all labels from the annotated items hive.
        The label sequence isn't cleared beforehand.
        \param [out] theNoteLabels - sequence of labels.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAnnotatedItems(self, *args)


    def IsAnnotatedItem(self, *args):
        """
        IsAnnotatedItem(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId) -> Standard_Boolean
        IsAnnotatedItem(XCAFDoc_NotesTool self, TDF_Label theItemLabel) -> Standard_Boolean

        Checks if the given labeled item is annotated.
        \param [in] theItemLabel - item label.
        @return true if the item is annotated, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_IsAnnotatedItem(self, *args)


    def FindAnnotatedItem(self, *args):
        """
        FindAnnotatedItem(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId) -> TDF_Label
        FindAnnotatedItem(XCAFDoc_NotesTool self, TDF_Label theItemLabel) -> TDF_Label

        Finds a label of the given labeled item in the annotated items hive.
        \param [in] theItemLabel - item label.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItem(self, *args)


    def FindAnnotatedItemAttr(self, *args):
        """
        FindAnnotatedItemAttr(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> TDF_Label
        FindAnnotatedItemAttr(XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID) -> TDF_Label

        Finds a label of the given labeled item's attribute in the annotated items hive.
        \param [in] theItemLabel - item label.
        \param [in] theGUID      - item's attribute GUID.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemAttr(self, *args)


    def FindAnnotatedItemSubshape(self, *args):
        """
        FindAnnotatedItemSubshape(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex) -> TDF_Label
        FindAnnotatedItemSubshape(XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex) -> TDF_Label

        Finds a label of the given labeled item's subshape in the annotated items hive.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - labeled item's subshape index.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.XCAFDoc_NotesTool_FindAnnotatedItemSubshape(self, *args)


    def CreateComment(self, *args):
        """
        CreateComment(XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_Note

        Create a new comment note.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theComment   - textual comment.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateComment(self, *args)


    def CreateBalloon(self, *args):
        """
        CreateBalloon(XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_Note

        Create a new 'balloon' note.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteBalloon 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theComment   - textual comment.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateBalloon(self, *args)


    def CreateBinData(self, *args):
        """
        CreateBinData(XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Handle_XCAFDoc_Note
        CreateBinData(XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData) -> Handle_XCAFDoc_Note

        Create a new note with data loaded from a byte data array.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theTitle     - data title.
        \param [in] theMIMEtype  - MIME type of the file.
        \param [in] theData      - byte data array.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTitle: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMIMEtype: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.XCAFDoc_NotesTool_CreateBinData(self, *args)


    def GetNotes(self, *args):
        """
        GetNotes(XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels)
        GetNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer
        GetNotes(XCAFDoc_NotesTool self, TDF_Label theItemLabel, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the labeled item.
        Notes linked to item's attributes aren't
        taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemLabel   - item label.
        \param [out] theNoteLabels - sequence of labels.
        @return number of added labels.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetNotes(self, *args)


    def GetAttrNotes(self, *args):
        """
        GetAttrNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer
        GetAttrNotes(XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the labeled item's attribute.
        Notes linked to the item itself or to item's subshapes
        aren't taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - item's attribute GUID.
        \param [out] theNoteLabels - sequence of labels.
        @return number of added labels.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetAttrNotes(self, *args)


    def GetSubshapeNotes(self, *args):
        """
        GetSubshapeNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the annotated item.
        Notes linked to the item itself or to item's attributes
        taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemId        - assembly item ID.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        \param [out] theNoteLabels   - sequence of labels.
        @return number of added labels.

        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theSubshapeIndex: int
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetSubshapeNotes(self, *args)


    def AddNote(self, *args):
        """
        AddNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId) -> Handle_XCAFDoc_AssemblyItemRef
        AddNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item.
        \param [in] theNoteLabel - note label.
        \param [in] theItemLabel - item label.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNote(self, *args)


    def AddNoteToAttr(self, *args):
        """
        AddNoteToAttr(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef
        AddNoteToAttr(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item's attribute.
        \param [in] theNoteLabel - note label.
        \param [in] theItemLabel - item label.
        \param [in] theGUID      - assembly item's attribute GUID.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNoteToAttr(self, *args)


    def AddNoteToSubshape(self, *args):
        """
        AddNoteToSubshape(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex) -> Handle_XCAFDoc_AssemblyItemRef
        AddNoteToSubshape(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item's subshape.
        \param [in] theNoteLabel     - note label.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.XCAFDoc_NotesTool_AddNoteToSubshape(self, *args)


    def RemoveNote(self, *args):
        """
        RemoveNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes the given note from the labeled item.
        \param [in] theNoteLabel   - note label.
        \param [in] theItemLabel   - item label.
        \param [in] theDelIfOrphan - deletes the note from the notes hive 
        if there are no more labeled items
        linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveNote(self, *args)


    def RemoveSubshapeNote(self, *args):
        """
        RemoveSubshapeNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveSubshapeNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes the given note from the labeled item's subshape.
        \param [in] theNoteLabel     - note label.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - labeled item's subshape index.
        \param [in] theDelIfOrphan   - deletes the note from the notes hive 
        if there are no more assembly item's
        subshape linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveSubshapeNote(self, *args)


    def RemoveAttrNote(self, *args):
        """
        RemoveAttrNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAttrNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes a note from the labeled item's attribute.
        \param [in] theNoteLabel   - note label.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - labeled item's attribute GUID.
        \param [in] theDelIfOrphan - deletes the note from the notes hive 
        if there are no more assembly item's
        attribute linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAttrNote(self, *args)


    def RemoveAllNotes(self, *args):
        """
        RemoveAllNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAllNotes(XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the labeled item.
        \param [in] theItemLabel   - item label.
        \param [in] theDelIfOrphan - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllNotes(self, *args)


    def RemoveAllSubshapeNotes(self, *args):
        """
        RemoveAllSubshapeNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the assembly item's subshape.
        \param [in] theItemId        - assembly item ID.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        \param [in] theDelIfOrphan   - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theSubshapeIndex: int
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllSubshapeNotes(self, *args)


    def RemoveAllAttrNotes(self, *args):
        """
        RemoveAllAttrNotes(XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAllAttrNotes(XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the labeled item's attribute.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - labeled item's attribute GUID.
        \param [in] theDelIfOrphan - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_RemoveAllAttrNotes(self, *args)


    def DeleteNote(self, *args):
        """
        DeleteNote(XCAFDoc_NotesTool self, TDF_Label theNoteLabel) -> Standard_Boolean

        Deletes the given note.
        Removes all links with items annotated by the note.
        \param [in] theNoteLabel - note label.
        @return true if the note is deleted, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteNote(self, *args)


    def DeleteNotes(self, *args):
        """
        DeleteNotes(XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Deletes the given notes.
        Removes all links with items annotated by the notes.
        \param [in] theNoteLabels - note label sequence.
        @return number of deleted notes.

        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteNotes(self, *args)


    def DeleteAllNotes(self, *args):
        """
        DeleteAllNotes(XCAFDoc_NotesTool self) -> Standard_Integer

        Deletes all notes.
        Clears all annotations.
        @return number of deleted notes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteAllNotes(self, *args)


    def NbOrphanNotes(self, *args):
        """
        NbOrphanNotes(XCAFDoc_NotesTool self) -> Standard_Integer

        Returns number of notes that aren't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_NbOrphanNotes(self, *args)


    def GetOrphanNotes(self, *args):
        """
        GetOrphanNotes(XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels)

        Returns note labels that aren't linked to annotated items.
        The label sequence isn't cleared beforehand.
        \param [out] theNoteLabels - sequence of labels.

        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.XCAFDoc_NotesTool_GetOrphanNotes(self, *args)


    def DeleteOrphanNotes(self, *args):
        """
        DeleteOrphanNotes(XCAFDoc_NotesTool self) -> Standard_Integer

        Deletes all notes that aren't linked to annotated items.
        @return number of deleted notes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.XCAFDoc_NotesTool_DeleteOrphanNotes(self, *args)


    def ID(self, *args):
        """
        @}

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.XCAFDoc_NotesTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(XCAFDoc_NotesTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NotesTool_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(XCAFDoc_NotesTool self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.XCAFDoc_NotesTool_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(XCAFDoc_NotesTool self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.XCAFDoc_NotesTool_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(XCAFDoc_NotesTool self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.XCAFDoc_NotesTool_Dump(self, *args)

    __swig_destroy__ = _XCAFDoc.delete_XCAFDoc_NotesTool
XCAFDoc_NotesTool_swigregister = _XCAFDoc.XCAFDoc_NotesTool_swigregister
XCAFDoc_NotesTool_swigregister(XCAFDoc_NotesTool)

def XCAFDoc_NotesTool_get_type_name(*args):
    """
    XCAFDoc_NotesTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XCAFDoc.XCAFDoc_NotesTool_get_type_name(*args)

def XCAFDoc_NotesTool_get_type_descriptor(*args):
    """
    XCAFDoc_NotesTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XCAFDoc.XCAFDoc_NotesTool_get_type_descriptor(*args)

def XCAFDoc_NotesTool_GetID(*args):
    """
    XCAFDoc_NotesTool_GetID() -> Standard_GUID

    Returns default attribute GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _XCAFDoc.XCAFDoc_NotesTool_GetID(*args)

def XCAFDoc_NotesTool_Set(*args):
    """
    XCAFDoc_NotesTool_Set(TDF_Label theLabel) -> Handle_XCAFDoc_NotesTool

    Create (if not exist) a notes tool from XCAFDoc on theLabel.

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

    """
    return _XCAFDoc.XCAFDoc_NotesTool_Set(*args)

class Handle_XCAFDoc_ColorTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_ColorTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_ColorTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_ColorTool self, XCAFDoc_ColorTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_ColorTool self, Handle_XCAFDoc_ColorTool theHandle) -> Handle_XCAFDoc_ColorTool
        assign(Handle_XCAFDoc_ColorTool self, XCAFDoc_ColorTool thePtr) -> Handle_XCAFDoc_ColorTool
        assign(Handle_XCAFDoc_ColorTool self, Handle_XCAFDoc_ColorTool theHandle) -> Handle_XCAFDoc_ColorTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_ColorTool self) -> XCAFDoc_ColorTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_ColorTool self) -> XCAFDoc_ColorTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_ColorTool self) -> XCAFDoc_ColorTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_ColorTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_ColorTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_ColorTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_ColorTool

    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_ColorTool self, TDF_Label L) -> Handle_XCAFDoc_ColorTool

        Creates (if not exist) ColorTool.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Set(self, *args)


    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ColorTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BaseLabel(self, *args):
        """
        BaseLabel(Handle_XCAFDoc_ColorTool self) -> TDF_Label

        returns the label under which colors are stored

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BaseLabel(self, *args)


    def ShapeTool(self, *args):
        """
        Returns internal XCAFDoc_ShapeTool tool

        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        res = _XCAFDoc.Handle_XCAFDoc_ColorTool_ShapeTool(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsColor(self, *args):
        """
        IsColor(Handle_XCAFDoc_ColorTool self, TDF_Label lab) -> Standard_Boolean

        Returns True if label belongs to a colortable and
        is a color definition

        :type lab: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsColor(self, *args)


    def GetColor(self, *args):
        """
        GetColor(Handle_XCAFDoc_ColorTool self, TDF_Label lab, Quantity_Color col) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TDF_Label lab, Quantity_ColorRGBA col) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, TDF_Label colorL) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, TDF_Label colorL) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean

        Returns color assigned to <L> as <type>
        Returns False if no such color is assigned

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_GetColor(self, *args)


    def FindColor(self, *args):
        """
        FindColor(Handle_XCAFDoc_ColorTool self, Quantity_Color col, TDF_Label lab) -> Standard_Boolean
        FindColor(Handle_XCAFDoc_ColorTool self, Quantity_ColorRGBA col, TDF_Label lab) -> Standard_Boolean
        FindColor(Handle_XCAFDoc_ColorTool self, Quantity_Color col) -> TDF_Label
        FindColor(Handle_XCAFDoc_ColorTool self, Quantity_ColorRGBA col) -> TDF_Label

        Finds a color definition in a colortable and returns
        its label if found (or Null label else)

        :type col: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_FindColor(self, *args)


    def AddColor(self, *args):
        """
        AddColor(Handle_XCAFDoc_ColorTool self, Quantity_Color col) -> TDF_Label
        AddColor(Handle_XCAFDoc_ColorTool self, Quantity_ColorRGBA col) -> TDF_Label

        Adds a color definition to a colortable and returns
        its label (returns existing label if the same color
        is already defined)

        :type col: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AddColor(self, *args)


    def RemoveColor(self, *args):
        """
        RemoveColor(Handle_XCAFDoc_ColorTool self, TDF_Label lab)

        Removes color from the colortable

        :type lab: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_RemoveColor(self, *args)


    def GetColors(self, *args):
        """
        GetColors(Handle_XCAFDoc_ColorTool self, NCollection_Sequence_TDF_Label Labels)

        Returns a sequence of colors currently stored
        in the colortable

        :type Labels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_GetColors(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, TDF_Label colorL, XCAFDoc_ColorType const type)
        SetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, Quantity_Color Color, XCAFDoc_ColorType const type)
        SetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, Quantity_ColorRGBA Color, XCAFDoc_ColorType const type)
        SetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, TDF_Label colorL, XCAFDoc_ColorType const type) -> Standard_Boolean
        SetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, Quantity_Color Color, XCAFDoc_ColorType const type) -> Standard_Boolean
        SetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, Quantity_ColorRGBA Color, XCAFDoc_ColorType const type) -> Standard_Boolean

        Sets a link with GUID defined by <type> (see
        XCAFDoc::ColorRefGUID()) from label <L> to color <Color>
        in the colortable
        Adds a color as necessary
        Returns False if cannot find a label for shape S

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_SetColor(self, *args)


    def UnSetColor(self, *args):
        """
        UnSetColor(Handle_XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type)
        UnSetColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type) -> Standard_Boolean

        Removes a link with GUID defined by <type> (see
        XCAFDoc::ColorRefGUID()) from label <L> to color
        Returns True if such link existed

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_UnSetColor(self, *args)


    def IsSet(self, *args):
        """
        IsSet(Handle_XCAFDoc_ColorTool self, TDF_Label L, XCAFDoc_ColorType const type) -> Standard_Boolean
        IsSet(Handle_XCAFDoc_ColorTool self, TopoDS_Shape S, XCAFDoc_ColorType const type) -> Standard_Boolean

        Returns True if label <L> has a color assignment
        of the type <type>

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsSet(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_XCAFDoc_ColorTool self, TDF_Label L) -> Standard_Boolean

        Return TRUE if object on this label is visible, FALSE if invisible.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsVisible(self, *args)


    def SetVisibility(self, *args):
        """
        SetVisibility(Handle_XCAFDoc_ColorTool self, TDF_Label shapeLabel, Standard_Boolean const isvisible)

        Set the visibility of object on label. Do nothing if there no any object.
        Set UAttribute with corresponding GUID.

        :type shapeLabel: OCC.wrapper.TDF.TDF_Label
        :type isvisible: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_SetVisibility(self, *args)


    def IsColorByLayer(self, *args):
        """
        IsColorByLayer(Handle_XCAFDoc_ColorTool self, TDF_Label L) -> Standard_Boolean

        Return TRUE if object color defined by its Layer, FALSE if not.

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsColorByLayer(self, *args)


    def SetColorByLayer(self, *args):
        """
        SetColorByLayer(Handle_XCAFDoc_ColorTool self, TDF_Label shapeLabel, Standard_Boolean const isColorByLayer)

        Set the Color defined by Layer flag on label. Do nothing if there no any object.
        Set UAttribute with corresponding GUID.

        :type shapeLabel: OCC.wrapper.TDF.TDF_Label
        :type isColorByLayer: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_SetColorByLayer(self, *args)


    def SetInstanceColor(self, *args):
        """
        SetInstanceColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_Color color, Standard_Boolean const isCreateSHUO) -> Standard_Boolean
        SetInstanceColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_ColorRGBA color, Standard_Boolean const isCreateSHUO) -> Standard_Boolean

        Sets the color of component that styled with SHUO structure
        Returns FALSE if no sush component found
        NOTE: create SHUO structeure if it is necessary and if <isCreateSHUO>

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :type isCreateSHUO: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_SetInstanceColor(self, *args)


    def GetInstanceColor(self, *args):
        """
        GetInstanceColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_Color color) -> Standard_Boolean
        GetInstanceColor(Handle_XCAFDoc_ColorTool self, TopoDS_Shape theShape, XCAFDoc_ColorType const type, Quantity_ColorRGBA color) -> Standard_Boolean

        Gets the color of component that styled with SHUO structure
        Returns FALSE if no sush component or color type

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type type: OCC.wrapper.XCAFDoc.XCAFDoc_ColorType
        :type color: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_GetInstanceColor(self, *args)


    def IsInstanceVisible(self, *args):
        """
        IsInstanceVisible(Handle_XCAFDoc_ColorTool self, TopoDS_Shape theShape) -> Standard_Boolean

        Gets the visibility status of component that styled with SHUO structure
        Returns FALSE if no sush component

        :type theShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsInstanceVisible(self, *args)


    def ReverseChainsOfTreeNodes(self, *args):
        """
        ReverseChainsOfTreeNodes(Handle_XCAFDoc_ColorTool self) -> Standard_Boolean

        Reverses order in chains of TreeNodes (from Last to First) under
        each Color Label since we became to use function ::Prepend()
        instead of ::Append() in method SetColor() for acceleration

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_ReverseChainsOfTreeNodes(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_ColorTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_ColorTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_ColorTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_ColorTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ColorTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_ColorTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_ColorTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_ColorTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_ColorTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_ColorTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_ColorTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_ColorTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_ColorTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_ColorTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_ColorTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_ColorTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_ColorTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_ColorTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_ColorTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_ColorTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_ColorTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_ColorTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_ColorTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_ColorTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_ColorTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_ColorTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_ColorTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_ColorTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_ColorTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_ColorTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_ColorTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_ColorTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_ColorTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_ColorTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_ColorTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_ColorTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_ColorTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_ColorTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_ColorTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_ColorTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_ColorTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_ColorTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_ColorTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_ColorTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_ColorTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_ColorTool_swigregister = _XCAFDoc.Handle_XCAFDoc_ColorTool_swigregister
Handle_XCAFDoc_ColorTool_swigregister(Handle_XCAFDoc_ColorTool)

def Handle_XCAFDoc_ColorTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast(thing)
Handle_XCAFDoc_ColorTool_DownCast = _XCAFDoc.Handle_XCAFDoc_ColorTool_DownCast

class Handle_XCAFDoc_NoteComment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_NoteComment self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_NoteComment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_NoteComment self, XCAFDoc_NoteComment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_NoteComment self, Handle_XCAFDoc_NoteComment theHandle) -> Handle_XCAFDoc_NoteComment
        assign(Handle_XCAFDoc_NoteComment self, XCAFDoc_NoteComment thePtr) -> Handle_XCAFDoc_NoteComment
        assign(Handle_XCAFDoc_NoteComment self, Handle_XCAFDoc_NoteComment theHandle) -> Handle_XCAFDoc_NoteComment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_NoteComment self) -> XCAFDoc_NoteComment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_NoteComment self) -> XCAFDoc_NoteComment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_NoteComment self) -> XCAFDoc_NoteComment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_NoteComment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_NoteComment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_NoteComment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_NoteComment_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_NoteComment

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_NoteComment self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_NoteComment self, TDF_Label theLabel) -> Handle_XCAFDoc_NoteComment

        Finds a reference attribute on the given label and returns it, if it is found

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NoteComment

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Get(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_NoteComment self, TDF_Label theLabel, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_NoteComment
        Set(Handle_XCAFDoc_NoteComment self, TCollection_ExtendedString theComment)

        Sets the comment text.

        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Set(self, *args)


    def Comment(self, *args):
        """
        Returns the comment text.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_Comment(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_NoteComment self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_NoteComment self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_NoteComment self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Dump(self, *args)


    def IsMine(self, *args):
        """
        IsMine(Handle_XCAFDoc_NoteComment self, TDF_Label theLabel) -> Standard_Boolean

        Checks if the given label represents a note.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsMine(self, *args)


    def UserName(self, *args):
        """
        Returns the user name, who created the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_UserName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TimeStamp(self, *args):
        """
        Returns the timestamp of the note.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _XCAFDoc.Handle_XCAFDoc_NoteComment_TimeStamp(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOrphan(self, *args):
        """
        IsOrphan(Handle_XCAFDoc_NoteComment self) -> Standard_Boolean

        Checks if the note isn't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsOrphan(self, *args)


    def GetObject(self, *args):
        """
        GetObject(Handle_XCAFDoc_NoteComment self) -> Handle_XCAFNoteObjects_NoteObject

        Returns auxiliary data object

        :rtype: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_GetObject(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_NoteComment self, Handle_XCAFNoteObjects_NoteObject theObject)

        Updates auxiliary data

        :type theObject: OCC.wrapper.XCAFNoteObjects.Handle_XCAFNoteObjects_NoteObject

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_SetObject(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_NoteComment self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_NoteComment self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_NoteComment self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_NoteComment self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_NoteComment self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_NoteComment self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_NoteComment self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_NoteComment self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_NoteComment self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_NoteComment self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_NoteComment self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_NoteComment self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_NoteComment self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_NoteComment self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_NoteComment self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_NoteComment self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_NoteComment self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_NoteComment self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_NoteComment self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_NoteComment self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_NoteComment self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_NoteComment self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_NoteComment self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_NoteComment self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_NoteComment self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_NoteComment self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_NoteComment self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_NoteComment self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_NoteComment self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_NoteComment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_NoteComment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_NoteComment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_NoteComment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_NoteComment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_NoteComment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_NoteComment self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_NoteComment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NoteComment_DecrementRefCounter(self, *args)

Handle_XCAFDoc_NoteComment_swigregister = _XCAFDoc.Handle_XCAFDoc_NoteComment_swigregister
Handle_XCAFDoc_NoteComment_swigregister(Handle_XCAFDoc_NoteComment)

def Handle_XCAFDoc_NoteComment_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_NoteComment_DownCast(thing)
Handle_XCAFDoc_NoteComment_DownCast = _XCAFDoc.Handle_XCAFDoc_NoteComment_DownCast

class Handle_XCAFDoc_DimTol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_DimTol self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_DimTol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_DimTol self, XCAFDoc_DimTol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_DimTol self, Handle_XCAFDoc_DimTol theHandle) -> Handle_XCAFDoc_DimTol
        assign(Handle_XCAFDoc_DimTol self, XCAFDoc_DimTol thePtr) -> Handle_XCAFDoc_DimTol
        assign(Handle_XCAFDoc_DimTol self, Handle_XCAFDoc_DimTol theHandle) -> Handle_XCAFDoc_DimTol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_DimTol self) -> XCAFDoc_DimTol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_DimTol self) -> XCAFDoc_DimTol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_DimTol self) -> XCAFDoc_DimTol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_DimTol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_DimTol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_DimTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DimTol_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_DimTol

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTol_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_DimTol self, TDF_Label label, Standard_Integer const kind, Handle_TColStd_HArray1OfReal aVal, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription) -> Handle_XCAFDoc_DimTol
        Set(Handle_XCAFDoc_DimTol self, Standard_Integer const kind, Handle_TColStd_HArray1OfReal aVal, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription)

        :type kind: int
        :type aVal: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Set(self, *args)


    def GetKind(self, *args):
        """
        GetKind(Handle_XCAFDoc_DimTol self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_GetKind(self, *args)


    def GetVal(self, *args):
        """
        GetVal(Handle_XCAFDoc_DimTol self) -> Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_GetVal(self, *args)


    def GetName(self, *args):
        """
        GetName(Handle_XCAFDoc_DimTol self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(Handle_XCAFDoc_DimTol self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_GetDescription(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTol_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_DimTol self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_DimTol self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_DimTol self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_DimTol self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DimTol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_DimTol self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_DimTol self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_DimTol self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_DimTol self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_DimTol self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_DimTol self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_DimTol self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_DimTol self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_DimTol self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_DimTol self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_DimTol self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_DimTol self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_DimTol self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_DimTol self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_DimTol self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_DimTol self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_DimTol self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_DimTol self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_DimTol self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_DimTol self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_DimTol self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_DimTol self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_DimTol self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_DimTol self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_DimTol self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_DimTol self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_DimTol self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_DimTol self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_DimTol self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_DimTol self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_DimTol self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_DimTol self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_DimTol self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_DimTol self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_DimTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_DimTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_DimTol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_DimTol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_DimTol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_DimTol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_DimTol self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_DimTol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DimTol_DecrementRefCounter(self, *args)

Handle_XCAFDoc_DimTol_swigregister = _XCAFDoc.Handle_XCAFDoc_DimTol_swigregister
Handle_XCAFDoc_DimTol_swigregister(Handle_XCAFDoc_DimTol)

def Handle_XCAFDoc_DimTol_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast(thing)
Handle_XCAFDoc_DimTol_DownCast = _XCAFDoc.Handle_XCAFDoc_DimTol_DownCast

class Handle_XCAFDoc_Volume(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Volume self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Volume self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Volume self, XCAFDoc_Volume thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Volume self, Handle_XCAFDoc_Volume theHandle) -> Handle_XCAFDoc_Volume
        assign(Handle_XCAFDoc_Volume self, XCAFDoc_Volume thePtr) -> Handle_XCAFDoc_Volume
        assign(Handle_XCAFDoc_Volume self, Handle_XCAFDoc_Volume theHandle) -> Handle_XCAFDoc_Volume

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Volume self) -> XCAFDoc_Volume

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Volume self) -> XCAFDoc_Volume

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Volume self) -> XCAFDoc_Volume

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Volume___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Volume___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Volume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Volume_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Volume

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Volume_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Volume_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Volume self, Standard_Real const vol)
        Set(Handle_XCAFDoc_Volume self, TDF_Label label, Standard_Real const vol) -> Handle_XCAFDoc_Volume

        Find, or create, an Volume attribute and set its value

        :type label: OCC.wrapper.TDF.TDF_Label
        :type vol: float
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Volume

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_XCAFDoc_Volume self) -> Standard_Real
        Get(Handle_XCAFDoc_Volume self, TDF_Label label) -> Standard_Boolean

        Returns volume as argument
        returns false if no such attribute at the <label>

        :type label: OCC.wrapper.TDF.TDF_Label
        :type vol: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Get(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Volume self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Volume self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Volume self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Volume self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Volume self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Volume_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Volume_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Volume self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Volume self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Volume self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Volume self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Volume self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Volume self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Volume self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Volume self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Volume self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Volume self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Volume self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Volume self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Volume self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Volume self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Volume self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Volume self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Volume self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Volume self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Volume self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Volume self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Volume self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Volume self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Volume self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Volume self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Volume self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Volume self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Volume self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Volume self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Volume self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Volume self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Volume self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Volume self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Volume self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Volume self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Volume self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Volume self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Volume self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Volume self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Volume self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Volume self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Volume self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Volume_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Volume_swigregister = _XCAFDoc.Handle_XCAFDoc_Volume_swigregister
Handle_XCAFDoc_Volume_swigregister(Handle_XCAFDoc_Volume)

def Handle_XCAFDoc_Volume_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Volume_DownCast(thing)
Handle_XCAFDoc_Volume_DownCast = _XCAFDoc.Handle_XCAFDoc_Volume_DownCast

class Handle_XCAFDoc_GraphNode(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_GraphNode self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_GraphNode self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_GraphNode self, XCAFDoc_GraphNode thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode theHandle) -> Handle_XCAFDoc_GraphNode
        assign(Handle_XCAFDoc_GraphNode self, XCAFDoc_GraphNode thePtr) -> Handle_XCAFDoc_GraphNode
        assign(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode theHandle) -> Handle_XCAFDoc_GraphNode

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_GraphNode self) -> XCAFDoc_GraphNode

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_GraphNode self) -> XCAFDoc_GraphNode

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_GraphNode self) -> XCAFDoc_GraphNode

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_GraphNode___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_GraphNode___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_GraphNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_GraphNode

    def Find(self, *args):
        """
        Find(Handle_XCAFDoc_GraphNode self, TDF_Label L, Handle_XCAFDoc_GraphNode G) -> Standard_Boolean

        class  methods working on the node
        ===================================
        Shortcut to search  a Graph node attribute with default
        GraphID.  Returns true if found.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type G: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Find(self, *args)


    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_GraphNode self, TDF_Label L) -> Handle_XCAFDoc_GraphNode
        Set(Handle_XCAFDoc_GraphNode self, TDF_Label L, Standard_GUID ExplicitGraphID) -> Handle_XCAFDoc_GraphNode

        Finds  or Creates a   GraphNode attribute on  the label
        <L>, with an   explicit tree ID.  <ExplicitGraphID>  is
        the  ID   returned by    <TDF_Attribute::ID>   method.
        Returns the found/created GraphNode attribute.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type ExplicitGraphID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Set(self, *args)


    def GetDefaultGraphID(self, *args):
        """
        returns a default  Graph ID.  this  ID is  used by the
        <Set> method without explicit tree ID.
        Instance methods:
        ================

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_GraphNode_GetDefaultGraphID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGraphID(self, *args):
        """
        SetGraphID(Handle_XCAFDoc_GraphNode self, Standard_GUID explicitID)

        :type explicitID: OCC.wrapper.Standard.Standard_GUID

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_SetGraphID(self, *args)


    def SetFather(self, *args):
        """
        SetFather(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Integer

        Set GraphNode <F> as father of me and returns index of <F>
        in Sequence that containing Fathers GraphNodes.
        return index of <F> from GraphNodeSequnece

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_SetFather(self, *args)


    def SetChild(self, *args):
        """
        SetChild(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Integer

        Set GraphNode <Ch> as child of me and returns index of <Ch>
        in Sequence that containing Children GraphNodes.
        return index of <Ch> from GraphNodeSequnece

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_SetChild(self, *args)


    def UnSetFather(self, *args):
        """
        UnSetFather(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F)
        UnSetFather(Handle_XCAFDoc_GraphNode self, Standard_Integer const Findex)

        Remove Father GraphNode by index from Fathers GraphNodeSequence.
        and remove link between father and child.

        :type Findex: int

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_UnSetFather(self, *args)


    def UnSetChild(self, *args):
        """
        UnSetChild(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch)
        UnSetChild(Handle_XCAFDoc_GraphNode self, Standard_Integer const Chindex)

        Remove Child GraphNode by index from Children GraphNodeSequence.
        and remove link between father and child.

        :type Chindex: int

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_UnSetChild(self, *args)


    def GetFather(self, *args):
        """
        GetFather(Handle_XCAFDoc_GraphNode self, Standard_Integer const Findex) -> Handle_XCAFDoc_GraphNode

        Return GraphNode by index from GraphNodeSequence.

        :type Findex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_GetFather(self, *args)


    def GetChild(self, *args):
        """
        GetChild(Handle_XCAFDoc_GraphNode self, Standard_Integer const Chindex) -> Handle_XCAFDoc_GraphNode

        Return GraphNode by index from GraphNodeSequence.

        :type Chindex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_GetChild(self, *args)


    def FatherIndex(self, *args):
        """
        FatherIndex(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Integer

        Return index of <F>, or zero if there is no such Graphnode.

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_FatherIndex(self, *args)


    def ChildIndex(self, *args):
        """
        ChildIndex(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Integer

        Return index of <Ch>, or zero if there is no such Graphnode.

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_ChildIndex(self, *args)


    def IsFather(self, *args):
        """
        IsFather(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode Ch) -> Standard_Boolean

        returns TRUE if <me> is father of <Ch>.

        :type Ch: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsFather(self, *args)


    def IsChild(self, *args):
        """
        IsChild(Handle_XCAFDoc_GraphNode self, Handle_XCAFDoc_GraphNode F) -> Standard_Boolean

        returns TRUE if <me> is child of <F>.

        :type F: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_GraphNode
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsChild(self, *args)


    def NbFathers(self, *args):
        """
        NbFathers(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        return Number of Fathers GraphNodes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_NbFathers(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        return Number of Childrens GraphNodes.
        Implementation of Attribute methods:
        ===================================

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_NbChildren(self, *args)


    def ID(self, *args):
        """
        Returns the Graph ID (default or explicit one depending
        onthe Set method used).

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_GraphNode_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_GraphNode self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_GraphNode self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Paste(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_NewEmpty(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_GraphNode self, Handle_TDF_DataSet aDataSet)

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_GraphNode self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Dump(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_GraphNode self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_BeforeForget(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_GraphNode self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_GraphNode_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_GraphNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_GraphNode self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_GraphNode self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_GraphNode self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_GraphNode self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_GraphNode self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_GraphNode self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_GraphNode self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_GraphNode self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_GraphNode self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_GraphNode self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_GraphNode self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_GraphNode self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_GraphNode self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_BeforeRemoval(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_GraphNode self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_GraphNode self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_GraphNode self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_GraphNode self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_GraphNode self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_GraphNode self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_GraphNode self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_GraphNode self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_DeltaOnRemoval(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_GraphNode self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_GraphNode self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_GraphNode self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_GraphNode self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_GraphNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_GraphNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_GraphNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_GraphNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_GraphNode self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_GraphNode self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_GraphNode self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_GraphNode_DecrementRefCounter(self, *args)

Handle_XCAFDoc_GraphNode_swigregister = _XCAFDoc.Handle_XCAFDoc_GraphNode_swigregister
Handle_XCAFDoc_GraphNode_swigregister(Handle_XCAFDoc_GraphNode)

def Handle_XCAFDoc_GraphNode_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast(thing)
Handle_XCAFDoc_GraphNode_DownCast = _XCAFDoc.Handle_XCAFDoc_GraphNode_DownCast

class Handle_XCAFDoc_DocumentTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_DocumentTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_DocumentTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_DocumentTool self, XCAFDoc_DocumentTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_DocumentTool self, Handle_XCAFDoc_DocumentTool theHandle) -> Handle_XCAFDoc_DocumentTool
        assign(Handle_XCAFDoc_DocumentTool self, XCAFDoc_DocumentTool thePtr) -> Handle_XCAFDoc_DocumentTool
        assign(Handle_XCAFDoc_DocumentTool self, Handle_XCAFDoc_DocumentTool theHandle) -> Handle_XCAFDoc_DocumentTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_DocumentTool self) -> XCAFDoc_DocumentTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_DocumentTool self) -> XCAFDoc_DocumentTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_DocumentTool self) -> XCAFDoc_DocumentTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_DocumentTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_DocumentTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_DocumentTool

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DocumentTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_DocumentTool self, TDF_Label L, Standard_Boolean const IsAcces) -> Handle_XCAFDoc_DocumentTool

        Create (if not exist) DocumentTool attribute
        on 0.1 label if <IsAcces> is true, else
        on <L> label.
        This label will be returned by DocLabel();
        If the attribute is already set it won't be reset on
        <L> even if <IsAcces> is false.
        ColorTool and ShapeTool attributes are also set by this method.

        :type L: OCC.wrapper.TDF.TDF_Label
        :type IsAcces: bool
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DocumentTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Set(self, *args)


    def IsXCAFDocument(self, *args):
        """
        IsXCAFDocument(Handle_XCAFDoc_DocumentTool self, Handle_TDocStd_Document Doc) -> Standard_Boolean

        :type Doc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsXCAFDocument(self, *args)


    def DocLabel(self, *args):
        """
        DocLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns label where the DocumentTool attribute is or
        0.1 if DocumentTool is not yet set.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DocLabel(self, *args)


    def ShapesLabel(self, *args):
        """
        ShapesLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 1.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ShapesLabel(self, *args)


    def ColorsLabel(self, *args):
        """
        ColorsLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 2.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ColorsLabel(self, *args)


    def LayersLabel(self, *args):
        """
        LayersLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 3.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_LayersLabel(self, *args)


    def DGTsLabel(self, *args):
        """
        DGTsLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 4.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DGTsLabel(self, *args)


    def MaterialsLabel(self, *args):
        """
        MaterialsLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 5.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_MaterialsLabel(self, *args)


    def ViewsLabel(self, *args):
        """
        ViewsLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 7.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ViewsLabel(self, *args)


    def ClippingPlanesLabel(self, *args):
        """
        ClippingPlanesLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 8.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ClippingPlanesLabel(self, *args)


    def NotesLabel(self, *args):
        """
        NotesLabel(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> TDF_Label

        Returns sub-label of DocLabel() with tag 9.

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_NotesLabel(self, *args)


    def ShapeTool(self, *args):
        """
        ShapeTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_ShapeTool

        Creates (if it does not exist) ShapeTool attribute on ShapesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ShapeTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ShapeTool(self, *args)


    def ColorTool(self, *args):
        """
        ColorTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_ColorTool

        Creates (if it does not exist) ColorTool attribute on ColorsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ColorTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ColorTool(self, *args)


    def LayerTool(self, *args):
        """
        LayerTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_LayerTool

        Creates (if it does not exist) LayerTool attribute on LayersLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_LayerTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_LayerTool(self, *args)


    def DimTolTool(self, *args):
        """
        DimTolTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_DimTolTool

        Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_DimTolTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DimTolTool(self, *args)


    def MaterialTool(self, *args):
        """
        MaterialTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_MaterialTool

        Creates (if it does not exist) DimTolTool attribute on DGTsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_MaterialTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_MaterialTool(self, *args)


    def ViewTool(self, *args):
        """
        ViewTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_ViewTool

        Creates (if it does not exist) ViewTool attribute on ViewsLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ViewTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ViewTool(self, *args)


    def ClippingPlaneTool(self, *args):
        """
        ClippingPlaneTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_ClippingPlaneTool

        Creates (if it does not exist) ClippingPlaneTool attribute on ClippingPlanesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_ClippingPlaneTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ClippingPlaneTool(self, *args)


    def NotesTool(self, *args):
        """
        NotesTool(Handle_XCAFDoc_DocumentTool self, TDF_Label acces) -> Handle_XCAFDoc_NotesTool

        Creates (if it does not exist) NotesTool attribute on NotesLabel().

        :type acces: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_NotesTool(self, *args)


    def Init(self, *args):
        """
        Init(Handle_XCAFDoc_DocumentTool self)

        to be called when reading this attribute from file


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Init(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_DocumentTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_DocumentTool self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_DocumentTool self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_DocumentTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DocumentTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_DocumentTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_DocumentTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_DocumentTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_DocumentTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_DocumentTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_DocumentTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_DocumentTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_DocumentTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_DocumentTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_DocumentTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_DocumentTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_DocumentTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_DocumentTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_DocumentTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_DocumentTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_DocumentTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_DocumentTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_DocumentTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_DocumentTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_DocumentTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_DocumentTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_DocumentTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_DocumentTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_DocumentTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_DocumentTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_DocumentTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_DocumentTool self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_DocumentTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_DocumentTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_DocumentTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_DocumentTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_DocumentTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_DocumentTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_DocumentTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_DocumentTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_DocumentTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_DocumentTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_DocumentTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_DocumentTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_DocumentTool_swigregister = _XCAFDoc.Handle_XCAFDoc_DocumentTool_swigregister
Handle_XCAFDoc_DocumentTool_swigregister(Handle_XCAFDoc_DocumentTool)

def Handle_XCAFDoc_DocumentTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast(thing)
Handle_XCAFDoc_DocumentTool_DownCast = _XCAFDoc.Handle_XCAFDoc_DocumentTool_DownCast

class Handle_XCAFDoc_NotesTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_NotesTool self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_NotesTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_NotesTool self, XCAFDoc_NotesTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_NotesTool self, Handle_XCAFDoc_NotesTool theHandle) -> Handle_XCAFDoc_NotesTool
        assign(Handle_XCAFDoc_NotesTool self, XCAFDoc_NotesTool thePtr) -> Handle_XCAFDoc_NotesTool
        assign(Handle_XCAFDoc_NotesTool self, Handle_XCAFDoc_NotesTool theHandle) -> Handle_XCAFDoc_NotesTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_NotesTool self) -> XCAFDoc_NotesTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_NotesTool self) -> XCAFDoc_NotesTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_NotesTool self) -> XCAFDoc_NotesTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_NotesTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_NotesTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_NotesTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_NotesTool_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_NotesTool

    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_NotesTool self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NotesTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_NotesTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns default attribute GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NotesTool_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_NotesTool self, TDF_Label theLabel) -> Handle_XCAFDoc_NotesTool

        Create (if not exist) a notes tool from XCAFDoc on theLabel.

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_NotesTool

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Set(self, *args)


    def GetNotesLabel(self, *args):
        """
        GetNotesLabel(Handle_XCAFDoc_NotesTool self) -> TDF_Label

        Returns the label of the notes hive.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetNotesLabel(self, *args)


    def GetAnnotatedItemsLabel(self, *args):
        """
        GetAnnotatedItemsLabel(Handle_XCAFDoc_NotesTool self) -> TDF_Label

        Returns the label of the annotated items hive.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetAnnotatedItemsLabel(self, *args)


    def NbNotes(self, *args):
        """
        NbNotes(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the number of labels in the notes hive.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_NbNotes(self, *args)


    def NbAnnotatedItems(self, *args):
        """
        NbAnnotatedItems(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the number of labels in the annotated items hive.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_NbAnnotatedItems(self, *args)


    def GetNotes(self, *args):
        """
        GetNotes(Handle_XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels)
        GetNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer
        GetNotes(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the labeled item.
        Notes linked to item's attributes aren't
        taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemLabel   - item label.
        \param [out] theNoteLabels - sequence of labels.
        @return number of added labels.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetNotes(self, *args)


    def GetAnnotatedItems(self, *args):
        """
        GetAnnotatedItems(Handle_XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theLabels)

        Returns all labels from the annotated items hive.
        The label sequence isn't cleared beforehand.
        \param [out] theNoteLabels - sequence of labels.

        :type theLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetAnnotatedItems(self, *args)


    def IsAnnotatedItem(self, *args):
        """
        IsAnnotatedItem(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId) -> Standard_Boolean
        IsAnnotatedItem(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel) -> Standard_Boolean

        Checks if the given labeled item is annotated.
        \param [in] theItemLabel - item label.
        @return true if the item is annotated, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsAnnotatedItem(self, *args)


    def FindAnnotatedItem(self, *args):
        """
        FindAnnotatedItem(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId) -> TDF_Label
        FindAnnotatedItem(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel) -> TDF_Label

        Finds a label of the given labeled item in the annotated items hive.
        \param [in] theItemLabel - item label.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_FindAnnotatedItem(self, *args)


    def FindAnnotatedItemAttr(self, *args):
        """
        FindAnnotatedItemAttr(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> TDF_Label
        FindAnnotatedItemAttr(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID) -> TDF_Label

        Finds a label of the given labeled item's attribute in the annotated items hive.
        \param [in] theItemLabel - item label.
        \param [in] theGUID      - item's attribute GUID.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_FindAnnotatedItemAttr(self, *args)


    def FindAnnotatedItemSubshape(self, *args):
        """
        FindAnnotatedItemSubshape(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex) -> TDF_Label
        FindAnnotatedItemSubshape(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex) -> TDF_Label

        Finds a label of the given labeled item's subshape in the annotated items hive.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - labeled item's subshape index.
        @return annotated item label if it is found, otherwise - null label.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_FindAnnotatedItemSubshape(self, *args)


    def CreateComment(self, *args):
        """
        CreateComment(Handle_XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_Note

        Create a new comment note.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theComment   - textual comment.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_CreateComment(self, *args)


    def CreateBalloon(self, *args):
        """
        CreateBalloon(Handle_XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theComment) -> Handle_XCAFDoc_Note

        Create a new 'balloon' note.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteBalloon 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theComment   - textual comment.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theComment: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_CreateBalloon(self, *args)


    def CreateBinData(self, *args):
        """
        CreateBinData(Handle_XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, OSD_File theFile) -> Handle_XCAFDoc_Note
        CreateBinData(Handle_XCAFDoc_NotesTool self, TCollection_ExtendedString theUserName, TCollection_ExtendedString theTimeStamp, TCollection_ExtendedString theTitle, TCollection_AsciiString theMIMEtype, Handle_TColStd_HArray1OfByte theData) -> Handle_XCAFDoc_Note

        Create a new note with data loaded from a byte data array.
        Creates a new label under the notes hive and attaches ef XCAFDoc_NoteComment 
        attribute (derived ftom ef XCAFDoc_Note).
        \param [in] theUserName  - the user associated with the note.
        \param [in] theTimeStamp - timestamp of the note.
        \param [in] theTitle     - data title.
        \param [in] theMIMEtype  - MIME type of the file.
        \param [in] theData      - byte data array.
        @return a handle to the base note attribute.

        :type theUserName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTimeStamp: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theTitle: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMIMEtype: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theData: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Note

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_CreateBinData(self, *args)


    def GetAttrNotes(self, *args):
        """
        GetAttrNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer
        GetAttrNotes(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the labeled item's attribute.
        Notes linked to the item itself or to item's subshapes
        aren't taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - item's attribute GUID.
        \param [out] theNoteLabels - sequence of labels.
        @return number of added labels.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetAttrNotes(self, *args)


    def GetSubshapeNotes(self, *args):
        """
        GetSubshapeNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Gets all note labels of the annotated item.
        Notes linked to the item itself or to item's attributes
        taken into account. The label sequence isn't cleared beforehand.
        \param [in] theItemId        - assembly item ID.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        \param [out] theNoteLabels   - sequence of labels.
        @return number of added labels.

        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theSubshapeIndex: int
        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetSubshapeNotes(self, *args)


    def AddNote(self, *args):
        """
        AddNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId) -> Handle_XCAFDoc_AssemblyItemRef
        AddNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item.
        \param [in] theNoteLabel - note label.
        \param [in] theItemLabel - item label.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AddNote(self, *args)


    def AddNoteToAttr(self, *args):
        """
        AddNoteToAttr(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef
        AddNoteToAttr(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_GUID theGUID) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item's attribute.
        \param [in] theNoteLabel - note label.
        \param [in] theItemLabel - item label.
        \param [in] theGUID      - assembly item's attribute GUID.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AddNoteToAttr(self, *args)


    def AddNoteToSubshape(self, *args):
        """
        AddNoteToSubshape(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex) -> Handle_XCAFDoc_AssemblyItemRef
        AddNoteToSubshape(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex) -> Handle_XCAFDoc_AssemblyItemRef

        Adds the given note to the labeled item's subshape.
        \param [in] theNoteLabel     - note label.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        @return a handle to the assembly reference attribute.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_AssemblyItemRef

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AddNoteToSubshape(self, *args)


    def RemoveNote(self, *args):
        """
        RemoveNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes the given note from the labeled item.
        \param [in] theNoteLabel   - note label.
        \param [in] theItemLabel   - item label.
        \param [in] theDelIfOrphan - deletes the note from the notes hive 
        if there are no more labeled items
        linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveNote(self, *args)


    def RemoveSubshapeNote(self, *args):
        """
        RemoveSubshapeNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveSubshapeNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes the given note from the labeled item's subshape.
        \param [in] theNoteLabel     - note label.
        \param [in] theItemLabel     - item label.
        \param [in] theSubshapeIndex - labeled item's subshape index.
        \param [in] theDelIfOrphan   - deletes the note from the notes hive 
        if there are no more assembly item's
        subshape linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theSubshapeIndex: int
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveSubshapeNote(self, *args)


    def RemoveAttrNote(self, *args):
        """
        RemoveAttrNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAttrNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel, TDF_Label theItemLabel, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes a note from the labeled item's attribute.
        \param [in] theNoteLabel   - note label.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - labeled item's attribute GUID.
        \param [in] theDelIfOrphan - deletes the note from the notes hive 
        if there are no more assembly item's
        attribute linked with the note.
        @return true if the note is removed, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveAttrNote(self, *args)


    def RemoveAllNotes(self, *args):
        """
        RemoveAllNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAllNotes(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the labeled item.
        \param [in] theItemLabel   - item label.
        \param [in] theDelIfOrphan - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveAllNotes(self, *args)


    def RemoveAllSubshapeNotes(self, *args):
        """
        RemoveAllSubshapeNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_Integer theSubshapeIndex, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the assembly item's subshape.
        \param [in] theItemId        - assembly item ID.
        \param [in] theSubshapeIndex - assembly item's subshape index.
        \param [in] theDelIfOrphan   - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemId: OCC.wrapper.XCAFDoc.XCAFDoc_AssemblyItemId
        :type theSubshapeIndex: int
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveAllSubshapeNotes(self, *args)


    def RemoveAllAttrNotes(self, *args):
        """
        RemoveAllAttrNotes(Handle_XCAFDoc_NotesTool self, XCAFDoc_AssemblyItemId theItemId, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean
        RemoveAllAttrNotes(Handle_XCAFDoc_NotesTool self, TDF_Label theItemLabel, Standard_GUID theGUID, Standard_Boolean theDelIfOrphan) -> Standard_Boolean

        Removes all notes from the labeled item's attribute.
        \param [in] theItemLabel   - item label.
        \param [in] theGUID        - labeled item's attribute GUID.
        \param [in] theDelIfOrphan - deletes removed notes from the notes
        hive if there are no more annotated items
        linked with the notes.
        @return true if the notes are removed, otherwise - false.

        :type theItemLabel: OCC.wrapper.TDF.TDF_Label
        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :type theDelIfOrphan: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_RemoveAllAttrNotes(self, *args)


    def DeleteNote(self, *args):
        """
        DeleteNote(Handle_XCAFDoc_NotesTool self, TDF_Label theNoteLabel) -> Standard_Boolean

        Deletes the given note.
        Removes all links with items annotated by the note.
        \param [in] theNoteLabel - note label.
        @return true if the note is deleted, otherwise - false.

        :type theNoteLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeleteNote(self, *args)


    def DeleteNotes(self, *args):
        """
        DeleteNotes(Handle_XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels) -> Standard_Integer

        Deletes the given notes.
        Removes all links with items annotated by the notes.
        \param [in] theNoteLabels - note label sequence.
        @return number of deleted notes.

        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeleteNotes(self, *args)


    def DeleteAllNotes(self, *args):
        """
        DeleteAllNotes(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Deletes all notes.
        Clears all annotations.
        @return number of deleted notes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeleteAllNotes(self, *args)


    def NbOrphanNotes(self, *args):
        """
        NbOrphanNotes(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Returns number of notes that aren't linked to annotated items.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_NbOrphanNotes(self, *args)


    def GetOrphanNotes(self, *args):
        """
        GetOrphanNotes(Handle_XCAFDoc_NotesTool self, NCollection_Sequence_TDF_Label theNoteLabels)

        Returns note labels that aren't linked to annotated items.
        The label sequence isn't cleared beforehand.
        \param [out] theNoteLabels - sequence of labels.

        :type theNoteLabels: OCC.wrapper.TDF.TDF_LabelSequence

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetOrphanNotes(self, *args)


    def DeleteOrphanNotes(self, *args):
        """
        DeleteOrphanNotes(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Deletes all notes that aren't linked to annotated items.
        @return number of deleted notes.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeleteOrphanNotes(self, *args)


    def ID(self, *args):
        """
        @}

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_NotesTool_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_NotesTool self, Handle_TDF_Attribute theAttrFrom)

        :type theAttrFrom: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_NotesTool self, Handle_TDF_Attribute theAttrInto, Handle_TDF_RelocationTable theRT)

        :type theAttrInto: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theRT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_NotesTool self, Standard_OStream & theOS) -> Standard_OStream &

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Dump(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_NotesTool self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_NotesTool self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_NotesTool self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_NotesTool self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_NotesTool self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_NotesTool self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_NotesTool self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_NotesTool self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_NotesTool self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_NotesTool self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_NotesTool self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_NotesTool self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_NotesTool self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_NotesTool self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_NotesTool self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_NotesTool self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_NotesTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_NotesTool self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_NotesTool self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_NotesTool self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_NotesTool self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_NotesTool self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_NotesTool self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_NotesTool self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_NotesTool self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_NotesTool self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_NotesTool self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_NotesTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_NotesTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_NotesTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_NotesTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_NotesTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_NotesTool self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_NotesTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_NotesTool_DecrementRefCounter(self, *args)

Handle_XCAFDoc_NotesTool_swigregister = _XCAFDoc.Handle_XCAFDoc_NotesTool_swigregister
Handle_XCAFDoc_NotesTool_swigregister(Handle_XCAFDoc_NotesTool)

def Handle_XCAFDoc_NotesTool_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_NotesTool_DownCast(thing)
Handle_XCAFDoc_NotesTool_DownCast = _XCAFDoc.Handle_XCAFDoc_NotesTool_DownCast

class Handle_XCAFDoc_Dimension(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Dimension self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Dimension self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Dimension self, XCAFDoc_Dimension thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Dimension self, Handle_XCAFDoc_Dimension theHandle) -> Handle_XCAFDoc_Dimension
        assign(Handle_XCAFDoc_Dimension self, XCAFDoc_Dimension thePtr) -> Handle_XCAFDoc_Dimension
        assign(Handle_XCAFDoc_Dimension self, Handle_XCAFDoc_Dimension theHandle) -> Handle_XCAFDoc_Dimension

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Dimension self) -> XCAFDoc_Dimension

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Dimension self) -> XCAFDoc_Dimension

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Dimension self) -> XCAFDoc_Dimension

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Dimension___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Dimension___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Dimension(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Dimension_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Dimension

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Dimension_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Dimension self, TDF_Label theLabel) -> Handle_XCAFDoc_Dimension

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.XCAFDoc.Handle_XCAFDoc_Dimension

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Dimension_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Dimension self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Dimension self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Dimension self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Paste(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_Dimension self, Handle_XCAFDimTolObjects_DimensionObject theDimensionObject)

        Updates parent's label and its sub-labels with data taken from theDimensionObject.
        Old data associated with the label will be lost.

        :type theDimensionObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DimensionObject

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_SetObject(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Dimension self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Dimension_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Dimension_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Dimension self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Dimension self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Dimension self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Dimension self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Dimension self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Dimension self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Dimension self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Dimension self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Dimension self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Dimension self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Dimension self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Dimension self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Dimension self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Dimension self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Dimension self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Dimension self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Dimension self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Dimension self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Dimension self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Dimension self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Dimension self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Dimension self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Dimension self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Dimension self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Dimension self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Dimension self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Dimension self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Dimension self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Dimension self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Dimension self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Dimension self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Dimension self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Dimension self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Dimension self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Dimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Dimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Dimension self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Dimension self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Dimension self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Dimension self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Dimension self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Dimension self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Dimension_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Dimension_swigregister = _XCAFDoc.Handle_XCAFDoc_Dimension_swigregister
Handle_XCAFDoc_Dimension_swigregister(Handle_XCAFDoc_Dimension)

def Handle_XCAFDoc_Dimension_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Dimension_DownCast(thing)
Handle_XCAFDoc_Dimension_DownCast = _XCAFDoc.Handle_XCAFDoc_Dimension_DownCast

class Handle_XCAFDoc_Datum(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XCAFDoc_Datum self)

        Nullify the handle


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XCAFDoc_Datum self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XCAFDoc_Datum self, XCAFDoc_Datum thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XCAFDoc_Datum self, Handle_XCAFDoc_Datum theHandle) -> Handle_XCAFDoc_Datum
        assign(Handle_XCAFDoc_Datum self, XCAFDoc_Datum thePtr) -> Handle_XCAFDoc_Datum
        assign(Handle_XCAFDoc_Datum self, Handle_XCAFDoc_Datum theHandle) -> Handle_XCAFDoc_Datum

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XCAFDoc_Datum self) -> XCAFDoc_Datum

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XCAFDoc_Datum self) -> XCAFDoc_Datum

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XCAFDoc_Datum self) -> XCAFDoc_Datum

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum___ref__(self, *args)


    def __hash__(self):
        return _XCAFDoc.Handle_XCAFDoc_Datum___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XCAFDoc.Handle_XCAFDoc_Datum___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XCAFDoc.new_Handle_XCAFDoc_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XCAFDoc.Handle_XCAFDoc_Datum_DownCast)
    __swig_destroy__ = _XCAFDoc.delete_Handle_XCAFDoc_Datum

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Datum_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_XCAFDoc_Datum self, TDF_Label label, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString anIdentification) -> Handle_XCAFDoc_Datum
        Set(Handle_XCAFDoc_Datum self, TDF_Label theLabel) -> Handle_XCAFDoc_Datum
        Set(Handle_XCAFDoc_Datum self, Handle_TCollection_HAsciiString aName, Handle_TCollection_HAsciiString aDescription, Handle_TCollection_HAsciiString anIdentification)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIdentification: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Set(self, *args)


    def GetName(self, *args):
        """
        GetName(Handle_XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_GetName(self, *args)


    def GetDescription(self, *args):
        """
        GetDescription(Handle_XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_GetDescription(self, *args)


    def GetIdentification(self, *args):
        """
        GetIdentification(Handle_XCAFDoc_Datum self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_GetIdentification(self, *args)


    def SetObject(self, *args):
        """
        SetObject(Handle_XCAFDoc_Datum self, Handle_XCAFDimTolObjects_DatumObject theDatumObject)

        Updates parent's label and its sub-labels with data taken from theDatumObject.
        Old data associated with the label will be lost.

        :type theDatumObject: OCC.wrapper.XCAFDimTolObjects.Handle_XCAFDimTolObjects_DatumObject

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_SetObject(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _XCAFDoc.Handle_XCAFDoc_Datum_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_XCAFDoc_Datum self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XCAFDoc_Datum self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XCAFDoc_Datum self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XCAFDoc_Datum self) -> char const *

        :rtype: const char *

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Datum_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XCAFDoc.Handle_XCAFDoc_Datum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_XCAFDoc_Datum self, Standard_GUID arg2)
        SetID(Handle_XCAFDoc_Datum self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_XCAFDoc_Datum self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_XCAFDoc_Datum self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_XCAFDoc_Datum self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_XCAFDoc_Datum self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_XCAFDoc_Datum self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_XCAFDoc_Datum self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_XCAFDoc_Datum self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_XCAFDoc_Datum self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_XCAFDoc_Datum self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_XCAFDoc_Datum self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_XCAFDoc_Datum self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_XCAFDoc_Datum self)

        Something to do after adding an Attribute to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_XCAFDoc_Datum self)

        Something to do before removing an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_XCAFDoc_Datum self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_XCAFDoc_Datum self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_XCAFDoc_Datum self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_XCAFDoc_Datum self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_XCAFDoc_Datum self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_XCAFDoc_Datum self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_XCAFDoc_Datum self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_XCAFDoc_Datum self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_XCAFDoc_Datum self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_XCAFDoc_Datum self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_XCAFDoc_Datum self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_XCAFDoc_Datum self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_XCAFDoc_Datum self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_XCAFDoc_Datum self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_XCAFDoc_Datum self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_XCAFDoc_Datum self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_XCAFDoc_Datum self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_XCAFDoc_Datum self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XCAFDoc_Datum self)

        Memory deallocator for transient classes


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XCAFDoc_Datum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XCAFDoc_Datum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XCAFDoc_Datum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XCAFDoc_Datum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XCAFDoc_Datum self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XCAFDoc_Datum self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XCAFDoc_Datum self)

        Increments the reference counter of this object


        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XCAFDoc_Datum self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XCAFDoc.Handle_XCAFDoc_Datum_DecrementRefCounter(self, *args)

Handle_XCAFDoc_Datum_swigregister = _XCAFDoc.Handle_XCAFDoc_Datum_swigregister
Handle_XCAFDoc_Datum_swigregister(Handle_XCAFDoc_Datum)

def Handle_XCAFDoc_Datum_DownCast(thing):
    return _XCAFDoc.Handle_XCAFDoc_Datum_DownCast(thing)
Handle_XCAFDoc_Datum_DownCast = _XCAFDoc.Handle_XCAFDoc_Datum_DownCast



