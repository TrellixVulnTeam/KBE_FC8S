# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESAppli')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESAppli')
    _IGESAppli = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESAppli', [dirname(__file__)])
        except ImportError:
            import _IGESAppli
            return _IGESAppli
        try:
            _mod = imp.load_module('_IGESAppli', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESAppli = swig_import_helper()
    del swig_import_helper
else:
    import _IGESAppli
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESAppli.delete_SwigPyIterator

    def value(self):
        return _IGESAppli.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESAppli.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESAppli.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESAppli.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESAppli.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESAppli.SwigPyIterator_copy(self)

    def next(self):
        return _IGESAppli.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESAppli.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESAppli.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESAppli.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESAppli.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESAppli.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESAppli.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESAppli.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESAppli.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESAppli.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESAppli.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESAppli.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESAppli.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESAppli.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESAppli.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESAppli.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESAppli.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESAppli.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESAppli.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESAppli.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESAppli.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESAppli.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESAppli.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESAppli.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESAppli.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESAppli.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESAppli.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESAppli.ptr_to_number(item)
ptr_to_number = _IGESAppli.ptr_to_number

def HashCode(*args):
    return _IGESAppli.HashCode(*args)
HashCode = _IGESAppli.HashCode

def ptr_equal(a, b):
    return _IGESAppli.ptr_equal(a, b)
ptr_equal = _IGESAppli.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESDefs
else:
    import IGESDefs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGraph
else:
    import IGESGraph
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESDimen
else:
    import IGESDimen
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESDraw
else:
    import IGESDraw
del _swig_python_version_info
class IGESAppli_NodalResults(IGESData.IGESData_IGESEntity):
    """
    defines NodalResults, Type <146>
    in package IGESAppli
    Used to store the Analysis Data results per FEM Node
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_NodalResults
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_NodalResults(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_NodalResults self) -> IGESAppli_NodalResults

        defines NodalResults, Type <146>
        in package IGESAppli
        Used to store the Analysis Data results per FEM Node
        """
        this = _IGESAppli.new_IGESAppli_NodalResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_NodalResults self, Handle_IGESDimen_GeneralNote aNote, Standard_Integer const aNumber, Standard_Real const aTime, Handle_TColStd_HArray1OfInteger allNodeIdentifiers, Handle_IGESAppli_HArray1OfNode allNodes, Handle_TColStd_HArray2OfReal allData)

        This method is used to set the fields of the class
        NodalResults
        - aNote              : General Note that describes the
        analysis case
        - aNumber            : Analysis Subcase number
        - aTime              : Analysis time
        - allNodeIdentifiers : Node identifiers for the nodes
        - allNodes           : List of FEM Node Entities
        - allData            : Values of the Finite Element analysis
        result data
        raises exception if Lengths of allNodeIdentifiers, allNodes and
        allData (Cols) are not same

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aNumber: int
        :type aTime: float
        :type allNodeIdentifiers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type allData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _IGESAppli.IGESAppli_NodalResults_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESAppli_NodalResults self, Standard_Integer const form)

        Changes the FormNumber (which indicates Type of Result)
        Error if not in range [0-34]

        :type form: int

        """
        return _IGESAppli.IGESAppli_NodalResults_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(IGESAppli_NodalResults self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity that describes the analysis case

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.IGESAppli_NodalResults_Note(self, *args)


    def SubCaseNumber(self, *args):
        """
        SubCaseNumber(IGESAppli_NodalResults self) -> Standard_Integer

        returns zero if there is no subcase

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalResults_SubCaseNumber(self, *args)


    def Time(self, *args):
        """
        Time(IGESAppli_NodalResults self) -> Standard_Real

        returns the Analysis time value for this subcase. It is the time
        at which transient analysis results occur in the mathematical
        FEM model.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_NodalResults_Time(self, *args)


    def NbData(self, *args):
        """
        NbData(IGESAppli_NodalResults self) -> Standard_Integer

        returns number of real values in array V for a FEM node

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalResults_NbData(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(IGESAppli_NodalResults self) -> Standard_Integer

        returns number of FEM nodes for which data is to be read.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalResults_NbNodes(self, *args)


    def NodeIdentifier(self, *args):
        """
        NodeIdentifier(IGESAppli_NodalResults self, Standard_Integer const Index) -> Standard_Integer

        returns FEM node number identifier for the (Index)th node
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalResults_NodeIdentifier(self, *args)


    def Node(self, *args):
        """
        Node(IGESAppli_NodalResults self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns the node as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.IGESAppli_NodalResults_Node(self, *args)


    def Data(self, *args):
        """
        Data(IGESAppli_NodalResults self, Standard_Integer const NodeNum, Standard_Integer const DataNum) -> Standard_Real

        returns the finite element analysis result value
        raises exception if (NodeNum <= 0 or NodeNum > NbNodes()) or
        if (DataNum <=0 or DataNum > NbData())

        :type NodeNum: int
        :type DataNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_NodalResults_Data(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_NodalResults_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_NodalResults_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_NodalResults_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_NodalResults
IGESAppli_NodalResults_swigregister = _IGESAppli.IGESAppli_NodalResults_swigregister
IGESAppli_NodalResults_swigregister(IGESAppli_NodalResults)

def IGESAppli_NodalResults_get_type_name(*args):
    """
    IGESAppli_NodalResults_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_NodalResults_get_type_name(*args)

def IGESAppli_NodalResults_get_type_descriptor(*args):
    """
    IGESAppli_NodalResults_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_NodalResults_get_type_descriptor(*args)

class IGESAppli_PWBArtworkStackup(IGESData.IGESData_IGESEntity):
    """
    defines PWBArtworkStackup, Type <406> Form <25>
    in package IGESAppli
    Used to communicate which exchange file levels are to
    be combined in order to create the artwork for a
    printed wire board (PWB). This property should be
    attached to the entity defining the printed wire
    assembly (PWA) or if no such entity exists, then the
    property should stand alone in the file.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_PWBArtworkStackup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_PWBArtworkStackup(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_PWBArtworkStackup self) -> IGESAppli_PWBArtworkStackup

        defines PWBArtworkStackup, Type <406> Form <25>
        in package IGESAppli
        Used to communicate which exchange file levels are to
        be combined in order to create the artwork for a
        printed wire board (PWB). This property should be
        attached to the entity defining the printed wire
        assembly (PWA) or if no such entity exists, then the
        property should stand alone in the file.
        """
        this = _IGESAppli.new_IGESAppli_PWBArtworkStackup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_PWBArtworkStackup self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString anArtIdent, Handle_TColStd_HArray1OfInteger allLevelNums)

        This method is used to set the fields of the class
        PWBArtworkStackup
        - nbPropVal    : number of property values
        - anArtIdent   : Artwork Stackup Identification
        - allLevelNums : Level Numbers

        :type nbPropVal: int
        :type anArtIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allLevelNums: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        returns number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_NbPropertyValues(self, *args)


    def Identification(self, *args):
        """
        Identification(IGESAppli_PWBArtworkStackup self) -> Handle_TCollection_HAsciiString

        returns Artwork Stackup Identification

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_Identification(self, *args)


    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        returns total number of Level Numbers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(IGESAppli_PWBArtworkStackup self, Standard_Integer const Index) -> Standard_Integer

        returns Level Number
        raises exception if Index <= 0 or Index > NbLevelNumbers

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_LevelNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_PWBArtworkStackup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_PWBArtworkStackup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_PWBArtworkStackup
IGESAppli_PWBArtworkStackup_swigregister = _IGESAppli.IGESAppli_PWBArtworkStackup_swigregister
IGESAppli_PWBArtworkStackup_swigregister(IGESAppli_PWBArtworkStackup)

def IGESAppli_PWBArtworkStackup_get_type_name(*args):
    """
    IGESAppli_PWBArtworkStackup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_PWBArtworkStackup_get_type_name(*args)

def IGESAppli_PWBArtworkStackup_get_type_descriptor(*args):
    """
    IGESAppli_PWBArtworkStackup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_PWBArtworkStackup_get_type_descriptor(*args)

class IGESAppli_Flow(IGESData.IGESData_IGESEntity):
    """
    defines Flow, Type <402> Form <18>
    in package IGESAppli
    Represents a single signal or a single fluid flow path
    starting from a starting Connect Point Entity and
    including additional intermediate connect points.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_Flow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_Flow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_Flow self) -> IGESAppli_Flow

        defines Flow, Type <402> Form <18>
        in package IGESAppli
        Represents a single signal or a single fluid flow path
        starting from a starting Connect Point Entity and
        including additional intermediate connect points.
        """
        this = _IGESAppli.new_IGESAppli_Flow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_Flow self, Standard_Integer const nbContextFlags, Standard_Integer const aFlowType, Standard_Integer const aFuncFlag, Handle_IGESData_HArray1OfIGESEntity allFlowAssocs, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints, Handle_IGESData_HArray1OfIGESEntity allJoins, Handle_Interface_HArray1OfHAsciiString allFlowNames, Handle_IGESGraph_HArray1OfTextDisplayTemplate allTextDisps, Handle_IGESData_HArray1OfIGESEntity allContFlowAssocs)

        This method is used to set the fields of the class Flow
        - nbContextFlags    : Count of Context Flags, always = 2
        - aFlowType         : Type of Flow, default = 0
        - aFuncFlag         : Function Flag, default = 0
        - allFlowAssocs     : Flow Associativity Entities
        - allConnectPoints  : Connect Point Entities
        - allJoins          : Join Entities
        - allFlowNames      : Flow Names
        - allTextDisps      : Text Display Template Entities
        - allContFlowAssocs : Continuation Flow Associativity Entities

        :type nbContextFlags: int
        :type aFlowType: int
        :type aFuncFlag: int
        :type allFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint
        :type allJoins: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allFlowNames: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allTextDisps: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate
        :type allContFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESAppli.IGESAppli_Flow_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_Flow self) -> Standard_Boolean

        forces NbContextFalgs to 2, returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_Flow_OwnCorrect(self, *args)


    def NbContextFlags(self, *args):
        """
        NbContextFlags(IGESAppli_Flow self) -> Standard_Integer

        returns number of Count of Context Flags, always = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbContextFlags(self, *args)


    def NbFlowAssociativities(self, *args):
        """
        NbFlowAssociativities(IGESAppli_Flow self) -> Standard_Integer

        returns number of Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbFlowAssociativities(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(IGESAppli_Flow self) -> Standard_Integer

        returns number of Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbConnectPoints(self, *args)


    def NbJoins(self, *args):
        """
        NbJoins(IGESAppli_Flow self) -> Standard_Integer

        returns number of Join Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbJoins(self, *args)


    def NbFlowNames(self, *args):
        """
        NbFlowNames(IGESAppli_Flow self) -> Standard_Integer

        returns number of Flow Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbFlowNames(self, *args)


    def NbTextDisplayTemplates(self, *args):
        """
        NbTextDisplayTemplates(IGESAppli_Flow self) -> Standard_Integer

        returns number of Text Display Template Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbTextDisplayTemplates(self, *args)


    def NbContFlowAssociativities(self, *args):
        """
        NbContFlowAssociativities(IGESAppli_Flow self) -> Standard_Integer

        returns number of Continuation Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_NbContFlowAssociativities(self, *args)


    def TypeOfFlow(self, *args):
        """
        TypeOfFlow(IGESAppli_Flow self) -> Standard_Integer

        returns Type of Flow = 0 : Not Specified (default)
        1 : Logical
        2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_TypeOfFlow(self, *args)


    def FunctionFlag(self, *args):
        """
        FunctionFlag(IGESAppli_Flow self) -> Standard_Integer

        returns Function Flag = 0 : Not Specified (default)
        1 : Electrical Signal
        2 : Fluid Flow Path

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Flow_FunctionFlag(self, *args)


    def FlowAssociativity(self, *args):
        """
        FlowAssociativity(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_Flow_FlowAssociativity(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns Connect Point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESAppli.IGESAppli_Flow_ConnectPoint(self, *args)


    def Join(self, *args):
        """
        Join(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Join Entity
        raises exception if Index <= 0 or Index > NbJoins()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_Flow_Join(self, *args)


    def FlowName(self, *args):
        """
        FlowName(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Flow Name
        raises exception if Index <= 0 or Index > NbFlowNames()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_Flow_FlowName(self, *args)


    def TextDisplayTemplate(self, *args):
        """
        TextDisplayTemplate(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESGraph_TextDisplayTemplate

        returns Text Display Template Entity
        raises exception if Index <= 0 or Index > NbTextDisplayTemplates()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESAppli.IGESAppli_Flow_TextDisplayTemplate(self, *args)


    def ContFlowAssociativity(self, *args):
        """
        ContFlowAssociativity(IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Continuation Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbContFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_Flow_ContFlowAssociativity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_Flow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_Flow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_Flow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_Flow
IGESAppli_Flow_swigregister = _IGESAppli.IGESAppli_Flow_swigregister
IGESAppli_Flow_swigregister(IGESAppli_Flow)

def IGESAppli_Flow_get_type_name(*args):
    """
    IGESAppli_Flow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_Flow_get_type_name(*args)

def IGESAppli_Flow_get_type_descriptor(*args):
    """
    IGESAppli_Flow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_Flow_get_type_descriptor(*args)

class IGESAppli_PartNumber(IGESData.IGESData_IGESEntity):
    """
    defines PartNumber, Type <406> Form <9>
    in package IGESAppli
    Attaches a set of text strings that define the common
    part numbers to an entity being used to represent a
    physical component
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_PartNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_PartNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_PartNumber self) -> IGESAppli_PartNumber

        defines PartNumber, Type <406> Form <9>
        in package IGESAppli
        Attaches a set of text strings that define the common
        part numbers to an entity being used to represent a
        physical component
        """
        this = _IGESAppli.new_IGESAppli_PartNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_PartNumber self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aGenName, Handle_TCollection_HAsciiString aMilName, Handle_TCollection_HAsciiString aVendName, Handle_TCollection_HAsciiString anIntName)

        This method is used to set the fields of the class
        PartNumber
        - nbPropVal : number of property values, always = 4
        - aGenName  : Generic part number or name
        - aMilName  : Military Standard (MIL-STD) part number
        - aVendName : Vendor part number or name
        - anIntName : Internal part number

        :type nbPropVal: int
        :type aGenName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMilName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aVendName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIntName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PartNumber_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_PartNumber self) -> Standard_Integer

        returns number of property values, always = 4

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PartNumber_NbPropertyValues(self, *args)


    def GenericNumber(self, *args):
        """
        GenericNumber(IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Generic part number or name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PartNumber_GenericNumber(self, *args)


    def MilitaryNumber(self, *args):
        """
        MilitaryNumber(IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Military Standard (MIL-STD) part number

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PartNumber_MilitaryNumber(self, *args)


    def VendorNumber(self, *args):
        """
        VendorNumber(IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Vendor part number or name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PartNumber_VendorNumber(self, *args)


    def InternalNumber(self, *args):
        """
        InternalNumber(IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Internal part number

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PartNumber_InternalNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_PartNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_PartNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_PartNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_PartNumber
IGESAppli_PartNumber_swigregister = _IGESAppli.IGESAppli_PartNumber_swigregister
IGESAppli_PartNumber_swigregister(IGESAppli_PartNumber)

def IGESAppli_PartNumber_get_type_name(*args):
    """
    IGESAppli_PartNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_PartNumber_get_type_name(*args)

def IGESAppli_PartNumber_get_type_descriptor(*args):
    """
    IGESAppli_PartNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_PartNumber_get_type_descriptor(*args)

class IGESAppli_HArray1OfFlow(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_HArray1OfFlow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_HArray1OfFlow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_HArray1OfFlow self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESAppli_HArray1OfFlow
        __init__(IGESAppli_HArray1OfFlow self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESAppli_Flow theValue) -> IGESAppli_HArray1OfFlow
        __init__(IGESAppli_HArray1OfFlow self, NCollection_Array1_Handle_IGESAppli_Flow theOther) -> IGESAppli_HArray1OfFlow

        :type theOther: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFlow

        """
        this = _IGESAppli.new_IGESAppli_HArray1OfFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFlow

        """
        res = _IGESAppli.IGESAppli_HArray1OfFlow_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESAppli_HArray1OfFlow self) -> NCollection_Array1_Handle_IGESAppli_Flow

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFlow

        """
        return _IGESAppli.IGESAppli_HArray1OfFlow_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_HArray1OfFlow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_HArray1OfFlow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_HArray1OfFlow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_HArray1OfFlow
IGESAppli_HArray1OfFlow_swigregister = _IGESAppli.IGESAppli_HArray1OfFlow_swigregister
IGESAppli_HArray1OfFlow_swigregister(IGESAppli_HArray1OfFlow)

def IGESAppli_HArray1OfFlow_get_type_name(*args):
    """
    IGESAppli_HArray1OfFlow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_HArray1OfFlow_get_type_name(*args)

def IGESAppli_HArray1OfFlow_get_type_descriptor(*args):
    """
    IGESAppli_HArray1OfFlow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_HArray1OfFlow_get_type_descriptor(*args)

class IGESAppli_LevelFunction(IGESData.IGESData_IGESEntity):
    """
    defines LevelFunction, Type <406> Form <3>
    in package IGESAppli
    Used to transfer the meaning or intended use of a level
    in the sending system
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_LevelFunction
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_LevelFunction(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_LevelFunction self) -> IGESAppli_LevelFunction

        defines LevelFunction, Type <406> Form <3>
        in package IGESAppli
        Used to transfer the meaning or intended use of a level
        in the sending system
        """
        this = _IGESAppli.new_IGESAppli_LevelFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_LevelFunction self, Standard_Integer const nbPropVal, Standard_Integer const aCode, Handle_TCollection_HAsciiString aFuncDescrip)

        This method is used to set the fields of the class
        LevelFunction
        - nbPropVal    : Number of Properties, always = 2
        - aCode        : Function Description code
        default = 0
        - aFuncDescrip : Function Description
        default = null string

        :type nbPropVal: int
        :type aCode: int
        :type aFuncDescrip: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_LevelFunction_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_LevelFunction self) -> Standard_Integer

        is always 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelFunction_NbPropertyValues(self, *args)


    def FuncDescriptionCode(self, *args):
        """
        FuncDescriptionCode(IGESAppli_LevelFunction self) -> Standard_Integer

        returns the function description code . Default = 0

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelFunction_FuncDescriptionCode(self, *args)


    def FuncDescription(self, *args):
        """
        FuncDescription(IGESAppli_LevelFunction self) -> Handle_TCollection_HAsciiString

        returns the function description
        Default = null string

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_LevelFunction_FuncDescription(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_LevelFunction_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_LevelFunction_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_LevelFunction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_LevelFunction
IGESAppli_LevelFunction_swigregister = _IGESAppli.IGESAppli_LevelFunction_swigregister
IGESAppli_LevelFunction_swigregister(IGESAppli_LevelFunction)

def IGESAppli_LevelFunction_get_type_name(*args):
    """
    IGESAppli_LevelFunction_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_LevelFunction_get_type_name(*args)

def IGESAppli_LevelFunction_get_type_descriptor(*args):
    """
    IGESAppli_LevelFunction_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_LevelFunction_get_type_descriptor(*args)

class IGESAppli_PWBDrilledHole(IGESData.IGESData_IGESEntity):
    """
    defines PWBDrilledHole, Type <406> Form <26>
    in package IGESAppli
    Used to identify an entity that locates a drilled hole
    and to specify the characteristics of the drilled hole
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_PWBDrilledHole
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_PWBDrilledHole(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_PWBDrilledHole self) -> IGESAppli_PWBDrilledHole

        defines PWBDrilledHole, Type <406> Form <26>
        in package IGESAppli
        Used to identify an entity that locates a drilled hole
        and to specify the characteristics of the drilled hole
        """
        this = _IGESAppli.new_IGESAppli_PWBDrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_PWBDrilledHole self, Standard_Integer const nbPropVal, Standard_Real const aDrillDia, Standard_Real const aFinishDia, Standard_Integer const aCode)

        This method is used to set the fields of the class
        PWBDrilledHole
        - nbPropVal  : number of property values, always = 3
        - aDrillDia  : Drill diameter size
        - aFinishDia : Finish diameter size
        - aCode      : Function code for drilled hole

        :type nbPropVal: int
        :type aDrillDia: float
        :type aFinishDia: float
        :type aCode: int

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_PWBDrilledHole self) -> Standard_Integer

        returns number of property values, always = 3

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_NbPropertyValues(self, *args)


    def DrillDiameterSize(self, *args):
        """
        DrillDiameterSize(IGESAppli_PWBDrilledHole self) -> Standard_Real

        returns Drill diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_DrillDiameterSize(self, *args)


    def FinishDiameterSize(self, *args):
        """
        FinishDiameterSize(IGESAppli_PWBDrilledHole self) -> Standard_Real

        returns Finish diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_FinishDiameterSize(self, *args)


    def FunctionCode(self, *args):
        """
        FunctionCode(IGESAppli_PWBDrilledHole self) -> Standard_Integer

        returns Function code for drilled hole
        is 0, 1, 2, 3, 4, 5 or 5001-9999

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_FunctionCode(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_PWBDrilledHole_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_PWBDrilledHole_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_PWBDrilledHole
IGESAppli_PWBDrilledHole_swigregister = _IGESAppli.IGESAppli_PWBDrilledHole_swigregister
IGESAppli_PWBDrilledHole_swigregister(IGESAppli_PWBDrilledHole)

def IGESAppli_PWBDrilledHole_get_type_name(*args):
    """
    IGESAppli_PWBDrilledHole_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_PWBDrilledHole_get_type_name(*args)

def IGESAppli_PWBDrilledHole_get_type_descriptor(*args):
    """
    IGESAppli_PWBDrilledHole_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_PWBDrilledHole_get_type_descriptor(*args)

class IGESAppli_Node(IGESData.IGESData_IGESEntity):
    """
    defines Node, Type <134> Form <0>
    in package IGESAppli
    Geometric point used in the definition of a finite element.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_Node
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_Node(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_Node self) -> IGESAppli_Node

        defines Node, Type <134> Form <0>
        in package IGESAppli
        Geometric point used in the definition of a finite element.
        """
        this = _IGESAppli.new_IGESAppli_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_Node self, gp_XYZ aCoord, Handle_IGESGeom_TransformationMatrix aCoordSystem)

        This method is used to set the fields of the class Node
        - aCoord       : Nodal Coordinates
        - aCoordSystem : the Nodal Displacement Coordinate
        System Entity (default 0 is Global
        Cartesian Coordinate system)

        :type aCoord: OCC.wrapper.gp.gp_XYZ
        :type aCoordSystem: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESAppli.IGESAppli_Node_Init(self, *args)


    def Coord(self, *args):
        """
        Coord(IGESAppli_Node self) -> gp_Pnt

        returns the nodal coordinates

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESAppli.IGESAppli_Node_Coord(self, *args)


    def System(self, *args):
        """
        System(IGESAppli_Node self) -> Handle_IGESData_TransfEntity

        returns TransfEntity if a Nodal Displacement Coordinate
        System Entity is defined
        else (for Global Cartesien) returns Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.IGESAppli_Node_System(self, *args)


    def SystemType(self, *args):
        """
        SystemType(IGESAppli_Node self) -> Standard_Integer

        Computes & returns the Type of Coordinate System :
        0 GlobalCartesian, 1 Cartesian, 2 Cylindrical, 3 Spherical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Node_SystemType(self, *args)


    def TransformedNodalCoord(self, *args):
        """
        TransformedNodalCoord(IGESAppli_Node self) -> gp_Pnt

        returns the Nodal coordinates after transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESAppli.IGESAppli_Node_TransformedNodalCoord(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_Node_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_Node_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_Node_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_Node
IGESAppli_Node_swigregister = _IGESAppli.IGESAppli_Node_swigregister
IGESAppli_Node_swigregister(IGESAppli_Node)

def IGESAppli_Node_get_type_name(*args):
    """
    IGESAppli_Node_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_Node_get_type_name(*args)

def IGESAppli_Node_get_type_descriptor(*args):
    """
    IGESAppli_Node_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_Node_get_type_descriptor(*args)

class IGESAppli_NodalConstraint(IGESData.IGESData_IGESEntity):
    """
    defines NodalConstraint, Type <418> Form <0>
    in package IGESAppli
    Relates loads and/or constraints to specific nodes in
    the Finite Element Model by creating a relation between
    Node entities and Tabular Data Property that contains
    the load or constraint data
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_NodalConstraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_NodalConstraint(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_NodalConstraint self) -> IGESAppli_NodalConstraint

        defines NodalConstraint, Type <418> Form <0>
        in package IGESAppli
        Relates loads and/or constraints to specific nodes in
        the Finite Element Model by creating a relation between
        Node entities and Tabular Data Property that contains
        the load or constraint data
        """
        this = _IGESAppli.new_IGESAppli_NodalConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_NodalConstraint self, Standard_Integer const aType, Handle_IGESAppli_Node aNode, Handle_IGESDefs_HArray1OfTabularData allTabData)

        This method is used to set the fields of the class
        NodalConstraint
        - aType      : Loads / Constraints
        - aNode      : the Node
        - allTabData : Tabular Data Property carrying the load
        or constraint vector

        :type aType: int
        :type aNode: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type allTabData: OCC.wrapper.IGESDefs.Handle_IGESDefs_HArray1OfTabularData

        """
        return _IGESAppli.IGESAppli_NodalConstraint_Init(self, *args)


    def NbCases(self, *args):
        """
        NbCases(IGESAppli_NodalConstraint self) -> Standard_Integer

        returns total number of cases

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalConstraint_NbCases(self, *args)


    def Type(self, *args):
        """
        Type(IGESAppli_NodalConstraint self) -> Standard_Integer

        returns whether Loads (1) or Constraints (2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalConstraint_Type(self, *args)


    def NodeEntity(self, *args):
        """
        NodeEntity(IGESAppli_NodalConstraint self) -> Handle_IGESAppli_Node

        returns the Node

        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.IGESAppli_NodalConstraint_NodeEntity(self, *args)


    def TabularData(self, *args):
        """
        TabularData(IGESAppli_NodalConstraint self, Standard_Integer const Index) -> Handle_IGESDefs_TabularData

        returns Tabular Data Property carrying load or constraint vector
        raises exception if Index <= 0 or Index > NbCases

        :type Index: int
        :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData

        """
        return _IGESAppli.IGESAppli_NodalConstraint_TabularData(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_NodalConstraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_NodalConstraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_NodalConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_NodalConstraint
IGESAppli_NodalConstraint_swigregister = _IGESAppli.IGESAppli_NodalConstraint_swigregister
IGESAppli_NodalConstraint_swigregister(IGESAppli_NodalConstraint)

def IGESAppli_NodalConstraint_get_type_name(*args):
    """
    IGESAppli_NodalConstraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_NodalConstraint_get_type_name(*args)

def IGESAppli_NodalConstraint_get_type_descriptor(*args):
    """
    IGESAppli_NodalConstraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_NodalConstraint_get_type_descriptor(*args)

class IGESAppli_ReferenceDesignator(IGESData.IGESData_IGESEntity):
    """
    defines ReferenceDesignator, Type <406> Form <7>
    in package IGESAppli
    Used to attach a text string containing the value of
    a component reference designator to an entity being
    used to represent a component.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_ReferenceDesignator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_ReferenceDesignator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_ReferenceDesignator self) -> IGESAppli_ReferenceDesignator

        defines ReferenceDesignator, Type <406> Form <7>
        in package IGESAppli
        Used to attach a text string containing the value of
        a component reference designator to an entity being
        used to represent a component.
        """
        this = _IGESAppli.new_IGESAppli_ReferenceDesignator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_ReferenceDesignator self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aText)

        This method is used to set the fields of the class
        ReferenceDesignator
        - nbPropVal : Number of property values = 1
        - aText     : Reference designator text

        :type nbPropVal: int
        :type aText: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_ReferenceDesignator_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_ReferenceDesignator self) -> Standard_Integer

        returns the number of property values
        is always 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ReferenceDesignator_NbPropertyValues(self, *args)


    def RefDesignatorText(self, *args):
        """
        RefDesignatorText(IGESAppli_ReferenceDesignator self) -> Handle_TCollection_HAsciiString

        returns the Reference designator text

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_ReferenceDesignator_RefDesignatorText(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_ReferenceDesignator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_ReferenceDesignator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_ReferenceDesignator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ReferenceDesignator
IGESAppli_ReferenceDesignator_swigregister = _IGESAppli.IGESAppli_ReferenceDesignator_swigregister
IGESAppli_ReferenceDesignator_swigregister(IGESAppli_ReferenceDesignator)

def IGESAppli_ReferenceDesignator_get_type_name(*args):
    """
    IGESAppli_ReferenceDesignator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_ReferenceDesignator_get_type_name(*args)

def IGESAppli_ReferenceDesignator_get_type_descriptor(*args):
    """
    IGESAppli_ReferenceDesignator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_ReferenceDesignator_get_type_descriptor(*args)

class IGESAppli_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESAppli
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_SpecificModule self) -> IGESAppli_SpecificModule

        Creates a SpecificModule from IGESAppli & puts it into SpecificLib


        """
        this = _IGESAppli.new_IGESAppli_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESAppli

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        ---Purpose

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_SpecificModule
IGESAppli_SpecificModule_swigregister = _IGESAppli.IGESAppli_SpecificModule_swigregister
IGESAppli_SpecificModule_swigregister(IGESAppli_SpecificModule)

def IGESAppli_SpecificModule_get_type_name(*args):
    """
    IGESAppli_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_SpecificModule_get_type_name(*args)

def IGESAppli_SpecificModule_get_type_descriptor(*args):
    """
    IGESAppli_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_SpecificModule_get_type_descriptor(*args)

class IGESAppli_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESAppli"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_Protocol self) -> IGESAppli_Protocol

        Description of Protocol for IGESAppli
        """
        this = _IGESAppli.new_IGESAppli_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESAppli_Protocol self) -> Standard_Integer

        Gives the count of direct Resource Protocol. Here, two
        (Protocols from IGESDefs and IGESDraw)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESAppli_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESAppli.IGESAppli_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESAppli_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_Protocol
IGESAppli_Protocol_swigregister = _IGESAppli.IGESAppli_Protocol_swigregister
IGESAppli_Protocol_swigregister(IGESAppli_Protocol)

def IGESAppli_Protocol_get_type_name(*args):
    """
    IGESAppli_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_Protocol_get_type_name(*args)

def IGESAppli_Protocol_get_type_descriptor(*args):
    """
    IGESAppli_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_Protocol_get_type_descriptor(*args)

class IGESAppli_LineWidening(IGESData.IGESData_IGESEntity):
    """
    defines LineWidening, Type <406> Form <5>
    in package IGESAppli
    Defines the characteristics of entities when they are
    used to define locations of items.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_LineWidening
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_LineWidening(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_LineWidening self) -> IGESAppli_LineWidening

        defines LineWidening, Type <406> Form <5>
        in package IGESAppli
        Defines the characteristics of entities when they are
        used to define locations of items.
        """
        this = _IGESAppli.new_IGESAppli_LineWidening(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_LineWidening self, Standard_Integer const nbPropVal, Standard_Real const aWidth, Standard_Integer const aCornering, Standard_Integer const aExtnFlag, Standard_Integer const aJustifFlag, Standard_Real const aExtnVal)

        This method is used to set the fields of the class
        LineWidening
        - nbPropVal   : Number of property values = 5
        - aWidth      : Width of metalization
        - aCornering  : Cornering codes
        0 = rounded
        1 = squared
        - aExtnFlag   : Extension Flag
        0 = No Extension
        1 = One-half width extension
        2 = Extn set by ExtnVal
        - aJustifFlag : Justification flag
        0 = Center justified
        1 = left justified
        2 = right justified
        - aExtnVal    : Extension value if aExtnFlag = 2

        :type nbPropVal: int
        :type aWidth: float
        :type aCornering: int
        :type aExtnFlag: int
        :type aJustifFlag: int
        :type aExtnVal: float

        """
        return _IGESAppli.IGESAppli_LineWidening_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_LineWidening self) -> Standard_Integer

        returns the number of property values
        is always 5

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LineWidening_NbPropertyValues(self, *args)


    def WidthOfMetalization(self, *args):
        """
        WidthOfMetalization(IGESAppli_LineWidening self) -> Standard_Real

        returns the width of metallization

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_LineWidening_WidthOfMetalization(self, *args)


    def CorneringCode(self, *args):
        """
        CorneringCode(IGESAppli_LineWidening self) -> Standard_Integer

        returns the cornering code
        0 = Rounded  /   1 = Squared

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LineWidening_CorneringCode(self, *args)


    def ExtensionFlag(self, *args):
        """
        ExtensionFlag(IGESAppli_LineWidening self) -> Standard_Integer

        returns the extension flag
        0 = No extension
        1 = One-half width extension
        2 = Extension set by theExtnVal

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LineWidening_ExtensionFlag(self, *args)


    def JustificationFlag(self, *args):
        """
        JustificationFlag(IGESAppli_LineWidening self) -> Standard_Integer

        returns the justification flag
        0 = Centre justified
        1 = Left justified
        2 = Right justified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LineWidening_JustificationFlag(self, *args)


    def ExtensionValue(self, *args):
        """
        ExtensionValue(IGESAppli_LineWidening self) -> Standard_Real

        returns the Extension Value
        Present only if theExtnFlag = 2

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_LineWidening_ExtensionValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_LineWidening_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_LineWidening_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_LineWidening_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_LineWidening
IGESAppli_LineWidening_swigregister = _IGESAppli.IGESAppli_LineWidening_swigregister
IGESAppli_LineWidening_swigregister(IGESAppli_LineWidening)

def IGESAppli_LineWidening_get_type_name(*args):
    """
    IGESAppli_LineWidening_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_LineWidening_get_type_name(*args)

def IGESAppli_LineWidening_get_type_descriptor(*args):
    """
    IGESAppli_LineWidening_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_LineWidening_get_type_descriptor(*args)

class IGESAppli_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines basic File Access Module for IGESAppli (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_ReadWriteModule self) -> IGESAppli_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESAppli.new_IGESAppli_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESAppli_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESAppli

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESAppli

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ReadWriteModule
IGESAppli_ReadWriteModule_swigregister = _IGESAppli.IGESAppli_ReadWriteModule_swigregister
IGESAppli_ReadWriteModule_swigregister(IGESAppli_ReadWriteModule)

def IGESAppli_ReadWriteModule_get_type_name(*args):
    """
    IGESAppli_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_ReadWriteModule_get_type_name(*args)

def IGESAppli_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESAppli_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_ReadWriteModule_get_type_descriptor(*args)

class IGESAppli_ToolPWBArtworkStackup(object):
    """
    Tool to work on a PWBArtworkStackup. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolPWBArtworkStackup self) -> IGESAppli_ToolPWBArtworkStackup

        Returns a ToolPWBArtworkStackup, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolPWBArtworkStackup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PWBArtworkStackup <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup entfrom, Handle_IGESAppli_PWBArtworkStackup entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolPWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBArtworkStackup
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolPWBArtworkStackup_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolPWBArtworkStackup
IGESAppli_ToolPWBArtworkStackup_swigregister = _IGESAppli.IGESAppli_ToolPWBArtworkStackup_swigregister
IGESAppli_ToolPWBArtworkStackup_swigregister(IGESAppli_ToolPWBArtworkStackup)

class NCollection_Array1_Handle_IGESAppli_Node(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESAppli_Node self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESAppli_Node self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESAppli_Node self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESAppli_Node self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESAppli.new_NCollection_Array1_Handle_IGESAppli_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESAppli_Node self, Handle_IGESAppli_Node theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESAppli_Node self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESAppli_Node self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESAppli_Node self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESAppli_Node self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node
        assign(NCollection_Array1_Handle_IGESAppli_Node self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESAppli_Node self) -> Handle_IGESAppli_Node

        @return first element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESAppli_Node self) -> Handle_IGESAppli_Node

        @return last element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESAppli_Node self, Standard_Integer const theIndex) -> Handle_IGESAppli_Node

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESAppli_Node self, Standard_Integer const theIndex, Handle_IGESAppli_Node theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESAppli_Node self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_Resize(self, *args)

    __swig_destroy__ = _IGESAppli.delete_NCollection_Array1_Handle_IGESAppli_Node
NCollection_Array1_Handle_IGESAppli_Node_swigregister = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Node_swigregister
NCollection_Array1_Handle_IGESAppli_Node_swigregister(NCollection_Array1_Handle_IGESAppli_Node)


try:
	IGESAppli_Array1OfNode = NCollection_Array1_Handle_IGESAppli_Node
except NameError:
	pass # does not exist, probably ignored

class IGESAppli_ToolNodalConstraint(object):
    """
    Tool to work on a NodalConstraint. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolNodalConstraint self) -> IGESAppli_ToolNodalConstraint

        Returns a ToolNodalConstraint, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolNodalConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NodalConstraint <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint entfrom, Handle_IGESAppli_NodalConstraint entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolNodalConstraint self, Handle_IGESAppli_NodalConstraint ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalConstraint
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolNodalConstraint_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolNodalConstraint
IGESAppli_ToolNodalConstraint_swigregister = _IGESAppli.IGESAppli_ToolNodalConstraint_swigregister
IGESAppli_ToolNodalConstraint_swigregister(IGESAppli_ToolNodalConstraint)

class IGESAppli_NodalDisplAndRot(IGESData.IGESData_IGESEntity):
    """
    defines NodalDisplAndRot, Type <138> Form <0>
    in package IGESAppli
    Used to communicate finite element post processing
    data.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_NodalDisplAndRot
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_NodalDisplAndRot(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_NodalDisplAndRot self) -> IGESAppli_NodalDisplAndRot

        defines NodalDisplAndRot, Type <138> Form <0>
        in package IGESAppli
        Used to communicate finite element post processing
        data.
        """
        this = _IGESAppli.new_IGESAppli_NodalDisplAndRot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_NodalDisplAndRot self, Handle_IGESDimen_HArray1OfGeneralNote allNotes, Handle_TColStd_HArray1OfInteger allIdentifiers, Handle_IGESAppli_HArray1OfNode allNodes, Handle_IGESBasic_HArray1OfHArray1OfXYZ allRotParams, Handle_IGESBasic_HArray1OfHArray1OfXYZ allTransParams)

        This method is used to set the fields of the class
        NodalDisplAndRot
        - allNotes       : Used to store the general note describing
        the analysis cases
        - allIdentifiers : Used to store the node number
        identifier for the nodes
        - allNodes       : Used to store the nodes
        - allRotParams   : Used to store the rotation for the nodes
        - allTransParams : Used to store the incremental
        displacements for the nodes
        raises exception if Lengths of allIdentifiers, allNodes,
        allRotParams, and allTransParams are not same
        or if length of allNotes and size of each element of allRotParams
        and allTransParam are not same

        :type allNotes: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote
        :type allIdentifiers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type allRotParams: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ
        :type allTransParams: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_Init(self, *args)


    def NbCases(self, *args):
        """
        NbCases(IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        returns the number of analysis cases

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_NbCases(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        returns the number of nodes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_NbNodes(self, *args)


    def Note(self, *args):
        """
        Note(IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Handle_IGESDimen_GeneralNote

        returns the General Note that describes the Index analysis case
        raises exception if Index <= 0 or Index > NbCases

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_Note(self, *args)


    def NodeIdentifier(self, *args):
        """
        NodeIdentifier(IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Standard_Integer

        returns the node identifier as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_NodeIdentifier(self, *args)


    def Node(self, *args):
        """
        Node(IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns the node as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_Node(self, *args)


    def TranslationParameter(self, *args):
        """
        TranslationParameter(IGESAppli_NodalDisplAndRot self, Standard_Integer const NodeNum, Standard_Integer const CaseNum) -> gp_XYZ

        returns the Translational Parameters for the particular Index
        Exception raised if NodeNum <= 0 or NodeNum > NbNodes()
        or CaseNum <= 0 or CaseNum > NbCases()

        :type NodeNum: int
        :type CaseNum: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_TranslationParameter(self, *args)


    def RotationalParameter(self, *args):
        """
        RotationalParameter(IGESAppli_NodalDisplAndRot self, Standard_Integer const NodeNum, Standard_Integer const CaseNum) -> gp_XYZ

        returns the Rotational Parameters for Index
        Exception raised if NodeNum <= 0 or NodeNum > NbNodes()
        or CaseNum <= 0 or CaseNum > NbCases()

        :type NodeNum: int
        :type CaseNum: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_RotationalParameter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_NodalDisplAndRot_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_NodalDisplAndRot_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_NodalDisplAndRot
IGESAppli_NodalDisplAndRot_swigregister = _IGESAppli.IGESAppli_NodalDisplAndRot_swigregister
IGESAppli_NodalDisplAndRot_swigregister(IGESAppli_NodalDisplAndRot)

def IGESAppli_NodalDisplAndRot_get_type_name(*args):
    """
    IGESAppli_NodalDisplAndRot_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_NodalDisplAndRot_get_type_name(*args)

def IGESAppli_NodalDisplAndRot_get_type_descriptor(*args):
    """
    IGESAppli_NodalDisplAndRot_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_NodalDisplAndRot_get_type_descriptor(*args)

class Handle_IGESAppli_Flow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_Flow self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_Flow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_Flow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_Flow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_Flow self, IGESAppli_Flow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_Flow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_Flow self, Handle_IGESAppli_Flow theHandle) -> Handle_IGESAppli_Flow
        assign(Handle_IGESAppli_Flow self, IGESAppli_Flow thePtr) -> Handle_IGESAppli_Flow
        assign(Handle_IGESAppli_Flow self, Handle_IGESAppli_Flow theHandle) -> Handle_IGESAppli_Flow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_Flow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_Flow self) -> IGESAppli_Flow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Flow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_Flow self) -> IGESAppli_Flow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Flow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_Flow self) -> IGESAppli_Flow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_Flow___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_Flow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_Flow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_Flow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_Flow_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_Flow

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_Flow self, Standard_Integer const nbContextFlags, Standard_Integer const aFlowType, Standard_Integer const aFuncFlag, Handle_IGESData_HArray1OfIGESEntity allFlowAssocs, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints, Handle_IGESData_HArray1OfIGESEntity allJoins, Handle_Interface_HArray1OfHAsciiString allFlowNames, Handle_IGESGraph_HArray1OfTextDisplayTemplate allTextDisps, Handle_IGESData_HArray1OfIGESEntity allContFlowAssocs)

        This method is used to set the fields of the class Flow
        - nbContextFlags    : Count of Context Flags, always = 2
        - aFlowType         : Type of Flow, default = 0
        - aFuncFlag         : Function Flag, default = 0
        - allFlowAssocs     : Flow Associativity Entities
        - allConnectPoints  : Connect Point Entities
        - allJoins          : Join Entities
        - allFlowNames      : Flow Names
        - allTextDisps      : Text Display Template Entities
        - allContFlowAssocs : Continuation Flow Associativity Entities

        :type nbContextFlags: int
        :type aFlowType: int
        :type aFuncFlag: int
        :type allFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint
        :type allJoins: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allFlowNames: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allTextDisps: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate
        :type allContFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESAppli_Flow self) -> Standard_Boolean

        forces NbContextFalgs to 2, returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_OwnCorrect(self, *args)


    def NbContextFlags(self, *args):
        """
        NbContextFlags(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Count of Context Flags, always = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbContextFlags(self, *args)


    def NbFlowAssociativities(self, *args):
        """
        NbFlowAssociativities(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbFlowAssociativities(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbConnectPoints(self, *args)


    def NbJoins(self, *args):
        """
        NbJoins(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Join Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbJoins(self, *args)


    def NbFlowNames(self, *args):
        """
        NbFlowNames(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Flow Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbFlowNames(self, *args)


    def NbTextDisplayTemplates(self, *args):
        """
        NbTextDisplayTemplates(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Text Display Template Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbTextDisplayTemplates(self, *args)


    def NbContFlowAssociativities(self, *args):
        """
        NbContFlowAssociativities(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns number of Continuation Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbContFlowAssociativities(self, *args)


    def TypeOfFlow(self, *args):
        """
        TypeOfFlow(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns Type of Flow = 0 : Not Specified (default)
        1 : Logical
        2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_TypeOfFlow(self, *args)


    def FunctionFlag(self, *args):
        """
        FunctionFlag(Handle_IGESAppli_Flow self) -> Standard_Integer

        returns Function Flag = 0 : Not Specified (default)
        1 : Electrical Signal
        2 : Fluid Flow Path

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_FunctionFlag(self, *args)


    def FlowAssociativity(self, *args):
        """
        FlowAssociativity(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_FlowAssociativity(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns Connect Point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ConnectPoint(self, *args)


    def Join(self, *args):
        """
        Join(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Join Entity
        raises exception if Index <= 0 or Index > NbJoins()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Join(self, *args)


    def FlowName(self, *args):
        """
        FlowName(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Flow Name
        raises exception if Index <= 0 or Index > NbFlowNames()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_Flow_FlowName(self, *args)


    def TextDisplayTemplate(self, *args):
        """
        TextDisplayTemplate(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESGraph_TextDisplayTemplate

        returns Text Display Template Entity
        raises exception if Index <= 0 or Index > NbTextDisplayTemplates()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESAppli.Handle_IGESAppli_Flow_TextDisplayTemplate(self, *args)


    def ContFlowAssociativity(self, *args):
        """
        ContFlowAssociativity(Handle_IGESAppli_Flow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Continuation Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbContFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ContFlowAssociativity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_Flow self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_Flow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Flow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Flow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_Flow self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_Flow_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_Flow self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_Flow self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_Flow self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_Flow self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_Flow self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_Flow self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_Flow self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_Flow self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_Flow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_Flow self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_Flow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_Flow self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_Flow self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_Flow self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_Flow_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_Flow self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_Flow self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_Flow self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_Flow self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_Flow self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_Flow self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_Flow self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_Flow self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_Flow self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_Flow self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_Flow self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_Flow self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_Flow self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_Flow self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_Flow self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_Flow self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_Flow self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Flow_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_Flow self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Flow_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_Flow self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_Flow self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_Flow self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_Flow self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_Flow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_Flow self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_Flow self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_Flow self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_Flow self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_Flow self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_Flow self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_Flow_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_Flow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_Flow self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_Flow self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_Flow self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Flow_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_Flow self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_Flow_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_Flow self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_Flow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_Flow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_Flow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_Flow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_Flow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Flow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_Flow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_Flow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_Flow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_Flow self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_Flow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_Flow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Flow_DecrementRefCounter(self, *args)

Handle_IGESAppli_Flow_swigregister = _IGESAppli.Handle_IGESAppli_Flow_swigregister
Handle_IGESAppli_Flow_swigregister(Handle_IGESAppli_Flow)

def Handle_IGESAppli_Flow_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_Flow_DownCast(thing)
Handle_IGESAppli_Flow_DownCast = _IGESAppli.Handle_IGESAppli_Flow_DownCast

class IGESAppli_LevelToPWBLayerMap(IGESData.IGESData_IGESEntity):
    """
    defines LevelToPWBLayerMap, Type <406> Form <24>
    in package IGESAppli
    Used to correlate an exchange file level number with
    its corresponding native level identifier, physical PWB
    layer number and predefined functional level
    identification
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_LevelToPWBLayerMap
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_LevelToPWBLayerMap(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_LevelToPWBLayerMap self) -> IGESAppli_LevelToPWBLayerMap

        defines LevelToPWBLayerMap, Type <406> Form <24>
        in package IGESAppli
        Used to correlate an exchange file level number with
        its corresponding native level identifier, physical PWB
        layer number and predefined functional level
        identification
        """
        this = _IGESAppli.new_IGESAppli_LevelToPWBLayerMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_LevelToPWBLayerMap self, Standard_Integer const nbPropVal, Handle_TColStd_HArray1OfInteger allExchLevels, Handle_Interface_HArray1OfHAsciiString allNativeLevels, Handle_TColStd_HArray1OfInteger allPhysLevels, Handle_Interface_HArray1OfHAsciiString allExchIdents)

        This method is used to set the fields of the class
        LevelToPWBLayerMap
        - nbPropVal       : Number of property values
        - allExchLevels   : Exchange File Level Numbers
        - allNativeLevels : Native Level Identifications
        - allPhysLevels   : Physical Layer Numbers
        - allExchIdents   : Exchange File Level Identifications
        raises exception if allExchLevels, allNativeLevels, allPhysLevels
        and all ExchIdents are not of same dimensions

        :type nbPropVal: int
        :type allExchLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNativeLevels: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allPhysLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allExchIdents: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        returns number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_NbPropertyValues(self, *args)


    def NbLevelToLayerDefs(self, *args):
        """
        NbLevelToLayerDefs(IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        returns number of level to layer definitions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_NbLevelToLayerDefs(self, *args)


    def ExchangeFileLevelNumber(self, *args):
        """
        ExchangeFileLevelNumber(IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Standard_Integer

        returns Exchange File Level Number
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_ExchangeFileLevelNumber(self, *args)


    def NativeLevel(self, *args):
        """
        NativeLevel(IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Native Level Identification
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_NativeLevel(self, *args)


    def PhysicalLayerNumber(self, *args):
        """
        PhysicalLayerNumber(IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Standard_Integer

        returns Physical Layer Number
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_PhysicalLayerNumber(self, *args)


    def ExchangeFileLevelIdent(self, *args):
        """
        ExchangeFileLevelIdent(IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_ExchangeFileLevelIdent(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_LevelToPWBLayerMap_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_LevelToPWBLayerMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_LevelToPWBLayerMap
IGESAppli_LevelToPWBLayerMap_swigregister = _IGESAppli.IGESAppli_LevelToPWBLayerMap_swigregister
IGESAppli_LevelToPWBLayerMap_swigregister(IGESAppli_LevelToPWBLayerMap)

def IGESAppli_LevelToPWBLayerMap_get_type_name(*args):
    """
    IGESAppli_LevelToPWBLayerMap_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_LevelToPWBLayerMap_get_type_name(*args)

def IGESAppli_LevelToPWBLayerMap_get_type_descriptor(*args):
    """
    IGESAppli_LevelToPWBLayerMap_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_LevelToPWBLayerMap_get_type_descriptor(*args)

class IGESAppli_ToolReferenceDesignator(object):
    """
    Tool to work on a ReferenceDesignator. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolReferenceDesignator self) -> IGESAppli_ToolReferenceDesignator

        Returns a ToolReferenceDesignator, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolReferenceDesignator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ReferenceDesignator <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a ReferenceDesignator
        (NbPropertyValues forced to 1, Level cleared if Subordinate != 0)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator entfrom, Handle_IGESAppli_ReferenceDesignator entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ReferenceDesignator
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolReferenceDesignator_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolReferenceDesignator
IGESAppli_ToolReferenceDesignator_swigregister = _IGESAppli.IGESAppli_ToolReferenceDesignator_swigregister
IGESAppli_ToolReferenceDesignator_swigregister(IGESAppli_ToolReferenceDesignator)

class Handle_IGESAppli_PWBDrilledHole(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_PWBDrilledHole self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_PWBDrilledHole self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_PWBDrilledHole self, IGESAppli_PWBDrilledHole thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole theHandle) -> Handle_IGESAppli_PWBDrilledHole
        assign(Handle_IGESAppli_PWBDrilledHole self, IGESAppli_PWBDrilledHole thePtr) -> Handle_IGESAppli_PWBDrilledHole
        assign(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole theHandle) -> Handle_IGESAppli_PWBDrilledHole

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_PWBDrilledHole self) -> IGESAppli_PWBDrilledHole

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_PWBDrilledHole self) -> IGESAppli_PWBDrilledHole

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_PWBDrilledHole self) -> IGESAppli_PWBDrilledHole

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_PWBDrilledHole___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_PWBDrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_PWBDrilledHole_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_PWBDrilledHole

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_PWBDrilledHole self, Standard_Integer const nbPropVal, Standard_Real const aDrillDia, Standard_Real const aFinishDia, Standard_Integer const aCode)

        This method is used to set the fields of the class
        PWBDrilledHole
        - nbPropVal  : number of property values, always = 3
        - aDrillDia  : Drill diameter size
        - aFinishDia : Finish diameter size
        - aCode      : Function code for drilled hole

        :type nbPropVal: int
        :type aDrillDia: float
        :type aFinishDia: float
        :type aCode: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        returns number of property values, always = 3

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NbPropertyValues(self, *args)


    def DrillDiameterSize(self, *args):
        """
        DrillDiameterSize(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Real

        returns Drill diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DrillDiameterSize(self, *args)


    def FinishDiameterSize(self, *args):
        """
        FinishDiameterSize(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Real

        returns Finish diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_FinishDiameterSize(self, *args)


    def FunctionCode(self, *args):
        """
        FunctionCode(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        returns Function code for drilled hole
        is 0, 1, 2, 3, 4, 5 or 5001-9999

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_FunctionCode(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_PWBDrilledHole self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PWBDrilledHole_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_PWBDrilledHole self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_PWBDrilledHole self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_PWBDrilledHole self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_PWBDrilledHole self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_PWBDrilledHole self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_PWBDrilledHole self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_PWBDrilledHole self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_PWBDrilledHole self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_PWBDrilledHole self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_PWBDrilledHole self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_PWBDrilledHole self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_PWBDrilledHole self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_PWBDrilledHole self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_PWBDrilledHole self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_PWBDrilledHole self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_PWBDrilledHole self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_PWBDrilledHole self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_PWBDrilledHole self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_PWBDrilledHole self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_PWBDrilledHole self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_PWBDrilledHole self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_PWBDrilledHole self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_PWBDrilledHole self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_PWBDrilledHole self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_PWBDrilledHole self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_PWBDrilledHole self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DecrementRefCounter(self, *args)

Handle_IGESAppli_PWBDrilledHole_swigregister = _IGESAppli.Handle_IGESAppli_PWBDrilledHole_swigregister
Handle_IGESAppli_PWBDrilledHole_swigregister(Handle_IGESAppli_PWBDrilledHole)

def Handle_IGESAppli_PWBDrilledHole_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DownCast(thing)
Handle_IGESAppli_PWBDrilledHole_DownCast = _IGESAppli.Handle_IGESAppli_PWBDrilledHole_DownCast

class Handle_IGESAppli_LevelFunction(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_LevelFunction self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_LevelFunction self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_LevelFunction self, IGESAppli_LevelFunction thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_LevelFunction self, Handle_IGESAppli_LevelFunction theHandle) -> Handle_IGESAppli_LevelFunction
        assign(Handle_IGESAppli_LevelFunction self, IGESAppli_LevelFunction thePtr) -> Handle_IGESAppli_LevelFunction
        assign(Handle_IGESAppli_LevelFunction self, Handle_IGESAppli_LevelFunction theHandle) -> Handle_IGESAppli_LevelFunction

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_LevelFunction self) -> IGESAppli_LevelFunction

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_LevelFunction self) -> IGESAppli_LevelFunction

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_LevelFunction self) -> IGESAppli_LevelFunction

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_LevelFunction___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_LevelFunction___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_LevelFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_LevelFunction_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_LevelFunction

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_LevelFunction self, Standard_Integer const nbPropVal, Standard_Integer const aCode, Handle_TCollection_HAsciiString aFuncDescrip)

        This method is used to set the fields of the class
        LevelFunction
        - nbPropVal    : Number of Properties, always = 2
        - aCode        : Function Description code
        default = 0
        - aFuncDescrip : Function Description
        default = null string

        :type nbPropVal: int
        :type aCode: int
        :type aFuncDescrip: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        is always 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NbPropertyValues(self, *args)


    def FuncDescriptionCode(self, *args):
        """
        FuncDescriptionCode(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        returns the function description code . Default = 0

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_FuncDescriptionCode(self, *args)


    def FuncDescription(self, *args):
        """
        FuncDescription(Handle_IGESAppli_LevelFunction self) -> Handle_TCollection_HAsciiString

        returns the function description
        Default = null string

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_FuncDescription(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_LevelFunction self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LevelFunction_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LevelFunction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_LevelFunction self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_LevelFunction self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_LevelFunction self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_LevelFunction self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_LevelFunction self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_LevelFunction self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_LevelFunction self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_LevelFunction self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_LevelFunction self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_LevelFunction self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_LevelFunction self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_LevelFunction self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_LevelFunction self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_LevelFunction self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_LevelFunction self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_LevelFunction self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_LevelFunction self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_LevelFunction self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_LevelFunction self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_LevelFunction self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_LevelFunction self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_LevelFunction self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_LevelFunction self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_LevelFunction self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_LevelFunction self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_LevelFunction self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_LevelFunction self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_LevelFunction self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_LevelFunction self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_LevelFunction self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_LevelFunction self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_LevelFunction self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_LevelFunction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_LevelFunction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_LevelFunction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_LevelFunction self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_LevelFunction self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_LevelFunction self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelFunction_DecrementRefCounter(self, *args)

Handle_IGESAppli_LevelFunction_swigregister = _IGESAppli.Handle_IGESAppli_LevelFunction_swigregister
Handle_IGESAppli_LevelFunction_swigregister(Handle_IGESAppli_LevelFunction)

def Handle_IGESAppli_LevelFunction_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_LevelFunction_DownCast(thing)
Handle_IGESAppli_LevelFunction_DownCast = _IGESAppli.Handle_IGESAppli_LevelFunction_DownCast

class IGESAppli_ToolLevelFunction(object):
    """
    Tool to work on a LevelFunction. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolLevelFunction self) -> IGESAppli_ToolLevelFunction

        Returns a ToolLevelFunction, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolLevelFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LevelFunction <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a LevelFunction
        (NbPropertyValues forced to 2)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction entfrom, Handle_IGESAppli_LevelFunction entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolLevelFunction self, Handle_IGESAppli_LevelFunction ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelFunction
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolLevelFunction_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolLevelFunction
IGESAppli_ToolLevelFunction_swigregister = _IGESAppli.IGESAppli_ToolLevelFunction_swigregister
IGESAppli_ToolLevelFunction_swigregister(IGESAppli_ToolLevelFunction)

class Handle_IGESAppli_PWBArtworkStackup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_PWBArtworkStackup self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_PWBArtworkStackup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_PWBArtworkStackup self, IGESAppli_PWBArtworkStackup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup theHandle) -> Handle_IGESAppli_PWBArtworkStackup
        assign(Handle_IGESAppli_PWBArtworkStackup self, IGESAppli_PWBArtworkStackup thePtr) -> Handle_IGESAppli_PWBArtworkStackup
        assign(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESAppli_PWBArtworkStackup theHandle) -> Handle_IGESAppli_PWBArtworkStackup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_PWBArtworkStackup self) -> IGESAppli_PWBArtworkStackup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_PWBArtworkStackup self) -> IGESAppli_PWBArtworkStackup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_PWBArtworkStackup self) -> IGESAppli_PWBArtworkStackup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_PWBArtworkStackup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_PWBArtworkStackup

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_PWBArtworkStackup self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString anArtIdent, Handle_TColStd_HArray1OfInteger allLevelNums)

        This method is used to set the fields of the class
        PWBArtworkStackup
        - nbPropVal    : number of property values
        - anArtIdent   : Artwork Stackup Identification
        - allLevelNums : Level Numbers

        :type nbPropVal: int
        :type anArtIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allLevelNums: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        returns number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbPropertyValues(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_TCollection_HAsciiString

        returns Artwork Stackup Identification

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Identification(self, *args)


    def NbLevelNumbers(self, *args):
        """
        NbLevelNumbers(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        returns total number of Level Numbers

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbLevelNumbers(self, *args)


    def LevelNumber(self, *args):
        """
        LevelNumber(Handle_IGESAppli_PWBArtworkStackup self, Standard_Integer const Index) -> Standard_Integer

        returns Level Number
        raises exception if Index <= 0 or Index > NbLevelNumbers

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LevelNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_PWBArtworkStackup self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_PWBArtworkStackup self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_PWBArtworkStackup self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_PWBArtworkStackup self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_PWBArtworkStackup self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_PWBArtworkStackup self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_PWBArtworkStackup self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_PWBArtworkStackup self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_PWBArtworkStackup self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_PWBArtworkStackup self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_PWBArtworkStackup self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_PWBArtworkStackup self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_PWBArtworkStackup self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_PWBArtworkStackup self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_PWBArtworkStackup self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_PWBArtworkStackup self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_PWBArtworkStackup self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_PWBArtworkStackup self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_PWBArtworkStackup self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_PWBArtworkStackup self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_PWBArtworkStackup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_PWBArtworkStackup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_PWBArtworkStackup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_PWBArtworkStackup self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_PWBArtworkStackup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DecrementRefCounter(self, *args)

Handle_IGESAppli_PWBArtworkStackup_swigregister = _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_swigregister
Handle_IGESAppli_PWBArtworkStackup_swigregister(Handle_IGESAppli_PWBArtworkStackup)

def Handle_IGESAppli_PWBArtworkStackup_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DownCast(thing)
Handle_IGESAppli_PWBArtworkStackup_DownCast = _IGESAppli.Handle_IGESAppli_PWBArtworkStackup_DownCast

class IGESAppli_ElementResults(IGESData.IGESData_IGESEntity):
    """
    defines ElementResults, Type <148>
    in package IGESAppli
    Used to find the results of FEM analysis
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_ElementResults
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_ElementResults(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_ElementResults self) -> IGESAppli_ElementResults

        defines ElementResults, Type <148>
        in package IGESAppli
        Used to find the results of FEM analysis
        """
        this = _IGESAppli.new_IGESAppli_ElementResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_ElementResults self, Handle_IGESDimen_GeneralNote aNote, Standard_Integer const aSubCase, Standard_Real const aTime, Standard_Integer const nbResults, Standard_Integer const aResRepFlag, Handle_TColStd_HArray1OfInteger allElementIdents, Handle_IGESAppli_HArray1OfFiniteElement allFiniteElems, Handle_TColStd_HArray1OfInteger allTopTypes, Handle_TColStd_HArray1OfInteger nbLayers, Handle_TColStd_HArray1OfInteger allDataLayerFlags, Handle_TColStd_HArray1OfInteger allnbResDataLocs, Handle_IGESBasic_HArray1OfHArray1OfInteger allResDataLocs, Handle_IGESBasic_HArray1OfHArray1OfReal allResults)

        This method is used to set the fields of the class
        ElementResults
        - aNote             : GeneralNote Entity describing analysis
        - aSubCase          : Analysis Subcase number
        - aTime             : Analysis time value
        - nbResults         : Number of result values per FEM
        - aResRepFlag       : Results Reporting Flag
        - allElementIdents  : FEM element number for elements
        - allFiniteElems    : FEM element
        - allTopTypes       : Element Topology Types
        - nbLayers          : Number of layers per result data location
        - allDataLayerFlags : Data Layer Flags
        - allnbResDataLocs  : Number of result data report locations
        - allResDataLocs    : Result Data Report Locations
        - allResults        : List of Result data values of FEM analysis

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aSubCase: int
        :type aTime: float
        :type nbResults: int
        :type aResRepFlag: int
        :type allElementIdents: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allFiniteElems: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement
        :type allTopTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbLayers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDataLayerFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allnbResDataLocs: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allResDataLocs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allResults: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal

        """
        return _IGESAppli.IGESAppli_ElementResults_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESAppli_ElementResults self, Standard_Integer const form)

        Changes the FormNumber (which indicates Type of Result)
        Error if not in range [0-34]

        :type form: int

        """
        return _IGESAppli.IGESAppli_ElementResults_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(IGESAppli_ElementResults self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity describing analysis case

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.IGESAppli_ElementResults_Note(self, *args)


    def SubCaseNumber(self, *args):
        """
        SubCaseNumber(IGESAppli_ElementResults self) -> Standard_Integer

        returns analysis Subcase number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_SubCaseNumber(self, *args)


    def Time(self, *args):
        """
        Time(IGESAppli_ElementResults self) -> Standard_Real

        returns analysis time value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_ElementResults_Time(self, *args)


    def NbResultValues(self, *args):
        """
        NbResultValues(IGESAppli_ElementResults self) -> Standard_Integer

        returns number of result values per FEM

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_NbResultValues(self, *args)


    def ResultReportFlag(self, *args):
        """
        ResultReportFlag(IGESAppli_ElementResults self) -> Standard_Integer

        returns Results Reporting Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_ResultReportFlag(self, *args)


    def NbElements(self, *args):
        """
        NbElements(IGESAppli_ElementResults self) -> Standard_Integer

        returns number of FEM elements

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_NbElements(self, *args)


    def ElementIdentifier(self, *args):
        """
        ElementIdentifier(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns FEM element number for elements

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_ElementIdentifier(self, *args)


    def Element(self, *args):
        """
        Element(IGESAppli_ElementResults self, Standard_Integer const Index) -> Handle_IGESAppli_FiniteElement

        returns FEM element

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement

        """
        return _IGESAppli.IGESAppli_ElementResults_Element(self, *args)


    def ElementTopologyType(self, *args):
        """
        ElementTopologyType(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns element Topology Types

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_ElementTopologyType(self, *args)


    def NbLayers(self, *args):
        """
        NbLayers(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns number of layers per result data location

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_NbLayers(self, *args)


    def DataLayerFlag(self, *args):
        """
        DataLayerFlag(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns Data Layer Flags

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_DataLayerFlag(self, *args)


    def NbResultDataLocs(self, *args):
        """
        NbResultDataLocs(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns number of result data report locations

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_NbResultDataLocs(self, *args)


    def ResultDataLoc(self, *args):
        """
        ResultDataLoc(IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NLoc) -> Standard_Integer

        returns Result Data Report Locations
        UNFINISHED

        :type NElem: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_ResultDataLoc(self, *args)


    def NbResults(self, *args):
        """
        NbResults(IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns total number of results

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_NbResults(self, *args)


    def ResultRank(self, *args):
        """
        ResultRank(IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NVal, Standard_Integer const NLay, Standard_Integer const NLoc) -> Standard_Integer

        Computes, for a given Element <NElem>, the rank of a
        individual Result Data, given <NVal>,<NLay>,<NLoc>

        :type NElem: int
        :type NVal: int
        :type NLay: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_ElementResults_ResultRank(self, *args)


    def ResultData(self, *args):
        """
        ResultData(IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const num) -> Standard_Real
        ResultData(IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NVal, Standard_Integer const NLay, Standard_Integer const NLoc) -> Standard_Real

        returns Result data values of FEM analysis, according this
        definition :
        - <NElem> : n0 of the Element to be considered
        - <NVal> : n0 of the Value between 1 and NbResultValues
        - <NLay> : n0 of the Layer for this Element
        - <NLoc> : n0 of the Data Location for this Element
        This gives for each Element, the corresponding rank
        computed by ResultRank, in which the leftmost subscript
        changes most rapidly

        :type NElem: int
        :type NVal: int
        :type NLay: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_ElementResults_ResultData(self, *args)


    def ResultList(self, *args):
        """
        ResultList(IGESAppli_ElementResults self, Standard_Integer const NElem) -> Handle_TColStd_HArray1OfReal

        Returns in once the entire list of data for an Element,
        addressed as by ResultRank (See above)

        :type NElem: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESAppli.IGESAppli_ElementResults_ResultList(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_ElementResults_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_ElementResults_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_ElementResults_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ElementResults
IGESAppli_ElementResults_swigregister = _IGESAppli.IGESAppli_ElementResults_swigregister
IGESAppli_ElementResults_swigregister(IGESAppli_ElementResults)

def IGESAppli_ElementResults_get_type_name(*args):
    """
    IGESAppli_ElementResults_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_ElementResults_get_type_name(*args)

def IGESAppli_ElementResults_get_type_descriptor(*args):
    """
    IGESAppli_ElementResults_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_ElementResults_get_type_descriptor(*args)

class IGESAppli_FiniteElement(IGESData.IGESData_IGESEntity):
    """
    defines FiniteElement, Type <136> Form <0>
    in package IGESAppli
    Used to define a finite element with the help of an
    element topology.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_FiniteElement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_FiniteElement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_FiniteElement self) -> IGESAppli_FiniteElement

        defines FiniteElement, Type <136> Form <0>
        in package IGESAppli
        Used to define a finite element with the help of an
        element topology.
        """
        this = _IGESAppli.new_IGESAppli_FiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_FiniteElement self, Standard_Integer const aType, Handle_IGESAppli_HArray1OfNode allNodes, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class
        FiniteElement
        - aType    : Indicates the topology type
        - allNodes : List of Nodes defining the element
        - aName    : Element type name

        :type aType: int
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_FiniteElement_Init(self, *args)


    def Topology(self, *args):
        """
        Topology(IGESAppli_FiniteElement self) -> Standard_Integer

        returns Topology type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_FiniteElement_Topology(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(IGESAppli_FiniteElement self) -> Standard_Integer

        returns the number of nodes defining the element

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_FiniteElement_NbNodes(self, *args)


    def Node(self, *args):
        """
        Node(IGESAppli_FiniteElement self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns Node defining element entity
        raises exception if Index <= 0 or Index > NbNodes()

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.IGESAppli_FiniteElement_Node(self, *args)


    def Name(self, *args):
        """
        Name(IGESAppli_FiniteElement self) -> Handle_TCollection_HAsciiString

        returns Element Type Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_FiniteElement_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_FiniteElement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_FiniteElement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_FiniteElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_FiniteElement
IGESAppli_FiniteElement_swigregister = _IGESAppli.IGESAppli_FiniteElement_swigregister
IGESAppli_FiniteElement_swigregister(IGESAppli_FiniteElement)

def IGESAppli_FiniteElement_get_type_name(*args):
    """
    IGESAppli_FiniteElement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_FiniteElement_get_type_name(*args)

def IGESAppli_FiniteElement_get_type_descriptor(*args):
    """
    IGESAppli_FiniteElement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_FiniteElement_get_type_descriptor(*args)

class IGESAppli_FlowLineSpec(IGESData.IGESData_IGESEntity):
    """
    defines FlowLineSpec, Type <406> Form <14>
    in package IGESAppli
    Attaches one or more text strings to entities being
    used to represent a flow line
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_FlowLineSpec
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_FlowLineSpec(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_FlowLineSpec self) -> IGESAppli_FlowLineSpec

        defines FlowLineSpec, Type <406> Form <14>
        in package IGESAppli
        Attaches one or more text strings to entities being
        used to represent a flow line
        """
        this = _IGESAppli.new_IGESAppli_FlowLineSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_FlowLineSpec self, Handle_Interface_HArray1OfHAsciiString allProperties)

        This method is used to set the fields of the class
        FlowLineSpec
        - allProperties : primary flow line specification and modifiers

        :type allProperties: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_FlowLineSpec self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_NbPropertyValues(self, *args)


    def FlowLineName(self, *args):
        """
        FlowLineName(IGESAppli_FlowLineSpec self) -> Handle_TCollection_HAsciiString

        returns primary flow line specification name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_FlowLineName(self, *args)


    def Modifier(self, *args):
        """
        Modifier(IGESAppli_FlowLineSpec self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns specified modifier element
        raises exception if Index <= 1 or Index > NbPropertyValues

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_Modifier(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_FlowLineSpec_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_FlowLineSpec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_FlowLineSpec
IGESAppli_FlowLineSpec_swigregister = _IGESAppli.IGESAppli_FlowLineSpec_swigregister
IGESAppli_FlowLineSpec_swigregister(IGESAppli_FlowLineSpec)

def IGESAppli_FlowLineSpec_get_type_name(*args):
    """
    IGESAppli_FlowLineSpec_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_FlowLineSpec_get_type_name(*args)

def IGESAppli_FlowLineSpec_get_type_descriptor(*args):
    """
    IGESAppli_FlowLineSpec_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_FlowLineSpec_get_type_descriptor(*args)

class Handle_IGESAppli_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_Protocol self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_Protocol self, IGESAppli_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_Protocol self, Handle_IGESAppli_Protocol theHandle) -> Handle_IGESAppli_Protocol
        assign(Handle_IGESAppli_Protocol self, IGESAppli_Protocol thePtr) -> Handle_IGESAppli_Protocol
        assign(Handle_IGESAppli_Protocol self, Handle_IGESAppli_Protocol theHandle) -> Handle_IGESAppli_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_Protocol self) -> IGESAppli_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_Protocol self) -> IGESAppli_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_Protocol self) -> IGESAppli_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_Protocol_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESAppli_Protocol self) -> Standard_Integer

        Gives the count of direct Resource Protocol. Here, two
        (Protocols from IGESDefs and IGESDraw)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESAppli_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESAppli_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESAppli_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESAppli_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESAppli_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESAppli_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESAppli_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESAppli_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESAppli.Handle_IGESAppli_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESAppli_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESAppli_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESAppli_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESAppli_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESAppli_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Protocol_DecrementRefCounter(self, *args)

Handle_IGESAppli_Protocol_swigregister = _IGESAppli.Handle_IGESAppli_Protocol_swigregister
Handle_IGESAppli_Protocol_swigregister(Handle_IGESAppli_Protocol)

def Handle_IGESAppli_Protocol_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_Protocol_DownCast(thing)
Handle_IGESAppli_Protocol_DownCast = _IGESAppli.Handle_IGESAppli_Protocol_DownCast

class Handle_IGESAppli_NodalResults(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_NodalResults self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_NodalResults self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_NodalResults self, IGESAppli_NodalResults thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_NodalResults self, Handle_IGESAppli_NodalResults theHandle) -> Handle_IGESAppli_NodalResults
        assign(Handle_IGESAppli_NodalResults self, IGESAppli_NodalResults thePtr) -> Handle_IGESAppli_NodalResults
        assign(Handle_IGESAppli_NodalResults self, Handle_IGESAppli_NodalResults theHandle) -> Handle_IGESAppli_NodalResults

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_NodalResults self) -> IGESAppli_NodalResults

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_NodalResults self) -> IGESAppli_NodalResults

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_NodalResults self) -> IGESAppli_NodalResults

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_NodalResults___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_NodalResults___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_NodalResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_NodalResults_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_NodalResults

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_NodalResults self, Handle_IGESDimen_GeneralNote aNote, Standard_Integer const aNumber, Standard_Real const aTime, Handle_TColStd_HArray1OfInteger allNodeIdentifiers, Handle_IGESAppli_HArray1OfNode allNodes, Handle_TColStd_HArray2OfReal allData)

        This method is used to set the fields of the class
        NodalResults
        - aNote              : General Note that describes the
        analysis case
        - aNumber            : Analysis Subcase number
        - aTime              : Analysis time
        - allNodeIdentifiers : Node identifiers for the nodes
        - allNodes           : List of FEM Node Entities
        - allData            : Values of the Finite Element analysis
        result data
        raises exception if Lengths of allNodeIdentifiers, allNodes and
        allData (Cols) are not same

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aNumber: int
        :type aTime: float
        :type allNodeIdentifiers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type allData: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfReal

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESAppli_NodalResults self, Standard_Integer const form)

        Changes the FormNumber (which indicates Type of Result)
        Error if not in range [0-34]

        :type form: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESAppli_NodalResults self) -> Handle_IGESDimen_GeneralNote

        returns the General Note Entity that describes the analysis case

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Note(self, *args)


    def SubCaseNumber(self, *args):
        """
        SubCaseNumber(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        returns zero if there is no subcase

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SubCaseNumber(self, *args)


    def Time(self, *args):
        """
        Time(Handle_IGESAppli_NodalResults self) -> Standard_Real

        returns the Analysis time value for this subcase. It is the time
        at which transient analysis results occur in the mathematical
        FEM model.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Time(self, *args)


    def NbData(self, *args):
        """
        NbData(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        returns number of real values in array V for a FEM node

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbData(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        returns number of FEM nodes for which data is to be read.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbNodes(self, *args)


    def NodeIdentifier(self, *args):
        """
        NodeIdentifier(Handle_IGESAppli_NodalResults self, Standard_Integer const Index) -> Standard_Integer

        returns FEM node number identifier for the (Index)th node
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NodeIdentifier(self, *args)


    def Node(self, *args):
        """
        Node(Handle_IGESAppli_NodalResults self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns the node as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Node(self, *args)


    def Data(self, *args):
        """
        Data(Handle_IGESAppli_NodalResults self, Standard_Integer const NodeNum, Standard_Integer const DataNum) -> Standard_Real

        returns the finite element analysis result value
        raises exception if (NodeNum <= 0 or NodeNum > NbNodes()) or
        if (DataNum <=0 or DataNum > NbData())

        :type NodeNum: int
        :type DataNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Data(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_NodalResults self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalResults_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalResults_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_NodalResults self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_NodalResults self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_NodalResults self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_NodalResults self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_NodalResults self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_NodalResults self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_NodalResults self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_NodalResults self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_NodalResults self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_NodalResults self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_NodalResults self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_NodalResults self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_NodalResults self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_NodalResults self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_NodalResults self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_NodalResults self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_NodalResults self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_NodalResults self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_NodalResults self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_NodalResults self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_NodalResults self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_NodalResults self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_NodalResults self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_NodalResults self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_NodalResults self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_NodalResults self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_NodalResults self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_NodalResults self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_NodalResults self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_NodalResults self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_NodalResults self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_NodalResults self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_NodalResults self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_NodalResults self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_NodalResults self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_NodalResults self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_NodalResults self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_NodalResults self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_NodalResults self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_NodalResults self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_NodalResults self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_NodalResults self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_NodalResults self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalResults_DecrementRefCounter(self, *args)

Handle_IGESAppli_NodalResults_swigregister = _IGESAppli.Handle_IGESAppli_NodalResults_swigregister
Handle_IGESAppli_NodalResults_swigregister(Handle_IGESAppli_NodalResults)

def Handle_IGESAppli_NodalResults_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_NodalResults_DownCast(thing)
Handle_IGESAppli_NodalResults_DownCast = _IGESAppli.Handle_IGESAppli_NodalResults_DownCast

class IGESAppli_HArray1OfFiniteElement(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_HArray1OfFiniteElement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_HArray1OfFiniteElement(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_HArray1OfFiniteElement self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESAppli_HArray1OfFiniteElement
        __init__(IGESAppli_HArray1OfFiniteElement self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESAppli_FiniteElement theValue) -> IGESAppli_HArray1OfFiniteElement
        __init__(IGESAppli_HArray1OfFiniteElement self, NCollection_Array1_Handle_IGESAppli_FiniteElement theOther) -> IGESAppli_HArray1OfFiniteElement

        :type theOther: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFiniteElement

        """
        this = _IGESAppli.new_IGESAppli_HArray1OfFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFiniteElement

        """
        res = _IGESAppli.IGESAppli_HArray1OfFiniteElement_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESAppli_HArray1OfFiniteElement self) -> NCollection_Array1_Handle_IGESAppli_FiniteElement

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFiniteElement

        """
        return _IGESAppli.IGESAppli_HArray1OfFiniteElement_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_HArray1OfFiniteElement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_HArray1OfFiniteElement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_HArray1OfFiniteElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_HArray1OfFiniteElement
IGESAppli_HArray1OfFiniteElement_swigregister = _IGESAppli.IGESAppli_HArray1OfFiniteElement_swigregister
IGESAppli_HArray1OfFiniteElement_swigregister(IGESAppli_HArray1OfFiniteElement)

def IGESAppli_HArray1OfFiniteElement_get_type_name(*args):
    """
    IGESAppli_HArray1OfFiniteElement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_HArray1OfFiniteElement_get_type_name(*args)

def IGESAppli_HArray1OfFiniteElement_get_type_descriptor(*args):
    """
    IGESAppli_HArray1OfFiniteElement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_HArray1OfFiniteElement_get_type_descriptor(*args)

class IGESAppli_HArray1OfNode(NCollection_Array1_Handle_IGESAppli_Node, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_HArray1OfNode
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_HArray1OfNode(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_HArray1OfNode self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESAppli_HArray1OfNode
        __init__(IGESAppli_HArray1OfNode self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESAppli_Node theValue) -> IGESAppli_HArray1OfNode
        __init__(IGESAppli_HArray1OfNode self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> IGESAppli_HArray1OfNode

        :type theOther: OCC.wrapper.IGESAppli.IGESAppli_Array1OfNode

        """
        this = _IGESAppli.new_IGESAppli_HArray1OfNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfNode

        """
        res = _IGESAppli.IGESAppli_HArray1OfNode_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESAppli_HArray1OfNode self) -> NCollection_Array1_Handle_IGESAppli_Node

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfNode

        """
        return _IGESAppli.IGESAppli_HArray1OfNode_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_HArray1OfNode_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_HArray1OfNode_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_HArray1OfNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_HArray1OfNode
IGESAppli_HArray1OfNode_swigregister = _IGESAppli.IGESAppli_HArray1OfNode_swigregister
IGESAppli_HArray1OfNode_swigregister(IGESAppli_HArray1OfNode)

def IGESAppli_HArray1OfNode_get_type_name(*args):
    """
    IGESAppli_HArray1OfNode_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_HArray1OfNode_get_type_name(*args)

def IGESAppli_HArray1OfNode_get_type_descriptor(*args):
    """
    IGESAppli_HArray1OfNode_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_HArray1OfNode_get_type_descriptor(*args)

class IGESAppli_ToolDrilledHole(object):
    """
    Tool to work on a DrilledHole. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolDrilledHole self) -> IGESAppli_ToolDrilledHole

        Returns a ToolDrilledHole, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolDrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent, Interface_EntityIterator iter)

        Lists the Entities shared by a DrilledHole <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a DrilledHole
        (NbPropertyValues forced to 5, Level cleared if Subordinate != 0)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole entfrom, Handle_IGESAppli_DrilledHole entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolDrilledHole self, Handle_IGESAppli_DrilledHole ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_DrilledHole
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolDrilledHole_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolDrilledHole
IGESAppli_ToolDrilledHole_swigregister = _IGESAppli.IGESAppli_ToolDrilledHole_swigregister
IGESAppli_ToolDrilledHole_swigregister(IGESAppli_ToolDrilledHole)

class Handle_IGESAppli_HArray1OfNode(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_HArray1OfNode self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_HArray1OfNode self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_HArray1OfNode self, IGESAppli_HArray1OfNode thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_HArray1OfNode self, Handle_IGESAppli_HArray1OfNode theHandle) -> Handle_IGESAppli_HArray1OfNode
        assign(Handle_IGESAppli_HArray1OfNode self, IGESAppli_HArray1OfNode thePtr) -> Handle_IGESAppli_HArray1OfNode
        assign(Handle_IGESAppli_HArray1OfNode self, Handle_IGESAppli_HArray1OfNode theHandle) -> Handle_IGESAppli_HArray1OfNode

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_HArray1OfNode self) -> IGESAppli_HArray1OfNode

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_HArray1OfNode self) -> IGESAppli_HArray1OfNode

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_HArray1OfNode self) -> IGESAppli_HArray1OfNode

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_HArray1OfNode___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_HArray1OfNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_HArray1OfNode_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_HArray1OfNode

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfNode

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESAppli_HArray1OfNode self) -> NCollection_Array1_Handle_IGESAppli_Node

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfNode

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_HArray1OfNode self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_IGESAppli_HArray1OfNode self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_IGESAppli_HArray1OfNode self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_IGESAppli_HArray1OfNode self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_IGESAppli_HArray1OfNode self) -> NCollection_Array1< opencascade::handle< IGESAppli_Node > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_IGESAppli_HArray1OfNode self, Handle_IGESAppli_Node theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_IGESAppli_HArray1OfNode self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_IGESAppli_HArray1OfNode self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_IGESAppli_HArray1OfNode self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_IGESAppli_HArray1OfNode self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_IGESAppli_HArray1OfNode self, NCollection_Array1_Handle_IGESAppli_Node theOther) -> NCollection_Array1_Handle_IGESAppli_Node

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_IGESAppli_HArray1OfNode self) -> Handle_IGESAppli_Node

        @return first element

        :rtype: TheItemType &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_IGESAppli_HArray1OfNode self) -> Handle_IGESAppli_Node

        @return last element

        :rtype: TheItemType &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfNode_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_IGESAppli_HArray1OfNode self, Standard_Integer const theIndex) -> Handle_IGESAppli_Node

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESAppli_HArray1OfNode self, Standard_Integer const theIndex, Handle_IGESAppli_Node theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_IGESAppli_HArray1OfNode self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_HArray1OfNode self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_HArray1OfNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_HArray1OfNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_HArray1OfNode self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_HArray1OfNode self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_HArray1OfNode self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_HArray1OfNode self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_HArray1OfNode self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfNode_DecrementRefCounter(self, *args)

Handle_IGESAppli_HArray1OfNode_swigregister = _IGESAppli.Handle_IGESAppli_HArray1OfNode_swigregister
Handle_IGESAppli_HArray1OfNode_swigregister(Handle_IGESAppli_HArray1OfNode)

def Handle_IGESAppli_HArray1OfNode_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_HArray1OfNode_DownCast(thing)
Handle_IGESAppli_HArray1OfNode_DownCast = _IGESAppli.Handle_IGESAppli_HArray1OfNode_DownCast

class NCollection_Array1_Handle_IGESAppli_Flow(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESAppli_Flow self) -> NCollection_Array1< opencascade::handle< IGESAppli_Flow > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESAppli_Flow self) -> NCollection_Array1< opencascade::handle< IGESAppli_Flow > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESAppli_Flow self) -> NCollection_Array1< opencascade::handle< IGESAppli_Flow > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESAppli_Flow self) -> NCollection_Array1< opencascade::handle< IGESAppli_Flow > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESAppli.new_NCollection_Array1_Handle_IGESAppli_Flow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESAppli_Flow self, Handle_IGESAppli_Flow theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESAppli_Flow self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESAppli_Flow self, NCollection_Array1_Handle_IGESAppli_Flow theOther) -> NCollection_Array1_Handle_IGESAppli_Flow

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESAppli_Flow self, NCollection_Array1_Handle_IGESAppli_Flow theOther) -> NCollection_Array1_Handle_IGESAppli_Flow

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESAppli_Flow self, NCollection_Array1_Handle_IGESAppli_Flow theOther) -> NCollection_Array1_Handle_IGESAppli_Flow
        assign(NCollection_Array1_Handle_IGESAppli_Flow self, NCollection_Array1_Handle_IGESAppli_Flow theOther) -> NCollection_Array1_Handle_IGESAppli_Flow

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESAppli_Flow self) -> Handle_IGESAppli_Flow

        @return first element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESAppli_Flow self) -> Handle_IGESAppli_Flow

        @return last element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESAppli_Flow self, Standard_Integer const theIndex) -> Handle_IGESAppli_Flow

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESAppli_Flow self, Standard_Integer const theIndex, Handle_IGESAppli_Flow theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESAppli_Flow self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_Resize(self, *args)

    __swig_destroy__ = _IGESAppli.delete_NCollection_Array1_Handle_IGESAppli_Flow
NCollection_Array1_Handle_IGESAppli_Flow_swigregister = _IGESAppli.NCollection_Array1_Handle_IGESAppli_Flow_swigregister
NCollection_Array1_Handle_IGESAppli_Flow_swigregister(NCollection_Array1_Handle_IGESAppli_Flow)


try:
	IGESAppli_Array1OfFlow = NCollection_Array1_Handle_IGESAppli_Flow
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESAppli_PartNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_PartNumber self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_PartNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_PartNumber self, IGESAppli_PartNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_PartNumber self, Handle_IGESAppli_PartNumber theHandle) -> Handle_IGESAppli_PartNumber
        assign(Handle_IGESAppli_PartNumber self, IGESAppli_PartNumber thePtr) -> Handle_IGESAppli_PartNumber
        assign(Handle_IGESAppli_PartNumber self, Handle_IGESAppli_PartNumber theHandle) -> Handle_IGESAppli_PartNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_PartNumber self) -> IGESAppli_PartNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_PartNumber self) -> IGESAppli_PartNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_PartNumber self) -> IGESAppli_PartNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_PartNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_PartNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_PartNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_PartNumber_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_PartNumber

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_PartNumber self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aGenName, Handle_TCollection_HAsciiString aMilName, Handle_TCollection_HAsciiString aVendName, Handle_TCollection_HAsciiString anIntName)

        This method is used to set the fields of the class
        PartNumber
        - nbPropVal : number of property values, always = 4
        - aGenName  : Generic part number or name
        - aMilName  : Military Standard (MIL-STD) part number
        - aVendName : Vendor part number or name
        - anIntName : Internal part number

        :type nbPropVal: int
        :type aGenName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aMilName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aVendName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anIntName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        returns number of property values, always = 4

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NbPropertyValues(self, *args)


    def GenericNumber(self, *args):
        """
        GenericNumber(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Generic part number or name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_GenericNumber(self, *args)


    def MilitaryNumber(self, *args):
        """
        MilitaryNumber(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Military Standard (MIL-STD) part number

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_MilitaryNumber(self, *args)


    def VendorNumber(self, *args):
        """
        VendorNumber(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Vendor part number or name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_VendorNumber(self, *args)


    def InternalNumber(self, *args):
        """
        InternalNumber(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Internal part number

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InternalNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_PartNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PartNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PartNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_PartNumber self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_PartNumber self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_PartNumber self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_PartNumber self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_PartNumber self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_PartNumber self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_PartNumber self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_PartNumber self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_PartNumber self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_PartNumber self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_PartNumber self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_PartNumber self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_PartNumber self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_PartNumber self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_PartNumber self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_PartNumber self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_PartNumber self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_PartNumber self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_PartNumber self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_PartNumber self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_PartNumber self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_PartNumber self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_PartNumber self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_PartNumber self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_PartNumber self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_PartNumber self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_PartNumber self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_PartNumber self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_PartNumber self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_PartNumber self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_PartNumber self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_PartNumber self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_PartNumber self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_PartNumber self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_PartNumber self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_PartNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_PartNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_PartNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_PartNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_PartNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_PartNumber self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_PartNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PartNumber_DecrementRefCounter(self, *args)

Handle_IGESAppli_PartNumber_swigregister = _IGESAppli.Handle_IGESAppli_PartNumber_swigregister
Handle_IGESAppli_PartNumber_swigregister(Handle_IGESAppli_PartNumber)

def Handle_IGESAppli_PartNumber_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_PartNumber_DownCast(thing)
Handle_IGESAppli_PartNumber_DownCast = _IGESAppli.Handle_IGESAppli_PartNumber_DownCast

class IGESAppli_ToolRegionRestriction(object):
    """
    Tool to work on a RegionRestriction. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolRegionRestriction self) -> IGESAppli_ToolRegionRestriction

        Returns a ToolRegionRestriction, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolRegionRestriction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent, Interface_EntityIterator iter)

        Lists the Entities shared by a RegionRestriction <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a RegionRestriction
        (NbPropertyValues forced to 3, Level cleared if Subordinate != 0)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction entfrom, Handle_IGESAppli_RegionRestriction entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolRegionRestriction self, Handle_IGESAppli_RegionRestriction ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_RegionRestriction
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolRegionRestriction_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolRegionRestriction
IGESAppli_ToolRegionRestriction_swigregister = _IGESAppli.IGESAppli_ToolRegionRestriction_swigregister
IGESAppli_ToolRegionRestriction_swigregister(IGESAppli_ToolRegionRestriction)

class IGESAppli_RegionRestriction(IGESData.IGESData_IGESEntity):
    """
    defines RegionRestriction, Type <406> Form <2>
    in package IGESAppli
    Defines regions to set an application's restriction
    over a region.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_RegionRestriction
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_RegionRestriction(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_RegionRestriction self) -> IGESAppli_RegionRestriction

        defines RegionRestriction, Type <406> Form <2>
        in package IGESAppli
        Defines regions to set an application's restriction
        over a region.
        """
        this = _IGESAppli.new_IGESAppli_RegionRestriction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_RegionRestriction self, Standard_Integer const nbPropVal, Standard_Integer const aViasRest, Standard_Integer const aCompoRest, Standard_Integer const aCktRest)

        This method is used to set the fields of the class
        RegionRestriction
        - nbPropVal  : Number of property values, always = 3
        - aViasRest  : Electrical Vias restriction
        - aCompoRest : Electrical components restriction
        - aCktRest   : Electrical circuitry restriction

        :type nbPropVal: int
        :type aViasRest: int
        :type aCompoRest: int
        :type aCktRest: int

        """
        return _IGESAppli.IGESAppli_RegionRestriction_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_RegionRestriction self) -> Standard_Integer

        is always 3

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_RegionRestriction_NbPropertyValues(self, *args)


    def ElectricalViasRestriction(self, *args):
        """
        ElectricalViasRestriction(IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical vias restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_RegionRestriction_ElectricalViasRestriction(self, *args)


    def ElectricalComponentRestriction(self, *args):
        """
        ElectricalComponentRestriction(IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical components restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_RegionRestriction_ElectricalComponentRestriction(self, *args)


    def ElectricalCktRestriction(self, *args):
        """
        ElectricalCktRestriction(IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical circuitry restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_RegionRestriction_ElectricalCktRestriction(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_RegionRestriction_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_RegionRestriction_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_RegionRestriction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_RegionRestriction
IGESAppli_RegionRestriction_swigregister = _IGESAppli.IGESAppli_RegionRestriction_swigregister
IGESAppli_RegionRestriction_swigregister(IGESAppli_RegionRestriction)

def IGESAppli_RegionRestriction_get_type_name(*args):
    """
    IGESAppli_RegionRestriction_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_RegionRestriction_get_type_name(*args)

def IGESAppli_RegionRestriction_get_type_descriptor(*args):
    """
    IGESAppli_RegionRestriction_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_RegionRestriction_get_type_descriptor(*args)

class IGESAppli_ToolFlow(object):
    """
    Tool to work on a Flow. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolFlow self) -> IGESAppli_ToolFlow

        Returns a ToolFlow, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolFlow_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolFlow_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Flow <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolFlow_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Flow
        (NbContextFlags forced to 2)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolFlow_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolFlow_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolFlow_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow entfrom, Handle_IGESAppli_Flow entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolFlow_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolFlow self, Handle_IGESAppli_Flow ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Flow
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolFlow_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolFlow
IGESAppli_ToolFlow_swigregister = _IGESAppli.IGESAppli_ToolFlow_swigregister
IGESAppli_ToolFlow_swigregister(IGESAppli_ToolFlow)

class Handle_IGESAppli_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_SpecificModule self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_SpecificModule self, IGESAppli_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_SpecificModule self, Handle_IGESAppli_SpecificModule theHandle) -> Handle_IGESAppli_SpecificModule
        assign(Handle_IGESAppli_SpecificModule self, IGESAppli_SpecificModule thePtr) -> Handle_IGESAppli_SpecificModule
        assign(Handle_IGESAppli_SpecificModule self, Handle_IGESAppli_SpecificModule theHandle) -> Handle_IGESAppli_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_SpecificModule self) -> IGESAppli_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_SpecificModule self) -> IGESAppli_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_SpecificModule self) -> IGESAppli_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_SpecificModule_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESAppli_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESAppli

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESAppli_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        ---Purpose

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESAppli_SpecificModule_swigregister = _IGESAppli.Handle_IGESAppli_SpecificModule_swigregister
Handle_IGESAppli_SpecificModule_swigregister(Handle_IGESAppli_SpecificModule)

def Handle_IGESAppli_SpecificModule_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_SpecificModule_DownCast(thing)
Handle_IGESAppli_SpecificModule_DownCast = _IGESAppli.Handle_IGESAppli_SpecificModule_DownCast

class Handle_IGESAppli_ReferenceDesignator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_ReferenceDesignator self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_ReferenceDesignator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_ReferenceDesignator self, IGESAppli_ReferenceDesignator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator theHandle) -> Handle_IGESAppli_ReferenceDesignator
        assign(Handle_IGESAppli_ReferenceDesignator self, IGESAppli_ReferenceDesignator thePtr) -> Handle_IGESAppli_ReferenceDesignator
        assign(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESAppli_ReferenceDesignator theHandle) -> Handle_IGESAppli_ReferenceDesignator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_ReferenceDesignator self) -> IGESAppli_ReferenceDesignator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_ReferenceDesignator self) -> IGESAppli_ReferenceDesignator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_ReferenceDesignator self) -> IGESAppli_ReferenceDesignator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_ReferenceDesignator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_ReferenceDesignator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_ReferenceDesignator_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_ReferenceDesignator

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_ReferenceDesignator self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aText)

        This method is used to set the fields of the class
        ReferenceDesignator
        - nbPropVal : Number of property values = 1
        - aText     : Reference designator text

        :type nbPropVal: int
        :type aText: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        returns the number of property values
        is always 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NbPropertyValues(self, *args)


    def RefDesignatorText(self, *args):
        """
        RefDesignatorText(Handle_IGESAppli_ReferenceDesignator self) -> Handle_TCollection_HAsciiString

        returns the Reference designator text

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_RefDesignatorText(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_ReferenceDesignator self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ReferenceDesignator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_ReferenceDesignator self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_ReferenceDesignator self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_ReferenceDesignator self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_ReferenceDesignator self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_ReferenceDesignator self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_ReferenceDesignator self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_ReferenceDesignator self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_ReferenceDesignator self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_ReferenceDesignator self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_ReferenceDesignator self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_ReferenceDesignator self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_ReferenceDesignator self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_ReferenceDesignator self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_ReferenceDesignator self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_ReferenceDesignator self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_ReferenceDesignator self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_ReferenceDesignator self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_ReferenceDesignator self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_ReferenceDesignator self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_ReferenceDesignator self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_ReferenceDesignator self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_ReferenceDesignator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_ReferenceDesignator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_ReferenceDesignator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_ReferenceDesignator self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_ReferenceDesignator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DecrementRefCounter(self, *args)

Handle_IGESAppli_ReferenceDesignator_swigregister = _IGESAppli.Handle_IGESAppli_ReferenceDesignator_swigregister
Handle_IGESAppli_ReferenceDesignator_swigregister(Handle_IGESAppli_ReferenceDesignator)

def Handle_IGESAppli_ReferenceDesignator_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DownCast(thing)
Handle_IGESAppli_ReferenceDesignator_DownCast = _IGESAppli.Handle_IGESAppli_ReferenceDesignator_DownCast

class IGESAppli_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESAppli (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_GeneralModule self) -> IGESAppli_GeneralModule

        Creates a GeneralModule from IGESAppli and puts it into GeneralLib


        """
        this = _IGESAppli.new_IGESAppli_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        FEA for : ElementResults,FiniteElement,Node&Co
        Piping for : Flow & Co
        Professional for : others (in fact Schematics)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_GeneralModule
IGESAppli_GeneralModule_swigregister = _IGESAppli.IGESAppli_GeneralModule_swigregister
IGESAppli_GeneralModule_swigregister(IGESAppli_GeneralModule)

def IGESAppli_GeneralModule_get_type_name(*args):
    """
    IGESAppli_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_GeneralModule_get_type_name(*args)

def IGESAppli_GeneralModule_get_type_descriptor(*args):
    """
    IGESAppli_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_GeneralModule_get_type_descriptor(*args)

class IGESAppli_ToolLevelToPWBLayerMap(object):
    """
    Tool to work on a LevelToPWBLayerMap. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolLevelToPWBLayerMap self) -> IGESAppli_ToolLevelToPWBLayerMap

        Returns a ToolLevelToPWBLayerMap, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolLevelToPWBLayerMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LevelToPWBLayerMap <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap entfrom, Handle_IGESAppli_LevelToPWBLayerMap entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolLevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolLevelToPWBLayerMap
IGESAppli_ToolLevelToPWBLayerMap_swigregister = _IGESAppli.IGESAppli_ToolLevelToPWBLayerMap_swigregister
IGESAppli_ToolLevelToPWBLayerMap_swigregister(IGESAppli_ToolLevelToPWBLayerMap)

class IGESAppli_ToolPinNumber(object):
    """
    Tool to work on a PinNumber. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolPinNumber self) -> IGESAppli_ToolPinNumber

        Returns a ToolPinNumber, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolPinNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PinNumber <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a PinNumber
        (Level cleared in D.E. if Subordinate != 0)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber entfrom, Handle_IGESAppli_PinNumber entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolPinNumber self, Handle_IGESAppli_PinNumber ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PinNumber
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolPinNumber_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolPinNumber
IGESAppli_ToolPinNumber_swigregister = _IGESAppli.IGESAppli_ToolPinNumber_swigregister
IGESAppli_ToolPinNumber_swigregister(IGESAppli_ToolPinNumber)

class Handle_IGESAppli_HArray1OfFlow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_HArray1OfFlow self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_HArray1OfFlow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_HArray1OfFlow self, IGESAppli_HArray1OfFlow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_HArray1OfFlow self, Handle_IGESAppli_HArray1OfFlow theHandle) -> Handle_IGESAppli_HArray1OfFlow
        assign(Handle_IGESAppli_HArray1OfFlow self, IGESAppli_HArray1OfFlow thePtr) -> Handle_IGESAppli_HArray1OfFlow
        assign(Handle_IGESAppli_HArray1OfFlow self, Handle_IGESAppli_HArray1OfFlow theHandle) -> Handle_IGESAppli_HArray1OfFlow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_HArray1OfFlow self) -> IGESAppli_HArray1OfFlow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_HArray1OfFlow self) -> IGESAppli_HArray1OfFlow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_HArray1OfFlow self) -> IGESAppli_HArray1OfFlow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_HArray1OfFlow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_HArray1OfFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_HArray1OfFlow_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_HArray1OfFlow

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFlow

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFlow_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESAppli_HArray1OfFlow self) -> NCollection_Array1_Handle_IGESAppli_Flow

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFlow

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_HArray1OfFlow self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFlow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFlow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_HArray1OfFlow self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_HArray1OfFlow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_HArray1OfFlow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_HArray1OfFlow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_HArray1OfFlow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_HArray1OfFlow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_HArray1OfFlow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_HArray1OfFlow self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_HArray1OfFlow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_DecrementRefCounter(self, *args)

Handle_IGESAppli_HArray1OfFlow_swigregister = _IGESAppli.Handle_IGESAppli_HArray1OfFlow_swigregister
Handle_IGESAppli_HArray1OfFlow_swigregister(Handle_IGESAppli_HArray1OfFlow)

def Handle_IGESAppli_HArray1OfFlow_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_HArray1OfFlow_DownCast(thing)
Handle_IGESAppli_HArray1OfFlow_DownCast = _IGESAppli.Handle_IGESAppli_HArray1OfFlow_DownCast

class IGESAppli_PipingFlow(IGESData.IGESData_IGESEntity):
    """
    defines PipingFlow, Type <402> Form <20>
    in package IGESAppli
    Represents a single fluid flow path
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_PipingFlow
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_PipingFlow(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_PipingFlow self) -> IGESAppli_PipingFlow

        defines PipingFlow, Type <402> Form <20>
        in package IGESAppli
        Represents a single fluid flow path
        """
        this = _IGESAppli.new_IGESAppli_PipingFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_PipingFlow self, Standard_Integer const nbContextFlags, Standard_Integer const aFlowType, Handle_IGESData_HArray1OfIGESEntity allFlowAssocs, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints, Handle_IGESData_HArray1OfIGESEntity allJoins, Handle_Interface_HArray1OfHAsciiString allFlowNames, Handle_IGESGraph_HArray1OfTextDisplayTemplate allTextDisps, Handle_IGESData_HArray1OfIGESEntity allContFlowAssocs)

        This method is used to set the fields of the class
        PipingFlow
        - nbContextFlags    : Count of Context Flags, always = 1
        - aFlowType         : Type of Flow, default = 0
        - allFlowAssocs     : PipingFlow Associativity Entities
        - allConnectPoints  : Connect Point Entities
        - allJoins          : Join Entities
        - allFlowNames      : PipingFlow Names
        - allTextDispTs     : Text Display Template Entities
        - allContFlowAssocs : Continuation Flow Associativity Entities

        :type nbContextFlags: int
        :type aFlowType: int
        :type allFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint
        :type allJoins: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allFlowNames: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allTextDisps: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate
        :type allContFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESAppli.IGESAppli_PipingFlow_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_PipingFlow self) -> Standard_Boolean

        forces NbContextFalgs to 1, returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_PipingFlow_OwnCorrect(self, *args)


    def NbContextFlags(self, *args):
        """
        NbContextFlags(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Count of Context Flags, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbContextFlags(self, *args)


    def NbFlowAssociativities(self, *args):
        """
        NbFlowAssociativities(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Piping Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbFlowAssociativities(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbConnectPoints(self, *args)


    def NbJoins(self, *args):
        """
        NbJoins(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Join Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbJoins(self, *args)


    def NbFlowNames(self, *args):
        """
        NbFlowNames(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Flow Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbFlowNames(self, *args)


    def NbTextDisplayTemplates(self, *args):
        """
        NbTextDisplayTemplates(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Text Display Template Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbTextDisplayTemplates(self, *args)


    def NbContFlowAssociativities(self, *args):
        """
        NbContFlowAssociativities(IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Continuation Piping Flow Associativities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_NbContFlowAssociativities(self, *args)


    def TypeOfFlow(self, *args):
        """
        TypeOfFlow(IGESAppli_PipingFlow self) -> Standard_Integer

        returns Type of Flow = 0 : Not specified,
        1 : Logical,
        2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PipingFlow_TypeOfFlow(self, *args)


    def FlowAssociativity(self, *args):
        """
        FlowAssociativity(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Piping Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_PipingFlow_FlowAssociativity(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns Connect Point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESAppli.IGESAppli_PipingFlow_ConnectPoint(self, *args)


    def Join(self, *args):
        """
        Join(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Join Entity
        raises exception if Index <= 0 or Index > NbJoins()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_PipingFlow_Join(self, *args)


    def FlowName(self, *args):
        """
        FlowName(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Flow Name
        raises exception if Index <= 0 or Index > NbFlowNames()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PipingFlow_FlowName(self, *args)


    def TextDisplayTemplate(self, *args):
        """
        TextDisplayTemplate(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESGraph_TextDisplayTemplate

        returns Text Display Template Entity
        raises exception if Index <= 0 or Index > NbTextDisplayTemplates()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESAppli.IGESAppli_PipingFlow_TextDisplayTemplate(self, *args)


    def ContFlowAssociativity(self, *args):
        """
        ContFlowAssociativity(IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Continuation Piping Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbContFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.IGESAppli_PipingFlow_ContFlowAssociativity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_PipingFlow_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_PipingFlow_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_PipingFlow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_PipingFlow
IGESAppli_PipingFlow_swigregister = _IGESAppli.IGESAppli_PipingFlow_swigregister
IGESAppli_PipingFlow_swigregister(IGESAppli_PipingFlow)

def IGESAppli_PipingFlow_get_type_name(*args):
    """
    IGESAppli_PipingFlow_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_PipingFlow_get_type_name(*args)

def IGESAppli_PipingFlow_get_type_descriptor(*args):
    """
    IGESAppli_PipingFlow_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_PipingFlow_get_type_descriptor(*args)

class IGESAppli_DrilledHole(IGESData.IGESData_IGESEntity):
    """
    defines DrilledHole, Type <406> Form <6>
    in package IGESAppli
    Identifies an entity representing a drilled hole
    through a printed circuit board.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_DrilledHole
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_DrilledHole(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_DrilledHole self) -> IGESAppli_DrilledHole

        defines DrilledHole, Type <406> Form <6>
        in package IGESAppli
        Identifies an entity representing a drilled hole
        through a printed circuit board.
        """
        this = _IGESAppli.new_IGESAppli_DrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_DrilledHole self, Standard_Integer const nbPropVal, Standard_Real const aSize, Standard_Real const anotherSize, Standard_Integer const aPlating, Standard_Integer const aLayer, Standard_Integer const anotherLayer)

        This method is used to set the fields of the class
        DrilledHole
        - nbPropVal    : Number of property values = 5
        - aSize        : Drill diameter size
        - anotherSize  : Finish diameter size
        - aPlating     : Plating indication flag
        False = not plating
        True  = is plating
        - aLayer       : Lower numbered layer
        - anotherLayer : Higher numbered layer

        :type nbPropVal: int
        :type aSize: float
        :type anotherSize: float
        :type aPlating: int
        :type aLayer: int
        :type anotherLayer: int

        """
        return _IGESAppli.IGESAppli_DrilledHole_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_DrilledHole self) -> Standard_Integer

        is always 5

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_DrilledHole_NbPropertyValues(self, *args)


    def DrillDiaSize(self, *args):
        """
        DrillDiaSize(IGESAppli_DrilledHole self) -> Standard_Real

        returns the drill diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_DrilledHole_DrillDiaSize(self, *args)


    def FinishDiaSize(self, *args):
        """
        FinishDiaSize(IGESAppli_DrilledHole self) -> Standard_Real

        returns the finish diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.IGESAppli_DrilledHole_FinishDiaSize(self, *args)


    def IsPlating(self, *args):
        """
        IsPlating(IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns Plating Status :
        False = not plating  /  True  = is plating

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_DrilledHole_IsPlating(self, *args)


    def NbLowerLayer(self, *args):
        """
        NbLowerLayer(IGESAppli_DrilledHole self) -> Standard_Integer

        returns the lower numbered layer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_DrilledHole_NbLowerLayer(self, *args)


    def NbHigherLayer(self, *args):
        """
        NbHigherLayer(IGESAppli_DrilledHole self) -> Standard_Integer

        returns the higher numbered layer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_DrilledHole_NbHigherLayer(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_DrilledHole_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_DrilledHole_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_DrilledHole_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_DrilledHole
IGESAppli_DrilledHole_swigregister = _IGESAppli.IGESAppli_DrilledHole_swigregister
IGESAppli_DrilledHole_swigregister(IGESAppli_DrilledHole)

def IGESAppli_DrilledHole_get_type_name(*args):
    """
    IGESAppli_DrilledHole_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_DrilledHole_get_type_name(*args)

def IGESAppli_DrilledHole_get_type_descriptor(*args):
    """
    IGESAppli_DrilledHole_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_DrilledHole_get_type_descriptor(*args)

class IGESAppli_ToolNodalDisplAndRot(object):
    """
    Tool to work on a NodalDisplAndRot. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolNodalDisplAndRot self) -> IGESAppli_ToolNodalDisplAndRot

        Returns a ToolNodalDisplAndRot, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolNodalDisplAndRot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NodalDisplAndRot <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot entfrom, Handle_IGESAppli_NodalDisplAndRot entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolNodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalDisplAndRot
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolNodalDisplAndRot_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolNodalDisplAndRot
IGESAppli_ToolNodalDisplAndRot_swigregister = _IGESAppli.IGESAppli_ToolNodalDisplAndRot_swigregister
IGESAppli_ToolNodalDisplAndRot_swigregister(IGESAppli_ToolNodalDisplAndRot)

class Handle_IGESAppli_LevelToPWBLayerMap(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_LevelToPWBLayerMap self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_LevelToPWBLayerMap self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_LevelToPWBLayerMap self, IGESAppli_LevelToPWBLayerMap thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap theHandle) -> Handle_IGESAppli_LevelToPWBLayerMap
        assign(Handle_IGESAppli_LevelToPWBLayerMap self, IGESAppli_LevelToPWBLayerMap thePtr) -> Handle_IGESAppli_LevelToPWBLayerMap
        assign(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESAppli_LevelToPWBLayerMap theHandle) -> Handle_IGESAppli_LevelToPWBLayerMap

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESAppli_LevelToPWBLayerMap

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESAppli_LevelToPWBLayerMap

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESAppli_LevelToPWBLayerMap

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_LevelToPWBLayerMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_LevelToPWBLayerMap

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const nbPropVal, Handle_TColStd_HArray1OfInteger allExchLevels, Handle_Interface_HArray1OfHAsciiString allNativeLevels, Handle_TColStd_HArray1OfInteger allPhysLevels, Handle_Interface_HArray1OfHAsciiString allExchIdents)

        This method is used to set the fields of the class
        LevelToPWBLayerMap
        - nbPropVal       : Number of property values
        - allExchLevels   : Exchange File Level Numbers
        - allNativeLevels : Native Level Identifications
        - allPhysLevels   : Physical Layer Numbers
        - allExchIdents   : Exchange File Level Identifications
        raises exception if allExchLevels, allNativeLevels, allPhysLevels
        and all ExchIdents are not of same dimensions

        :type nbPropVal: int
        :type allExchLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNativeLevels: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allPhysLevels: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allExchIdents: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        returns number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbPropertyValues(self, *args)


    def NbLevelToLayerDefs(self, *args):
        """
        NbLevelToLayerDefs(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        returns number of level to layer definitions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbLevelToLayerDefs(self, *args)


    def ExchangeFileLevelNumber(self, *args):
        """
        ExchangeFileLevelNumber(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Standard_Integer

        returns Exchange File Level Number
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ExchangeFileLevelNumber(self, *args)


    def NativeLevel(self, *args):
        """
        NativeLevel(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Native Level Identification
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NativeLevel(self, *args)


    def PhysicalLayerNumber(self, *args):
        """
        PhysicalLayerNumber(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Standard_Integer

        returns Physical Layer Number
        raises exception if Index <= 0 or Index > NbLevelToLayerDefs

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_PhysicalLayerNumber(self, *args)


    def ExchangeFileLevelIdent(self, *args):
        """
        ExchangeFileLevelIdent(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ExchangeFileLevelIdent(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_LevelToPWBLayerMap self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_LevelToPWBLayerMap self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_LevelToPWBLayerMap self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_LevelToPWBLayerMap self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_LevelToPWBLayerMap self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_LevelToPWBLayerMap self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_LevelToPWBLayerMap self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_LevelToPWBLayerMap self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_LevelToPWBLayerMap self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_LevelToPWBLayerMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_LevelToPWBLayerMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_LevelToPWBLayerMap self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_LevelToPWBLayerMap self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DecrementRefCounter(self, *args)

Handle_IGESAppli_LevelToPWBLayerMap_swigregister = _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_swigregister
Handle_IGESAppli_LevelToPWBLayerMap_swigregister(Handle_IGESAppli_LevelToPWBLayerMap)

def Handle_IGESAppli_LevelToPWBLayerMap_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DownCast(thing)
Handle_IGESAppli_LevelToPWBLayerMap_DownCast = _IGESAppli.Handle_IGESAppli_LevelToPWBLayerMap_DownCast

class IGESAppli_ToolElementResults(object):
    """
    Tool to work on a ElementResults. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolElementResults self) -> IGESAppli_ToolElementResults

        Returns a ToolElementResults, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolElementResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolElementResults_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolElementResults_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ElementResults <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolElementResults_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolElementResults_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolElementResults_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults entfrom, Handle_IGESAppli_ElementResults entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolElementResults_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolElementResults self, Handle_IGESAppli_ElementResults ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_ElementResults
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolElementResults_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolElementResults
IGESAppli_ToolElementResults_swigregister = _IGESAppli.IGESAppli_ToolElementResults_swigregister
IGESAppli_ToolElementResults_swigregister(IGESAppli_ToolElementResults)

class IGESAppli_ToolLineWidening(object):
    """
    Tool to work on a LineWidening. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolLineWidening self) -> IGESAppli_ToolLineWidening

        Returns a ToolLineWidening, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolLineWidening(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent, Interface_EntityIterator iter)

        Lists the Entities shared by a LineWidening <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a LineWidening
        (NbPropertyValues forced to 5, Level cleared if Subordinate != 0)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening entfrom, Handle_IGESAppli_LineWidening entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolLineWidening self, Handle_IGESAppli_LineWidening ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_LineWidening
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolLineWidening_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolLineWidening
IGESAppli_ToolLineWidening_swigregister = _IGESAppli.IGESAppli_ToolLineWidening_swigregister
IGESAppli_ToolLineWidening_swigregister(IGESAppli_ToolLineWidening)

class Handle_IGESAppli_HArray1OfFiniteElement(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_HArray1OfFiniteElement self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_HArray1OfFiniteElement self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_HArray1OfFiniteElement self, IGESAppli_HArray1OfFiniteElement thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_HArray1OfFiniteElement self, Handle_IGESAppli_HArray1OfFiniteElement theHandle) -> Handle_IGESAppli_HArray1OfFiniteElement
        assign(Handle_IGESAppli_HArray1OfFiniteElement self, IGESAppli_HArray1OfFiniteElement thePtr) -> Handle_IGESAppli_HArray1OfFiniteElement
        assign(Handle_IGESAppli_HArray1OfFiniteElement self, Handle_IGESAppli_HArray1OfFiniteElement theHandle) -> Handle_IGESAppli_HArray1OfFiniteElement

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_HArray1OfFiniteElement self) -> IGESAppli_HArray1OfFiniteElement

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_HArray1OfFiniteElement self) -> IGESAppli_HArray1OfFiniteElement

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_HArray1OfFiniteElement self) -> IGESAppli_HArray1OfFiniteElement

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_HArray1OfFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_HArray1OfFiniteElement

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFiniteElement

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESAppli_HArray1OfFiniteElement self) -> NCollection_Array1_Handle_IGESAppli_FiniteElement

        :rtype: OCC.wrapper.IGESAppli.IGESAppli_Array1OfFiniteElement

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_HArray1OfFiniteElement self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_HArray1OfFiniteElement self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_HArray1OfFiniteElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_HArray1OfFiniteElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_HArray1OfFiniteElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_HArray1OfFiniteElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_HArray1OfFiniteElement self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_HArray1OfFiniteElement self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_HArray1OfFiniteElement self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_HArray1OfFiniteElement self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_DecrementRefCounter(self, *args)

Handle_IGESAppli_HArray1OfFiniteElement_swigregister = _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_swigregister
Handle_IGESAppli_HArray1OfFiniteElement_swigregister(Handle_IGESAppli_HArray1OfFiniteElement)

def Handle_IGESAppli_HArray1OfFiniteElement_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_DownCast(thing)
Handle_IGESAppli_HArray1OfFiniteElement_DownCast = _IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement_DownCast

class Handle_IGESAppli_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_GeneralModule self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_GeneralModule self, IGESAppli_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_GeneralModule self, Handle_IGESAppli_GeneralModule theHandle) -> Handle_IGESAppli_GeneralModule
        assign(Handle_IGESAppli_GeneralModule self, IGESAppli_GeneralModule thePtr) -> Handle_IGESAppli_GeneralModule
        assign(Handle_IGESAppli_GeneralModule self, Handle_IGESAppli_GeneralModule theHandle) -> Handle_IGESAppli_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_GeneralModule self) -> IGESAppli_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_GeneralModule self) -> IGESAppli_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_GeneralModule self) -> IGESAppli_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_GeneralModule_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        FEA for : ElementResults,FiniteElement,Node&Co
        Piping for : Flow & Co
        Professional for : others (in fact Schematics)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESAppli_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESAppli_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESAppli_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESAppli_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESAppli_GeneralModule_swigregister = _IGESAppli.Handle_IGESAppli_GeneralModule_swigregister
Handle_IGESAppli_GeneralModule_swigregister(Handle_IGESAppli_GeneralModule)

def Handle_IGESAppli_GeneralModule_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_GeneralModule_DownCast(thing)
Handle_IGESAppli_GeneralModule_DownCast = _IGESAppli.Handle_IGESAppli_GeneralModule_DownCast

class Handle_IGESAppli_FiniteElement(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_FiniteElement self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_FiniteElement self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_FiniteElement self, IGESAppli_FiniteElement thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_FiniteElement self, Handle_IGESAppli_FiniteElement theHandle) -> Handle_IGESAppli_FiniteElement
        assign(Handle_IGESAppli_FiniteElement self, IGESAppli_FiniteElement thePtr) -> Handle_IGESAppli_FiniteElement
        assign(Handle_IGESAppli_FiniteElement self, Handle_IGESAppli_FiniteElement theHandle) -> Handle_IGESAppli_FiniteElement

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_FiniteElement self) -> IGESAppli_FiniteElement

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_FiniteElement self) -> IGESAppli_FiniteElement

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_FiniteElement self) -> IGESAppli_FiniteElement

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_FiniteElement___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_FiniteElement___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_FiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_FiniteElement_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_FiniteElement

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_FiniteElement self, Standard_Integer const aType, Handle_IGESAppli_HArray1OfNode allNodes, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class
        FiniteElement
        - aType    : Indicates the topology type
        - allNodes : List of Nodes defining the element
        - aName    : Element type name

        :type aType: int
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Init(self, *args)


    def Topology(self, *args):
        """
        Topology(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        returns Topology type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Topology(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        returns the number of nodes defining the element

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NbNodes(self, *args)


    def Node(self, *args):
        """
        Node(Handle_IGESAppli_FiniteElement self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns Node defining element entity
        raises exception if Index <= 0 or Index > NbNodes()

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Node(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESAppli_FiniteElement self) -> Handle_TCollection_HAsciiString

        returns Element Type Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_FiniteElement self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_FiniteElement_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_FiniteElement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_FiniteElement self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_FiniteElement self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_FiniteElement self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_FiniteElement self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_FiniteElement self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_FiniteElement self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_FiniteElement self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_FiniteElement self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_FiniteElement self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_FiniteElement self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_FiniteElement self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_FiniteElement self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_FiniteElement self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_FiniteElement self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_FiniteElement self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_FiniteElement self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_FiniteElement self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_FiniteElement self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_FiniteElement self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_FiniteElement self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_FiniteElement self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_FiniteElement self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_FiniteElement self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_FiniteElement self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_FiniteElement self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_FiniteElement self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_FiniteElement self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_FiniteElement self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_FiniteElement self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_FiniteElement self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_FiniteElement self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_FiniteElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_FiniteElement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_FiniteElement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_FiniteElement self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_FiniteElement self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FiniteElement_DecrementRefCounter(self, *args)

Handle_IGESAppli_FiniteElement_swigregister = _IGESAppli.Handle_IGESAppli_FiniteElement_swigregister
Handle_IGESAppli_FiniteElement_swigregister(Handle_IGESAppli_FiniteElement)

def Handle_IGESAppli_FiniteElement_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_FiniteElement_DownCast(thing)
Handle_IGESAppli_FiniteElement_DownCast = _IGESAppli.Handle_IGESAppli_FiniteElement_DownCast

class Handle_IGESAppli_RegionRestriction(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_RegionRestriction self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_RegionRestriction self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_RegionRestriction self, IGESAppli_RegionRestriction thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_RegionRestriction self, Handle_IGESAppli_RegionRestriction theHandle) -> Handle_IGESAppli_RegionRestriction
        assign(Handle_IGESAppli_RegionRestriction self, IGESAppli_RegionRestriction thePtr) -> Handle_IGESAppli_RegionRestriction
        assign(Handle_IGESAppli_RegionRestriction self, Handle_IGESAppli_RegionRestriction theHandle) -> Handle_IGESAppli_RegionRestriction

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_RegionRestriction self) -> IGESAppli_RegionRestriction

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_RegionRestriction self) -> IGESAppli_RegionRestriction

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_RegionRestriction self) -> IGESAppli_RegionRestriction

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_RegionRestriction___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_RegionRestriction___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_RegionRestriction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_RegionRestriction_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_RegionRestriction

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_RegionRestriction self, Standard_Integer const nbPropVal, Standard_Integer const aViasRest, Standard_Integer const aCompoRest, Standard_Integer const aCktRest)

        This method is used to set the fields of the class
        RegionRestriction
        - nbPropVal  : Number of property values, always = 3
        - aViasRest  : Electrical Vias restriction
        - aCompoRest : Electrical components restriction
        - aCktRest   : Electrical circuitry restriction

        :type nbPropVal: int
        :type aViasRest: int
        :type aCompoRest: int
        :type aCktRest: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        is always 3

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NbPropertyValues(self, *args)


    def ElectricalViasRestriction(self, *args):
        """
        ElectricalViasRestriction(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical vias restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ElectricalViasRestriction(self, *args)


    def ElectricalComponentRestriction(self, *args):
        """
        ElectricalComponentRestriction(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical components restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ElectricalComponentRestriction(self, *args)


    def ElectricalCktRestriction(self, *args):
        """
        ElectricalCktRestriction(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        returns the Electrical circuitry restriction
        is 0, 1 or 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ElectricalCktRestriction(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_RegionRestriction self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_RegionRestriction_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_RegionRestriction_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_RegionRestriction self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_RegionRestriction self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_RegionRestriction self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_RegionRestriction self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_RegionRestriction self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_RegionRestriction self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_RegionRestriction self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_RegionRestriction self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_RegionRestriction self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_RegionRestriction self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_RegionRestriction self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_RegionRestriction self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_RegionRestriction self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_RegionRestriction self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_RegionRestriction self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_RegionRestriction self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_RegionRestriction self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_RegionRestriction self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_RegionRestriction self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_RegionRestriction self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_RegionRestriction self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_RegionRestriction self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_RegionRestriction self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_RegionRestriction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_RegionRestriction self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_RegionRestriction self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_RegionRestriction self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_RegionRestriction self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_RegionRestriction self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_RegionRestriction_DecrementRefCounter(self, *args)

Handle_IGESAppli_RegionRestriction_swigregister = _IGESAppli.Handle_IGESAppli_RegionRestriction_swigregister
Handle_IGESAppli_RegionRestriction_swigregister(Handle_IGESAppli_RegionRestriction)

def Handle_IGESAppli_RegionRestriction_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_RegionRestriction_DownCast(thing)
Handle_IGESAppli_RegionRestriction_DownCast = _IGESAppli.Handle_IGESAppli_RegionRestriction_DownCast

class Handle_IGESAppli_NodalDisplAndRot(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_NodalDisplAndRot self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_NodalDisplAndRot self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_NodalDisplAndRot self, IGESAppli_NodalDisplAndRot thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot theHandle) -> Handle_IGESAppli_NodalDisplAndRot
        assign(Handle_IGESAppli_NodalDisplAndRot self, IGESAppli_NodalDisplAndRot thePtr) -> Handle_IGESAppli_NodalDisplAndRot
        assign(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESAppli_NodalDisplAndRot theHandle) -> Handle_IGESAppli_NodalDisplAndRot

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_NodalDisplAndRot self) -> IGESAppli_NodalDisplAndRot

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_NodalDisplAndRot self) -> IGESAppli_NodalDisplAndRot

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_NodalDisplAndRot self) -> IGESAppli_NodalDisplAndRot

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_NodalDisplAndRot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_NodalDisplAndRot

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESDimen_HArray1OfGeneralNote allNotes, Handle_TColStd_HArray1OfInteger allIdentifiers, Handle_IGESAppli_HArray1OfNode allNodes, Handle_IGESBasic_HArray1OfHArray1OfXYZ allRotParams, Handle_IGESBasic_HArray1OfHArray1OfXYZ allTransParams)

        This method is used to set the fields of the class
        NodalDisplAndRot
        - allNotes       : Used to store the general note describing
        the analysis cases
        - allIdentifiers : Used to store the node number
        identifier for the nodes
        - allNodes       : Used to store the nodes
        - allRotParams   : Used to store the rotation for the nodes
        - allTransParams : Used to store the incremental
        displacements for the nodes
        raises exception if Lengths of allIdentifiers, allNodes,
        allRotParams, and allTransParams are not same
        or if length of allNotes and size of each element of allRotParams
        and allTransParam are not same

        :type allNotes: OCC.wrapper.IGESDimen.Handle_IGESDimen_HArray1OfGeneralNote
        :type allIdentifiers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allNodes: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfNode
        :type allRotParams: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ
        :type allTransParams: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Init(self, *args)


    def NbCases(self, *args):
        """
        NbCases(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        returns the number of analysis cases

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbCases(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        returns the number of nodes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbNodes(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Handle_IGESDimen_GeneralNote

        returns the General Note that describes the Index analysis case
        raises exception if Index <= 0 or Index > NbCases

        :type Index: int
        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Note(self, *args)


    def NodeIdentifier(self, *args):
        """
        NodeIdentifier(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Standard_Integer

        returns the node identifier as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NodeIdentifier(self, *args)


    def Node(self, *args):
        """
        Node(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const Index) -> Handle_IGESAppli_Node

        returns the node as specified by the Index
        raises exception if Index <= 0 or Index > NbNodes

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Node(self, *args)


    def TranslationParameter(self, *args):
        """
        TranslationParameter(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const NodeNum, Standard_Integer const CaseNum) -> gp_XYZ

        returns the Translational Parameters for the particular Index
        Exception raised if NodeNum <= 0 or NodeNum > NbNodes()
        or CaseNum <= 0 or CaseNum > NbCases()

        :type NodeNum: int
        :type CaseNum: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_TranslationParameter(self, *args)


    def RotationalParameter(self, *args):
        """
        RotationalParameter(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const NodeNum, Standard_Integer const CaseNum) -> gp_XYZ

        returns the Rotational Parameters for Index
        Exception raised if NodeNum <= 0 or NodeNum > NbNodes()
        or CaseNum <= 0 or CaseNum > NbCases()

        :type NodeNum: int
        :type CaseNum: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_RotationalParameter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_NodalDisplAndRot self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_NodalDisplAndRot self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_NodalDisplAndRot self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_NodalDisplAndRot self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_NodalDisplAndRot self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_NodalDisplAndRot self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_NodalDisplAndRot self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_NodalDisplAndRot self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_NodalDisplAndRot self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_NodalDisplAndRot self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_NodalDisplAndRot self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_NodalDisplAndRot self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_NodalDisplAndRot self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_NodalDisplAndRot self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_NodalDisplAndRot self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_NodalDisplAndRot self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_NodalDisplAndRot self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_NodalDisplAndRot self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_NodalDisplAndRot self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_NodalDisplAndRot self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_NodalDisplAndRot self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_NodalDisplAndRot self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_NodalDisplAndRot self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DecrementRefCounter(self, *args)

Handle_IGESAppli_NodalDisplAndRot_swigregister = _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_swigregister
Handle_IGESAppli_NodalDisplAndRot_swigregister(Handle_IGESAppli_NodalDisplAndRot)

def Handle_IGESAppli_NodalDisplAndRot_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DownCast(thing)
Handle_IGESAppli_NodalDisplAndRot_DownCast = _IGESAppli.Handle_IGESAppli_NodalDisplAndRot_DownCast

class IGESAppli_ToolFlowLineSpec(object):
    """
    Tool to work on a FlowLineSpec. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolFlowLineSpec self) -> IGESAppli_ToolFlowLineSpec

        Returns a ToolFlowLineSpec, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolFlowLineSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent, Interface_EntityIterator iter)

        Lists the Entities shared by a FlowLineSpec <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec entfrom, Handle_IGESAppli_FlowLineSpec entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolFlowLineSpec self, Handle_IGESAppli_FlowLineSpec ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FlowLineSpec
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolFlowLineSpec_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolFlowLineSpec
IGESAppli_ToolFlowLineSpec_swigregister = _IGESAppli.IGESAppli_ToolFlowLineSpec_swigregister
IGESAppli_ToolFlowLineSpec_swigregister(IGESAppli_ToolFlowLineSpec)

class IGESAppli_(object):
    """
    This package represents collection of miscellaneous
    entities from IGES
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESAppli.IGESAppli__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESAppli_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Protocol

        """
        return _IGESAppli.IGESAppli__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        This package represents collection of miscellaneous
        entities from IGES
        """
        this = _IGESAppli.new_IGESAppli_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESAppli.delete_IGESAppli_
IGESAppli__swigregister = _IGESAppli.IGESAppli__swigregister
IGESAppli__swigregister(IGESAppli_)

def IGESAppli__Init(*args):
    """
    IGESAppli__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESAppli.IGESAppli__Init(*args)

def IGESAppli__Protocol(*args):
    """
    IGESAppli__Protocol() -> Handle_IGESAppli_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Protocol

    """
    return _IGESAppli.IGESAppli__Protocol(*args)

class IGESAppli_ToolPipingFlow(object):
    """
    Tool to work on a PipingFlow. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolPipingFlow self) -> IGESAppli_ToolPipingFlow

        Returns a ToolPipingFlow, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolPipingFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PipingFlow <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a PipingFlow
        (NbContextFlags forced to 1)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow entfrom, Handle_IGESAppli_PipingFlow entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolPipingFlow self, Handle_IGESAppli_PipingFlow ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PipingFlow
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolPipingFlow_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolPipingFlow
IGESAppli_ToolPipingFlow_swigregister = _IGESAppli.IGESAppli_ToolPipingFlow_swigregister
IGESAppli_ToolPipingFlow_swigregister(IGESAppli_ToolPipingFlow)

class IGESAppli_ToolFiniteElement(object):
    """
    Tool to work on a FiniteElement. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolFiniteElement self) -> IGESAppli_ToolFiniteElement

        Returns a ToolFiniteElement, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent, Interface_EntityIterator iter)

        Lists the Entities shared by a FiniteElement <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement entfrom, Handle_IGESAppli_FiniteElement entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolFiniteElement self, Handle_IGESAppli_FiniteElement ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolFiniteElement_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolFiniteElement
IGESAppli_ToolFiniteElement_swigregister = _IGESAppli.IGESAppli_ToolFiniteElement_swigregister
IGESAppli_ToolFiniteElement_swigregister(IGESAppli_ToolFiniteElement)

class Handle_IGESAppli_FlowLineSpec(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_FlowLineSpec self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_FlowLineSpec self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_FlowLineSpec self, IGESAppli_FlowLineSpec thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_FlowLineSpec self, Handle_IGESAppli_FlowLineSpec theHandle) -> Handle_IGESAppli_FlowLineSpec
        assign(Handle_IGESAppli_FlowLineSpec self, IGESAppli_FlowLineSpec thePtr) -> Handle_IGESAppli_FlowLineSpec
        assign(Handle_IGESAppli_FlowLineSpec self, Handle_IGESAppli_FlowLineSpec theHandle) -> Handle_IGESAppli_FlowLineSpec

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_FlowLineSpec self) -> IGESAppli_FlowLineSpec

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_FlowLineSpec self) -> IGESAppli_FlowLineSpec

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_FlowLineSpec self) -> IGESAppli_FlowLineSpec

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_FlowLineSpec___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_FlowLineSpec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_FlowLineSpec_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_FlowLineSpec

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_FlowLineSpec self, Handle_Interface_HArray1OfHAsciiString allProperties)

        This method is used to set the fields of the class
        FlowLineSpec
        - allProperties : primary flow line specification and modifiers

        :type allProperties: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NbPropertyValues(self, *args)


    def FlowLineName(self, *args):
        """
        FlowLineName(Handle_IGESAppli_FlowLineSpec self) -> Handle_TCollection_HAsciiString

        returns primary flow line specification name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_FlowLineName(self, *args)


    def Modifier(self, *args):
        """
        Modifier(Handle_IGESAppli_FlowLineSpec self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns specified modifier element
        raises exception if Index <= 1 or Index > NbPropertyValues

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Modifier(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_FlowLineSpec self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_FlowLineSpec_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_FlowLineSpec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_FlowLineSpec self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_FlowLineSpec self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_FlowLineSpec self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_FlowLineSpec self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_FlowLineSpec self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_FlowLineSpec self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_FlowLineSpec self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_FlowLineSpec self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_FlowLineSpec self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_FlowLineSpec self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_FlowLineSpec self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_FlowLineSpec self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_FlowLineSpec self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_FlowLineSpec self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_FlowLineSpec self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_FlowLineSpec self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_FlowLineSpec self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_FlowLineSpec self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_FlowLineSpec self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_FlowLineSpec self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_FlowLineSpec self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_FlowLineSpec self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_FlowLineSpec self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_FlowLineSpec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_FlowLineSpec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_FlowLineSpec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_FlowLineSpec self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_FlowLineSpec self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_FlowLineSpec self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DecrementRefCounter(self, *args)

Handle_IGESAppli_FlowLineSpec_swigregister = _IGESAppli.Handle_IGESAppli_FlowLineSpec_swigregister
Handle_IGESAppli_FlowLineSpec_swigregister(Handle_IGESAppli_FlowLineSpec)

def Handle_IGESAppli_FlowLineSpec_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_FlowLineSpec_DownCast(thing)
Handle_IGESAppli_FlowLineSpec_DownCast = _IGESAppli.Handle_IGESAppli_FlowLineSpec_DownCast

class Handle_IGESAppli_NodalConstraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_NodalConstraint self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_NodalConstraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_NodalConstraint self, IGESAppli_NodalConstraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_NodalConstraint self, Handle_IGESAppli_NodalConstraint theHandle) -> Handle_IGESAppli_NodalConstraint
        assign(Handle_IGESAppli_NodalConstraint self, IGESAppli_NodalConstraint thePtr) -> Handle_IGESAppli_NodalConstraint
        assign(Handle_IGESAppli_NodalConstraint self, Handle_IGESAppli_NodalConstraint theHandle) -> Handle_IGESAppli_NodalConstraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_NodalConstraint self) -> IGESAppli_NodalConstraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_NodalConstraint self) -> IGESAppli_NodalConstraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_NodalConstraint self) -> IGESAppli_NodalConstraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_NodalConstraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_NodalConstraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_NodalConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_NodalConstraint_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_NodalConstraint

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_NodalConstraint self, Standard_Integer const aType, Handle_IGESAppli_Node aNode, Handle_IGESDefs_HArray1OfTabularData allTabData)

        This method is used to set the fields of the class
        NodalConstraint
        - aType      : Loads / Constraints
        - aNode      : the Node
        - allTabData : Tabular Data Property carrying the load
        or constraint vector

        :type aType: int
        :type aNode: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type allTabData: OCC.wrapper.IGESDefs.Handle_IGESDefs_HArray1OfTabularData

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Init(self, *args)


    def NbCases(self, *args):
        """
        NbCases(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        returns total number of cases

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NbCases(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        returns whether Loads (1) or Constraints (2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Type(self, *args)


    def NodeEntity(self, *args):
        """
        NodeEntity(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESAppli_Node

        returns the Node

        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NodeEntity(self, *args)


    def TabularData(self, *args):
        """
        TabularData(Handle_IGESAppli_NodalConstraint self, Standard_Integer const Index) -> Handle_IGESDefs_TabularData

        returns Tabular Data Property carrying load or constraint vector
        raises exception if Index <= 0 or Index > NbCases

        :type Index: int
        :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_TabularData(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_NodalConstraint self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalConstraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_NodalConstraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_NodalConstraint self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_NodalConstraint self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_NodalConstraint self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_NodalConstraint self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_NodalConstraint self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_NodalConstraint self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_NodalConstraint self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_NodalConstraint self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_NodalConstraint self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_NodalConstraint self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_NodalConstraint self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_NodalConstraint self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_NodalConstraint self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_NodalConstraint self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_NodalConstraint self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_NodalConstraint self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_NodalConstraint self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_NodalConstraint self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_NodalConstraint self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_NodalConstraint self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_NodalConstraint self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_NodalConstraint self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_NodalConstraint self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_NodalConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_NodalConstraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_NodalConstraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_NodalConstraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_NodalConstraint self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_NodalConstraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_NodalConstraint_DecrementRefCounter(self, *args)

Handle_IGESAppli_NodalConstraint_swigregister = _IGESAppli.Handle_IGESAppli_NodalConstraint_swigregister
Handle_IGESAppli_NodalConstraint_swigregister(Handle_IGESAppli_NodalConstraint)

def Handle_IGESAppli_NodalConstraint_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_NodalConstraint_DownCast(thing)
Handle_IGESAppli_NodalConstraint_DownCast = _IGESAppli.Handle_IGESAppli_NodalConstraint_DownCast

class Handle_IGESAppli_DrilledHole(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_DrilledHole self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_DrilledHole self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_DrilledHole self, IGESAppli_DrilledHole thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_DrilledHole self, Handle_IGESAppli_DrilledHole theHandle) -> Handle_IGESAppli_DrilledHole
        assign(Handle_IGESAppli_DrilledHole self, IGESAppli_DrilledHole thePtr) -> Handle_IGESAppli_DrilledHole
        assign(Handle_IGESAppli_DrilledHole self, Handle_IGESAppli_DrilledHole theHandle) -> Handle_IGESAppli_DrilledHole

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_DrilledHole self) -> IGESAppli_DrilledHole

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_DrilledHole self) -> IGESAppli_DrilledHole

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_DrilledHole self) -> IGESAppli_DrilledHole

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_DrilledHole___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_DrilledHole___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_DrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_DrilledHole_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_DrilledHole

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_DrilledHole self, Standard_Integer const nbPropVal, Standard_Real const aSize, Standard_Real const anotherSize, Standard_Integer const aPlating, Standard_Integer const aLayer, Standard_Integer const anotherLayer)

        This method is used to set the fields of the class
        DrilledHole
        - nbPropVal    : Number of property values = 5
        - aSize        : Drill diameter size
        - anotherSize  : Finish diameter size
        - aPlating     : Plating indication flag
        False = not plating
        True  = is plating
        - aLayer       : Lower numbered layer
        - anotherLayer : Higher numbered layer

        :type nbPropVal: int
        :type aSize: float
        :type anotherSize: float
        :type aPlating: int
        :type aLayer: int
        :type anotherLayer: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        is always 5

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbPropertyValues(self, *args)


    def DrillDiaSize(self, *args):
        """
        DrillDiaSize(Handle_IGESAppli_DrilledHole self) -> Standard_Real

        returns the drill diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DrillDiaSize(self, *args)


    def FinishDiaSize(self, *args):
        """
        FinishDiaSize(Handle_IGESAppli_DrilledHole self) -> Standard_Real

        returns the finish diameter size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_FinishDiaSize(self, *args)


    def IsPlating(self, *args):
        """
        IsPlating(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns Plating Status :
        False = not plating  /  True  = is plating

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IsPlating(self, *args)


    def NbLowerLayer(self, *args):
        """
        NbLowerLayer(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        returns the lower numbered layer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbLowerLayer(self, *args)


    def NbHigherLayer(self, *args):
        """
        NbHigherLayer(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        returns the higher numbered layer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbHigherLayer(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_DrilledHole self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_DrilledHole_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_DrilledHole_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_DrilledHole self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_DrilledHole self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_DrilledHole self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_DrilledHole self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_DrilledHole self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_DrilledHole self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_DrilledHole self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_DrilledHole self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_DrilledHole self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_DrilledHole self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_DrilledHole self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_DrilledHole self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_DrilledHole self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_DrilledHole self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_DrilledHole self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_DrilledHole self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_DrilledHole self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_DrilledHole self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_DrilledHole self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_DrilledHole self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_DrilledHole self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_DrilledHole self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_DrilledHole self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_DrilledHole self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_DrilledHole self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_DrilledHole self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_DrilledHole self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_DrilledHole self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_DrilledHole self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_DrilledHole self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_DrilledHole self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_DrilledHole self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_DrilledHole self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_DrilledHole self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_DrilledHole self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_DrilledHole self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_DrilledHole self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_DrilledHole self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_DrilledHole_DecrementRefCounter(self, *args)

Handle_IGESAppli_DrilledHole_swigregister = _IGESAppli.Handle_IGESAppli_DrilledHole_swigregister
Handle_IGESAppli_DrilledHole_swigregister(Handle_IGESAppli_DrilledHole)

def Handle_IGESAppli_DrilledHole_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_DrilledHole_DownCast(thing)
Handle_IGESAppli_DrilledHole_DownCast = _IGESAppli.Handle_IGESAppli_DrilledHole_DownCast

class NCollection_Array1_Handle_IGESAppli_FiniteElement(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> NCollection_Array1< opencascade::handle< IGESAppli_FiniteElement > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> NCollection_Array1< opencascade::handle< IGESAppli_FiniteElement > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> NCollection_Array1< opencascade::handle< IGESAppli_FiniteElement > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> NCollection_Array1< opencascade::handle< IGESAppli_FiniteElement > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESAppli.new_NCollection_Array1_Handle_IGESAppli_FiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESAppli_FiniteElement self, Handle_IGESAppli_FiniteElement theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESAppli_FiniteElement self, NCollection_Array1_Handle_IGESAppli_FiniteElement theOther) -> NCollection_Array1_Handle_IGESAppli_FiniteElement

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESAppli_FiniteElement self, NCollection_Array1_Handle_IGESAppli_FiniteElement theOther) -> NCollection_Array1_Handle_IGESAppli_FiniteElement

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESAppli_FiniteElement self, NCollection_Array1_Handle_IGESAppli_FiniteElement theOther) -> NCollection_Array1_Handle_IGESAppli_FiniteElement
        assign(NCollection_Array1_Handle_IGESAppli_FiniteElement self, NCollection_Array1_Handle_IGESAppli_FiniteElement theOther) -> NCollection_Array1_Handle_IGESAppli_FiniteElement

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Handle_IGESAppli_FiniteElement

        @return first element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESAppli_FiniteElement self) -> Handle_IGESAppli_FiniteElement

        @return last element

        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESAppli_FiniteElement self, Standard_Integer const theIndex) -> Handle_IGESAppli_FiniteElement

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESAppli_FiniteElement self, Standard_Integer const theIndex, Handle_IGESAppli_FiniteElement theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESAppli_FiniteElement self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_Resize(self, *args)

    __swig_destroy__ = _IGESAppli.delete_NCollection_Array1_Handle_IGESAppli_FiniteElement
NCollection_Array1_Handle_IGESAppli_FiniteElement_swigregister = _IGESAppli.NCollection_Array1_Handle_IGESAppli_FiniteElement_swigregister
NCollection_Array1_Handle_IGESAppli_FiniteElement_swigregister(NCollection_Array1_Handle_IGESAppli_FiniteElement)


try:
	IGESAppli_Array1OfFiniteElement = NCollection_Array1_Handle_IGESAppli_FiniteElement
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESAppli_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_ReadWriteModule self, IGESAppli_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_ReadWriteModule self, Handle_IGESAppli_ReadWriteModule theHandle) -> Handle_IGESAppli_ReadWriteModule
        assign(Handle_IGESAppli_ReadWriteModule self, IGESAppli_ReadWriteModule thePtr) -> Handle_IGESAppli_ReadWriteModule
        assign(Handle_IGESAppli_ReadWriteModule self, Handle_IGESAppli_ReadWriteModule theHandle) -> Handle_IGESAppli_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_ReadWriteModule self) -> IGESAppli_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_ReadWriteModule self) -> IGESAppli_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_ReadWriteModule self) -> IGESAppli_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESAppli_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESAppli

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESAppli_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESAppli

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESAppli_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESAppli_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESAppli_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESAppli_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESAppli_ReadWriteModule_swigregister = _IGESAppli.Handle_IGESAppli_ReadWriteModule_swigregister
Handle_IGESAppli_ReadWriteModule_swigregister(Handle_IGESAppli_ReadWriteModule)

def Handle_IGESAppli_ReadWriteModule_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_ReadWriteModule_DownCast(thing)
Handle_IGESAppli_ReadWriteModule_DownCast = _IGESAppli.Handle_IGESAppli_ReadWriteModule_DownCast

class Handle_IGESAppli_PipingFlow(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_PipingFlow self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_PipingFlow self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_PipingFlow self, IGESAppli_PipingFlow thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_PipingFlow self, Handle_IGESAppli_PipingFlow theHandle) -> Handle_IGESAppli_PipingFlow
        assign(Handle_IGESAppli_PipingFlow self, IGESAppli_PipingFlow thePtr) -> Handle_IGESAppli_PipingFlow
        assign(Handle_IGESAppli_PipingFlow self, Handle_IGESAppli_PipingFlow theHandle) -> Handle_IGESAppli_PipingFlow

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_PipingFlow self) -> IGESAppli_PipingFlow

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_PipingFlow self) -> IGESAppli_PipingFlow

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_PipingFlow self) -> IGESAppli_PipingFlow

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_PipingFlow___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_PipingFlow___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_PipingFlow(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_PipingFlow_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_PipingFlow

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_PipingFlow self, Standard_Integer const nbContextFlags, Standard_Integer const aFlowType, Handle_IGESData_HArray1OfIGESEntity allFlowAssocs, Handle_IGESDraw_HArray1OfConnectPoint allConnectPoints, Handle_IGESData_HArray1OfIGESEntity allJoins, Handle_Interface_HArray1OfHAsciiString allFlowNames, Handle_IGESGraph_HArray1OfTextDisplayTemplate allTextDisps, Handle_IGESData_HArray1OfIGESEntity allContFlowAssocs)

        This method is used to set the fields of the class
        PipingFlow
        - nbContextFlags    : Count of Context Flags, always = 1
        - aFlowType         : Type of Flow, default = 0
        - allFlowAssocs     : PipingFlow Associativity Entities
        - allConnectPoints  : Connect Point Entities
        - allJoins          : Join Entities
        - allFlowNames      : PipingFlow Names
        - allTextDispTs     : Text Display Template Entities
        - allContFlowAssocs : Continuation Flow Associativity Entities

        :type nbContextFlags: int
        :type aFlowType: int
        :type allFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allConnectPoints: OCC.wrapper.IGESDraw.Handle_IGESDraw_HArray1OfConnectPoint
        :type allJoins: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allFlowNames: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allTextDisps: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate
        :type allContFlowAssocs: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Init(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        forces NbContextFalgs to 1, returns True if changed

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_OwnCorrect(self, *args)


    def NbContextFlags(self, *args):
        """
        NbContextFlags(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Count of Context Flags, always = 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbContextFlags(self, *args)


    def NbFlowAssociativities(self, *args):
        """
        NbFlowAssociativities(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Piping Flow Associativity Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbFlowAssociativities(self, *args)


    def NbConnectPoints(self, *args):
        """
        NbConnectPoints(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Connect Point Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbConnectPoints(self, *args)


    def NbJoins(self, *args):
        """
        NbJoins(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Join Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbJoins(self, *args)


    def NbFlowNames(self, *args):
        """
        NbFlowNames(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Flow Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbFlowNames(self, *args)


    def NbTextDisplayTemplates(self, *args):
        """
        NbTextDisplayTemplates(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Text Display Template Entities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbTextDisplayTemplates(self, *args)


    def NbContFlowAssociativities(self, *args):
        """
        NbContFlowAssociativities(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns number of Continuation Piping Flow Associativities

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbContFlowAssociativities(self, *args)


    def TypeOfFlow(self, *args):
        """
        TypeOfFlow(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        returns Type of Flow = 0 : Not specified,
        1 : Logical,
        2 : Physical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_TypeOfFlow(self, *args)


    def FlowAssociativity(self, *args):
        """
        FlowAssociativity(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Piping Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_FlowAssociativity(self, *args)


    def ConnectPoint(self, *args):
        """
        ConnectPoint(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESDraw_ConnectPoint

        returns Connect Point Entity
        raises exception if Index <= 0 or Index > NbConnectPoints()

        :type Index: int
        :rtype: OCC.wrapper.IGESDraw.Handle_IGESDraw_ConnectPoint

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ConnectPoint(self, *args)


    def Join(self, *args):
        """
        Join(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Join Entity
        raises exception if Index <= 0 or Index > NbJoins()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Join(self, *args)


    def FlowName(self, *args):
        """
        FlowName(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns Flow Name
        raises exception if Index <= 0 or Index > NbFlowNames()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_FlowName(self, *args)


    def TextDisplayTemplate(self, *args):
        """
        TextDisplayTemplate(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESGraph_TextDisplayTemplate

        returns Text Display Template Entity
        raises exception if Index <= 0 or Index > NbTextDisplayTemplates()

        :type Index: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_TextDisplayTemplate(self, *args)


    def ContFlowAssociativity(self, *args):
        """
        ContFlowAssociativity(Handle_IGESAppli_PipingFlow self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns Continuation Piping Flow Associativity Entity
        raises exception if Index <= 0 or Index > NbContFlowAssociativities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ContFlowAssociativity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_PipingFlow self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PipingFlow_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PipingFlow_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_PipingFlow self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_PipingFlow self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_PipingFlow self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_PipingFlow self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_PipingFlow self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_PipingFlow self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_PipingFlow self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_PipingFlow self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_PipingFlow self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_PipingFlow self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_PipingFlow self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_PipingFlow self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_PipingFlow self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_PipingFlow self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_PipingFlow self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_PipingFlow self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_PipingFlow self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_PipingFlow self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_PipingFlow self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_PipingFlow self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_PipingFlow self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_PipingFlow self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_PipingFlow self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_PipingFlow self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_PipingFlow self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_PipingFlow self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_PipingFlow self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_PipingFlow self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_PipingFlow self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_PipingFlow self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_PipingFlow self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_PipingFlow self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_PipingFlow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_PipingFlow self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_PipingFlow self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_PipingFlow self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_PipingFlow self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_PipingFlow self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PipingFlow_DecrementRefCounter(self, *args)

Handle_IGESAppli_PipingFlow_swigregister = _IGESAppli.Handle_IGESAppli_PipingFlow_swigregister
Handle_IGESAppli_PipingFlow_swigregister(Handle_IGESAppli_PipingFlow)

def Handle_IGESAppli_PipingFlow_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_PipingFlow_DownCast(thing)
Handle_IGESAppli_PipingFlow_DownCast = _IGESAppli.Handle_IGESAppli_PipingFlow_DownCast

class IGESAppli_ToolPWBDrilledHole(object):
    """
    Tool to work on a PWBDrilledHole. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolPWBDrilledHole self) -> IGESAppli_ToolPWBDrilledHole

        Returns a ToolPWBDrilledHole, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolPWBDrilledHole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PWBDrilledHole <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a PWBDrilledHole
        (NbPropertyValues forced to 3)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole entfrom, Handle_IGESAppli_PWBDrilledHole entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolPWBDrilledHole self, Handle_IGESAppli_PWBDrilledHole ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PWBDrilledHole
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolPWBDrilledHole_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolPWBDrilledHole
IGESAppli_ToolPWBDrilledHole_swigregister = _IGESAppli.IGESAppli_ToolPWBDrilledHole_swigregister
IGESAppli_ToolPWBDrilledHole_swigregister(IGESAppli_ToolPWBDrilledHole)

class IGESAppli_PinNumber(IGESData.IGESData_IGESEntity):
    """
    defines PinNumber, Type <406> Form <8>
    in package IGESAppli
    Used to attach a text string representing a component
    pin number to an entity being used to represent an
    electrical component's pin
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESAppli_PinNumber
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESAppli_PinNumber(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESAppli_PinNumber self) -> IGESAppli_PinNumber

        defines PinNumber, Type <406> Form <8>
        in package IGESAppli
        Used to attach a text string representing a component
        pin number to an entity being used to represent an
        electrical component's pin
        """
        this = _IGESAppli.new_IGESAppli_PinNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESAppli_PinNumber self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aValue)

        This method is used to set the fields of the class
        PinNumber
        - nbPropVal : Number of property values (always = 1)
        - aValue    : Pin Number value

        :type nbPropVal: int
        :type aValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PinNumber_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESAppli_PinNumber self) -> Standard_Integer

        returns the number of property values
        is always 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.IGESAppli_PinNumber_NbPropertyValues(self, *args)


    def PinNumberVal(self, *args):
        """
        PinNumberVal(IGESAppli_PinNumber self) -> Handle_TCollection_HAsciiString

        returns the pin number value

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.IGESAppli_PinNumber_PinNumberVal(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESAppli.IGESAppli_PinNumber_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESAppli.IGESAppli_PinNumber_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.IGESAppli_PinNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESAppli.delete_IGESAppli_PinNumber
IGESAppli_PinNumber_swigregister = _IGESAppli.IGESAppli_PinNumber_swigregister
IGESAppli_PinNumber_swigregister(IGESAppli_PinNumber)

def IGESAppli_PinNumber_get_type_name(*args):
    """
    IGESAppli_PinNumber_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESAppli.IGESAppli_PinNumber_get_type_name(*args)

def IGESAppli_PinNumber_get_type_descriptor(*args):
    """
    IGESAppli_PinNumber_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESAppli.IGESAppli_PinNumber_get_type_descriptor(*args)

class Handle_IGESAppli_LineWidening(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_LineWidening self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_LineWidening self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_LineWidening self, IGESAppli_LineWidening thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_LineWidening self, Handle_IGESAppli_LineWidening theHandle) -> Handle_IGESAppli_LineWidening
        assign(Handle_IGESAppli_LineWidening self, IGESAppli_LineWidening thePtr) -> Handle_IGESAppli_LineWidening
        assign(Handle_IGESAppli_LineWidening self, Handle_IGESAppli_LineWidening theHandle) -> Handle_IGESAppli_LineWidening

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_LineWidening self) -> IGESAppli_LineWidening

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_LineWidening self) -> IGESAppli_LineWidening

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_LineWidening self) -> IGESAppli_LineWidening

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_LineWidening___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_LineWidening___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_LineWidening(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_LineWidening_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_LineWidening

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_LineWidening self, Standard_Integer const nbPropVal, Standard_Real const aWidth, Standard_Integer const aCornering, Standard_Integer const aExtnFlag, Standard_Integer const aJustifFlag, Standard_Real const aExtnVal)

        This method is used to set the fields of the class
        LineWidening
        - nbPropVal   : Number of property values = 5
        - aWidth      : Width of metalization
        - aCornering  : Cornering codes
        0 = rounded
        1 = squared
        - aExtnFlag   : Extension Flag
        0 = No Extension
        1 = One-half width extension
        2 = Extn set by ExtnVal
        - aJustifFlag : Justification flag
        0 = Center justified
        1 = left justified
        2 = right justified
        - aExtnVal    : Extension value if aExtnFlag = 2

        :type nbPropVal: int
        :type aWidth: float
        :type aCornering: int
        :type aExtnFlag: int
        :type aJustifFlag: int
        :type aExtnVal: float

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        returns the number of property values
        is always 5

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NbPropertyValues(self, *args)


    def WidthOfMetalization(self, *args):
        """
        WidthOfMetalization(Handle_IGESAppli_LineWidening self) -> Standard_Real

        returns the width of metallization

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_WidthOfMetalization(self, *args)


    def CorneringCode(self, *args):
        """
        CorneringCode(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        returns the cornering code
        0 = Rounded  /   1 = Squared

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_CorneringCode(self, *args)


    def ExtensionFlag(self, *args):
        """
        ExtensionFlag(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        returns the extension flag
        0 = No extension
        1 = One-half width extension
        2 = Extension set by theExtnVal

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ExtensionFlag(self, *args)


    def JustificationFlag(self, *args):
        """
        JustificationFlag(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        returns the justification flag
        0 = Centre justified
        1 = Left justified
        2 = Right justified

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_JustificationFlag(self, *args)


    def ExtensionValue(self, *args):
        """
        ExtensionValue(Handle_IGESAppli_LineWidening self) -> Standard_Real

        returns the Extension Value
        Present only if theExtnFlag = 2

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ExtensionValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_LineWidening self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LineWidening_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_LineWidening_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_LineWidening self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_LineWidening self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_LineWidening self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_LineWidening self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_LineWidening self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_LineWidening self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_LineWidening self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_LineWidening self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_LineWidening self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_LineWidening self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_LineWidening self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_LineWidening self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_LineWidening self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_LineWidening self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_LineWidening self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_LineWidening self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_LineWidening self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_LineWidening self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_LineWidening self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_LineWidening self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_LineWidening self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_LineWidening self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_LineWidening self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_LineWidening self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_LineWidening self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_LineWidening self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_LineWidening self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_LineWidening self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_LineWidening self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_LineWidening self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_LineWidening self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_LineWidening self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_LineWidening self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_LineWidening self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_LineWidening self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_LineWidening self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_LineWidening self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_LineWidening self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_LineWidening self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_LineWidening self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_LineWidening self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_LineWidening self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_LineWidening self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_LineWidening_DecrementRefCounter(self, *args)

Handle_IGESAppli_LineWidening_swigregister = _IGESAppli.Handle_IGESAppli_LineWidening_swigregister
Handle_IGESAppli_LineWidening_swigregister(Handle_IGESAppli_LineWidening)

def Handle_IGESAppli_LineWidening_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_LineWidening_DownCast(thing)
Handle_IGESAppli_LineWidening_DownCast = _IGESAppli.Handle_IGESAppli_LineWidening_DownCast

class Handle_IGESAppli_ElementResults(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_ElementResults self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_ElementResults self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_ElementResults self, IGESAppli_ElementResults thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_ElementResults self, Handle_IGESAppli_ElementResults theHandle) -> Handle_IGESAppli_ElementResults
        assign(Handle_IGESAppli_ElementResults self, IGESAppli_ElementResults thePtr) -> Handle_IGESAppli_ElementResults
        assign(Handle_IGESAppli_ElementResults self, Handle_IGESAppli_ElementResults theHandle) -> Handle_IGESAppli_ElementResults

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_ElementResults self) -> IGESAppli_ElementResults

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_ElementResults self) -> IGESAppli_ElementResults

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_ElementResults self) -> IGESAppli_ElementResults

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_ElementResults___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_ElementResults___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_ElementResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_ElementResults_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_ElementResults

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_ElementResults self, Handle_IGESDimen_GeneralNote aNote, Standard_Integer const aSubCase, Standard_Real const aTime, Standard_Integer const nbResults, Standard_Integer const aResRepFlag, Handle_TColStd_HArray1OfInteger allElementIdents, Handle_IGESAppli_HArray1OfFiniteElement allFiniteElems, Handle_TColStd_HArray1OfInteger allTopTypes, Handle_TColStd_HArray1OfInteger nbLayers, Handle_TColStd_HArray1OfInteger allDataLayerFlags, Handle_TColStd_HArray1OfInteger allnbResDataLocs, Handle_IGESBasic_HArray1OfHArray1OfInteger allResDataLocs, Handle_IGESBasic_HArray1OfHArray1OfReal allResults)

        This method is used to set the fields of the class
        ElementResults
        - aNote             : GeneralNote Entity describing analysis
        - aSubCase          : Analysis Subcase number
        - aTime             : Analysis time value
        - nbResults         : Number of result values per FEM
        - aResRepFlag       : Results Reporting Flag
        - allElementIdents  : FEM element number for elements
        - allFiniteElems    : FEM element
        - allTopTypes       : Element Topology Types
        - nbLayers          : Number of layers per result data location
        - allDataLayerFlags : Data Layer Flags
        - allnbResDataLocs  : Number of result data report locations
        - allResDataLocs    : Result Data Report Locations
        - allResults        : List of Result data values of FEM analysis

        :type aNote: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote
        :type aSubCase: int
        :type aTime: float
        :type nbResults: int
        :type aResRepFlag: int
        :type allElementIdents: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allFiniteElems: OCC.wrapper.IGESAppli.Handle_IGESAppli_HArray1OfFiniteElement
        :type allTopTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbLayers: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allDataLayerFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allnbResDataLocs: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allResDataLocs: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type allResults: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESAppli_ElementResults self, Standard_Integer const form)

        Changes the FormNumber (which indicates Type of Result)
        Error if not in range [0-34]

        :type form: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SetFormNumber(self, *args)


    def Note(self, *args):
        """
        Note(Handle_IGESAppli_ElementResults self) -> Handle_IGESDimen_GeneralNote

        returns General Note Entity describing analysis case

        :rtype: OCC.wrapper.IGESDimen.Handle_IGESDimen_GeneralNote

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Note(self, *args)


    def SubCaseNumber(self, *args):
        """
        SubCaseNumber(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        returns analysis Subcase number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SubCaseNumber(self, *args)


    def Time(self, *args):
        """
        Time(Handle_IGESAppli_ElementResults self) -> Standard_Real

        returns analysis time value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Time(self, *args)


    def NbResultValues(self, *args):
        """
        NbResultValues(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        returns number of result values per FEM

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbResultValues(self, *args)


    def ResultReportFlag(self, *args):
        """
        ResultReportFlag(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        returns Results Reporting Flag

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ResultReportFlag(self, *args)


    def NbElements(self, *args):
        """
        NbElements(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        returns number of FEM elements

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbElements(self, *args)


    def ElementIdentifier(self, *args):
        """
        ElementIdentifier(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns FEM element number for elements

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ElementIdentifier(self, *args)


    def Element(self, *args):
        """
        Element(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Handle_IGESAppli_FiniteElement

        returns FEM element

        :type Index: int
        :rtype: OCC.wrapper.IGESAppli.Handle_IGESAppli_FiniteElement

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Element(self, *args)


    def ElementTopologyType(self, *args):
        """
        ElementTopologyType(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns element Topology Types

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ElementTopologyType(self, *args)


    def NbLayers(self, *args):
        """
        NbLayers(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns number of layers per result data location

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbLayers(self, *args)


    def DataLayerFlag(self, *args):
        """
        DataLayerFlag(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns Data Layer Flags

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DataLayerFlag(self, *args)


    def NbResultDataLocs(self, *args):
        """
        NbResultDataLocs(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns number of result data report locations

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbResultDataLocs(self, *args)


    def ResultDataLoc(self, *args):
        """
        ResultDataLoc(Handle_IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NLoc) -> Standard_Integer

        returns Result Data Report Locations
        UNFINISHED

        :type NElem: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ResultDataLoc(self, *args)


    def NbResults(self, *args):
        """
        NbResults(Handle_IGESAppli_ElementResults self, Standard_Integer const Index) -> Standard_Integer

        returns total number of results

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbResults(self, *args)


    def ResultData(self, *args):
        """
        ResultData(Handle_IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const num) -> Standard_Real
        ResultData(Handle_IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NVal, Standard_Integer const NLay, Standard_Integer const NLoc) -> Standard_Real

        returns Result data values of FEM analysis, according this
        definition :
        - <NElem> : n0 of the Element to be considered
        - <NVal> : n0 of the Value between 1 and NbResultValues
        - <NLay> : n0 of the Layer for this Element
        - <NLoc> : n0 of the Data Location for this Element
        This gives for each Element, the corresponding rank
        computed by ResultRank, in which the leftmost subscript
        changes most rapidly

        :type NElem: int
        :type NVal: int
        :type NLay: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ResultData(self, *args)


    def ResultRank(self, *args):
        """
        ResultRank(Handle_IGESAppli_ElementResults self, Standard_Integer const NElem, Standard_Integer const NVal, Standard_Integer const NLay, Standard_Integer const NLoc) -> Standard_Integer

        Computes, for a given Element <NElem>, the rank of a
        individual Result Data, given <NVal>,<NLay>,<NLoc>

        :type NElem: int
        :type NVal: int
        :type NLay: int
        :type NLoc: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ResultRank(self, *args)


    def ResultList(self, *args):
        """
        ResultList(Handle_IGESAppli_ElementResults self, Standard_Integer const NElem) -> Handle_TColStd_HArray1OfReal

        Returns in once the entire list of data for an Element,
        addressed as by ResultRank (See above)

        :type NElem: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ResultList(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_ElementResults self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ElementResults_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_ElementResults_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_ElementResults self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_ElementResults self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_ElementResults self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_ElementResults self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_ElementResults self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_ElementResults self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_ElementResults self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_ElementResults self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_ElementResults self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_ElementResults self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_ElementResults self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_ElementResults self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_ElementResults self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_ElementResults self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_ElementResults self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_ElementResults self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_ElementResults self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_ElementResults self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_ElementResults self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_ElementResults self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_ElementResults self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_ElementResults self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_ElementResults self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_ElementResults self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_ElementResults self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_ElementResults self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_ElementResults self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_ElementResults self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_ElementResults self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_ElementResults self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_ElementResults self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_ElementResults self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_ElementResults self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_ElementResults self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_ElementResults self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_ElementResults self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_ElementResults self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_ElementResults self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_ElementResults self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_ElementResults self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_ElementResults self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_ElementResults self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_ElementResults self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_ElementResults_DecrementRefCounter(self, *args)

Handle_IGESAppli_ElementResults_swigregister = _IGESAppli.Handle_IGESAppli_ElementResults_swigregister
Handle_IGESAppli_ElementResults_swigregister(Handle_IGESAppli_ElementResults)

def Handle_IGESAppli_ElementResults_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_ElementResults_DownCast(thing)
Handle_IGESAppli_ElementResults_DownCast = _IGESAppli.Handle_IGESAppli_ElementResults_DownCast

class IGESAppli_ToolPartNumber(object):
    """
    Tool to work on a PartNumber. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolPartNumber self) -> IGESAppli_ToolPartNumber

        Returns a ToolPartNumber, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolPartNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PartNumber <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a PartNumber
        (NbPropertyValues forced to 4)

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber entfrom, Handle_IGESAppli_PartNumber entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolPartNumber self, Handle_IGESAppli_PartNumber ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_PartNumber
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolPartNumber_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolPartNumber
IGESAppli_ToolPartNumber_swigregister = _IGESAppli.IGESAppli_ToolPartNumber_swigregister
IGESAppli_ToolPartNumber_swigregister(IGESAppli_ToolPartNumber)

class IGESAppli_ToolNodalResults(object):
    """
    Tool to work on a NodalResults. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolNodalResults self) -> IGESAppli_ToolNodalResults

        Returns a ToolNodalResults, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolNodalResults(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent, Interface_EntityIterator iter)

        Lists the Entities shared by a NodalResults <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults entfrom, Handle_IGESAppli_NodalResults entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolNodalResults self, Handle_IGESAppli_NodalResults ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_NodalResults
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolNodalResults_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolNodalResults
IGESAppli_ToolNodalResults_swigregister = _IGESAppli.IGESAppli_ToolNodalResults_swigregister
IGESAppli_ToolNodalResults_swigregister(IGESAppli_ToolNodalResults)

class Handle_IGESAppli_Node(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_Node self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_Node_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_Node self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_Node_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_Node self, IGESAppli_Node thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_Node_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_Node self, Handle_IGESAppli_Node theHandle) -> Handle_IGESAppli_Node
        assign(Handle_IGESAppli_Node self, IGESAppli_Node thePtr) -> Handle_IGESAppli_Node
        assign(Handle_IGESAppli_Node self, Handle_IGESAppli_Node theHandle) -> Handle_IGESAppli_Node

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_Node_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_Node self) -> IGESAppli_Node

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Node_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_Node self) -> IGESAppli_Node

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_Node___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_Node self) -> IGESAppli_Node

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_Node___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_Node___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_Node___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_Node_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_Node

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_Node self, gp_XYZ aCoord, Handle_IGESGeom_TransformationMatrix aCoordSystem)

        This method is used to set the fields of the class Node
        - aCoord       : Nodal Coordinates
        - aCoordSystem : the Nodal Displacement Coordinate
        System Entity (default 0 is Global
        Cartesian Coordinate system)

        :type aCoord: OCC.wrapper.gp.gp_XYZ
        :type aCoordSystem: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESAppli.Handle_IGESAppli_Node_Init(self, *args)


    def Coord(self, *args):
        """
        Coord(Handle_IGESAppli_Node self) -> gp_Pnt

        returns the nodal coordinates

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESAppli.Handle_IGESAppli_Node_Coord(self, *args)


    def System(self, *args):
        """
        System(Handle_IGESAppli_Node self) -> Handle_IGESData_TransfEntity

        returns TransfEntity if a Nodal Displacement Coordinate
        System Entity is defined
        else (for Global Cartesien) returns Null Handle

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_System(self, *args)


    def SystemType(self, *args):
        """
        SystemType(Handle_IGESAppli_Node self) -> Standard_Integer

        Computes & returns the Type of Coordinate System :
        0 GlobalCartesian, 1 Cartesian, 2 Cylindrical, 3 Spherical

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_SystemType(self, *args)


    def TransformedNodalCoord(self, *args):
        """
        TransformedNodalCoord(Handle_IGESAppli_Node self) -> gp_Pnt

        returns the Nodal coordinates after transformation

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESAppli.Handle_IGESAppli_Node_TransformedNodalCoord(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_Node self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_Node_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Node_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_Node_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_Node self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_Node_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_Node self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_Node self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_Node self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_Node self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_Node self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_Node_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_Node self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_Node self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_Node_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_Node self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_Node self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_Node_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_Node self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_Node self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_Node self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_Node self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_Node self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_Node self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_Node self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_Node self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_Node self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_Node self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_Node_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_Node self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_Node_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_Node self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_Node self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_Node self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_Node_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_Node self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_Node self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_Node self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_Node self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_Node self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_Node self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_Node self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_Node self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_Node self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_Node self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_Node self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_Node self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Node_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_Node self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Node_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_Node self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_Node_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_Node self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_Node self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_Node_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_Node self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_Node self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_Node_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_Node self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_Node self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_Node self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_Node self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_Node self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_Node self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_Node self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_Node_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_Node self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_Node self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_Node self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_Node self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_Node_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_Node self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_Node_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_Node self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_Node_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_Node self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_Node self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_Node self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_Node self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_Node_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_Node self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_Node_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_Node self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_Node self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_Node_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_Node self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_Node_DecrementRefCounter(self, *args)

Handle_IGESAppli_Node_swigregister = _IGESAppli.Handle_IGESAppli_Node_swigregister
Handle_IGESAppli_Node_swigregister(Handle_IGESAppli_Node)

def Handle_IGESAppli_Node_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_Node_DownCast(thing)
Handle_IGESAppli_Node_DownCast = _IGESAppli.Handle_IGESAppli_Node_DownCast

class Handle_IGESAppli_PinNumber(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESAppli_PinNumber self)

        Nullify the handle


        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESAppli_PinNumber self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESAppli_PinNumber self, IGESAppli_PinNumber thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESAppli_PinNumber self, Handle_IGESAppli_PinNumber theHandle) -> Handle_IGESAppli_PinNumber
        assign(Handle_IGESAppli_PinNumber self, IGESAppli_PinNumber thePtr) -> Handle_IGESAppli_PinNumber
        assign(Handle_IGESAppli_PinNumber self, Handle_IGESAppli_PinNumber theHandle) -> Handle_IGESAppli_PinNumber

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESAppli_PinNumber self) -> IGESAppli_PinNumber

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESAppli_PinNumber self) -> IGESAppli_PinNumber

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESAppli_PinNumber self) -> IGESAppli_PinNumber

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber___ref__(self, *args)


    def __hash__(self):
        return _IGESAppli.Handle_IGESAppli_PinNumber___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESAppli.Handle_IGESAppli_PinNumber___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESAppli.new_Handle_IGESAppli_PinNumber(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESAppli.Handle_IGESAppli_PinNumber_DownCast)
    __swig_destroy__ = _IGESAppli.delete_Handle_IGESAppli_PinNumber

    def Init(self, *args):
        """
        Init(Handle_IGESAppli_PinNumber self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aValue)

        This method is used to set the fields of the class
        PinNumber
        - nbPropVal : Number of property values (always = 1)
        - aValue    : Pin Number value

        :type nbPropVal: int
        :type aValue: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        returns the number of property values
        is always 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NbPropertyValues(self, *args)


    def PinNumberVal(self, *args):
        """
        PinNumberVal(Handle_IGESAppli_PinNumber self) -> Handle_TCollection_HAsciiString

        returns the pin number value

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_PinNumberVal(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESAppli_PinNumber self) -> char const *

        :rtype: const char *

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PinNumber_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESAppli.Handle_IGESAppli_PinNumber_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESAppli_PinNumber self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESAppli_PinNumber self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESAppli_PinNumber self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESAppli_PinNumber self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESAppli_PinNumber self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESAppli_PinNumber self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESAppli_PinNumber self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESAppli_PinNumber self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESAppli_PinNumber self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESAppli_PinNumber self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESAppli_PinNumber self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESAppli_PinNumber self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESAppli_PinNumber self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESAppli_PinNumber self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESAppli_PinNumber self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESAppli_PinNumber self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESAppli_PinNumber self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESAppli_PinNumber self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESAppli_PinNumber self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESAppli_PinNumber self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESAppli_PinNumber self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESAppli_PinNumber self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESAppli_PinNumber self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESAppli_PinNumber self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESAppli_PinNumber self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESAppli_PinNumber self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESAppli_PinNumber self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESAppli_PinNumber self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESAppli_PinNumber self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESAppli_PinNumber self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESAppli_PinNumber self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESAppli_PinNumber self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESAppli_PinNumber self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESAppli_PinNumber self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESAppli_PinNumber self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESAppli_PinNumber self)

        Memory deallocator for transient classes


        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESAppli_PinNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESAppli_PinNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESAppli_PinNumber self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESAppli_PinNumber self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESAppli_PinNumber self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESAppli_PinNumber self)

        Increments the reference counter of this object


        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESAppli_PinNumber self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESAppli.Handle_IGESAppli_PinNumber_DecrementRefCounter(self, *args)

Handle_IGESAppli_PinNumber_swigregister = _IGESAppli.Handle_IGESAppli_PinNumber_swigregister
Handle_IGESAppli_PinNumber_swigregister(Handle_IGESAppli_PinNumber)

def Handle_IGESAppli_PinNumber_DownCast(thing):
    return _IGESAppli.Handle_IGESAppli_PinNumber_DownCast(thing)
Handle_IGESAppli_PinNumber_DownCast = _IGESAppli.Handle_IGESAppli_PinNumber_DownCast

class IGESAppli_ToolNode(object):
    """
    Tool to work on a Node. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESAppli_ToolNode self) -> IGESAppli_ToolNode

        Returns a ToolNode, ready to work


        """
        this = _IGESAppli.new_IGESAppli_ToolNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESAppli.IGESAppli_ToolNode_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESAppli.IGESAppli_ToolNode_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Node <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESAppli.IGESAppli_ToolNode_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESAppli.IGESAppli_ToolNode_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESAppli.IGESAppli_ToolNode_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESAppli_ToolNode self, Handle_IGESAppli_Node entfrom, Handle_IGESAppli_Node entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type entto: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESAppli.IGESAppli_ToolNode_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESAppli_ToolNode self, Handle_IGESAppli_Node ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESAppli.Handle_IGESAppli_Node
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESAppli.IGESAppli_ToolNode_OwnDump(self, *args)

    __swig_destroy__ = _IGESAppli.delete_IGESAppli_ToolNode
IGESAppli_ToolNode_swigregister = _IGESAppli.IGESAppli_ToolNode_swigregister
IGESAppli_ToolNode_swigregister(IGESAppli_ToolNode)



