# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepTest')
    _BRepTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepTest', [dirname(__file__)])
        except ImportError:
            import _BRepTest
            return _BRepTest
        try:
            _mod = imp.load_module('_BRepTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepTest = swig_import_helper()
    del swig_import_helper
else:
    import _BRepTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepTest.delete_SwigPyIterator

    def value(self):
        return _BRepTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepTest.SwigPyIterator_copy(self)

    def next(self):
        return _BRepTest.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepTest.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepTest.ptr_to_number(item)
ptr_to_number = _BRepTest.ptr_to_number

def HashCode(*args):
    return _BRepTest.HashCode(*args)
HashCode = _BRepTest.HashCode

def ptr_equal(a, b):
    return _BRepTest.ptr_equal(a, b)
ptr_equal = _BRepTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
class BRepTest_DrawableHistory(Draw.Draw_Drawable3D):
    """
    Drawable History object.
    Allows keeping histories of the algorithms in Draw.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BRepTest_DrawableHistory
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BRepTest_DrawableHistory(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BRepTest.BRepTest_DrawableHistory_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BRepTest.BRepTest_DrawableHistory_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTest.BRepTest_DrawableHistory_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(BRepTest_DrawableHistory self, Handle_BRepTools_History theHistory) -> BRepTest_DrawableHistory

        Creation of the Drawable history.

        :type theHistory: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        this = _BRepTest.new_BRepTest_DrawableHistory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def History(self, *args):
        """
        Returns the history.

        :rtype: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        res = _BRepTest.BRepTest_DrawableHistory_History(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(BRepTest_DrawableHistory self, Draw_Display arg2)

        Drawing is not available.

        :type : OCC.wrapper.Draw.Draw_Display

        """
        return _BRepTest.BRepTest_DrawableHistory_DrawOn(self, *args)


    def Dump(self, *args):
        """
        Dump(BRepTest_DrawableHistory self, Standard_OStream & theS)

        Dumps the history.

        :type theS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BRepTest.BRepTest_DrawableHistory_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(BRepTest_DrawableHistory self, Draw_Interpretor theDI)

        Prints the type of the history object.

        :type theDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest_DrawableHistory_Whatis(self, *args)

    __swig_destroy__ = _BRepTest.delete_BRepTest_DrawableHistory
BRepTest_DrawableHistory_swigregister = _BRepTest.BRepTest_DrawableHistory_swigregister
BRepTest_DrawableHistory_swigregister(BRepTest_DrawableHistory)

def BRepTest_DrawableHistory_get_type_name(*args):
    """
    BRepTest_DrawableHistory_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BRepTest.BRepTest_DrawableHistory_get_type_name(*args)

def BRepTest_DrawableHistory_get_type_descriptor(*args):
    """
    BRepTest_DrawableHistory_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BRepTest.BRepTest_DrawableHistory_get_type_descriptor(*args)

class Handle_BRepTest_DrawableHistory(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BRepTest_DrawableHistory self)

        Nullify the handle


        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BRepTest_DrawableHistory self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BRepTest_DrawableHistory self, BRepTest_DrawableHistory thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BRepTest_DrawableHistory self, Handle_BRepTest_DrawableHistory theHandle) -> Handle_BRepTest_DrawableHistory
        assign(Handle_BRepTest_DrawableHistory self, BRepTest_DrawableHistory thePtr) -> Handle_BRepTest_DrawableHistory
        assign(Handle_BRepTest_DrawableHistory self, Handle_BRepTest_DrawableHistory theHandle) -> Handle_BRepTest_DrawableHistory

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BRepTest_DrawableHistory self) -> BRepTest_DrawableHistory

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BRepTest_DrawableHistory self) -> BRepTest_DrawableHistory

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BRepTest_DrawableHistory self) -> BRepTest_DrawableHistory

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory___ref__(self, *args)


    def __hash__(self):
        return _BRepTest.Handle_BRepTest_DrawableHistory___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BRepTest.Handle_BRepTest_DrawableHistory___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BRepTest.new_Handle_BRepTest_DrawableHistory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BRepTest.Handle_BRepTest_DrawableHistory_DownCast)
    __swig_destroy__ = _BRepTest.delete_Handle_BRepTest_DrawableHistory

    def get_type_name(self, *args):
        """
        get_type_name(Handle_BRepTest_DrawableHistory self) -> char const *

        :rtype: const char *

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTest.Handle_BRepTest_DrawableHistory_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BRepTest.Handle_BRepTest_DrawableHistory_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def History(self, *args):
        """
        Returns the history.

        :rtype: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        res = _BRepTest.Handle_BRepTest_DrawableHistory_History(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_BRepTest_DrawableHistory self, Draw_Display arg2)

        Drawing is not available.

        :type : OCC.wrapper.Draw.Draw_Display

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_DrawOn(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_BRepTest_DrawableHistory self, Standard_OStream & theS)

        Dumps the history.

        :type theS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_BRepTest_DrawableHistory self, Draw_Interpretor theDI)

        Prints the type of the history object.

        :type theDI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Whatis(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_BRepTest_DrawableHistory self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_BRepTest_DrawableHistory self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Copy(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_BRepTest_DrawableHistory self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_BRepTest_DrawableHistory self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_BRepTest_DrawableHistory self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_BRepTest_DrawableHistory self) -> Standard_Boolean
        Visible(Handle_BRepTest_DrawableHistory self, Standard_Boolean const V)

        :type V: bool

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_BRepTest_DrawableHistory self) -> Standard_Boolean
        Protected(Handle_BRepTest_DrawableHistory self, Standard_Boolean const P)

        :type P: bool

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_BRepTest_DrawableHistory self) -> Standard_CString
        Name(Handle_BRepTest_DrawableHistory self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BRepTest_DrawableHistory self)

        Memory deallocator for transient classes


        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BRepTest_DrawableHistory self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BRepTest_DrawableHistory self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BRepTest_DrawableHistory self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BRepTest_DrawableHistory self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BRepTest_DrawableHistory self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BRepTest_DrawableHistory self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BRepTest_DrawableHistory self)

        Increments the reference counter of this object


        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BRepTest_DrawableHistory self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepTest.Handle_BRepTest_DrawableHistory_DecrementRefCounter(self, *args)

Handle_BRepTest_DrawableHistory_swigregister = _BRepTest.Handle_BRepTest_DrawableHistory_swigregister
Handle_BRepTest_DrawableHistory_swigregister(Handle_BRepTest_DrawableHistory)

def Handle_BRepTest_DrawableHistory_DownCast(thing):
    return _BRepTest.Handle_BRepTest_DrawableHistory_DownCast(thing)
Handle_BRepTest_DrawableHistory_DownCast = _BRepTest.Handle_BRepTest_DrawableHistory_DownCast

class BRepTest_Objects(object):
    """Provides the access to the useful tools common for the algorithms."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetHistory(*args):
        """
        SetHistory(Handle_BRepTools_History theHistory)

        Sets the given history into the session.

        :type theHistory: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        return _BRepTest.BRepTest_Objects_SetHistory(*args)

    SetHistory = staticmethod(SetHistory)

    def AddHistory(*args):
        """
        AddHistory(Handle_BRepTools_History theHistory)

        Adds the given history to the history in the session.

        :type theHistory: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        return _BRepTest.BRepTest_Objects_AddHistory(*args)

    AddHistory = staticmethod(AddHistory)

    def History(*args):
        """
        History() -> Handle_BRepTools_History

        Returns the history from the session.

        :rtype: OCC.wrapper.BRepTools.Handle_BRepTools_History

        """
        return _BRepTest.BRepTest_Objects_History(*args)

    History = staticmethod(History)

    def __init__(self):
        """Provides the access to the useful tools common for the algorithms."""
        this = _BRepTest.new_BRepTest_Objects()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTest.delete_BRepTest_Objects
BRepTest_Objects_swigregister = _BRepTest.BRepTest_Objects_swigregister
BRepTest_Objects_swigregister(BRepTest_Objects)

def BRepTest_Objects_SetHistory(*args):
    """
    BRepTest_Objects_SetHistory(Handle_BRepTools_History theHistory)

    Sets the given history into the session.

    :type theHistory: OCC.wrapper.BRepTools.Handle_BRepTools_History

    """
    return _BRepTest.BRepTest_Objects_SetHistory(*args)

def BRepTest_Objects_AddHistory(*args):
    """
    BRepTest_Objects_AddHistory(Handle_BRepTools_History theHistory)

    Adds the given history to the history in the session.

    :type theHistory: OCC.wrapper.BRepTools.Handle_BRepTools_History

    """
    return _BRepTest.BRepTest_Objects_AddHistory(*args)

def BRepTest_Objects_History(*args):
    """
    BRepTest_Objects_History() -> Handle_BRepTools_History

    Returns the history from the session.

    :rtype: OCC.wrapper.BRepTools.Handle_BRepTools_History

    """
    return _BRepTest.BRepTest_Objects_History(*args)

class BRepTest_(object):
    """Provides commands to test BRep."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor DI)

        Defines all the topology commands.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor DI)

        Defines the basic commands.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def CurveCommands(*args):
        """
        CurveCommands(Draw_Interpretor DI)

        Defines the commands to build edges and wires.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__CurveCommands(*args)

    CurveCommands = staticmethod(CurveCommands)

    def Fillet2DCommands(*args):
        """
        Fillet2DCommands(Draw_Interpretor DI)

        Defines the  commands  to perform add  fillets on
        wires and  edges.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__Fillet2DCommands(*args)

    Fillet2DCommands = staticmethod(Fillet2DCommands)

    def SurfaceCommands(*args):
        """
        SurfaceCommands(Draw_Interpretor DI)

        Defines the commands to build faces and shells.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__SurfaceCommands(*args)

    SurfaceCommands = staticmethod(SurfaceCommands)

    def PrimitiveCommands(*args):
        """
        PrimitiveCommands(Draw_Interpretor DI)

        Defines the commands to build primitives.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__PrimitiveCommands(*args)

    PrimitiveCommands = staticmethod(PrimitiveCommands)

    def FillingCommands(*args):
        """
        FillingCommands(Draw_Interpretor DI)

        Defines the commands to build primitives.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__FillingCommands(*args)

    FillingCommands = staticmethod(FillingCommands)

    def SweepCommands(*args):
        """
        SweepCommands(Draw_Interpretor DI)

        Defines the commands to sweep shapes.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__SweepCommands(*args)

    SweepCommands = staticmethod(SweepCommands)

    def TopologyCommands(*args):
        """
        TopologyCommands(Draw_Interpretor DI)

        Defines  the    commands   to perform  topological
        operations.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__TopologyCommands(*args)

    TopologyCommands = staticmethod(TopologyCommands)

    def FilletCommands(*args):
        """
        FilletCommands(Draw_Interpretor DI)

        Defines  the commands  to perform  add  fillets on
        shells.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__FilletCommands(*args)

    FilletCommands = staticmethod(FilletCommands)

    def ChamferCommands(*args):
        """
        ChamferCommands(Draw_Interpretor DI)

        Defines  the commands  to perform  add chamfers on
        shells.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__ChamferCommands(*args)

    ChamferCommands = staticmethod(ChamferCommands)

    def GPropCommands(*args):
        """
        GPropCommands(Draw_Interpretor DI)

        Defines commands to compute global properties.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__GPropCommands(*args)

    GPropCommands = staticmethod(GPropCommands)

    def MatCommands(*args):
        """
        MatCommands(Draw_Interpretor DI)

        Defines commands to compute and to explore the map of the
        Bisecting locus.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__MatCommands(*args)

    MatCommands = staticmethod(MatCommands)

    def DraftAngleCommands(*args):
        """
        DraftAngleCommands(Draw_Interpretor DI)

        Defines the commands to modify draft angles of the
        faces of a shape.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__DraftAngleCommands(*args)

    DraftAngleCommands = staticmethod(DraftAngleCommands)

    def FeatureCommands(*args):
        """
        FeatureCommands(Draw_Interpretor DI)

        Defines the commands to create features on a shape.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__FeatureCommands(*args)

    FeatureCommands = staticmethod(FeatureCommands)

    def OtherCommands(*args):
        """
        OtherCommands(Draw_Interpretor DI)

        Defines the auxiliary topology commands.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__OtherCommands(*args)

    OtherCommands = staticmethod(OtherCommands)

    def ExtremaCommands(*args):
        """
        ExtremaCommands(Draw_Interpretor DI)

        Defines the extrema commands.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__ExtremaCommands(*args)

    ExtremaCommands = staticmethod(ExtremaCommands)

    def CheckCommands(*args):
        """
        CheckCommands(Draw_Interpretor DI)

        Defines the checkshape command.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__CheckCommands(*args)

    CheckCommands = staticmethod(CheckCommands)

    def ProjectionCommands(*args):
        """
        ProjectionCommands(Draw_Interpretor DI)

        Defines the commands to project a wire on a shape.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__ProjectionCommands(*args)

    ProjectionCommands = staticmethod(ProjectionCommands)

    def HistoryCommands(*args):
        """
        HistoryCommands(Draw_Interpretor DI)

        Defines the History commands for the algorithms.

        :type DI: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _BRepTest.BRepTest__HistoryCommands(*args)

    HistoryCommands = staticmethod(HistoryCommands)

    def __init__(self):
        """Provides commands to test BRep."""
        this = _BRepTest.new_BRepTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepTest.delete_BRepTest_
BRepTest__swigregister = _BRepTest.BRepTest__swigregister
BRepTest__swigregister(BRepTest_)

def BRepTest__AllCommands(*args):
    """
    BRepTest__AllCommands(Draw_Interpretor DI)

    Defines all the topology commands.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__AllCommands(*args)

def BRepTest__BasicCommands(*args):
    """
    BRepTest__BasicCommands(Draw_Interpretor DI)

    Defines the basic commands.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__BasicCommands(*args)

def BRepTest__CurveCommands(*args):
    """
    BRepTest__CurveCommands(Draw_Interpretor DI)

    Defines the commands to build edges and wires.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__CurveCommands(*args)

def BRepTest__Fillet2DCommands(*args):
    """
    BRepTest__Fillet2DCommands(Draw_Interpretor DI)

    Defines the  commands  to perform add  fillets on
    wires and  edges.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__Fillet2DCommands(*args)

def BRepTest__SurfaceCommands(*args):
    """
    BRepTest__SurfaceCommands(Draw_Interpretor DI)

    Defines the commands to build faces and shells.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__SurfaceCommands(*args)

def BRepTest__PrimitiveCommands(*args):
    """
    BRepTest__PrimitiveCommands(Draw_Interpretor DI)

    Defines the commands to build primitives.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__PrimitiveCommands(*args)

def BRepTest__FillingCommands(*args):
    """
    BRepTest__FillingCommands(Draw_Interpretor DI)

    Defines the commands to build primitives.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__FillingCommands(*args)

def BRepTest__SweepCommands(*args):
    """
    BRepTest__SweepCommands(Draw_Interpretor DI)

    Defines the commands to sweep shapes.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__SweepCommands(*args)

def BRepTest__TopologyCommands(*args):
    """
    BRepTest__TopologyCommands(Draw_Interpretor DI)

    Defines  the    commands   to perform  topological
    operations.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__TopologyCommands(*args)

def BRepTest__FilletCommands(*args):
    """
    BRepTest__FilletCommands(Draw_Interpretor DI)

    Defines  the commands  to perform  add  fillets on
    shells.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__FilletCommands(*args)

def BRepTest__ChamferCommands(*args):
    """
    BRepTest__ChamferCommands(Draw_Interpretor DI)

    Defines  the commands  to perform  add chamfers on
    shells.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__ChamferCommands(*args)

def BRepTest__GPropCommands(*args):
    """
    BRepTest__GPropCommands(Draw_Interpretor DI)

    Defines commands to compute global properties.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__GPropCommands(*args)

def BRepTest__MatCommands(*args):
    """
    BRepTest__MatCommands(Draw_Interpretor DI)

    Defines commands to compute and to explore the map of the
    Bisecting locus.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__MatCommands(*args)

def BRepTest__DraftAngleCommands(*args):
    """
    BRepTest__DraftAngleCommands(Draw_Interpretor DI)

    Defines the commands to modify draft angles of the
    faces of a shape.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__DraftAngleCommands(*args)

def BRepTest__FeatureCommands(*args):
    """
    BRepTest__FeatureCommands(Draw_Interpretor DI)

    Defines the commands to create features on a shape.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__FeatureCommands(*args)

def BRepTest__OtherCommands(*args):
    """
    BRepTest__OtherCommands(Draw_Interpretor DI)

    Defines the auxiliary topology commands.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__OtherCommands(*args)

def BRepTest__ExtremaCommands(*args):
    """
    BRepTest__ExtremaCommands(Draw_Interpretor DI)

    Defines the extrema commands.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__ExtremaCommands(*args)

def BRepTest__CheckCommands(*args):
    """
    BRepTest__CheckCommands(Draw_Interpretor DI)

    Defines the checkshape command.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__CheckCommands(*args)

def BRepTest__ProjectionCommands(*args):
    """
    BRepTest__ProjectionCommands(Draw_Interpretor DI)

    Defines the commands to project a wire on a shape.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__ProjectionCommands(*args)

def BRepTest__HistoryCommands(*args):
    """
    BRepTest__HistoryCommands(Draw_Interpretor DI)

    Defines the History commands for the algorithms.

    :type DI: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _BRepTest.BRepTest__HistoryCommands(*args)



