# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppStd')
    _AppStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppStd', [dirname(__file__)])
        except ImportError:
            import _AppStd
            return _AppStd
        try:
            _mod = imp.load_module('_AppStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppStd = swig_import_helper()
    del swig_import_helper
else:
    import _AppStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppStd.delete_SwigPyIterator

    def value(self):
        return _AppStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AppStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AppStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AppStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AppStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AppStd.SwigPyIterator_copy(self)

    def next(self):
        return _AppStd.SwigPyIterator_next(self)

    def __next__(self):
        return _AppStd.SwigPyIterator___next__(self)

    def previous(self):
        return _AppStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AppStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AppStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AppStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AppStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AppStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AppStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AppStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _AppStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AppStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_AppStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _AppStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AppStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AppStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _AppStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _AppStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _AppStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _AppStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_AppStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _AppStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _AppStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _AppStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _AppStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _AppStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _AppStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _AppStd.ptr_to_number(item)
ptr_to_number = _AppStd.ptr_to_number

def HashCode(*args):
    return _AppStd.HashCode(*args)
HashCode = _AppStd.HashCode

def ptr_equal(a, b):
    return _AppStd.ptr_equal(a, b)
ptr_equal = _AppStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
class AppStd_Application(TDocStd.TDocStd_Application):
    """Legacy class defining resources name for standard OCAF documents"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_AppStd_Application
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_AppStd_Application(self) 
            return h


    def ResourcesName(self, *args):
        """
        ResourcesName(AppStd_Application self) -> Standard_CString

        returns   the file  name  which  contains  application
        resources

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _AppStd.AppStd_Application_ResourcesName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _AppStd.AppStd_Application_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _AppStd.AppStd_Application_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _AppStd.AppStd_Application_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """Legacy class defining resources name for standard OCAF documents"""
        this = _AppStd.new_AppStd_Application()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _AppStd.delete_AppStd_Application
AppStd_Application_swigregister = _AppStd.AppStd_Application_swigregister
AppStd_Application_swigregister(AppStd_Application)

def AppStd_Application_get_type_name(*args):
    """
    AppStd_Application_get_type_name() -> char const *

    :rtype: const char *

    """
    return _AppStd.AppStd_Application_get_type_name(*args)

def AppStd_Application_get_type_descriptor(*args):
    """
    AppStd_Application_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _AppStd.AppStd_Application_get_type_descriptor(*args)

class Handle_AppStd_Application(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_AppStd_Application self)

        Nullify the handle


        """
        return _AppStd.Handle_AppStd_Application_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_AppStd_Application self) -> bool

        Check for being null

        :rtype: bool

        """
        return _AppStd.Handle_AppStd_Application_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_AppStd_Application self, AppStd_Application thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _AppStd.Handle_AppStd_Application_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_AppStd_Application self, Handle_AppStd_Application theHandle) -> Handle_AppStd_Application
        assign(Handle_AppStd_Application self, AppStd_Application thePtr) -> Handle_AppStd_Application
        assign(Handle_AppStd_Application self, Handle_AppStd_Application theHandle) -> Handle_AppStd_Application

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _AppStd.Handle_AppStd_Application_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_AppStd_Application self) -> AppStd_Application

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _AppStd.Handle_AppStd_Application_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_AppStd_Application self) -> AppStd_Application

        Member access operator (note non-const)

        :rtype: T *

        """
        return _AppStd.Handle_AppStd_Application___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_AppStd_Application self) -> AppStd_Application

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _AppStd.Handle_AppStd_Application___ref__(self, *args)


    def __hash__(self):
        return _AppStd.Handle_AppStd_Application___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _AppStd.Handle_AppStd_Application___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _AppStd.new_Handle_AppStd_Application(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_AppStd.Handle_AppStd_Application_DownCast)
    __swig_destroy__ = _AppStd.delete_Handle_AppStd_Application

    def ResourcesName(self, *args):
        """
        ResourcesName(Handle_AppStd_Application self) -> Standard_CString

        returns   the file  name  which  contains  application
        resources

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _AppStd.Handle_AppStd_Application_ResourcesName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_AppStd_Application self) -> char const *

        :rtype: const char *

        """
        return _AppStd.Handle_AppStd_Application_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _AppStd.Handle_AppStd_Application_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _AppStd.Handle_AppStd_Application_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDriverLoaded(self, *args):
        """
        IsDriverLoaded(Handle_AppStd_Application self) -> Standard_Boolean

        Check if meta data driver was successfully loaded
        by the application constructor

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AppStd.Handle_AppStd_Application_IsDriverLoaded(self, *args)


    def MessageDriver(self, *args):
        """
        MessageDriver(Handle_AppStd_Application self) -> Handle_Message_Messenger

        Redefines message driver, by default outputs to cout.

        :rtype: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _AppStd.Handle_AppStd_Application_MessageDriver(self, *args)


    def Resources(self, *args):
        """
        Resources(Handle_AppStd_Application self) -> Handle_Resource_Manager

        Returns resource manager defining supported persistent formats.

        Default implementation loads resource file with name ResourcesName(),
        unless field myResources is already initialized (either by
        previous call or in any other way).

        The resource manager should define:

        * Format name for each file extension supported:
        - [Extension].FileFormat: [Format]

        * For each format supported (as returned by Formats()),
        its extension, description string, and (when applicable)
        GUIDs of storage and retrieval plugins:
        - [Format].Description: [Description]
        - [Format].FileExtension: [Extension]
        - [Format].RetrievalPlugin: [GUID] (optional)
        - [Format].StoragePlugin: [GUID] (optional)

        :rtype: OCC.wrapper.Resource.Handle_Resource_Manager

        """
        return _AppStd.Handle_AppStd_Application_Resources(self, *args)


    def DefineFormat(self, *args):
        """
        DefineFormat(Handle_AppStd_Application self, TCollection_AsciiString theFormat, TCollection_AsciiString theDescription, TCollection_AsciiString theExtension, Handle_PCDM_RetrievalDriver theReader, Handle_PCDM_StorageDriver theWriter)

        Sets up resources and registers read and storage drivers for
        the specified format.

        @param theFormat - unique name for the format, used to identify it.
        @param theDescription - textual description of the format.
        @param theExtension - extension of the files in that format. 
        The same extension can be used by several formats.
        @param theReader - instance of the read driver for the format.
        Null value is allowed (no possibility to read).
        @param theWriter - instance of the write driver for the format.
        Null value is allowed (no possibility to write).

        :type theFormat: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theDescription: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theExtension: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theReader: OCC.wrapper.PCDM.Handle_PCDM_RetrievalDriver
        :type theWriter: OCC.wrapper.PCDM.Handle_PCDM_StorageDriver

        """
        return _AppStd.Handle_AppStd_Application_DefineFormat(self, *args)


    def ReadingFormats(self, *args):
        """
        ReadingFormats(Handle_AppStd_Application self, NCollection_Sequence_TCollection_AsciiString theFormats)

        Returns the sequence of reading formats supported by the application.

        @param theFormats - sequence of reading formats. Output parameter.

        :type theFormats: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _AppStd.Handle_AppStd_Application_ReadingFormats(self, *args)


    def WritingFormats(self, *args):
        """
        WritingFormats(Handle_AppStd_Application self, NCollection_Sequence_TCollection_AsciiString theFormats)

        Returns the sequence of writing formats supported by the application.

        @param theFormats - sequence of writing formats. Output parameter.

        :type theFormats: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString

        """
        return _AppStd.Handle_AppStd_Application_WritingFormats(self, *args)


    def NbDocuments(self, *args):
        """
        NbDocuments(Handle_AppStd_Application self) -> Standard_Integer

        returns the number of documents handled by the current applicative session.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AppStd.Handle_AppStd_Application_NbDocuments(self, *args)


    def GetDocument(self, *args):
        """
        GetDocument(Handle_AppStd_Application self, Standard_Integer const index, Handle_TDocStd_Document aDoc)

        Constructs the new document aDoc.
        aDoc is identified by the index index which is
        any integer between 1 and n where n is the
        number of documents returned by NbDocument.
        Example
        Handle(TDocStd_Application)
        anApp;
        if (!CafTest::Find(A)) return 1;
        Handle(TDocStd) aDoc;
        Standard_Integer nbdoc = anApp->NbDocuments();
        for (Standard_Integer i = 1; i <= nbdoc; i++) {
        aApp->GetDocument(i,aDoc);

        :type index: int
        :type aDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_GetDocument(self, *args)


    def NewDocument(self, *args):
        """
        NewDocument(Handle_AppStd_Application self, TCollection_ExtendedString format, Handle_TDocStd_Document aDoc)

        Constructs the empty new document aDoc.
        This document will have the format format.
        If InitDocument is redefined for a specific
        application, the new document is handled by the
        applicative session.

        :type format: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_NewDocument(self, *args)


    def InitDocument(self, *args):
        """
        InitDocument(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc)

        Initialize the document aDoc for the applicative session.
        This virtual function is called by NewDocument
        and is to be redefined for each specific application.
        Modified flag (different of disk version)
        =============
        to open/save a document
        =======================

        :type aDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_InitDocument(self, *args)


    def Close(self, *args):
        """
        Close(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc)

        Close the given document. the document is not any more
        handled by the applicative session.

        :type aDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_Close(self, *args)


    def IsInSession(self, *args):
        """
        IsInSession(Handle_AppStd_Application self, TCollection_ExtendedString path) -> Standard_Integer

        Returns an index for the document found in the
        path path in this applicative session.
        If the returned value is 0, the document is not
        present in the applicative session.
        This method can be used for the interactive part
        of an application. For instance, on a call to
        Open, the document to be opened may already
        be in memory. IsInSession checks to see if this
        is the case. Open can be made to depend on
        the value of the index returned: if IsInSession
        returns 0, the document is opened; if it returns
        another value, a message is displayed asking the
        user if he wants to override the version of the
        document in memory.
        Example:
        Standard_Integer insession = A->IsInSession(aDoc);
        if (insession > 0) {
        cout << "document " << insession << " is already in session" << endl;
        return 0;
        }

        :type path: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AppStd.Handle_AppStd_Application_IsInSession(self, *args)


    def Open(self, *args):
        """
        Open(Handle_AppStd_Application self, TCollection_ExtendedString path, Handle_TDocStd_Document aDoc) -> PCDM_ReaderStatus
        Open(Handle_AppStd_Application self, Standard_IStream & theIStream, Handle_TDocStd_Document theDoc) -> PCDM_ReaderStatus

        Retrieves aDoc from standard SEEKABLE stream theIStream.
        the stream should support SEEK fuctionality

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _AppStd.Handle_AppStd_Application_Open(self, *args)


    def SaveAs(self, *args):
        """
        SaveAs(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc, TCollection_ExtendedString path) -> PCDM_StoreStatus
        SaveAs(Handle_AppStd_Application self, Handle_TDocStd_Document theDoc, Standard_OStream & theOStream) -> PCDM_StoreStatus
        SaveAs(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc, TCollection_ExtendedString path, TCollection_ExtendedString theStatusMessage) -> PCDM_StoreStatus
        SaveAs(Handle_AppStd_Application self, Handle_TDocStd_Document theDoc, Standard_OStream & theOStream, TCollection_ExtendedString theStatusMessage) -> PCDM_StoreStatus

        Save theDoc TO standard SEEKABLE stream theOStream.
        the stream should support SEEK fuctionality

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream
        :type theStatusMessage: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _AppStd.Handle_AppStd_Application_SaveAs(self, *args)


    def Save(self, *args):
        """
        Save(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc) -> PCDM_StoreStatus
        Save(Handle_AppStd_Application self, Handle_TDocStd_Document aDoc, TCollection_ExtendedString theStatusMessage) -> PCDM_StoreStatus

        Save the document overwriting the previous file

        :type aDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document
        :type theStatusMessage: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _AppStd.Handle_AppStd_Application_Save(self, *args)


    def OnOpenTransaction(self, *args):
        """
        OnOpenTransaction(Handle_AppStd_Application self, Handle_TDocStd_Document theDoc)

        Notification that is fired at each OpenTransaction event.

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_OnOpenTransaction(self, *args)


    def OnCommitTransaction(self, *args):
        """
        OnCommitTransaction(Handle_AppStd_Application self, Handle_TDocStd_Document theDoc)

        Notification that is fired at each CommitTransaction event.

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_OnCommitTransaction(self, *args)


    def OnAbortTransaction(self, *args):
        """
        OnAbortTransaction(Handle_AppStd_Application self, Handle_TDocStd_Document theDoc)

        Notification that is fired at each AbortTransaction event.

        :type theDoc: OCC.wrapper.TDocStd.Handle_TDocStd_Document

        """
        return _AppStd.Handle_AppStd_Application_OnAbortTransaction(self, *args)


    def Load(self, *args):
        """
        Load(Handle_AppStd_Application self, Standard_GUID aGUID) -> Handle_CDF_Application

        plugs an application.

        Open is used
        - for opening a Document that has been created in an application
        - for opening a Document from the database
        - for opening a Document from a file.
        The Open methods always add the document in the session directory and
        calls the virtual Activate method. The document is considered to be
        opened until Close is used. To be storable, a document must be
        opened by an application since the application resources are
        needed to store it.

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.CDF.Handle_CDF_Application

        """
        return _AppStd.Handle_AppStd_Application_Load(self, *args)


    def CanClose(self, *args):
        """
        CanClose(Handle_AppStd_Application self, Handle_CDM_Document aDocument) -> CDM_CanCloseStatus

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :rtype: OCC.wrapper.CDM.CDM_CanCloseStatus

        """
        return _AppStd.Handle_AppStd_Application_CanClose(self, *args)


    def Retrieve(self, *args):
        """
        Retrieve(Handle_AppStd_Application self, TCollection_ExtendedString aFolder, TCollection_ExtendedString aName, Standard_Boolean const UseStorageConfiguration) -> Handle_CDM_Document
        Retrieve(Handle_AppStd_Application self, TCollection_ExtendedString aFolder, TCollection_ExtendedString aName, TCollection_ExtendedString aVersion, Standard_Boolean const UseStorageConfiguration) -> Handle_CDM_Document

        This method retrieves  a  document from the database.
        If the  Document references other documents which have
        been  updated, the  latest version of  these documents
        will    be   used  if   {UseStorageConfiguration}  is
        Standard_True.  --  If the DBMS is  only  based on the
        OS, this syntax  should not be used.

        If the DBMS is EUCLID/Design Manager, {aFolder}, {aName}
        and  {aVersion} have the form they have in
        EUCLID/Design Manager. For example:

        Handle(CDM_Document) theDocument=myApplication->Retrieve("|user|cascade","box","2");
        A link is kept with the database through an instance
        of CDM_MetaData

        :type aFolder: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aVersion: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type UseStorageConfiguration: bool
        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _AppStd.Handle_AppStd_Application_Retrieve(self, *args)


    def CanRetrieve(self, *args):
        """
        CanRetrieve(Handle_AppStd_Application self, TCollection_ExtendedString aFolder, TCollection_ExtendedString aName) -> PCDM_ReaderStatus
        CanRetrieve(Handle_AppStd_Application self, TCollection_ExtendedString aFolder, TCollection_ExtendedString aName, TCollection_ExtendedString aVersion) -> PCDM_ReaderStatus

        :type aFolder: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aVersion: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _AppStd.Handle_AppStd_Application_CanRetrieve(self, *args)


    def GetRetrieveStatus(self, *args):
        """
        GetRetrieveStatus(Handle_AppStd_Application self) -> PCDM_ReaderStatus

        Checks  status  after  Retrieve

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _AppStd.Handle_AppStd_Application_GetRetrieveStatus(self, *args)


    def Read(self, *args):
        """
        Read(Handle_AppStd_Application self, Standard_IStream & theIStream) -> Handle_CDM_Document

        Reads aDoc from standard SEEKABLE stream theIStream,
        the stream should support SEEK fuctionality

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _AppStd.Handle_AppStd_Application_Read(self, *args)


    def ReaderFromFormat(self, *args):
        """
        ReaderFromFormat(Handle_AppStd_Application self, TCollection_ExtendedString aFormat) -> Handle_PCDM_Reader

        Returns instance of read driver for specified format.

        Default implementation uses plugin mechanism to load reader dynamically.
        For this to work, application resources should define GUID of
        the plugin as value of [Format].RetrievalPlugin, and "Plugin"
        resource should define name of plugin library to be loaded as
        value of [GUID].Location. Plugin library should provide
        method PLUGINFACTORY returning instance of the reader for the
        same GUID (see Plugin_Macro.hxx).

        In case if reader is not available, will raise Standard_NoSuchObject
        or other exception if raised by plugin loader.

        :type aFormat: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_Reader

        """
        return _AppStd.Handle_AppStd_Application_ReaderFromFormat(self, *args)


    def WriterFromFormat(self, *args):
        """
        WriterFromFormat(Handle_AppStd_Application self, TCollection_ExtendedString aFormat) -> Handle_PCDM_StorageDriver

        Returns instance of storage driver for specified format.

        Default implementation uses plugin mechanism to load driver dynamically.
        For this to work, application resources should define GUID of
        the plugin as value of [Format].StoragePlugin, and "Plugin"
        resource should define name of plugin library to be loaded as
        value of [GUID].Location. Plugin library should provide
        method PLUGINFACTORY returning instance of the reader for the
        same GUID (see Plugin_Macro.hxx).

        In case if driver is not available, will raise Standard_NoSuchObject
        or other exception if raised by plugin loader.

        :type aFormat: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_StorageDriver

        """
        return _AppStd.Handle_AppStd_Application_WriterFromFormat(self, *args)


    def Format(self, *args):
        """
        Format(Handle_AppStd_Application self, TCollection_ExtendedString aFileName, TCollection_ExtendedString theFormat) -> Standard_Boolean

        try to  retrieve a Format  directly in the  file or in
        application   resource  by using   extension. returns
        True if found;

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theFormat: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AppStd.Handle_AppStd_Application_Format(self, *args)


    def DefaultFolder(self, *args):
        """
        DefaultFolder(Handle_AppStd_Application self) -> Standard_ExtString

        :rtype: OCC.wrapper.Standard.Standard_ExtString

        """
        return _AppStd.Handle_AppStd_Application_DefaultFolder(self, *args)


    def SetDefaultFolder(self, *args):
        """
        SetDefaultFolder(Handle_AppStd_Application self, Standard_ExtString const aFolder) -> Standard_Boolean

        :type aFolder: OCC.wrapper.Standard.Standard_ExtString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AppStd.Handle_AppStd_Application_SetDefaultFolder(self, *args)


    def BeginOfUpdate(self, *args):
        """
        BeginOfUpdate(Handle_AppStd_Application self, Handle_CDM_Document aDocument)

        this method is called before the update of a document.
        By default, writes in MessageDriver().

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _AppStd.Handle_AppStd_Application_BeginOfUpdate(self, *args)


    def EndOfUpdate(self, *args):
        """
        EndOfUpdate(Handle_AppStd_Application self, Handle_CDM_Document aDocument, Standard_Boolean const theStatus, TCollection_ExtendedString ErrorString)

        this method is called affter the update of a document.
        By default, writes in MessageDriver().

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theStatus: bool
        :type ErrorString: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _AppStd.Handle_AppStd_Application_EndOfUpdate(self, *args)


    def Write(self, *args):
        """
        Write(Handle_AppStd_Application self, Standard_ExtString const aString)

        writes the string in the application MessagerDriver.

        :type aString: OCC.wrapper.Standard.Standard_ExtString

        """
        return _AppStd.Handle_AppStd_Application_Write(self, *args)


    def Name(self, *args):
        """
        Name(Handle_AppStd_Application self) -> TCollection_ExtendedString

        Returns the application name.

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _AppStd.Handle_AppStd_Application_Name(self, *args)


    def Version(self, *args):
        """
        Version(Handle_AppStd_Application self) -> TCollection_AsciiString

        Returns the application version.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _AppStd.Handle_AppStd_Application_Version(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_AppStd_Application self)

        Memory deallocator for transient classes


        """
        return _AppStd.Handle_AppStd_Application_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_AppStd_Application self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_AppStd_Application self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AppStd.Handle_AppStd_Application_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_AppStd_Application self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_AppStd_Application self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _AppStd.Handle_AppStd_Application_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_AppStd_Application self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _AppStd.Handle_AppStd_Application_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_AppStd_Application self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AppStd.Handle_AppStd_Application_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_AppStd_Application self)

        Increments the reference counter of this object


        """
        return _AppStd.Handle_AppStd_Application_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_AppStd_Application self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _AppStd.Handle_AppStd_Application_DecrementRefCounter(self, *args)

Handle_AppStd_Application_swigregister = _AppStd.Handle_AppStd_Application_swigregister
Handle_AppStd_Application_swigregister(Handle_AppStd_Application)

def Handle_AppStd_Application_DownCast(thing):
    return _AppStd.Handle_AppStd_Application_DownCast(thing)
Handle_AppStd_Application_DownCast = _AppStd.Handle_AppStd_Application_DownCast



