# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VrmlAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VrmlAPI')
    _VrmlAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VrmlAPI', [dirname(__file__)])
        except ImportError:
            import _VrmlAPI
            return _VrmlAPI
        try:
            _mod = imp.load_module('_VrmlAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VrmlAPI = swig_import_helper()
    del swig_import_helper
else:
    import _VrmlAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VrmlAPI.delete_SwigPyIterator

    def value(self):
        return _VrmlAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VrmlAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VrmlAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VrmlAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VrmlAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VrmlAPI.SwigPyIterator_copy(self)

    def next(self):
        return _VrmlAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _VrmlAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _VrmlAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VrmlAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VrmlAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VrmlAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VrmlAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VrmlAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VrmlAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VrmlAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VrmlAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _VrmlAPI.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_VrmlAPI.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _VrmlAPI.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _VrmlAPI.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VrmlAPI.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _VrmlAPI.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _VrmlAPI.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _VrmlAPI.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _VrmlAPI.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_VrmlAPI.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _VrmlAPI.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _VrmlAPI.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VrmlAPI.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _VrmlAPI.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _VrmlAPI.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _VrmlAPI.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _VrmlAPI.ptr_to_number(item)
ptr_to_number = _VrmlAPI.ptr_to_number

def HashCode(*args):
    return _VrmlAPI.HashCode(*args)
HashCode = _VrmlAPI.HashCode

def ptr_equal(a, b):
    return _VrmlAPI.ptr_equal(a, b)
ptr_equal = _VrmlAPI.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import VrmlConverter
else:
    import VrmlConverter
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Vrml
else:
    import Vrml
del _swig_python_version_info
VrmlAPI_ShadedRepresentation = _VrmlAPI.VrmlAPI_ShadedRepresentation
VrmlAPI_WireFrameRepresentation = _VrmlAPI.VrmlAPI_WireFrameRepresentation
VrmlAPI_BothRepresentation = _VrmlAPI.VrmlAPI_BothRepresentation
class VrmlAPI_(object):
    """API for writing to VRML 1.0"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Write(*args):
        """
        Write(TopoDS_Shape aShape, Standard_CString const aFileName, Standard_Integer const aVersion=2)

        With help of this class user can change parameters of writing.
        Converts the shape aShape to VRML format of the passed version and writes it
        to the file identified by aFileName using default parameters.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aFileName: OCC.wrapper.Standard.Standard_CString
        :type aVersion: int

        """
        return _VrmlAPI.VrmlAPI__Write(*args)

    Write = staticmethod(Write)

    def __init__(self):
        """API for writing to VRML 1.0"""
        this = _VrmlAPI.new_VrmlAPI_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VrmlAPI.delete_VrmlAPI_
VrmlAPI__swigregister = _VrmlAPI.VrmlAPI__swigregister
VrmlAPI__swigregister(VrmlAPI_)

def VrmlAPI__Write(*args):
    """
    VrmlAPI__Write(TopoDS_Shape aShape, Standard_CString const aFileName, Standard_Integer const aVersion=2)

    With help of this class user can change parameters of writing.
    Converts the shape aShape to VRML format of the passed version and writes it
    to the file identified by aFileName using default parameters.

    :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type aFileName: OCC.wrapper.Standard.Standard_CString
    :type aVersion: int

    """
    return _VrmlAPI.VrmlAPI__Write(*args)

class VrmlAPI_Writer(object):
    """
    Creates and writes VRML files from Open
    CASCADE shapes. A VRML file can be written to
    an existing VRML file or to a new one.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(VrmlAPI_Writer self) -> VrmlAPI_Writer

        Creates a writer object with default parameters.


        """
        this = _VrmlAPI.new_VrmlAPI_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ResetToDefaults(self, *args):
        """
        ResetToDefaults(VrmlAPI_Writer self)

        Resets all parameters (representation, deflection)
        to their default values..


        """
        return _VrmlAPI.VrmlAPI_Writer_ResetToDefaults(self, *args)


    def Drawer(self, *args):
        """
        Drawer(VrmlAPI_Writer self) -> Handle_VrmlConverter_Drawer

        Returns drawer object

        :rtype: OCC.wrapper.VrmlConverter.Handle_VrmlConverter_Drawer

        """
        return _VrmlAPI.VrmlAPI_Writer_Drawer(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(VrmlAPI_Writer self, Standard_Real const aDef)

        Sets the deflection aDef of
        the mesh algorithm which is used to compute the shaded
        representation of the translated shape. The default
        value is -1. When the deflection value is less than
        0, the deflection is calculated from the relative
        size of the shaped.

        :type aDef: float

        """
        return _VrmlAPI.VrmlAPI_Writer_SetDeflection(self, *args)


    def SetRepresentation(self, *args):
        """
        SetRepresentation(VrmlAPI_Writer self, VrmlAPI_RepresentationOfShape const aRep)

        Sets the representation of the
        shape aRep which is written to the VRML file. The three options are :
        -      shaded
        -      wireframe
        -      both shaded and wireframe (default)
        defined through the VrmlAPI_RepresentationOfShape enumeration.

        :type aRep: OCC.wrapper.VrmlAPI.VrmlAPI_RepresentationOfShape

        """
        return _VrmlAPI.VrmlAPI_Writer_SetRepresentation(self, *args)


    def SetTransparencyToMaterial(self, *args):
        """
        SetTransparencyToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Standard_Real const aTransparency)

        Set transparency to given material

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type aTransparency: float

        """
        return _VrmlAPI.VrmlAPI_Writer_SetTransparencyToMaterial(self, *args)


    def SetShininessToMaterial(self, *args):
        """
        SetShininessToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Standard_Real const aShininess)

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type aShininess: float

        """
        return _VrmlAPI.VrmlAPI_Writer_SetShininessToMaterial(self, *args)


    def SetAmbientColorToMaterial(self, *args):
        """
        SetAmbientColorToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Handle_Quantity_HArray1OfColor Color)

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type Color: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _VrmlAPI.VrmlAPI_Writer_SetAmbientColorToMaterial(self, *args)


    def SetDiffuseColorToMaterial(self, *args):
        """
        SetDiffuseColorToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Handle_Quantity_HArray1OfColor Color)

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type Color: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _VrmlAPI.VrmlAPI_Writer_SetDiffuseColorToMaterial(self, *args)


    def SetSpecularColorToMaterial(self, *args):
        """
        SetSpecularColorToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Handle_Quantity_HArray1OfColor Color)

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type Color: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _VrmlAPI.VrmlAPI_Writer_SetSpecularColorToMaterial(self, *args)


    def SetEmissiveColorToMaterial(self, *args):
        """
        SetEmissiveColorToMaterial(VrmlAPI_Writer self, Handle_Vrml_Material aMaterial, Handle_Quantity_HArray1OfColor Color)

        :type aMaterial: OCC.wrapper.Vrml.Handle_Vrml_Material
        :type Color: OCC.wrapper.Quantity.Handle_Quantity_HArray1OfColor

        """
        return _VrmlAPI.VrmlAPI_Writer_SetEmissiveColorToMaterial(self, *args)


    def GetRepresentation(self, *args):
        """
        GetRepresentation(VrmlAPI_Writer self) -> VrmlAPI_RepresentationOfShape

        Returns the representation of the shape which is
        written to the VRML file. Types of representation are set through the
        VrmlAPI_RepresentationOfShape enumeration.

        :rtype: OCC.wrapper.VrmlAPI.VrmlAPI_RepresentationOfShape

        """
        return _VrmlAPI.VrmlAPI_Writer_GetRepresentation(self, *args)


    def GetFrontMaterial(self, *args):
        """
        GetFrontMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetFrontMaterial(self, *args)


    def GetPointsMaterial(self, *args):
        """
        GetPointsMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetPointsMaterial(self, *args)


    def GetUisoMaterial(self, *args):
        """
        GetUisoMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetUisoMaterial(self, *args)


    def GetVisoMaterial(self, *args):
        """
        GetVisoMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetVisoMaterial(self, *args)


    def GetLineMaterial(self, *args):
        """
        GetLineMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetLineMaterial(self, *args)


    def GetWireMaterial(self, *args):
        """
        GetWireMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetWireMaterial(self, *args)


    def GetFreeBoundsMaterial(self, *args):
        """
        GetFreeBoundsMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetFreeBoundsMaterial(self, *args)


    def GetUnfreeBoundsMaterial(self, *args):
        """
        GetUnfreeBoundsMaterial(VrmlAPI_Writer self) -> Handle_Vrml_Material

        :rtype: OCC.wrapper.Vrml.Handle_Vrml_Material

        """
        return _VrmlAPI.VrmlAPI_Writer_GetUnfreeBoundsMaterial(self, *args)


    def Write(self, *args):
        """
        Write(VrmlAPI_Writer self, TopoDS_Shape aShape, Standard_CString const aFile, Standard_Integer const aVersion=2)

        Converts the shape aShape to
        VRML format of the passed version and writes it to the file identified by aFile.

        :type aShape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type aFile: OCC.wrapper.Standard.Standard_CString
        :type aVersion: int

        """
        return _VrmlAPI.VrmlAPI_Writer_Write(self, *args)

    __swig_destroy__ = _VrmlAPI.delete_VrmlAPI_Writer
VrmlAPI_Writer_swigregister = _VrmlAPI.VrmlAPI_Writer_swigregister
VrmlAPI_Writer_swigregister(VrmlAPI_Writer)



