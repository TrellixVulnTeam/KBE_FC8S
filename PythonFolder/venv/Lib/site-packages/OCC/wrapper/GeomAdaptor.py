# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomAdaptor')
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomAdaptor', [dirname(__file__)])
        except ImportError:
            import _GeomAdaptor
            return _GeomAdaptor
        try:
            _mod = imp.load_module('_GeomAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _GeomAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAdaptor.delete_SwigPyIterator

    def value(self):
        return _GeomAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _GeomAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomAdaptor.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomAdaptor.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomAdaptor.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomAdaptor.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomAdaptor.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomAdaptor.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomAdaptor.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomAdaptor.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomAdaptor.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomAdaptor.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomAdaptor.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomAdaptor.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomAdaptor.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomAdaptor.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomAdaptor.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomAdaptor.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomAdaptor.ptr_to_number(item)
ptr_to_number = _GeomAdaptor.ptr_to_number

def HashCode(*args):
    return _GeomAdaptor.HashCode(*args)
HashCode = _GeomAdaptor.HashCode

def ptr_equal(a, b):
    return _GeomAdaptor.ptr_equal(a, b)
ptr_equal = _GeomAdaptor.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class GeomAdaptor_Surface(Adaptor3d.Adaptor3d_Surface):
    """
    An interface between the services provided by any
    surface from the package Geom and those required
    of the surface by algorithms which use it.
    Creation of the loaded surface the surface is C1 by piece

    Polynomial coefficients of BSpline surfaces used for their evaluation are
    cached for better performance. Therefore these evaluations are not
    thread-safe and parallel evaluations need to be prevented.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomAdaptor_Surface self) -> GeomAdaptor_Surface
        __init__(GeomAdaptor_Surface self, Handle_Geom_Surface S) -> GeomAdaptor_Surface
        __init__(GeomAdaptor_Surface self, Handle_Geom_Surface S, Standard_Real const UFirst, Standard_Real const ULast, Standard_Real const VFirst, Standard_Real const VLast, Standard_Real const TolU=0.0, Standard_Real const TolV=0.0) -> GeomAdaptor_Surface

        ConstructionError is raised if UFirst>ULast or VFirst>VLast

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UFirst: float
        :type ULast: float
        :type VFirst: float
        :type VLast: float
        :type TolU: float
        :type TolV: float

        """
        this = _GeomAdaptor.new_GeomAdaptor_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(GeomAdaptor_Surface self, Handle_Geom_Surface S)
        Load(GeomAdaptor_Surface self, Handle_Geom_Surface S, Standard_Real const UFirst, Standard_Real const ULast, Standard_Real const VFirst, Standard_Real const VLast, Standard_Real const TolU=0.0, Standard_Real const TolV=0.0)

        ConstructionError is raised if UFirst>ULast or VFirst>VLast

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UFirst: float
        :type ULast: float
        :type VFirst: float
        :type VLast: float
        :type TolU: float
        :type TolV: float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Load(self, *args)


    def Surface(self, *args):
        """
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        res = _GeomAdaptor.GeomAdaptor_Surface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(GeomAdaptor_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(GeomAdaptor_Surface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(GeomAdaptor_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of U intervals for  continuity
        <S>. May be one if UContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(GeomAdaptor_Surface self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of V intervals for  continuity
        <S>. May be one if VContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(GeomAdaptor_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the U direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(GeomAdaptor_Surface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the V direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(GeomAdaptor_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the U direction
        equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(GeomAdaptor_Surface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the V direction  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Value(self, *args)


    def D0(self, *args):
        """
        D0(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        Computes the point of parameters U,V on the surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        Computes the point  and the first derivatives on
        the surface.

        Warning : On the specific case of BSplineSurface:
        if the surface is cut in interval of continuity at least C1,
        the derivatives are computed on the current interval.
        else the derivatives are computed on the basis surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        Computes   the point,  the  first  and  second
        derivatives on the surface.

        Warning : On the specific case of BSplineSurface:
        if the surface is cut in interval of continuity at least C2,
        the derivatives are computed on the current interval.
        else the derivatives are computed on the basis surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        Computes the point,  the first, second and third
        derivatives on the surface.

        Warning : On the specific case of BSplineSurface:
        if the surface is cut in interval of continuity at least C3,
        the derivatives are computed on the current interval.
        else the derivatives are computed on the basis surface.

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomAdaptor_Surface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        Computes the derivative of order Nu in the
        direction U and Nv in the direction V at the point P(U, V).

        Warning : On the specific case of BSplineSurface:
        if the surface is cut in interval of continuity CN,
        the derivatives are computed on the current interval.
        else the derivatives are computed on the basis surface.
        Raised if Nu + Nv < 1 or Nu < 0 or Nv < 0.

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Surface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(GeomAdaptor_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric U  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(GeomAdaptor_Surface self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric V  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(GeomAdaptor_Surface self) -> GeomAbs_SurfaceType

        Returns the type of the surface : Plane, Cylinder,
        Cone,      Sphere,        Torus,    BezierSurface,
        BSplineSurface,               SurfaceOfRevolution,
        SurfaceOfExtrusion, OtherSurface

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_Surface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(GeomAdaptor_Surface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(GeomAdaptor_Surface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(GeomAdaptor_Surface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(GeomAdaptor_Surface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(GeomAdaptor_Surface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(GeomAdaptor_Surface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(GeomAdaptor_Surface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(GeomAdaptor_Surface self) -> Handle_Geom_BezierSurface

        This will NOT make a copy of the
        Bezier Surface : If you want to modify
        the Surface please make a copy yourself
        Also it will NOT trim the surface to
        myU/VFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(GeomAdaptor_Surface self) -> Handle_Geom_BSplineSurface

        This will NOT make a copy of the
        BSpline Surface : If you want to modify
        the Surface please make a copy yourself
        Also it will NOT trim the surface to
        myU/VFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(GeomAdaptor_Surface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_Surface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(GeomAdaptor_Surface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(GeomAdaptor_Surface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(GeomAdaptor_Surface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(GeomAdaptor_Surface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Surface_OffsetValue(self, *args)

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Surface
GeomAdaptor_Surface_swigregister = _GeomAdaptor.GeomAdaptor_Surface_swigregister
GeomAdaptor_Surface_swigregister(GeomAdaptor_Surface)

class GeomAdaptor_GHCurve(Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_GHCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_GHCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_GHCurve self) -> GeomAdaptor_GHCurve
        __init__(GeomAdaptor_GHCurve self, GeomAdaptor_Curve C) -> GeomAdaptor_GHCurve

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        this = _GeomAdaptor.new_GeomAdaptor_GHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(GeomAdaptor_GHCurve self, GeomAdaptor_Curve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _GeomAdaptor.GeomAdaptor_GHCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(GeomAdaptor_GHCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(GeomAdaptor_GHCurve self) -> GeomAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_GHCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_GHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHCurve
GeomAdaptor_GHCurve_swigregister = _GeomAdaptor.GeomAdaptor_GHCurve_swigregister
GeomAdaptor_GHCurve_swigregister(GeomAdaptor_GHCurve)

def GeomAdaptor_GHCurve_get_type_name(*args):
    """
    GeomAdaptor_GHCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_GHCurve_get_type_name(*args)

def GeomAdaptor_GHCurve_get_type_descriptor(*args):
    """
    GeomAdaptor_GHCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_GHCurve_get_type_descriptor(*args)

class GeomAdaptor_SurfaceOfRevolution(GeomAdaptor_Surface):
    """
    This class defines a complete surface of revolution.
    The surface is obtained by rotating a curve a complete revolution
    about an axis. The curve and the axis must be in the same plane.
    If the curve and the axis are not in the same plane it is always
    possible to be in the previous case after a cylindrical projection
    of the curve in a referenced plane.
    For a complete surface of revolution the parametric range is
    0 <= U <= 2*PI.       --
    The parametric range for V is defined with the revolved curve.
    The origin of the U parametrization is given by the position
    of the revolved curve (reference). The direction of the revolution
    axis defines the positive sense of rotation (trigonometric sense)
    corresponding to the increasing of the parametric value U.
    The derivatives are always defined for the u direction.
    For the v direction the definition of the derivatives depends on
    the degree of continuity of the referenced curve.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomAdaptor_SurfaceOfRevolution self) -> GeomAdaptor_SurfaceOfRevolution
        __init__(GeomAdaptor_SurfaceOfRevolution self, Handle_Adaptor3d_HCurve C) -> GeomAdaptor_SurfaceOfRevolution
        __init__(GeomAdaptor_SurfaceOfRevolution self, Handle_Adaptor3d_HCurve C, gp_Ax1 V) -> GeomAdaptor_SurfaceOfRevolution

        The Curve and the Direction are loaded.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type V: OCC.wrapper.gp.gp_Ax1

        """
        this = _GeomAdaptor.new_GeomAdaptor_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(GeomAdaptor_SurfaceOfRevolution self, Handle_Adaptor3d_HCurve C)
        Load(GeomAdaptor_SurfaceOfRevolution self, gp_Ax1 V)

        Changes the Direction

        :type V: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(GeomAdaptor_SurfaceOfRevolution self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_AxeOfRevolution(self, *args)


    def FirstUParameter(self, *args):
        """
        FirstUParameter(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(GeomAdaptor_SurfaceOfRevolution self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(GeomAdaptor_SurfaceOfRevolution self) -> GeomAbs_Shape

        Return CN.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(GeomAdaptor_SurfaceOfRevolution self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of U intervals for  continuity
        <S>. May be one if UContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(GeomAdaptor_SurfaceOfRevolution self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of V intervals for  continuity
        <S>. May be one if VContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(GeomAdaptor_SurfaceOfRevolution self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the U direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(GeomAdaptor_SurfaceOfRevolution self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the V direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(GeomAdaptor_SurfaceOfRevolution self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the U direction
        equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(GeomAdaptor_SurfaceOfRevolution self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the V direction  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VPeriod(self, *args)


    def UResolution(self, *args):
        """
        UResolution(GeomAdaptor_SurfaceOfRevolution self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric U  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(GeomAdaptor_SurfaceOfRevolution self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric V  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(GeomAdaptor_SurfaceOfRevolution self) -> GeomAbs_SurfaceType

        Returns the type of the surface : Plane, Cylinder,
        Cone,      Sphere,        Torus,    BezierSurface,
        BSplineSurface,               SurfaceOfRevolution,
        SurfaceOfExtrusion, OtherSurface

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(GeomAdaptor_SurfaceOfRevolution self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(GeomAdaptor_SurfaceOfRevolution self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(GeomAdaptor_SurfaceOfRevolution self) -> gp_Cone

        Apex of the Cone = Cone.Position().Location()
        ==> ReferenceRadius = 0.

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(GeomAdaptor_SurfaceOfRevolution self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(GeomAdaptor_SurfaceOfRevolution self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Torus(self, *args)


    def VDegree(self, *args):
        """
        VDegree(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVPoles(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(GeomAdaptor_SurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(GeomAdaptor_SurfaceOfRevolution self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(GeomAdaptor_SurfaceOfRevolution self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_BSpline(self, *args)


    def Axis(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Ax3

        """
        res = _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BasisCurve(self, *args):
        """
        BasisCurve(GeomAdaptor_SurfaceOfRevolution self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_BasisCurve(self, *args)

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfRevolution
GeomAdaptor_SurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swigregister
GeomAdaptor_SurfaceOfRevolution_swigregister(GeomAdaptor_SurfaceOfRevolution)

class GeomAdaptor_HSurfaceOfRevolution(Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_HSurfaceOfRevolution
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_HSurfaceOfRevolution(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_HSurfaceOfRevolution
        __init__(GeomAdaptor_HSurfaceOfRevolution self, GeomAdaptor_SurfaceOfRevolution S) -> GeomAdaptor_HSurfaceOfRevolution

        Creates a GenHSurface from a Surface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfRevolution

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(GeomAdaptor_HSurfaceOfRevolution self, GeomAdaptor_SurfaceOfRevolution S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfRevolution

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_SurfaceOfRevolution

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfRevolution

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_ChangeSurface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfRevolution
GeomAdaptor_HSurfaceOfRevolution_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_swigregister
GeomAdaptor_HSurfaceOfRevolution_swigregister(GeomAdaptor_HSurfaceOfRevolution)

def GeomAdaptor_HSurfaceOfRevolution_get_type_name(*args):
    """
    GeomAdaptor_HSurfaceOfRevolution_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_get_type_name(*args)

def GeomAdaptor_HSurfaceOfRevolution_get_type_descriptor(*args):
    """
    GeomAdaptor_HSurfaceOfRevolution_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_HSurfaceOfRevolution_get_type_descriptor(*args)

class GeomAdaptor_HCurve(GeomAdaptor_GHCurve):
    """
    An interface between the services provided by any
    curve from the package Geom and those required of
    the curve by algorithms which use it.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_HCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_HCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_HCurve self) -> GeomAdaptor_HCurve
        __init__(GeomAdaptor_HCurve self, GeomAdaptor_Curve AS) -> GeomAdaptor_HCurve
        __init__(GeomAdaptor_HCurve self, Handle_Geom_Curve S) -> GeomAdaptor_HCurve
        __init__(GeomAdaptor_HCurve self, Handle_Geom_Curve S, Standard_Real const UFirst, Standard_Real const ULast) -> GeomAdaptor_HCurve

        ConstructionError is raised if UFirst>ULast or VFirst>VLast

        :type S: OCC.wrapper.Geom.Handle_Geom_Curve
        :type UFirst: float
        :type ULast: float

        """
        this = _GeomAdaptor.new_GeomAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_HCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_HCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HCurve
GeomAdaptor_HCurve_swigregister = _GeomAdaptor.GeomAdaptor_HCurve_swigregister
GeomAdaptor_HCurve_swigregister(GeomAdaptor_HCurve)

def GeomAdaptor_HCurve_get_type_name(*args):
    """
    GeomAdaptor_HCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_HCurve_get_type_name(*args)

def GeomAdaptor_HCurve_get_type_descriptor(*args):
    """
    GeomAdaptor_HCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_HCurve_get_type_descriptor(*args)

class GeomAdaptor_GHSurface(Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_GHSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_GHSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_GHSurface self) -> GeomAdaptor_GHSurface
        __init__(GeomAdaptor_GHSurface self, GeomAdaptor_Surface S) -> GeomAdaptor_GHSurface

        Creates a GenHSurface from a Surface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        this = _GeomAdaptor.new_GeomAdaptor_GHSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(GeomAdaptor_GHSurface self, GeomAdaptor_Surface S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.GeomAdaptor_GHSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(GeomAdaptor_GHSurface self) -> GeomAdaptor_Surface

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_ChangeSurface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_GHSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_GHSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_GHSurface
GeomAdaptor_GHSurface_swigregister = _GeomAdaptor.GeomAdaptor_GHSurface_swigregister
GeomAdaptor_GHSurface_swigregister(GeomAdaptor_GHSurface)

def GeomAdaptor_GHSurface_get_type_name(*args):
    """
    GeomAdaptor_GHSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_GHSurface_get_type_name(*args)

def GeomAdaptor_GHSurface_get_type_descriptor(*args):
    """
    GeomAdaptor_GHSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_GHSurface_get_type_descriptor(*args)

class Handle_GeomAdaptor_GHSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_GHSurface self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_GHSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_GHSurface self, GeomAdaptor_GHSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_GHSurface self, Handle_GeomAdaptor_GHSurface theHandle) -> Handle_GeomAdaptor_GHSurface
        assign(Handle_GeomAdaptor_GHSurface self, GeomAdaptor_GHSurface thePtr) -> Handle_GeomAdaptor_GHSurface
        assign(Handle_GeomAdaptor_GHSurface self, Handle_GeomAdaptor_GHSurface theHandle) -> Handle_GeomAdaptor_GHSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_GHSurface self) -> GeomAdaptor_GHSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_GHSurface self) -> GeomAdaptor_GHSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_GHSurface self) -> GeomAdaptor_GHSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_GHSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_GHSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_GHSurface

    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_GHSurface self, GeomAdaptor_Surface S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(Handle_GeomAdaptor_GHSurface self) -> GeomAdaptor_Surface

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_ChangeSurface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_GHSurface self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_GeomAdaptor_GHSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_GeomAdaptor_GHSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_GeomAdaptor_GHSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_GeomAdaptor_GHSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_GeomAdaptor_GHSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_GeomAdaptor_GHSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_GeomAdaptor_GHSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_GeomAdaptor_GHSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_GHSurface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_GeomAdaptor_GHSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_GeomAdaptor_GHSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_GHSurface self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_GeomAdaptor_GHSurface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_GeomAdaptor_GHSurface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_GeomAdaptor_GHSurface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_GeomAdaptor_GHSurface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_GeomAdaptor_GHSurface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_GeomAdaptor_GHSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_GHSurface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_GHSurface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_GeomAdaptor_GHSurface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_GeomAdaptor_GHSurface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_GeomAdaptor_GHSurface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_GeomAdaptor_GHSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_GeomAdaptor_GHSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_OffsetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_GHSurface self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_GHSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_GHSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_GHSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_GHSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_GHSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_GHSurface self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_GHSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_GHSurface_swigregister = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_swigregister
Handle_GeomAdaptor_GHSurface_swigregister(Handle_GeomAdaptor_GHSurface)

def Handle_GeomAdaptor_GHSurface_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast(thing)
Handle_GeomAdaptor_GHSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHSurface_DownCast

class GeomAdaptor_HSurface(GeomAdaptor_GHSurface):
    """
    An interface between the services provided by any
    surface from the package Geom and those required
    of the surface by algorithms which use it.
    Provides a  surface handled by reference.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_HSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_HSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_HSurface self) -> GeomAdaptor_HSurface
        __init__(GeomAdaptor_HSurface self, GeomAdaptor_Surface AS) -> GeomAdaptor_HSurface
        __init__(GeomAdaptor_HSurface self, Handle_Geom_Surface S) -> GeomAdaptor_HSurface
        __init__(GeomAdaptor_HSurface self, Handle_Geom_Surface S, Standard_Real const UFirst, Standard_Real const ULast, Standard_Real const VFirst, Standard_Real const VLast, Standard_Real const TolU=0.0, Standard_Real const TolV=0.0) -> GeomAdaptor_HSurface

        ConstructionError is raised if UFirst>ULast or VFirst>VLast

        :type S: OCC.wrapper.Geom.Handle_Geom_Surface
        :type UFirst: float
        :type ULast: float
        :type VFirst: float
        :type VLast: float
        :type TolU: float
        :type TolV: float

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_HSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_HSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurface
GeomAdaptor_HSurface_swigregister = _GeomAdaptor.GeomAdaptor_HSurface_swigregister
GeomAdaptor_HSurface_swigregister(GeomAdaptor_HSurface)

def GeomAdaptor_HSurface_get_type_name(*args):
    """
    GeomAdaptor_HSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_HSurface_get_type_name(*args)

def GeomAdaptor_HSurface_get_type_descriptor(*args):
    """
    GeomAdaptor_HSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_HSurface_get_type_descriptor(*args)

class Handle_GeomAdaptor_HCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_HCurve self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_HCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_HCurve self, GeomAdaptor_HCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_HCurve self, Handle_GeomAdaptor_HCurve theHandle) -> Handle_GeomAdaptor_HCurve
        assign(Handle_GeomAdaptor_HCurve self, GeomAdaptor_HCurve thePtr) -> Handle_GeomAdaptor_HCurve
        assign(Handle_GeomAdaptor_HCurve self, Handle_GeomAdaptor_HCurve theHandle) -> Handle_GeomAdaptor_HCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_HCurve self) -> GeomAdaptor_HCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_HCurve self) -> GeomAdaptor_HCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_HCurve self) -> GeomAdaptor_HCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_HCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_HCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_HCurve self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_HCurve self, GeomAdaptor_Curve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_GeomAdaptor_HCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_GeomAdaptor_HCurve self) -> GeomAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_ChangeCurve(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_GeomAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_GeomAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_GeomAdaptor_HCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_GeomAdaptor_HCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_GeomAdaptor_HCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_GeomAdaptor_HCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_GeomAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_GeomAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_GeomAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_HCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_HCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_HCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_HCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_GeomAdaptor_HCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_HCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GeomAdaptor_HCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GeomAdaptor_HCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GeomAdaptor_HCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GeomAdaptor_HCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GeomAdaptor_HCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_GeomAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_GeomAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_GeomAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_GeomAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_HCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_HCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_GeomAdaptor_HCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_HCurve self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_HCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_HCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_HCurve self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_HCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HCurve_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_HCurve_swigregister = _GeomAdaptor.Handle_GeomAdaptor_HCurve_swigregister
Handle_GeomAdaptor_HCurve_swigregister(Handle_GeomAdaptor_HCurve)

def Handle_GeomAdaptor_HCurve_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast(thing)
Handle_GeomAdaptor_HCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HCurve_DownCast

class GeomAdaptor_HSurfaceOfLinearExtrusion(Adaptor3d.Adaptor3d_HSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomAdaptor_HSurfaceOfLinearExtrusion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomAdaptor_HSurfaceOfLinearExtrusion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_HSurfaceOfLinearExtrusion
        __init__(GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAdaptor_SurfaceOfLinearExtrusion S) -> GeomAdaptor_HSurfaceOfLinearExtrusion

        Creates a GenHSurface from a Surface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion

        """
        this = _GeomAdaptor.new_GeomAdaptor_HSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAdaptor_SurfaceOfLinearExtrusion S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_SurfaceOfLinearExtrusion

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_ChangeSurface(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_HSurfaceOfLinearExtrusion
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister
GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister(GeomAdaptor_HSurfaceOfLinearExtrusion)

def GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_name(*args):
    """
    GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_name(*args)

def GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_descriptor(*args):
    """
    GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomAdaptor.GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_descriptor(*args)

class Handle_GeomAdaptor_HSurfaceOfRevolution(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_HSurfaceOfRevolution self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_HSurfaceOfRevolution self, GeomAdaptor_HSurfaceOfRevolution thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_HSurfaceOfRevolution self, Handle_GeomAdaptor_HSurfaceOfRevolution theHandle) -> Handle_GeomAdaptor_HSurfaceOfRevolution
        assign(Handle_GeomAdaptor_HSurfaceOfRevolution self, GeomAdaptor_HSurfaceOfRevolution thePtr) -> Handle_GeomAdaptor_HSurfaceOfRevolution
        assign(Handle_GeomAdaptor_HSurfaceOfRevolution self, Handle_GeomAdaptor_HSurfaceOfRevolution theHandle) -> Handle_GeomAdaptor_HSurfaceOfRevolution

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_HSurfaceOfRevolution

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_HSurfaceOfRevolution

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_HSurfaceOfRevolution

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_HSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_HSurfaceOfRevolution

    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_HSurfaceOfRevolution self, GeomAdaptor_SurfaceOfRevolution S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfRevolution

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAdaptor_SurfaceOfRevolution

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfRevolution

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_ChangeSurface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_GeomAdaptor_HSurfaceOfRevolution self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_GeomAdaptor_HSurfaceOfRevolution self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_GeomAdaptor_HSurfaceOfRevolution self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_GeomAdaptor_HSurfaceOfRevolution self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_OffsetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_HSurfaceOfRevolution self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_HSurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_HSurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_HSurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_HSurfaceOfRevolution self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_HSurfaceOfRevolution self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_HSurfaceOfRevolution_swigregister = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_swigregister
Handle_GeomAdaptor_HSurfaceOfRevolution_swigregister(Handle_GeomAdaptor_HSurfaceOfRevolution)

def Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast(thing)
Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfRevolution_DownCast

class Handle_GeomAdaptor_HSurfaceOfLinearExtrusion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAdaptor_HSurfaceOfLinearExtrusion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Handle_GeomAdaptor_HSurfaceOfLinearExtrusion theHandle) -> Handle_GeomAdaptor_HSurfaceOfLinearExtrusion
        assign(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAdaptor_HSurfaceOfLinearExtrusion thePtr) -> Handle_GeomAdaptor_HSurfaceOfLinearExtrusion
        assign(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Handle_GeomAdaptor_HSurfaceOfLinearExtrusion theHandle) -> Handle_GeomAdaptor_HSurfaceOfLinearExtrusion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_HSurfaceOfLinearExtrusion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_HSurfaceOfLinearExtrusion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_HSurfaceOfLinearExtrusion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_HSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_HSurfaceOfLinearExtrusion

    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAdaptor_SurfaceOfLinearExtrusion S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAdaptor_SurfaceOfLinearExtrusion

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_ChangeSurface(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_OffsetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_swigregister(Handle_GeomAdaptor_HSurfaceOfLinearExtrusion)

def Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast(thing)
Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurfaceOfLinearExtrusion_DownCast

class GeomAdaptor_(object):
    """
    this package contains the  geometric definition of
    curve and surface necessary to use algorithmes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeCurve(*args):
        """
        MakeCurve(Adaptor3d_Curve C) -> Handle_Geom_Curve

        Inherited  from    GHCurve.   Provides a  curve
        handled by reference.
        Build a Geom_Curve using the informations from the
        Curve from Adaptor3d

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _GeomAdaptor.GeomAdaptor__MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def MakeSurface(*args):
        """
        MakeSurface(Adaptor3d_Surface theS, Standard_Boolean const theTrimFlag) -> Handle_Geom_Surface

        Build a Geom_Surface using the informations from the Surface from Adaptor3d
        @param theS - Surface adaptor to convert.
        @param theTrimFlag - True if perform trim surface values by adaptor and false otherwise.

        :type theS: OCC.wrapper.Adaptor3d.Adaptor3d_Surface
        :type theTrimFlag: bool
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _GeomAdaptor.GeomAdaptor__MakeSurface(*args)

    MakeSurface = staticmethod(MakeSurface)

    def __init__(self):
        """
        this package contains the  geometric definition of
        curve and surface necessary to use algorithmes.
        """
        this = _GeomAdaptor.new_GeomAdaptor_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_
GeomAdaptor__swigregister = _GeomAdaptor.GeomAdaptor__swigregister
GeomAdaptor__swigregister(GeomAdaptor_)

def GeomAdaptor__MakeCurve(*args):
    """
    GeomAdaptor__MakeCurve(Adaptor3d_Curve C) -> Handle_Geom_Curve

    Inherited  from    GHCurve.   Provides a  curve
    handled by reference.
    Build a Geom_Curve using the informations from the
    Curve from Adaptor3d

    :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
    :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

    """
    return _GeomAdaptor.GeomAdaptor__MakeCurve(*args)

def GeomAdaptor__MakeSurface(*args):
    """
    GeomAdaptor__MakeSurface(Adaptor3d_Surface theS, Standard_Boolean const theTrimFlag) -> Handle_Geom_Surface

    Build a Geom_Surface using the informations from the Surface from Adaptor3d
    @param theS - Surface adaptor to convert.
    @param theTrimFlag - True if perform trim surface values by adaptor and false otherwise.

    :type theS: OCC.wrapper.Adaptor3d.Adaptor3d_Surface
    :type theTrimFlag: bool
    :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

    """
    return _GeomAdaptor.GeomAdaptor__MakeSurface(*args)

class GeomAdaptor_Curve(Adaptor3d.Adaptor3d_Curve):
    """
    This class provides an interface between the services provided by any
    curve from the package Geom and those required of the curve by algorithms which use it.
    Creation of the loaded curve the curve is C1 by piece.

    Polynomial coefficients of BSpline curves used for their evaluation are
    cached for better performance. Therefore these evaluations are not
    thread-safe and parallel evaluations need to be prevented.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomAdaptor_Curve self) -> GeomAdaptor_Curve
        __init__(GeomAdaptor_Curve self, Handle_Geom_Curve C) -> GeomAdaptor_Curve
        __init__(GeomAdaptor_Curve self, Handle_Geom_Curve C, Standard_Real const UFirst, Standard_Real const ULast) -> GeomAdaptor_Curve

        ConstructionError is raised if Ufirst>Ulast

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type UFirst: float
        :type ULast: float

        """
        this = _GeomAdaptor.new_GeomAdaptor_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(GeomAdaptor_Curve self, Handle_Geom_Curve C)
        Load(GeomAdaptor_Curve self, Handle_Geom_Curve C, Standard_Real const UFirst, Standard_Real const ULast)

        ConstructionError is raised if Ufirst>Ulast

        :type C: OCC.wrapper.Geom.Handle_Geom_Curve
        :type UFirst: float
        :type ULast: float

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Load(self, *args)


    def Curve(self, *args):
        """
        Provides a curve inherited from Hcurve from Adaptor.
        This is inherited to provide easy to use constructors.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        res = _GeomAdaptor.GeomAdaptor_Curve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(GeomAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Curve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(GeomAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Curve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(GeomAdaptor_Curve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(GeomAdaptor_Curve self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(GeomAdaptor_Curve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(GeomAdaptor_Curve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(GeomAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(GeomAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(GeomAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Period(self, *args)


    def Value(self, *args):
        """
        Value(GeomAdaptor_Curve self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Value(self, *args)


    def D0(self, *args):
        """
        D0(GeomAdaptor_Curve self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve
        with its first derivative.

        Warning : On the specific case of BSplineCurve:
        if the curve is cut in interval of continuity at least C1, the
        derivatives are computed on the current interval.
        else the derivatives are computed on the basis curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.

        Warning : On the specific case of BSplineCurve:
        if the curve is cut in interval of continuity at least C2, the
        derivatives are computed on the current interval.
        else the derivatives are computed on the basis curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomAdaptor_Curve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.

        Warning : On the specific case of BSplineCurve:
        if the curve is cut in interval of continuity at least C3, the
        derivatives are computed on the current interval.
        else the derivatives are computed on the basis curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomAdaptor_Curve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Warning : On the specific case of BSplineCurve:
        if the curve is cut in interval of continuity CN, the
        derivatives are computed on the current interval.
        else the derivatives are computed on the basis curve.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Curve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(GeomAdaptor_Curve self, Standard_Real const R3d) -> Standard_Real

        returns the parametric resolution

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(GeomAdaptor_Curve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _GeomAdaptor.GeomAdaptor_Curve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(GeomAdaptor_Curve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(GeomAdaptor_Curve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(GeomAdaptor_Curve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(GeomAdaptor_Curve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(GeomAdaptor_Curve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(GeomAdaptor_Curve self) -> Standard_Integer

        this should NEVER make a copy
        of the underlying curve to read
        the relevant information

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(GeomAdaptor_Curve self) -> Standard_Boolean

        this should NEVER make a copy
        of the underlying curve to read
        the relevant information

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(GeomAdaptor_Curve self) -> Standard_Integer

        this should NEVER make a copy
        of the underlying curve to read
        the relevant information

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(GeomAdaptor_Curve self) -> Standard_Integer

        this should NEVER make a copy
        of the underlying curve to read
        the relevant information

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(GeomAdaptor_Curve self) -> Handle_Geom_BezierCurve

        this will NOT make a copy of the
        Bezier Curve : If you want to modify
        the Curve please make a copy yourself
        Also it will NOT trim the surface to
        myFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(GeomAdaptor_Curve self) -> Handle_Geom_BSplineCurve

        this will NOT make a copy of the
        BSpline Curve : If you want to modify
        the Curve please make a copy yourself
        Also it will NOT trim the surface to
        myFirst/Last.

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _GeomAdaptor.GeomAdaptor_Curve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(GeomAdaptor_Curve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _GeomAdaptor.GeomAdaptor_Curve_OffsetCurve(self, *args)

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Curve
GeomAdaptor_Curve_swigregister = _GeomAdaptor.GeomAdaptor_Curve_swigregister
GeomAdaptor_Curve_swigregister(GeomAdaptor_Curve)

class GeomAdaptor_SurfaceOfLinearExtrusion(GeomAdaptor_Surface):
    """
    Generalised cylinder. This surface is obtained  by sweeping a  curve in  a given
    direction. The parametrization range  for the parameter U is defined
    with referenced the curve.
    The parametrization range for the parameter V is ]-infinite,+infinite[
    The  position of  the   curve gives  the origin for    the
    parameter V.
    The continuity of the surface is CN in the V direction.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomAdaptor_SurfaceOfLinearExtrusion self) -> GeomAdaptor_SurfaceOfLinearExtrusion
        __init__(GeomAdaptor_SurfaceOfLinearExtrusion self, Handle_Adaptor3d_HCurve C) -> GeomAdaptor_SurfaceOfLinearExtrusion
        __init__(GeomAdaptor_SurfaceOfLinearExtrusion self, Handle_Adaptor3d_HCurve C, gp_Dir V) -> GeomAdaptor_SurfaceOfLinearExtrusion

        Thew Curve and the Direction are loaded.

        :type C: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type V: OCC.wrapper.gp.gp_Dir

        """
        this = _GeomAdaptor.new_GeomAdaptor_SurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(GeomAdaptor_SurfaceOfLinearExtrusion self, Handle_Adaptor3d_HCurve C)
        Load(GeomAdaptor_SurfaceOfLinearExtrusion self, gp_Dir V)

        Changes the Direction

        :type V: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load(self, *args)


    def FirstUParameter(self, *args):
        """
        FirstUParameter(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(GeomAdaptor_SurfaceOfLinearExtrusion self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(GeomAdaptor_SurfaceOfLinearExtrusion self) -> GeomAbs_Shape

        Return CN.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(GeomAdaptor_SurfaceOfLinearExtrusion self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of U intervals for  continuity
        <S>. May be one if UContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(GeomAdaptor_SurfaceOfLinearExtrusion self, GeomAbs_Shape const S) -> Standard_Integer

        Returns the number of V intervals for  continuity
        <S>. May be one if VContinuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(GeomAdaptor_SurfaceOfLinearExtrusion self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the U direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(GeomAdaptor_SurfaceOfLinearExtrusion self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Returns the  intervals with the requested continuity
        in the V direction.

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(GeomAdaptor_SurfaceOfLinearExtrusion self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the U direction
        equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(GeomAdaptor_SurfaceOfLinearExtrusion self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        Returns    a  surface trimmed in the V direction  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VPeriod(self, *args)


    def UResolution(self, *args):
        """
        UResolution(GeomAdaptor_SurfaceOfLinearExtrusion self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric U  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(GeomAdaptor_SurfaceOfLinearExtrusion self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric V  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(GeomAdaptor_SurfaceOfLinearExtrusion self) -> GeomAbs_SurfaceType

        Returns the type of the surface : Plane, Cylinder,
        Cone,      Sphere,        Torus,    BezierSurface,
        BSplineSurface,               SurfaceOfRevolution,
        SurfaceOfExtrusion, OtherSurface

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbUPoles(self, *args)


    def IsURational(self, *args):
        """
        IsURational(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(GeomAdaptor_SurfaceOfLinearExtrusion self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(GeomAdaptor_SurfaceOfLinearExtrusion self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_BasisCurve(self, *args)

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfLinearExtrusion
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister = _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swigregister
GeomAdaptor_SurfaceOfLinearExtrusion_swigregister(GeomAdaptor_SurfaceOfLinearExtrusion)

class Handle_GeomAdaptor_GHCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_GHCurve self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_GHCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_GHCurve self, GeomAdaptor_GHCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_GHCurve self, Handle_GeomAdaptor_GHCurve theHandle) -> Handle_GeomAdaptor_GHCurve
        assign(Handle_GeomAdaptor_GHCurve self, GeomAdaptor_GHCurve thePtr) -> Handle_GeomAdaptor_GHCurve
        assign(Handle_GeomAdaptor_GHCurve self, Handle_GeomAdaptor_GHCurve theHandle) -> Handle_GeomAdaptor_GHCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_GHCurve self) -> GeomAdaptor_GHCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_GHCurve self) -> GeomAdaptor_GHCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_GHCurve self) -> GeomAdaptor_GHCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_GHCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_GHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_GHCurve

    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_GHCurve self, GeomAdaptor_Curve C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_GeomAdaptor_GHCurve self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_GeomAdaptor_GHCurve self) -> GeomAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Curve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_GHCurve self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_GeomAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_GeomAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_GeomAdaptor_GHCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_GeomAdaptor_GHCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_GeomAdaptor_GHCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_GeomAdaptor_GHCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_GeomAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_GeomAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_GeomAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_GHCurve self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_GHCurve self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_GHCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_GHCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_GHCurve self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_GHCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_GeomAdaptor_GHCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_GHCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_GeomAdaptor_GHCurve self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_GeomAdaptor_GHCurve self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_GeomAdaptor_GHCurve self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_GeomAdaptor_GHCurve self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_GeomAdaptor_GHCurve self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_GeomAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_GeomAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_GeomAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_GeomAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_GHCurve self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_GHCurve self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_GeomAdaptor_GHCurve self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_GHCurve self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_GHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_GHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_GHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_GHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_GHCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_GHCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_GHCurve self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_GHCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_GHCurve_swigregister = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_swigregister
Handle_GeomAdaptor_GHCurve_swigregister(Handle_GeomAdaptor_GHCurve)

def Handle_GeomAdaptor_GHCurve_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast(thing)
Handle_GeomAdaptor_GHCurve_DownCast = _GeomAdaptor.Handle_GeomAdaptor_GHCurve_DownCast

class Handle_GeomAdaptor_HSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomAdaptor_HSurface self)

        Nullify the handle


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomAdaptor_HSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomAdaptor_HSurface self, GeomAdaptor_HSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomAdaptor_HSurface self, Handle_GeomAdaptor_HSurface theHandle) -> Handle_GeomAdaptor_HSurface
        assign(Handle_GeomAdaptor_HSurface self, GeomAdaptor_HSurface thePtr) -> Handle_GeomAdaptor_HSurface
        assign(Handle_GeomAdaptor_HSurface self, Handle_GeomAdaptor_HSurface theHandle) -> Handle_GeomAdaptor_HSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomAdaptor_HSurface self) -> GeomAdaptor_HSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomAdaptor_HSurface self) -> GeomAdaptor_HSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomAdaptor_HSurface self) -> GeomAdaptor_HSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface___ref__(self, *args)


    def __hash__(self):
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomAdaptor.Handle_GeomAdaptor_HSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomAdaptor.new_Handle_GeomAdaptor_HSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast)
    __swig_destroy__ = _GeomAdaptor.delete_Handle_GeomAdaptor_HSurface

    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomAdaptor_HSurface self) -> char const *

        :rtype: const char *

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_GeomAdaptor_HSurface self, GeomAdaptor_Surface S)

        Sets the field of the GenHSurface.

        :type S: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Set(self, *args)


    def Surface(self, *args):
        """
        Returns a reference to the Surface inside the HSurface.
        This is redefined from HSurface, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Surface

        """
        res = _GeomAdaptor.Handle_GeomAdaptor_HSurface_Surface(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeSurface(self, *args):
        """
        ChangeSurface(Handle_GeomAdaptor_HSurface self) -> GeomAdaptor_Surface

        Returns the surface used to create the GenHSurface.

        :rtype: OCC.wrapper.GeomAdaptor.GeomAdaptor_Surface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_ChangeSurface(self, *args)


    def FirstUParameter(self, *args):
        """
        FirstUParameter(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_FirstUParameter(self, *args)


    def LastUParameter(self, *args):
        """
        LastUParameter(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_LastUParameter(self, *args)


    def FirstVParameter(self, *args):
        """
        FirstVParameter(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_FirstVParameter(self, *args)


    def LastVParameter(self, *args):
        """
        LastVParameter(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_LastVParameter(self, *args)


    def UContinuity(self, *args):
        """
        UContinuity(Handle_GeomAdaptor_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UContinuity(self, *args)


    def VContinuity(self, *args):
        """
        VContinuity(Handle_GeomAdaptor_HSurface self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VContinuity(self, *args)


    def NbUIntervals(self, *args):
        """
        NbUIntervals(Handle_GeomAdaptor_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbUIntervals(self, *args)


    def NbVIntervals(self, *args):
        """
        NbVIntervals(Handle_GeomAdaptor_HSurface self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbVIntervals(self, *args)


    def UIntervals(self, *args):
        """
        UIntervals(Handle_GeomAdaptor_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UIntervals(self, *args)


    def VIntervals(self, *args):
        """
        VIntervals(Handle_GeomAdaptor_HSurface self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VIntervals(self, *args)


    def UTrim(self, *args):
        """
        UTrim(Handle_GeomAdaptor_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UTrim(self, *args)


    def VTrim(self, *args):
        """
        VTrim(Handle_GeomAdaptor_HSurface self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HSurface

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VTrim(self, *args)


    def IsUClosed(self, *args):
        """
        IsUClosed(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsUClosed(self, *args)


    def IsVClosed(self, *args):
        """
        IsVClosed(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsVClosed(self, *args)


    def IsUPeriodic(self, *args):
        """
        IsUPeriodic(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsUPeriodic(self, *args)


    def UPeriod(self, *args):
        """
        UPeriod(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UPeriod(self, *args)


    def IsVPeriodic(self, *args):
        """
        IsVPeriodic(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsVPeriodic(self, *args)


    def VPeriod(self, *args):
        """
        VPeriod(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VPeriod(self, *args)


    def Value(self, *args):
        """
        Value(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V) -> gp_Pnt

        :type U: float
        :type V: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, gp_Pnt P, gp_Vec D1U, gp_Vec D1V, gp_Vec D2U, gp_Vec D2V, gp_Vec D2UV, gp_Vec D3U, gp_Vec D3V, gp_Vec D3UUV, gp_Vec D3UVV)

        :type U: float
        :type V: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type D1U: OCC.wrapper.gp.gp_Vec
        :type D1V: OCC.wrapper.gp.gp_Vec
        :type D2U: OCC.wrapper.gp.gp_Vec
        :type D2V: OCC.wrapper.gp.gp_Vec
        :type D2UV: OCC.wrapper.gp.gp_Vec
        :type D3U: OCC.wrapper.gp.gp_Vec
        :type D3V: OCC.wrapper.gp.gp_Vec
        :type D3UUV: OCC.wrapper.gp.gp_Vec
        :type D3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomAdaptor_HSurface self, Standard_Real const U, Standard_Real const V, Standard_Integer const Nu, Standard_Integer const Nv) -> gp_Vec

        :type U: float
        :type V: float
        :type Nu: int
        :type Nv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_DN(self, *args)


    def UResolution(self, *args):
        """
        UResolution(Handle_GeomAdaptor_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UResolution(self, *args)


    def VResolution(self, *args):
        """
        VResolution(Handle_GeomAdaptor_HSurface self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VResolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_GeomAdaptor_HSurface self) -> GeomAbs_SurfaceType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_GetType(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_GeomAdaptor_HSurface self) -> gp_Pln

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_GeomAdaptor_HSurface self) -> gp_Cylinder

        :rtype: OCC.wrapper.gp.gp_Cylinder

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Cylinder(self, *args)


    def Cone(self, *args):
        """
        Cone(Handle_GeomAdaptor_HSurface self) -> gp_Cone

        :rtype: OCC.wrapper.gp.gp_Cone

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Cone(self, *args)


    def Sphere(self, *args):
        """
        Sphere(Handle_GeomAdaptor_HSurface self) -> gp_Sphere

        :rtype: OCC.wrapper.gp.gp_Sphere

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Sphere(self, *args)


    def Torus(self, *args):
        """
        Torus(Handle_GeomAdaptor_HSurface self) -> gp_Torus

        :rtype: OCC.wrapper.gp.gp_Torus

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Torus(self, *args)


    def UDegree(self, *args):
        """
        UDegree(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_UDegree(self, *args)


    def NbUPoles(self, *args):
        """
        NbUPoles(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbUPoles(self, *args)


    def VDegree(self, *args):
        """
        VDegree(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_VDegree(self, *args)


    def NbVPoles(self, *args):
        """
        NbVPoles(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbVPoles(self, *args)


    def NbUKnots(self, *args):
        """
        NbUKnots(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbUKnots(self, *args)


    def NbVKnots(self, *args):
        """
        NbVKnots(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_NbVKnots(self, *args)


    def IsURational(self, *args):
        """
        IsURational(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsURational(self, *args)


    def IsVRational(self, *args):
        """
        IsVRational(Handle_GeomAdaptor_HSurface self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsVRational(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_GeomAdaptor_HSurface self) -> Handle_Geom_BezierSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_GeomAdaptor_HSurface self) -> Handle_Geom_BSplineSurface

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_BSpline(self, *args)


    def AxeOfRevolution(self, *args):
        """
        AxeOfRevolution(Handle_GeomAdaptor_HSurface self) -> gp_Ax1

        :rtype: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_AxeOfRevolution(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_GeomAdaptor_HSurface self) -> gp_Dir

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Direction(self, *args)


    def BasisCurve(self, *args):
        """
        BasisCurve(Handle_GeomAdaptor_HSurface self) -> Handle_Adaptor3d_HCurve

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_BasisCurve(self, *args)


    def BasisSurface(self, *args):
        """
        BasisSurface(Handle_GeomAdaptor_HSurface self) -> Handle_Adaptor3d_HSurface

        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_BasisSurface(self, *args)


    def OffsetValue(self, *args):
        """
        OffsetValue(Handle_GeomAdaptor_HSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_OffsetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeomAdaptor_HSurface self)

        Memory deallocator for transient classes


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomAdaptor_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomAdaptor_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomAdaptor_HSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomAdaptor_HSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomAdaptor_HSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomAdaptor_HSurface self)

        Increments the reference counter of this object


        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomAdaptor_HSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomAdaptor.Handle_GeomAdaptor_HSurface_DecrementRefCounter(self, *args)

Handle_GeomAdaptor_HSurface_swigregister = _GeomAdaptor.Handle_GeomAdaptor_HSurface_swigregister
Handle_GeomAdaptor_HSurface_swigregister(Handle_GeomAdaptor_HSurface)

def Handle_GeomAdaptor_HSurface_DownCast(thing):
    return _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast(thing)
Handle_GeomAdaptor_HSurface_DownCast = _GeomAdaptor.Handle_GeomAdaptor_HSurface_DownCast



