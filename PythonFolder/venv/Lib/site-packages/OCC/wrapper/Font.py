# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Font')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Font')
    _Font = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Font', [dirname(__file__)])
        except ImportError:
            import _Font
            return _Font
        try:
            _mod = imp.load_module('_Font', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Font = swig_import_helper()
    del swig_import_helper
else:
    import _Font
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Font.delete_SwigPyIterator

    def value(self):
        return _Font.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Font.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Font.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Font.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Font.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Font.SwigPyIterator_copy(self)

    def next(self):
        return _Font.SwigPyIterator_next(self)

    def __next__(self):
        return _Font.SwigPyIterator___next__(self)

    def previous(self):
        return _Font.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Font.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Font.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Font.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Font.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Font.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Font.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Font.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Font.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Font.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Font.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Font.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Font.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Font.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Font.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Font.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Font.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Font.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Font.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Font.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Font.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Font.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Font.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Font.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Font.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Font.ptr_to_number(item)
ptr_to_number = _Font.ptr_to_number

def HashCode(*args):
    return _Font.HashCode(*args)
HashCode = _Font.HashCode

def ptr_equal(a, b):
    return _Font.ptr_equal(a, b)
ptr_equal = _Font.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
Font_FA_Undefined = _Font.Font_FA_Undefined
Font_FA_Regular = _Font.Font_FA_Regular
Font_FA_Bold = _Font.Font_FA_Bold
Font_FA_Italic = _Font.Font_FA_Italic
Font_FA_BoldItalic = _Font.Font_FA_BoldItalic
class Font_FTLibrary(Standard.Standard_Transient):
    """Wrapper over FT_Library. Provides access to FreeType library."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Font_FTLibrary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Font_FTLibrary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Font_FTLibrary self) -> Font_FTLibrary

        Initialize new FT_Library instance.


        """
        this = _Font.new_Font_FTLibrary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsValid(self, *args):
        """
        IsValid(Font_FTLibrary self) -> bool

        This method should always return true.
        @return true if FT_Library instance is valid.

        :rtype: bool

        """
        return _Font.Font_FTLibrary_IsValid(self, *args)


    def Instance(self, *args):
        """
        Instance(Font_FTLibrary self) -> FT_Library

        Access FT_Library instance.

        :rtype: FT_Library

        """
        return _Font.Font_FTLibrary_Instance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Font.Font_FTLibrary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Font.Font_FTLibrary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Font_FTLibrary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Font.delete_Font_FTLibrary
Font_FTLibrary_swigregister = _Font.Font_FTLibrary_swigregister
Font_FTLibrary_swigregister(Font_FTLibrary)

def Font_FTLibrary_get_type_name(*args):
    """
    Font_FTLibrary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Font.Font_FTLibrary_get_type_name(*args)

def Font_FTLibrary_get_type_descriptor(*args):
    """
    Font_FTLibrary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Font.Font_FTLibrary_get_type_descriptor(*args)

class Font_FTFont(Standard.Standard_Transient):
    """
    Wrapper over FreeType font.
    Notice that this class uses internal buffers for loaded glyphs
    and it is absolutely UNSAFE to load/read glyph from concurrent threads!
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Font_FTFont
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Font_FTFont(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Font_FTFont self, Handle_Font_FTLibrary theFTLib) -> Font_FTFont

        Create uninitialized instance.

        :type theFTLib: OCC.wrapper.Font.Handle_Font_FTLibrary

        """
        this = _Font.new_Font_FTFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsValid(self, *args):
        """
        IsValid(Font_FTFont self) -> bool

        @return true if font is loaded

        :rtype: bool

        """
        return _Font.Font_FTFont_IsValid(self, *args)


    def GlyphImage(self, *args):
        """
        @return image plane for currently rendered glyph

        :rtype: OCC.wrapper.Image.Image_PixMap

        """
        res = _Font.Font_FTFont_GlyphImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theFontPath, unsigned int const thePointSize, unsigned int const theResolution) -> bool
        Init(Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theFontName, Font_FontAspect const theFontAspect, unsigned int const thePointSize, unsigned int const theResolution) -> bool

        Initialize the font.
        @param theFontName   the font name
        @param theFontAspect the font style
        @param thePointSize  the face size in points (1/72 inch)
        @param theResolution the resolution of the target device in dpi
        @return true on success

        :type theFontName: OCC.wrapper.NCollection.NCollection_String
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type thePointSize: const unsigned int
        :type theResolution: const unsigned int
        :rtype: bool

        """
        return _Font.Font_FTFont_Init(self, *args)


    def IsSingleStrokeFont(self, *args):
        """
        IsSingleStrokeFont(Font_FTFont self) -> bool

        Return TRUE if this is single-stroke (one-line) font, FALSE by default.
        Such fonts define single-line glyphs instead of closed contours, so that they are rendered incorrectly by normal software.

        :rtype: bool

        """
        return _Font.Font_FTFont_IsSingleStrokeFont(self, *args)


    def SetSingleStrokeFont(self, *args):
        """
        SetSingleStrokeFont(Font_FTFont self, bool theIsSingleLine)

        Set if this font should be rendered as single-stroke (one-line).

        :type theIsSingleLine: bool

        """
        return _Font.Font_FTFont_SetSingleStrokeFont(self, *args)


    def Release(self, *args):
        """
        Release(Font_FTFont self)

        Release currently loaded font.


        """
        return _Font.Font_FTFont_Release(self, *args)


    def RenderGlyph(self, *args):
        """
        RenderGlyph(Font_FTFont self, Standard_Utf32Char const theChar) -> bool

        Render specified glyph into internal buffer (bitmap).

        :type theChar: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: bool

        """
        return _Font.Font_FTFont_RenderGlyph(self, *args)


    def GlyphMaxSizeX(self, *args):
        """
        GlyphMaxSizeX(Font_FTFont self) -> unsigned int

        @return maximal glyph width in pixels (rendered to bitmap).

        :rtype: unsigned int

        """
        return _Font.Font_FTFont_GlyphMaxSizeX(self, *args)


    def GlyphMaxSizeY(self, *args):
        """
        GlyphMaxSizeY(Font_FTFont self) -> unsigned int

        @return maximal glyph height in pixels (rendered to bitmap).

        :rtype: unsigned int

        """
        return _Font.Font_FTFont_GlyphMaxSizeY(self, *args)


    def Ascender(self, *args):
        """
        Ascender(Font_FTFont self) -> float

        @return vertical distance from the horizontal baseline to the highest character coordinate.

        :rtype: float

        """
        return _Font.Font_FTFont_Ascender(self, *args)


    def Descender(self, *args):
        """
        Descender(Font_FTFont self) -> float

        @return vertical distance from the horizontal baseline to the lowest character coordinate.

        :rtype: float

        """
        return _Font.Font_FTFont_Descender(self, *args)


    def LineSpacing(self, *args):
        """
        LineSpacing(Font_FTFont self) -> float

        @return default line spacing (the baseline-to-baseline distance).

        :rtype: float

        """
        return _Font.Font_FTFont_LineSpacing(self, *args)


    def PointSize(self, *args):
        """
        PointSize(Font_FTFont self) -> unsigned int

        Configured point size

        :rtype: unsigned int

        """
        return _Font.Font_FTFont_PointSize(self, *args)


    def SetWidthScaling(self, *args):
        """
        SetWidthScaling(Font_FTFont self, float const theScaleFactor)

        Setup glyph scaling along X-axis.
        By default glyphs are not scaled (scaling factor = 1.0)

        :type theScaleFactor: const float

        """
        return _Font.Font_FTFont_SetWidthScaling(self, *args)


    def AdvanceX(self, *args):
        """
        AdvanceX(Font_FTFont self, Standard_Utf32Char theUCharNext) -> float
        AdvanceX(Font_FTFont self, Standard_Utf32Char theUChar, Standard_Utf32Char theUCharNext) -> float

        Compute horizontal advance to the next character with kerning applied when applicable.
        Assuming text rendered horizontally.
        @param theUChar     the character to be loaded as current one
        @param theUCharNext the next character to compute advance from current one

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: float

        """
        return _Font.Font_FTFont_AdvanceX(self, *args)


    def AdvanceY(self, *args):
        """
        AdvanceY(Font_FTFont self, Standard_Utf32Char theUCharNext) -> float
        AdvanceY(Font_FTFont self, Standard_Utf32Char theUChar, Standard_Utf32Char theUCharNext) -> float

        Compute vertical advance to the next character with kerning applied when applicable.
        Assuming text rendered vertically.
        @param theUChar     the character to be loaded as current one
        @param theUCharNext the next character to compute advance from current one

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: float

        """
        return _Font.Font_FTFont_AdvanceY(self, *args)


    def GlyphsNumber(self, *args):
        """
        GlyphsNumber(Font_FTFont self) -> Standard_Integer

        @return glyphs number in this font.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Font_FTFont_GlyphsNumber(self, *args)


    def GlyphRect(self, *args):
        """
        GlyphRect(Font_FTFont self, Font_Rect & theRect)

        Retrieve glyph bitmap rectangle

        :type theRect: OCC.wrapper.Font.Font_Rect

        """
        return _Font.Font_FTFont_GlyphRect(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theString, Graphic3d_HorizontalTextAlignment const theAlignX, Graphic3d_VerticalTextAlignment const theAlignY) -> Font_Rect

        Computes bounding box of the given text using plain-text formatter (Font_TextFormatter).
        Note that bounding box takes into account the text alignment options.
        Its corners are relative to the text alignment anchor point, their coordinates can be negative.

        :type theString: OCC.wrapper.NCollection.NCollection_String
        :type theAlignX: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theAlignY: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment
        :rtype: OCC.wrapper.Font.Font_Rect

        """
        return _Font.Font_FTFont_BoundingBox(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Font.Font_FTFont_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Font.Font_FTFont_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Font_FTFont_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Font.delete_Font_FTFont
Font_FTFont_swigregister = _Font.Font_FTFont_swigregister
Font_FTFont_swigregister(Font_FTFont)

def Font_FTFont_get_type_name(*args):
    """
    Font_FTFont_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Font.Font_FTFont_get_type_name(*args)

def Font_FTFont_get_type_descriptor(*args):
    """
    Font_FTFont_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Font.Font_FTFont_get_type_descriptor(*args)

class Handle_Font_FTFont(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Font_FTFont self)

        Nullify the handle


        """
        return _Font.Handle_Font_FTFont_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Font_FTFont self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Font.Handle_Font_FTFont_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Font_FTFont self, Font_FTFont thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Font.Handle_Font_FTFont_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Font_FTFont self, Handle_Font_FTFont theHandle) -> Handle_Font_FTFont
        assign(Handle_Font_FTFont self, Font_FTFont thePtr) -> Handle_Font_FTFont
        assign(Handle_Font_FTFont self, Handle_Font_FTFont theHandle) -> Handle_Font_FTFont

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Font.Handle_Font_FTFont_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Font_FTFont self) -> Font_FTFont

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Font.Handle_Font_FTFont_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Font_FTFont self) -> Font_FTFont

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Font.Handle_Font_FTFont___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Font_FTFont self) -> Font_FTFont

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Font.Handle_Font_FTFont___ref__(self, *args)


    def __hash__(self):
        return _Font.Handle_Font_FTFont___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Font.Handle_Font_FTFont___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Font.new_Handle_Font_FTFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Font.Handle_Font_FTFont_DownCast)
    __swig_destroy__ = _Font.delete_Handle_Font_FTFont

    def IsValid(self, *args):
        """
        IsValid(Handle_Font_FTFont self) -> bool

        @return true if font is loaded

        :rtype: bool

        """
        return _Font.Handle_Font_FTFont_IsValid(self, *args)


    def GlyphImage(self, *args):
        """
        @return image plane for currently rendered glyph

        :rtype: OCC.wrapper.Image.Image_PixMap

        """
        res = _Font.Handle_Font_FTFont_GlyphImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theFontPath, unsigned int const thePointSize, unsigned int const theResolution) -> bool
        Init(Handle_Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theFontName, Font_FontAspect const theFontAspect, unsigned int const thePointSize, unsigned int const theResolution) -> bool

        Initialize the font.
        @param theFontName   the font name
        @param theFontAspect the font style
        @param thePointSize  the face size in points (1/72 inch)
        @param theResolution the resolution of the target device in dpi
        @return true on success

        :type theFontName: OCC.wrapper.NCollection.NCollection_String
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type thePointSize: const unsigned int
        :type theResolution: const unsigned int
        :rtype: bool

        """
        return _Font.Handle_Font_FTFont_Init(self, *args)


    def IsSingleStrokeFont(self, *args):
        """
        IsSingleStrokeFont(Handle_Font_FTFont self) -> bool

        Return TRUE if this is single-stroke (one-line) font, FALSE by default.
        Such fonts define single-line glyphs instead of closed contours, so that they are rendered incorrectly by normal software.

        :rtype: bool

        """
        return _Font.Handle_Font_FTFont_IsSingleStrokeFont(self, *args)


    def SetSingleStrokeFont(self, *args):
        """
        SetSingleStrokeFont(Handle_Font_FTFont self, bool theIsSingleLine)

        Set if this font should be rendered as single-stroke (one-line).

        :type theIsSingleLine: bool

        """
        return _Font.Handle_Font_FTFont_SetSingleStrokeFont(self, *args)


    def Release(self, *args):
        """
        Release(Handle_Font_FTFont self)

        Release currently loaded font.


        """
        return _Font.Handle_Font_FTFont_Release(self, *args)


    def RenderGlyph(self, *args):
        """
        RenderGlyph(Handle_Font_FTFont self, Standard_Utf32Char const theChar) -> bool

        Render specified glyph into internal buffer (bitmap).

        :type theChar: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: bool

        """
        return _Font.Handle_Font_FTFont_RenderGlyph(self, *args)


    def GlyphMaxSizeX(self, *args):
        """
        GlyphMaxSizeX(Handle_Font_FTFont self) -> unsigned int

        @return maximal glyph width in pixels (rendered to bitmap).

        :rtype: unsigned int

        """
        return _Font.Handle_Font_FTFont_GlyphMaxSizeX(self, *args)


    def GlyphMaxSizeY(self, *args):
        """
        GlyphMaxSizeY(Handle_Font_FTFont self) -> unsigned int

        @return maximal glyph height in pixels (rendered to bitmap).

        :rtype: unsigned int

        """
        return _Font.Handle_Font_FTFont_GlyphMaxSizeY(self, *args)


    def Ascender(self, *args):
        """
        Ascender(Handle_Font_FTFont self) -> float

        @return vertical distance from the horizontal baseline to the highest character coordinate.

        :rtype: float

        """
        return _Font.Handle_Font_FTFont_Ascender(self, *args)


    def Descender(self, *args):
        """
        Descender(Handle_Font_FTFont self) -> float

        @return vertical distance from the horizontal baseline to the lowest character coordinate.

        :rtype: float

        """
        return _Font.Handle_Font_FTFont_Descender(self, *args)


    def LineSpacing(self, *args):
        """
        LineSpacing(Handle_Font_FTFont self) -> float

        @return default line spacing (the baseline-to-baseline distance).

        :rtype: float

        """
        return _Font.Handle_Font_FTFont_LineSpacing(self, *args)


    def PointSize(self, *args):
        """
        PointSize(Handle_Font_FTFont self) -> unsigned int

        Configured point size

        :rtype: unsigned int

        """
        return _Font.Handle_Font_FTFont_PointSize(self, *args)


    def SetWidthScaling(self, *args):
        """
        SetWidthScaling(Handle_Font_FTFont self, float const theScaleFactor)

        Setup glyph scaling along X-axis.
        By default glyphs are not scaled (scaling factor = 1.0)

        :type theScaleFactor: const float

        """
        return _Font.Handle_Font_FTFont_SetWidthScaling(self, *args)


    def AdvanceX(self, *args):
        """
        AdvanceX(Handle_Font_FTFont self, Standard_Utf32Char theUCharNext) -> float
        AdvanceX(Handle_Font_FTFont self, Standard_Utf32Char theUChar, Standard_Utf32Char theUCharNext) -> float

        Compute horizontal advance to the next character with kerning applied when applicable.
        Assuming text rendered horizontally.
        @param theUChar     the character to be loaded as current one
        @param theUCharNext the next character to compute advance from current one

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: float

        """
        return _Font.Handle_Font_FTFont_AdvanceX(self, *args)


    def AdvanceY(self, *args):
        """
        AdvanceY(Handle_Font_FTFont self, Standard_Utf32Char theUCharNext) -> float
        AdvanceY(Handle_Font_FTFont self, Standard_Utf32Char theUChar, Standard_Utf32Char theUCharNext) -> float

        Compute vertical advance to the next character with kerning applied when applicable.
        Assuming text rendered vertically.
        @param theUChar     the character to be loaded as current one
        @param theUCharNext the next character to compute advance from current one

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: float

        """
        return _Font.Handle_Font_FTFont_AdvanceY(self, *args)


    def GlyphsNumber(self, *args):
        """
        GlyphsNumber(Handle_Font_FTFont self) -> Standard_Integer

        @return glyphs number in this font.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FTFont_GlyphsNumber(self, *args)


    def GlyphRect(self, *args):
        """
        GlyphRect(Handle_Font_FTFont self, Font_Rect & theRect)

        Retrieve glyph bitmap rectangle

        :type theRect: OCC.wrapper.Font.Font_Rect

        """
        return _Font.Handle_Font_FTFont_GlyphRect(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_Font_FTFont self, NCollection_UtfString_Standard_Utf8Char theString, Graphic3d_HorizontalTextAlignment const theAlignX, Graphic3d_VerticalTextAlignment const theAlignY) -> Font_Rect

        Computes bounding box of the given text using plain-text formatter (Font_TextFormatter).
        Note that bounding box takes into account the text alignment options.
        Its corners are relative to the text alignment anchor point, their coordinates can be negative.

        :type theString: OCC.wrapper.NCollection.NCollection_String
        :type theAlignX: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theAlignY: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment
        :rtype: OCC.wrapper.Font.Font_Rect

        """
        return _Font.Handle_Font_FTFont_BoundingBox(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Font_FTFont self) -> char const *

        :rtype: const char *

        """
        return _Font.Handle_Font_FTFont_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FTFont_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FTFont_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Font_FTFont self)

        Memory deallocator for transient classes


        """
        return _Font.Handle_Font_FTFont_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Font_FTFont self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Font_FTFont self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FTFont_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Font_FTFont self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Font_FTFont self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FTFont_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Font_FTFont self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Font.Handle_Font_FTFont_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Font_FTFont self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FTFont_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Font_FTFont self)

        Increments the reference counter of this object


        """
        return _Font.Handle_Font_FTFont_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Font_FTFont self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FTFont_DecrementRefCounter(self, *args)

Handle_Font_FTFont_swigregister = _Font.Handle_Font_FTFont_swigregister
Handle_Font_FTFont_swigregister(Handle_Font_FTFont)

def Handle_Font_FTFont_DownCast(thing):
    return _Font.Handle_Font_FTFont_DownCast(thing)
Handle_Font_FTFont_DownCast = _Font.Handle_Font_FTFont_DownCast

class Font_TextFormatter(object):
    """This class intended to prepare formatted text."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Font_TextFormatter self) -> Font_TextFormatter

        Default constructor.


        """
        this = _Font.new_Font_TextFormatter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetupAlignment(self, *args):
        """
        SetupAlignment(Font_TextFormatter self, Graphic3d_HorizontalTextAlignment const theAlignX, Graphic3d_VerticalTextAlignment const theAlignY)

        Setup alignment style.

        :type theAlignX: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theAlignY: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment

        """
        return _Font.Font_TextFormatter_SetupAlignment(self, *args)


    def Reset(self, *args):
        """
        Reset(Font_TextFormatter self)

        Reset current progress.


        """
        return _Font.Font_TextFormatter_Reset(self, *args)


    def Append(self, *args):
        """
        Append(Font_TextFormatter self, NCollection_UtfString_Standard_Utf8Char theString, Font_FTFont theFont)

        Render specified text to inner buffer.

        :type theString: OCC.wrapper.NCollection.NCollection_String
        :type theFont: OCC.wrapper.Font.Font_FTFont

        """
        return _Font.Font_TextFormatter_Append(self, *args)


    def Format(self, *args):
        """
        Format(Font_TextFormatter self)

        Perform formatting on the buffered text.
        Should not be called more than once after initialization!


        """
        return _Font.Font_TextFormatter_Format(self, *args)


    def TopLeft(self, *args):
        """
        Returns specific glyph rectangle.

        :type theIndex: int
        :rtype: OCC.wrapper.Font.NCollection_Vec2_Standard_ShortReal

        """
        res = _Font.Font_TextFormatter_TopLeft(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def String(self, *args):
        """
        Returns current rendering string.

        :rtype: OCC.wrapper.NCollection.NCollection_String

        """
        res = _Font.Font_TextFormatter_String(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TabSize(self, *args):
        """
        TabSize(Font_TextFormatter self) -> Standard_Integer

        Returns tab size.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Font_TextFormatter_TabSize(self, *args)


    def ResultWidth(self, *args):
        """
        ResultWidth(Font_TextFormatter self) -> Standard_ShortReal

        @return width of formatted text.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Font.Font_TextFormatter_ResultWidth(self, *args)


    def ResultHeight(self, *args):
        """
        ResultHeight(Font_TextFormatter self) -> Standard_ShortReal

        @return height of formatted text.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Font.Font_TextFormatter_ResultHeight(self, *args)


    def BndBox(self, *args):
        """
        BndBox(Font_TextFormatter self, Font_Rect & theBndBox)

        @param bounding box.

        :type theBndBox: OCC.wrapper.Font.Font_Rect

        """
        return _Font.Font_TextFormatter_BndBox(self, *args)

    __swig_destroy__ = _Font.delete_Font_TextFormatter
Font_TextFormatter_swigregister = _Font.Font_TextFormatter_swigregister
Font_TextFormatter_swigregister(Font_TextFormatter)

class Handle_Font_FTLibrary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Font_FTLibrary self)

        Nullify the handle


        """
        return _Font.Handle_Font_FTLibrary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Font_FTLibrary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Font.Handle_Font_FTLibrary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Font_FTLibrary self, Font_FTLibrary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Font.Handle_Font_FTLibrary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Font_FTLibrary self, Handle_Font_FTLibrary theHandle) -> Handle_Font_FTLibrary
        assign(Handle_Font_FTLibrary self, Font_FTLibrary thePtr) -> Handle_Font_FTLibrary
        assign(Handle_Font_FTLibrary self, Handle_Font_FTLibrary theHandle) -> Handle_Font_FTLibrary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Font.Handle_Font_FTLibrary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Font_FTLibrary self) -> Font_FTLibrary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Font.Handle_Font_FTLibrary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Font_FTLibrary self) -> Font_FTLibrary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Font.Handle_Font_FTLibrary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Font_FTLibrary self) -> Font_FTLibrary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Font.Handle_Font_FTLibrary___ref__(self, *args)


    def __hash__(self):
        return _Font.Handle_Font_FTLibrary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Font.Handle_Font_FTLibrary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Font.new_Handle_Font_FTLibrary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Font.Handle_Font_FTLibrary_DownCast)
    __swig_destroy__ = _Font.delete_Handle_Font_FTLibrary

    def IsValid(self, *args):
        """
        IsValid(Handle_Font_FTLibrary self) -> bool

        This method should always return true.
        @return true if FT_Library instance is valid.

        :rtype: bool

        """
        return _Font.Handle_Font_FTLibrary_IsValid(self, *args)


    def Instance(self, *args):
        """
        Instance(Handle_Font_FTLibrary self) -> FT_Library

        Access FT_Library instance.

        :rtype: FT_Library

        """
        return _Font.Handle_Font_FTLibrary_Instance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Font_FTLibrary self) -> char const *

        :rtype: const char *

        """
        return _Font.Handle_Font_FTLibrary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FTLibrary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FTLibrary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Font_FTLibrary self)

        Memory deallocator for transient classes


        """
        return _Font.Handle_Font_FTLibrary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Font_FTLibrary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Font_FTLibrary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FTLibrary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Font_FTLibrary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Font_FTLibrary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FTLibrary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Font_FTLibrary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Font.Handle_Font_FTLibrary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Font_FTLibrary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FTLibrary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Font_FTLibrary self)

        Increments the reference counter of this object


        """
        return _Font.Handle_Font_FTLibrary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Font_FTLibrary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FTLibrary_DecrementRefCounter(self, *args)

Handle_Font_FTLibrary_swigregister = _Font.Handle_Font_FTLibrary_swigregister
Handle_Font_FTLibrary_swigregister(Handle_Font_FTLibrary)

def Handle_Font_FTLibrary_DownCast(thing):
    return _Font.Handle_Font_FTLibrary_DownCast(thing)
Handle_Font_FTLibrary_DownCast = _Font.Handle_Font_FTLibrary_DownCast

class Font_BRepFont(object):
    """
    This tool provides basic services for rendering of vectorized text glyphs as BRep shapes.
    Single instance initialize single font for sequential glyphs rendering with implicit caching of already rendered glyphs.
    Thus position of each glyph in the text is specified by shape location.

    Please notice that this implementation uses mutex for thread-safety access,
    thus may lead to performance penalties in case of concurrent access.
    Although caching should eliminate this issue after rendering of sufficient number of glyphs.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Font_BRepFont
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Font_BRepFont(self) 
            return h


    def Release(self, *args):
        """
        Release(Font_BRepFont self)

        Release currently loaded font.


        """
        return _Font.Font_BRepFont_Release(self, *args)


    def Init(self, *args):
        """
        Init(Font_BRepFont self, NCollection_UtfString_Standard_Utf8Char theFontPath, Standard_Real const theSize) -> bool
        Init(Font_BRepFont self, NCollection_UtfString_Standard_Utf8Char theFontName, Font_FontAspect const theFontAspect, Standard_Real const theSize) -> bool

        Initialize the font.
        Please take into account that size is specified NOT in typography points (pt.).
        If you need to specify size in points, value should be converted.
        Formula for pt. -> m conversion:
        aSizeMeters = 0.0254 * theSizePt / 72.0
        @param theFontName   the font name
        @param theFontAspect the font style
        @param theSize       the face size in model units
        @return true on success

        :type theFontName: OCC.wrapper.NCollection.NCollection_String
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type theSize: float
        :rtype: bool

        """
        return _Font.Font_BRepFont_Init(self, *args)


    def RenderGlyph(self, *args):
        """
        RenderGlyph(Font_BRepFont self, Standard_Utf32Char const & theChar) -> TopoDS_Shape

        Render single glyph as TopoDS_Shape.
        @param theChar glyph identifier
        @return rendered glyph within cache, might be NULL shape

        :type theChar: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _Font.Font_BRepFont_RenderGlyph(self, *args)


    def SetCompositeCurveMode(self, *args):
        """
        SetCompositeCurveMode(Font_BRepFont self, Standard_Boolean const theToConcatenate)

        Setup glyph geometry construction mode.
        By default algorithm creates independent TopoDS_Edge
        for each original curve in the glyph (line segment or Bezie curve).
        Algorithm might optionally create composite BSpline curve for each contour
        which reduces memory footprint but limits curve class to C0.
        Notice that altering this flag clears currently accumulated cache!

        :type theToConcatenate: bool

        """
        return _Font.Font_BRepFont_SetCompositeCurveMode(self, *args)


    def SetWidthScaling(self, *args):
        """
        SetWidthScaling(Font_BRepFont self, float const theScaleFactor)

        Setup glyph scaling along X-axis.
        By default glyphs are not scaled (scaling factor = 1.0)

        :type theScaleFactor: const float

        """
        return _Font.Font_BRepFont_SetWidthScaling(self, *args)


    def Ascender(self, *args):
        """
        Ascender(Font_BRepFont self) -> Standard_Real

        @return vertical distance from the horizontal baseline to the highest character coordinate.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_Ascender(self, *args)


    def Descender(self, *args):
        """
        Descender(Font_BRepFont self) -> Standard_Real

        @return vertical distance from the horizontal baseline to the lowest character coordinate.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_Descender(self, *args)


    def LineSpacing(self, *args):
        """
        LineSpacing(Font_BRepFont self) -> Standard_Real

        @return default line spacing (the baseline-to-baseline distance).

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_LineSpacing(self, *args)


    def PointSize(self, *args):
        """
        PointSize(Font_BRepFont self) -> Standard_Real

        Configured point size

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_PointSize(self, *args)


    def AdvanceX(self, *args):
        """
        AdvanceX(Font_BRepFont self, Standard_Utf32Char const theUCharNext) -> Standard_Real
        AdvanceX(Font_BRepFont self, Standard_Utf32Char const theUChar, Standard_Utf32Char const theUCharNext) -> Standard_Real

        Compute advance to the next character with kerning applied when applicable.
        Assuming text rendered horizontally.

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_AdvanceX(self, *args)


    def AdvanceY(self, *args):
        """
        AdvanceY(Font_BRepFont self, Standard_Utf32Char const theUCharNext) -> Standard_Real
        AdvanceY(Font_BRepFont self, Standard_Utf32Char const theUChar, Standard_Utf32Char const theUCharNext) -> Standard_Real

        Compute advance to the next character with kerning applied when applicable.
        Assuming text rendered vertically.

        :type theUChar: OCC.wrapper.Standard.Standard_Utf32Char
        :type theUCharNext: OCC.wrapper.Standard.Standard_Utf32Char
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_AdvanceY(self, *args)


    def Scale(self, *args):
        """
        Scale(Font_BRepFont self) -> Standard_Real

        Returns scaling factor for current font size.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Font.Font_BRepFont_Scale(self, *args)


    def Mutex(self, *args):
        """
        Mutex(Font_BRepFont self) -> Standard_Mutex

        Returns mutex.

        :rtype: OCC.wrapper.Standard.Standard_Mutex

        """
        return _Font.Font_BRepFont_Mutex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Font.Font_BRepFont_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Font.Font_BRepFont_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Font_BRepFont_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


Font_BRepFont_swigregister = _Font.Font_BRepFont_swigregister
Font_BRepFont_swigregister(Font_BRepFont)

def Font_BRepFont_get_type_name(*args):
    """
    Font_BRepFont_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Font.Font_BRepFont_get_type_name(*args)

def Font_BRepFont_get_type_descriptor(*args):
    """
    Font_BRepFont_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Font.Font_BRepFont_get_type_descriptor(*args)

class Font_FontMgr(Standard.Standard_Transient):
    """Collects and provides information about available fonts in system."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Font_FontMgr
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Font_FontMgr(self) 
            return h


    def GetInstance(*args):
        """
        GetInstance() -> Handle_Font_FontMgr

        :rtype: OCC.wrapper.Font.Handle_Font_FontMgr

        """
        return _Font.Font_FontMgr_GetInstance(*args)

    GetInstance = staticmethod(GetInstance)

    def GetAvailableFonts(self, *args):
        """
        :rtype: OCC.wrapper.Font.Font_NListOfSystemFont

        """
        res = _Font.Font_FontMgr_GetAvailableFonts(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAvailableFontsNames(self, *args):
        """
        GetAvailableFontsNames(Font_FontMgr self, NCollection_Sequence_Handle_TCollection_HAsciiString theFontsNames)

        Returns sequence of available fonts names

        :type theFontsNames: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _Font.Font_FontMgr_GetAvailableFontsNames(self, *args)


    def GetFont(self, *args):
        """
        GetFont(Font_FontMgr self, Handle_TCollection_HAsciiString theFontName, Font_FontAspect const theFontAspect, Standard_Integer const theFontSize) -> Handle_Font_SystemFont

        Returns font that match given parameters.
        If theFontName is empty string returned font can have any FontName.
        If theFontAspect is Font_FA_Undefined returned font can have any FontAspect.
        If theFontSize is "-1" returned font can have any FontSize.

        :type theFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type theFontSize: int
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Font_FontMgr_GetFont(self, *args)


    def FindFont(self, *args):
        """
        FindFont(Font_FontMgr self, Handle_TCollection_HAsciiString theFontName, Font_FontAspect const theFontAspect, Standard_Integer const theFontSize) -> Handle_Font_SystemFont

        Tries to find font by given parameters.
        If the specified font is not found tries to use font names mapping.
        If the requested family name not found -> search for any font family
        with given aspect and height. If the font is still not found, returns
        any font available in the system. Returns NULL in case when the fonts
        are not found in the system.

        :type theFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type theFontSize: int
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Font_FontMgr_FindFont(self, *args)


    def CheckFont(self, *args):
        """
        CheckFont(Font_FontMgr self, Standard_CString const theFontPath) -> Handle_Font_SystemFont

        Read font file and retrieve information from it.

        :type theFontPath: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Font_FontMgr_CheckFont(self, *args)


    def RegisterFont(self, *args):
        """
        RegisterFont(Font_FontMgr self, Handle_Font_SystemFont theFont, Standard_Boolean const theToOverride) -> Standard_Boolean

        Register new font.
        If there is existing entity with the same name and properties but different path
        then font will will be overridden or ignored depending on theToOverride flag.

        :type theFont: OCC.wrapper.Font.Handle_Font_SystemFont
        :type theToOverride: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Font_FontMgr_RegisterFont(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Font.Font_FontMgr_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Font.Font_FontMgr_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Font_FontMgr_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Font.delete_Font_FontMgr
Font_FontMgr_swigregister = _Font.Font_FontMgr_swigregister
Font_FontMgr_swigregister(Font_FontMgr)

def Font_FontMgr_GetInstance(*args):
    """
    Font_FontMgr_GetInstance() -> Handle_Font_FontMgr

    :rtype: OCC.wrapper.Font.Handle_Font_FontMgr

    """
    return _Font.Font_FontMgr_GetInstance(*args)

def Font_FontMgr_get_type_name(*args):
    """
    Font_FontMgr_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Font.Font_FontMgr_get_type_name(*args)

def Font_FontMgr_get_type_descriptor(*args):
    """
    Font_FontMgr_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Font.Font_FontMgr_get_type_descriptor(*args)

class Font_SystemFont(Standard.Standard_Transient):
    """This class stores information about the font, which is merely a file path and cached metadata about the font."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Font_SystemFont
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Font_SystemFont(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Font.Font_SystemFont_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Font.Font_SystemFont_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Font_SystemFont_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Font_SystemFont self) -> Font_SystemFont
        __init__(Font_SystemFont self, Handle_TCollection_HAsciiString theFontName, Font_FontAspect const theFontAspect, Handle_TCollection_HAsciiString theFilePath) -> Font_SystemFont
        __init__(Font_SystemFont self, Handle_TCollection_HAsciiString theXLFD, Handle_TCollection_HAsciiString theFilePath) -> Font_SystemFont

        Creates a font object and initialize class fields with values taken from XLFD (X Logical Font Description)

        :type theXLFD: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theFilePath: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        this = _Font.new_Font_SystemFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def FontName(self, *args):
        """
        Returns font family name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _Font.Font_SystemFont_FontName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FontPath(self, *args):
        """
        Returns font file path.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _Font.Font_SystemFont_FontPath(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FontAspect(self, *args):
        """
        FontAspect(Font_SystemFont self) -> Font_FontAspect

        Returns font aspect.

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Font.Font_SystemFont_FontAspect(self, *args)


    def FontHeight(self, *args):
        """
        FontHeight(Font_SystemFont self) -> Standard_Integer

        Returns font height.
        If returned value is equal -1 it means that font is resizable.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Font_SystemFont_FontHeight(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Font_SystemFont self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Font_SystemFont_IsValid(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Font_SystemFont self, Handle_Font_SystemFont theOtherFont) -> Standard_Boolean

        Return true if the FontName, FontAspect and FontSize are the same.

        :type theOtherFont: OCC.wrapper.Font.Handle_Font_SystemFont
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Font_SystemFont_IsEqual(self, *args)


    def IsSingleStrokeFont(self, *args):
        """
        IsSingleStrokeFont(Font_SystemFont self) -> Standard_Boolean

        Return TRUE if this is single-stroke (one-line) font, FALSE by default.
        Such fonts define single-line glyphs instead of closed contours, so that they are rendered incorrectly by normal software.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Font_SystemFont_IsSingleStrokeFont(self, *args)


    def SetSingleStrokeFont(self, *args):
        """
        SetSingleStrokeFont(Font_SystemFont self, Standard_Boolean theIsSingleLine)

        Set if this font should be rendered as single-stroke (one-line).

        :type theIsSingleLine: bool

        """
        return _Font.Font_SystemFont_SetSingleStrokeFont(self, *args)

    __swig_destroy__ = _Font.delete_Font_SystemFont
Font_SystemFont_swigregister = _Font.Font_SystemFont_swigregister
Font_SystemFont_swigregister(Font_SystemFont)

def Font_SystemFont_get_type_name(*args):
    """
    Font_SystemFont_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Font.Font_SystemFont_get_type_name(*args)

def Font_SystemFont_get_type_descriptor(*args):
    """
    Font_SystemFont_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Font.Font_SystemFont_get_type_descriptor(*args)

class NCollection_List_Handle_Font_SystemFont(NCollection.NCollection_BaseList):
    """
    Purpose:      Simple list to link  items together keeping the first 
    and the last one.
    Inherits BaseList, adding the data item to each node.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_List_Handle_Font_SystemFont self) -> NCollection_List< opencascade::handle< Font_SystemFont > >::iterator

        Returns an iterator pointing to the first element in the list.

        :rtype: iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_List_Handle_Font_SystemFont self) -> NCollection_List< opencascade::handle< Font_SystemFont > >::iterator

        Returns an iterator referring to the past-the-end element in the list.

        :rtype: iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_List_Handle_Font_SystemFont self) -> NCollection_List< opencascade::handle< Font_SystemFont > >::const_iterator

        Returns a const iterator pointing to the first element in the list.

        :rtype: const_iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_List_Handle_Font_SystemFont self) -> NCollection_List< opencascade::handle< Font_SystemFont > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the list.

        :rtype: const_iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:      Simple list to link  items together keeping the first 
        and the last one.
        Inherits BaseList, adding the data item to each node.
        """
        this = _Font.new_NCollection_List_Handle_Font_SystemFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_List_Handle_Font_SystemFont self) -> Standard_Integer

        Size - Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Size(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther) -> NCollection_List_Handle_Font_SystemFont

        Replace this list by the items of another list (theOther parameter).
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther) -> NCollection_List_Handle_Font_SystemFont

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :rtype: OCC.wrapper.NCollection.NCollection_List

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_assign(self, *args)


    def Clear(self, *args):
        """
        Clear(NCollection_List_Handle_Font_SystemFont self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear this list

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Clear(self, *args)


    def First(self, *args):
        """
        First item

        :rtype: const TheItemType &

        """
        res = _Font.NCollection_List_Handle_Font_SystemFont_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Last(self, *args):
        """
        Last item

        :rtype: const TheItemType &

        """
        res = _Font.NCollection_List_Handle_Font_SystemFont_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(NCollection_List_Handle_Font_SystemFont self, Handle_Font_SystemFont theItem) -> Handle_Font_SystemFont
        Append(NCollection_List_Handle_Font_SystemFont self, Handle_Font_SystemFont theItem, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter)
        Append(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther)

        Append another list at the end

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_List_Handle_Font_SystemFont self, Handle_Font_SystemFont theItem) -> Handle_Font_SystemFont
        Prepend(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther)

        Prepend another list at the beginning

        :type theOther: OCC.wrapper.NCollection.NCollection_List

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Prepend(self, *args)


    def RemoveFirst(self, *args):
        """
        RemoveFirst(NCollection_List_Handle_Font_SystemFont self)

        RemoveFirst item


        """
        return _Font.NCollection_List_Handle_Font_SystemFont_RemoveFirst(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_List_Handle_Font_SystemFont self, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter)

        Remove item pointed by iterator theIter; 
        theIter is then set to the next item

        :type theIter: Iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Remove(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_List_Handle_Font_SystemFont self, Handle_Font_SystemFont theItem, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter) -> Handle_Font_SystemFont
        InsertBefore(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter)

        InsertBefore

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_List_Handle_Font_SystemFont self, Handle_Font_SystemFont theItem, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter) -> Handle_Font_SystemFont
        InsertAfter(NCollection_List_Handle_Font_SystemFont self, NCollection_List_Handle_Font_SystemFont theOther, NCollection_List< opencascade::handle< Font_SystemFont > >::Iterator & theIter)

        InsertAfter

        :type theOther: OCC.wrapper.NCollection.NCollection_List
        :type theIter: Iterator

        """
        return _Font.NCollection_List_Handle_Font_SystemFont_InsertAfter(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_List_Handle_Font_SystemFont self)

        Reverse the list


        """
        return _Font.NCollection_List_Handle_Font_SystemFont_Reverse(self, *args)


    def __iter__(self):
        return _Font.NCollection_List_Handle_Font_SystemFont___iter__(self)
    __swig_destroy__ = _Font.delete_NCollection_List_Handle_Font_SystemFont
NCollection_List_Handle_Font_SystemFont_swigregister = _Font.NCollection_List_Handle_Font_SystemFont_swigregister
NCollection_List_Handle_Font_SystemFont_swigregister(NCollection_List_Handle_Font_SystemFont)

class NCollection_List_Handle_Font_SystemFont_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Font.new_NCollection_List_Handle_Font_SystemFont_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Font.delete_NCollection_List_Handle_Font_SystemFont_IteratorHelper

    def __next__(self):
        return _Font.NCollection_List_Handle_Font_SystemFont_IteratorHelper___next__(self)
NCollection_List_Handle_Font_SystemFont_IteratorHelper_swigregister = _Font.NCollection_List_Handle_Font_SystemFont_IteratorHelper_swigregister
NCollection_List_Handle_Font_SystemFont_IteratorHelper_swigregister(NCollection_List_Handle_Font_SystemFont_IteratorHelper)


try:
	Font_NListOfSystemFont = NCollection_List_Handle_Font_SystemFont
except NameError:
	pass # does not exist, probably ignored

class Handle_Font_FontMgr(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Font_FontMgr self)

        Nullify the handle


        """
        return _Font.Handle_Font_FontMgr_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Font_FontMgr self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Font.Handle_Font_FontMgr_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Font_FontMgr self, Font_FontMgr thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Font.Handle_Font_FontMgr_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Font_FontMgr self, Handle_Font_FontMgr theHandle) -> Handle_Font_FontMgr
        assign(Handle_Font_FontMgr self, Font_FontMgr thePtr) -> Handle_Font_FontMgr
        assign(Handle_Font_FontMgr self, Handle_Font_FontMgr theHandle) -> Handle_Font_FontMgr

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Font.Handle_Font_FontMgr_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Font_FontMgr self) -> Font_FontMgr

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Font.Handle_Font_FontMgr_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Font_FontMgr self) -> Font_FontMgr

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Font.Handle_Font_FontMgr___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Font_FontMgr self) -> Font_FontMgr

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Font.Handle_Font_FontMgr___ref__(self, *args)


    def __hash__(self):
        return _Font.Handle_Font_FontMgr___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Font.Handle_Font_FontMgr___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Font.new_Handle_Font_FontMgr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Font.Handle_Font_FontMgr_DownCast)
    __swig_destroy__ = _Font.delete_Handle_Font_FontMgr

    def GetInstance(self, *args):
        """
        GetInstance(Handle_Font_FontMgr self) -> Handle_Font_FontMgr

        :rtype: OCC.wrapper.Font.Handle_Font_FontMgr

        """
        return _Font.Handle_Font_FontMgr_GetInstance(self, *args)


    def GetAvailableFonts(self, *args):
        """
        :rtype: OCC.wrapper.Font.Font_NListOfSystemFont

        """
        res = _Font.Handle_Font_FontMgr_GetAvailableFonts(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetAvailableFontsNames(self, *args):
        """
        GetAvailableFontsNames(Handle_Font_FontMgr self, NCollection_Sequence_Handle_TCollection_HAsciiString theFontsNames)

        Returns sequence of available fonts names

        :type theFontsNames: OCC.wrapper.TColStd.TColStd_SequenceOfHAsciiString

        """
        return _Font.Handle_Font_FontMgr_GetAvailableFontsNames(self, *args)


    def GetFont(self, *args):
        """
        GetFont(Handle_Font_FontMgr self, Handle_TCollection_HAsciiString theFontName, Font_FontAspect const theFontAspect, Standard_Integer const theFontSize) -> Handle_Font_SystemFont

        Returns font that match given parameters.
        If theFontName is empty string returned font can have any FontName.
        If theFontAspect is Font_FA_Undefined returned font can have any FontAspect.
        If theFontSize is "-1" returned font can have any FontSize.

        :type theFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type theFontSize: int
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Handle_Font_FontMgr_GetFont(self, *args)


    def FindFont(self, *args):
        """
        FindFont(Handle_Font_FontMgr self, Handle_TCollection_HAsciiString theFontName, Font_FontAspect const theFontAspect, Standard_Integer const theFontSize) -> Handle_Font_SystemFont

        Tries to find font by given parameters.
        If the specified font is not found tries to use font names mapping.
        If the requested family name not found -> search for any font family
        with given aspect and height. If the font is still not found, returns
        any font available in the system. Returns NULL in case when the fonts
        are not found in the system.

        :type theFontName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect
        :type theFontSize: int
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Handle_Font_FontMgr_FindFont(self, *args)


    def CheckFont(self, *args):
        """
        CheckFont(Handle_Font_FontMgr self, Standard_CString const theFontPath) -> Handle_Font_SystemFont

        Read font file and retrieve information from it.

        :type theFontPath: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Font.Handle_Font_SystemFont

        """
        return _Font.Handle_Font_FontMgr_CheckFont(self, *args)


    def RegisterFont(self, *args):
        """
        RegisterFont(Handle_Font_FontMgr self, Handle_Font_SystemFont theFont, Standard_Boolean const theToOverride) -> Standard_Boolean

        Register new font.
        If there is existing entity with the same name and properties but different path
        then font will will be overridden or ignored depending on theToOverride flag.

        :type theFont: OCC.wrapper.Font.Handle_Font_SystemFont
        :type theToOverride: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FontMgr_RegisterFont(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Font_FontMgr self) -> char const *

        :rtype: const char *

        """
        return _Font.Handle_Font_FontMgr_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FontMgr_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_FontMgr_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Font_FontMgr self)

        Memory deallocator for transient classes


        """
        return _Font.Handle_Font_FontMgr_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Font_FontMgr self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Font_FontMgr self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FontMgr_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Font_FontMgr self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Font_FontMgr self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_FontMgr_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Font_FontMgr self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Font.Handle_Font_FontMgr_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Font_FontMgr self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FontMgr_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Font_FontMgr self)

        Increments the reference counter of this object


        """
        return _Font.Handle_Font_FontMgr_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Font_FontMgr self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_FontMgr_DecrementRefCounter(self, *args)

Handle_Font_FontMgr_swigregister = _Font.Handle_Font_FontMgr_swigregister
Handle_Font_FontMgr_swigregister(Handle_Font_FontMgr)

def Handle_Font_FontMgr_DownCast(thing):
    return _Font.Handle_Font_FontMgr_DownCast(thing)
Handle_Font_FontMgr_DownCast = _Font.Handle_Font_FontMgr_DownCast

class Font_BRepTextBuilder(object):
    """Represents class for applying text formatting."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Perform(self, *args):
        """
        Perform(Font_BRepTextBuilder self, Font_BRepFont theFont, Font_TextFormatter theFormatter, gp_Ax3 thePenLoc) -> TopoDS_Shape
        Perform(Font_BRepTextBuilder self, Font_BRepFont theFont, NCollection_UtfString_Standard_Utf8Char theString, gp_Ax3 thePenLoc, Graphic3d_HorizontalTextAlignment const theHAlign=Graphic3d_HTA_LEFT, Graphic3d_VerticalTextAlignment const theVAlign=Graphic3d_VTA_BOTTOM) -> TopoDS_Shape

        Render text as BRep shape.
        @param theString text in UTF-8 encoding
        @param thePenLoc start position and orientation on the baseline
        @param theHAlign horizontal alignment of the text
        @param theVAlign vertical alignment of the text
        @return result shape with pen transformation applied as shape location

        :type theFont: OCC.wrapper.Font.Font_BRepFont
        :type theString: OCC.wrapper.NCollection.NCollection_String
        :type thePenLoc: OCC.wrapper.gp.gp_Ax3
        :type theHAlign: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theVAlign: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _Font.Font_BRepTextBuilder_Perform(self, *args)


    def __init__(self):
        """Represents class for applying text formatting."""
        this = _Font.new_Font_BRepTextBuilder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Font.delete_Font_BRepTextBuilder
Font_BRepTextBuilder_swigregister = _Font.Font_BRepTextBuilder_swigregister
Font_BRepTextBuilder_swigregister(Font_BRepTextBuilder)

class Handle_Font_SystemFont(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Font_SystemFont self)

        Nullify the handle


        """
        return _Font.Handle_Font_SystemFont_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Font_SystemFont self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Font.Handle_Font_SystemFont_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Font_SystemFont self, Font_SystemFont thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Font.Handle_Font_SystemFont_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Font_SystemFont self, Handle_Font_SystemFont theHandle) -> Handle_Font_SystemFont
        assign(Handle_Font_SystemFont self, Font_SystemFont thePtr) -> Handle_Font_SystemFont
        assign(Handle_Font_SystemFont self, Handle_Font_SystemFont theHandle) -> Handle_Font_SystemFont

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Font.Handle_Font_SystemFont_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Font_SystemFont self) -> Font_SystemFont

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Font.Handle_Font_SystemFont_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Font_SystemFont self) -> Font_SystemFont

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Font.Handle_Font_SystemFont___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Font_SystemFont self) -> Font_SystemFont

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Font.Handle_Font_SystemFont___ref__(self, *args)


    def __hash__(self):
        return _Font.Handle_Font_SystemFont___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Font.Handle_Font_SystemFont___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Font.new_Handle_Font_SystemFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Font.Handle_Font_SystemFont_DownCast)
    __swig_destroy__ = _Font.delete_Handle_Font_SystemFont

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Font_SystemFont self) -> char const *

        :rtype: const char *

        """
        return _Font.Handle_Font_SystemFont_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_SystemFont_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Font.Handle_Font_SystemFont_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FontName(self, *args):
        """
        Returns font family name.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _Font.Handle_Font_SystemFont_FontName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FontPath(self, *args):
        """
        Returns font file path.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        res = _Font.Handle_Font_SystemFont_FontPath(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FontAspect(self, *args):
        """
        FontAspect(Handle_Font_SystemFont self) -> Font_FontAspect

        Returns font aspect.

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Font.Handle_Font_SystemFont_FontAspect(self, *args)


    def FontHeight(self, *args):
        """
        FontHeight(Handle_Font_SystemFont self) -> Standard_Integer

        Returns font height.
        If returned value is equal -1 it means that font is resizable.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_SystemFont_FontHeight(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Font_SystemFont self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_SystemFont_IsValid(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Handle_Font_SystemFont self, Handle_Font_SystemFont theOtherFont) -> Standard_Boolean

        Return true if the FontName, FontAspect and FontSize are the same.

        :type theOtherFont: OCC.wrapper.Font.Handle_Font_SystemFont
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_SystemFont_IsEqual(self, *args)


    def IsSingleStrokeFont(self, *args):
        """
        IsSingleStrokeFont(Handle_Font_SystemFont self) -> Standard_Boolean

        Return TRUE if this is single-stroke (one-line) font, FALSE by default.
        Such fonts define single-line glyphs instead of closed contours, so that they are rendered incorrectly by normal software.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_SystemFont_IsSingleStrokeFont(self, *args)


    def SetSingleStrokeFont(self, *args):
        """
        SetSingleStrokeFont(Handle_Font_SystemFont self, Standard_Boolean theIsSingleLine)

        Set if this font should be rendered as single-stroke (one-line).

        :type theIsSingleLine: bool

        """
        return _Font.Handle_Font_SystemFont_SetSingleStrokeFont(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Font_SystemFont self)

        Memory deallocator for transient classes


        """
        return _Font.Handle_Font_SystemFont_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Font_SystemFont self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Font_SystemFont self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_SystemFont_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Font_SystemFont self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Font_SystemFont self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Font.Handle_Font_SystemFont_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Font_SystemFont self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Font.Handle_Font_SystemFont_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Font_SystemFont self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_SystemFont_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Font_SystemFont self)

        Increments the reference counter of this object


        """
        return _Font.Handle_Font_SystemFont_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Font_SystemFont self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Font.Handle_Font_SystemFont_DecrementRefCounter(self, *args)

Handle_Font_SystemFont_swigregister = _Font.Handle_Font_SystemFont_swigregister
Handle_Font_SystemFont_swigregister(Handle_Font_SystemFont)

def Handle_Font_SystemFont_DownCast(thing):
    return _Font.Handle_Font_SystemFont_DownCast(thing)
Handle_Font_SystemFont_DownCast = _Font.Handle_Font_SystemFont_DownCast

class BRepFont(Font_BRepFont):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Font.new_BRepFont(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Font.delete_BRepFont
BRepFont_swigregister = _Font.BRepFont_swigregister
BRepFont_swigregister(BRepFont)



