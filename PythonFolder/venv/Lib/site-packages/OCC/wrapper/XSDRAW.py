# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XSDRAW')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XSDRAW')
    _XSDRAW = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XSDRAW', [dirname(__file__)])
        except ImportError:
            import _XSDRAW
            return _XSDRAW
        try:
            _mod = imp.load_module('_XSDRAW', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XSDRAW = swig_import_helper()
    del swig_import_helper
else:
    import _XSDRAW
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XSDRAW.delete_SwigPyIterator

    def value(self):
        return _XSDRAW.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XSDRAW.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XSDRAW.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XSDRAW.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XSDRAW.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XSDRAW.SwigPyIterator_copy(self)

    def next(self):
        return _XSDRAW.SwigPyIterator_next(self)

    def __next__(self):
        return _XSDRAW.SwigPyIterator___next__(self)

    def previous(self):
        return _XSDRAW.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XSDRAW.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XSDRAW.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XSDRAW.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XSDRAW.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XSDRAW.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XSDRAW.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XSDRAW.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XSDRAW.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSDRAW.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XSDRAW.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XSDRAW.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSDRAW.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAW.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XSDRAW.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XSDRAW.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XSDRAW.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XSDRAW.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XSDRAW.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XSDRAW.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XSDRAW.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAW.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XSDRAW.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XSDRAW.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XSDRAW.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XSDRAW.ptr_to_number(item)
ptr_to_number = _XSDRAW.ptr_to_number

def HashCode(*args):
    return _XSDRAW.HashCode(*args)
HashCode = _XSDRAW.HashCode

def ptr_equal(a, b):
    return _XSDRAW.ptr_equal(a, b)
ptr_equal = _XSDRAW.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XSControl
else:
    import XSControl
del _swig_python_version_info
class XSDRAW_Vars(XSControl.XSControl_Vars):
    """Vars for DRAW session (i.e. DBRep and DrawTrSurf)"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XSDRAW_Vars
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XSDRAW_Vars(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XSDRAW_Vars self) -> XSDRAW_Vars

        Vars for DRAW session (i.e. DBRep and DrawTrSurf)
        """
        this = _XSDRAW.new_XSDRAW_Vars(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(XSDRAW_Vars self, Standard_CString const name, Handle_Standard_Transient val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.XSDRAW_Vars_Set(self, *args)


    def GetGeom(self, *args):
        """
        GetGeom(XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Geometry

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _XSDRAW.XSDRAW_Vars_GetGeom(self, *args)


    def GetCurve2d(self, *args):
        """
        GetCurve2d(XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom2d_Curve

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _XSDRAW.XSDRAW_Vars_GetCurve2d(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Curve

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _XSDRAW.XSDRAW_Vars_GetCurve(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Surface

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _XSDRAW.XSDRAW_Vars_GetSurface(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(XSDRAW_Vars self, Standard_CString const name, gp_Pnt val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_Pnt

        """
        return _XSDRAW.XSDRAW_Vars_SetPoint(self, *args)


    def SetPoint2d(self, *args):
        """
        SetPoint2d(XSDRAW_Vars self, Standard_CString const name, gp_Pnt2d val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_Pnt2d

        """
        return _XSDRAW.XSDRAW_Vars_SetPoint2d(self, *args)


    def GetPoint(self, *args):
        """
        GetPoint(XSDRAW_Vars self, Standard_CString & name, gp_Pnt pnt) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :type pnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.XSDRAW_Vars_GetPoint(self, *args)


    def GetPoint2d(self, *args):
        """
        GetPoint2d(XSDRAW_Vars self, Standard_CString & name, gp_Pnt2d pnt) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :type pnt: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.XSDRAW_Vars_GetPoint2d(self, *args)


    def SetShape(self, *args):
        """
        SetShape(XSDRAW_Vars self, Standard_CString const name, TopoDS_Shape val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSDRAW.XSDRAW_Vars_SetShape(self, *args)


    def GetShape(self, *args):
        """
        GetShape(XSDRAW_Vars self, Standard_CString & name) -> TopoDS_Shape

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSDRAW.XSDRAW_Vars_GetShape(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XSDRAW.XSDRAW_Vars_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XSDRAW.XSDRAW_Vars_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAW.XSDRAW_Vars_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XSDRAW.delete_XSDRAW_Vars
XSDRAW_Vars_swigregister = _XSDRAW.XSDRAW_Vars_swigregister
XSDRAW_Vars_swigregister(XSDRAW_Vars)

def XSDRAW_Vars_get_type_name(*args):
    """
    XSDRAW_Vars_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XSDRAW.XSDRAW_Vars_get_type_name(*args)

def XSDRAW_Vars_get_type_descriptor(*args):
    """
    XSDRAW_Vars_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XSDRAW.XSDRAW_Vars_get_type_descriptor(*args)

class XSDRAW_(object):
    """
    Basic package to work functions of X-STEP (IFSelect & Co)
    under control of DRAW

    Works with some "static" data : a SessionPilot (used to run)
    with its WorkSession and Model and TransferReader, a
    FinderProcess
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeCommand(*args):
        """
        ChangeCommand(Standard_CString const oldname, Standard_CString const newname)

        Takes variables to/from the DRAW session
        Implements ProgressIndicator for DRAW
        Changes the name under which a command of xstep is known by
        Draw. This allows to avoid collisions
        To be called before LoadDraw or any other xstep initialisation

        :type oldname: OCC.wrapper.Standard.Standard_CString
        :type newname: OCC.wrapper.Standard.Standard_CString

        """
        return _XSDRAW.XSDRAW__ChangeCommand(*args)

    ChangeCommand = staticmethod(ChangeCommand)

    def RemoveCommand(*args):
        """
        RemoveCommand(Standard_CString const oldname)

        Removes a command from the interpretation list of Draw
        To be called before LoadDraw or any other xstep initialisation

        :type oldname: OCC.wrapper.Standard.Standard_CString

        """
        return _XSDRAW.XSDRAW__RemoveCommand(*args)

    RemoveCommand = staticmethod(RemoveCommand)

    def LoadSession(*args):
        """
        LoadSession() -> Standard_Boolean

        Defines the basic context to work with a X-STEP Session :
        it performs the basic inits, also records the Controller
        If the Controller is not yet set, it must be set after
        (call to SetController)
        LoadSession is called by LoadDraw
        Returns True the first time, False if already called

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.XSDRAW__LoadSession(*args)

    LoadSession = staticmethod(LoadSession)

    def LoadDraw(*args):
        """
        LoadDraw(Draw_Interpretor theCommands)

        Defines the context for using a X-STEP Session under DRAW
        Once the various INITs have been done, a call to LoadDraw
        records the defined commands for the X-STEP SessionPilot,
        into the DRAW interpretation list.
        "Set" commands are accessed under command xset
        SDS>xset name command ...
        Other commands can be accessed directly or under command xstep
        SDS>command ...  and  SDS>xstep command ...  are equivalent

        Only the command xinit is accessed directly only :
        SDS>xinit  (from the already defined Controller)
        SDS>xinit iges  (first defines the Controller as for "iges")

        It also records the function to be called by DRAW (not
        declared because specific).
        And it defines the context variables, i.e. a WorkSession, then
        it calls SetController with the currently defined Controller
        Remark : at least, the standard commands are recorded

        See also Controller : it is part of the Context, but it must
        be precised separately

        :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _XSDRAW.XSDRAW__LoadDraw(*args)

    LoadDraw = staticmethod(LoadDraw)

    def Execute(*args):
        """
        Execute(Standard_CString const command, Standard_CString const var) -> Standard_Integer

        Allows to execute a xstep-draw command from C++ program
        Fixed form :  Execute("command args...");
        Form with a variable text part : add %s for the variable :
        Execute ("command args %s args..",var)  [var is a CString]
        Returns the same value as returned by call from DRAW

        :type command: OCC.wrapper.Standard.Standard_CString
        :type var: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.XSDRAW__Execute(*args)

    Execute = staticmethod(Execute)

    def Pilot(*args):
        """
        Pilot() -> Handle_IFSelect_SessionPilot

        Returns the SessionPilot (can be used for direct call)

        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SessionPilot

        """
        return _XSDRAW.XSDRAW__Pilot(*args)

    Pilot = staticmethod(Pilot)

    def Session(*args):
        """
        Session() -> Handle_XSControl_WorkSession

        Returns the WorkSession defined in AddDraw (through Pilot)
        It is from XSControl, it brings functionnalities for Transfers

        :rtype: OCC.wrapper.XSControl.Handle_XSControl_WorkSession

        """
        return _XSDRAW.XSDRAW__Session(*args)

    Session = staticmethod(Session)

    def SetController(*args):
        """
        SetController(Handle_XSControl_Controller control)

        Defines a Controller for the command "xinit" and applies it
        (i.e. calls its method Customise)

        :type control: OCC.wrapper.XSControl.Handle_XSControl_Controller

        """
        return _XSDRAW.XSDRAW__SetController(*args)

    SetController = staticmethod(SetController)

    def Controller(*args):
        """
        Controller() -> Handle_XSControl_Controller

        Returns the Controller, a Null Handle if not yet defined

        :rtype: OCC.wrapper.XSControl.Handle_XSControl_Controller

        """
        return _XSDRAW.XSDRAW__Controller(*args)

    Controller = staticmethod(Controller)

    def SetNorm(*args):
        """
        SetNorm(Standard_CString const normname) -> Standard_Boolean

        Sets a norm by its name (controller recorded as <normname> )
        Returns True if done, False if this norm is unknown

        :type normname: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.XSDRAW__SetNorm(*args)

    SetNorm = staticmethod(SetNorm)

    def Protocol(*args):
        """
        Protocol() -> Handle_Interface_Protocol

        Returns the actually defined Protocol

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _XSDRAW.XSDRAW__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def Model(*args):
        """
        Model() -> Handle_Interface_InterfaceModel

        Returns the Model of the Session (it is Session()->Model() )

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _XSDRAW.XSDRAW__Model(*args)

    Model = staticmethod(Model)

    def SetModel(*args):
        """
        SetModel(Handle_Interface_InterfaceModel model, Standard_CString const file)

        Sets a Model in session (it is Session()->SetModel(model) )
        If <file> is defined, SetLoadedFile is also done

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type file: OCC.wrapper.Standard.Standard_CString

        """
        return _XSDRAW.XSDRAW__SetModel(*args)

    SetModel = staticmethod(SetModel)

    def NewModel(*args):
        """
        NewModel() -> Handle_Interface_InterfaceModel

        Produces a new model (from the Controller), can be Null
        Does not set it in the session

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _XSDRAW.XSDRAW__NewModel(*args)

    NewModel = staticmethod(NewModel)

    def Entity(*args):
        """
        Entity(Standard_Integer const num) -> Handle_Standard_Transient

        Returns the entity n0 <num> of the Model of the Session
        (it is StartingEntity)
        Null Handle if <num> is not suitable

        :type num: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.XSDRAW__Entity(*args)

    Entity = staticmethod(Entity)

    def Number(*args):
        """
        Number(Handle_Standard_Transient ent) -> Standard_Integer

        Returns the number of an entity in the Model (StartingNumber)
        0 if <ent> unknown in the model, or null

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.XSDRAW__Number(*args)

    Number = staticmethod(Number)

    def SetTransferProcess(*args):
        """
        SetTransferProcess(Handle_Standard_Transient TP)

        Sets a TransferProcess in order to analyse it (see Activator)
        It can be either a FinderProcess or a TransientProcess, in
        that case a new TransferReader is created on it

        :type TP: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.XSDRAW__SetTransferProcess(*args)

    SetTransferProcess = staticmethod(SetTransferProcess)

    def TransientProcess(*args):
        """
        TransientProcess() -> Handle_Transfer_TransientProcess

        Returns the TransferProcess : TransientProcess detained by
        the TransferReader

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _XSDRAW.XSDRAW__TransientProcess(*args)

    TransientProcess = staticmethod(TransientProcess)

    def FinderProcess(*args):
        """
        FinderProcess() -> Handle_Transfer_FinderProcess

        Returns the FinderProcess, detained by the TransferWriter

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

        """
        return _XSDRAW.XSDRAW__FinderProcess(*args)

    FinderProcess = staticmethod(FinderProcess)

    def InitTransferReader(*args):
        """
        InitTransferReader(Standard_Integer const mode)

        Initialises a TransferReader, according to mode :
        0 nullifies it,  1 clears it (not nullify)
        2 sets it with TransientProcess & Model
        3 idem plus roots of TransientProcess
        Remark : called with 0 at least at each SetModel/NewModel

        :type mode: int

        """
        return _XSDRAW.XSDRAW__InitTransferReader(*args)

    InitTransferReader = staticmethod(InitTransferReader)

    def TransferReader(*args):
        """
        TransferReader() -> Handle_XSControl_TransferReader

        Returns the current TransferReader, can be null
        It detains the TransientProcess

        :rtype: OCC.wrapper.XSControl.Handle_XSControl_TransferReader

        """
        return _XSDRAW.XSDRAW__TransferReader(*args)

    TransferReader = staticmethod(TransferReader)

    def GetEntity(*args):
        """
        GetEntity(Standard_CString const name) -> Handle_Standard_Transient

        Takes the name of an entity, either as argument, or (if <name>
        is empty) on keybord, and returns the entity
        name can be a label or a number (in alphanumeric), it is
        searched by NumberFromLabel from WorkSession.
        If <name> doesn't match en entity, a Null Handle is returned

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.XSDRAW__GetEntity(*args)

    GetEntity = staticmethod(GetEntity)

    def GetEntityNumber(*args):
        """
        GetEntityNumber(Standard_CString const name) -> Standard_Integer

        Same as GetEntity, but returns the number in the model of the
        entity. Returns 0 for null handle

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.XSDRAW__GetEntityNumber(*args)

    GetEntityNumber = staticmethod(GetEntityNumber)

    def GetList(*args):
        """
        GetList(Standard_CString const first, Standard_CString const second) -> Handle_TColStd_HSequenceOfTransient

        Evaluates and returns a list of entity, from :
        keyboard if <first> and <second> are empty, see below
        first if second is empty : can be a number/label of an entity
        or the name of a selection to be evaluated (standard)
        first : name of a selection, evaluated from a list defined by
        second
        In case of failure, returns a Null Handle

        :type first: OCC.wrapper.Standard.Standard_CString
        :type second: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _XSDRAW.XSDRAW__GetList(*args)

    GetList = staticmethod(GetList)

    def FileAndVar(*args):
        """
        FileAndVar(Standard_CString const file, Standard_CString const var, Standard_CString const arg3, TCollection_AsciiString resfile, TCollection_AsciiString resvar) -> Standard_Boolean

        Analyses given file name and variable name, with a default
        name for variables. Returns resulting file name and variable
        name plus status "file to read"(True) or "already read"(False)
        In the latter case, empty resfile means no file available

        If <file> is null or empty or equates ".", considers Session
        and returned status is False
        Else, returns resfile = file and status is True
        If <var> is neither null nor empty, resvar = var
        Else, the root part of <resfile> is considered, if defined
        Else, <def> is taken

        :type file: OCC.wrapper.Standard.Standard_CString
        :type var: OCC.wrapper.Standard.Standard_CString
        :type def: OCC.wrapper.Standard.Standard_CString
        :type resfile: OCC.wrapper.TCollection.TCollection_AsciiString
        :type resvar: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.XSDRAW__FileAndVar(*args)

    FileAndVar = staticmethod(FileAndVar)

    def MoreShapes(*args):
        """
        MoreShapes(Handle_TopTools_HSequenceOfShape list, Standard_CString const name) -> Standard_Integer

        Analyses a name as designating Shapes from DRAW variables or
        XSTEP transfer (last Transfer on Reading). <name> can be :
        "*" : all the root shapes produced by last Transfer (Read)
        i.e. considers roots of the TransientProcess
        a name : a name of a variable DRAW

        Returns the count of designated Shapes. Their list is put in
        <list>. If <list> is null, it is firstly created. Then it is
        completed (Append without Clear) by the Shapes found
        Returns 0 if no Shape could be found

        :type list: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape
        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.XSDRAW__MoreShapes(*args)

    MoreShapes = staticmethod(MoreShapes)

    def __init__(self):
        """
        Basic package to work functions of X-STEP (IFSelect & Co)
        under control of DRAW

        Works with some "static" data : a SessionPilot (used to run)
        with its WorkSession and Model and TransferReader, a
        FinderProcess
        """
        this = _XSDRAW.new_XSDRAW_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAW.delete_XSDRAW_
XSDRAW__swigregister = _XSDRAW.XSDRAW__swigregister
XSDRAW__swigregister(XSDRAW_)

def XSDRAW__ChangeCommand(*args):
    """
    XSDRAW__ChangeCommand(Standard_CString const oldname, Standard_CString const newname)

    Takes variables to/from the DRAW session
    Implements ProgressIndicator for DRAW
    Changes the name under which a command of xstep is known by
    Draw. This allows to avoid collisions
    To be called before LoadDraw or any other xstep initialisation

    :type oldname: OCC.wrapper.Standard.Standard_CString
    :type newname: OCC.wrapper.Standard.Standard_CString

    """
    return _XSDRAW.XSDRAW__ChangeCommand(*args)

def XSDRAW__RemoveCommand(*args):
    """
    XSDRAW__RemoveCommand(Standard_CString const oldname)

    Removes a command from the interpretation list of Draw
    To be called before LoadDraw or any other xstep initialisation

    :type oldname: OCC.wrapper.Standard.Standard_CString

    """
    return _XSDRAW.XSDRAW__RemoveCommand(*args)

def XSDRAW__LoadSession(*args):
    """
    XSDRAW__LoadSession() -> Standard_Boolean

    Defines the basic context to work with a X-STEP Session :
    it performs the basic inits, also records the Controller
    If the Controller is not yet set, it must be set after
    (call to SetController)
    LoadSession is called by LoadDraw
    Returns True the first time, False if already called

    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XSDRAW.XSDRAW__LoadSession(*args)

def XSDRAW__LoadDraw(*args):
    """
    XSDRAW__LoadDraw(Draw_Interpretor theCommands)

    Defines the context for using a X-STEP Session under DRAW
    Once the various INITs have been done, a call to LoadDraw
    records the defined commands for the X-STEP SessionPilot,
    into the DRAW interpretation list.
    "Set" commands are accessed under command xset
    SDS>xset name command ...
    Other commands can be accessed directly or under command xstep
    SDS>command ...  and  SDS>xstep command ...  are equivalent

    Only the command xinit is accessed directly only :
    SDS>xinit  (from the already defined Controller)
    SDS>xinit iges  (first defines the Controller as for "iges")

    It also records the function to be called by DRAW (not
    declared because specific).
    And it defines the context variables, i.e. a WorkSession, then
    it calls SetController with the currently defined Controller
    Remark : at least, the standard commands are recorded

    See also Controller : it is part of the Context, but it must
    be precised separately

    :type theCommands: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _XSDRAW.XSDRAW__LoadDraw(*args)

def XSDRAW__Execute(*args):
    """
    XSDRAW__Execute(Standard_CString const command, Standard_CString const var) -> Standard_Integer

    Allows to execute a xstep-draw command from C++ program
    Fixed form :  Execute("command args...");
    Form with a variable text part : add %s for the variable :
    Execute ("command args %s args..",var)  [var is a CString]
    Returns the same value as returned by call from DRAW

    :type command: OCC.wrapper.Standard.Standard_CString
    :type var: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XSDRAW.XSDRAW__Execute(*args)

def XSDRAW__Pilot(*args):
    """
    XSDRAW__Pilot() -> Handle_IFSelect_SessionPilot

    Returns the SessionPilot (can be used for direct call)

    :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_SessionPilot

    """
    return _XSDRAW.XSDRAW__Pilot(*args)

def XSDRAW__Session(*args):
    """
    XSDRAW__Session() -> Handle_XSControl_WorkSession

    Returns the WorkSession defined in AddDraw (through Pilot)
    It is from XSControl, it brings functionnalities for Transfers

    :rtype: OCC.wrapper.XSControl.Handle_XSControl_WorkSession

    """
    return _XSDRAW.XSDRAW__Session(*args)

def XSDRAW__SetController(*args):
    """
    XSDRAW__SetController(Handle_XSControl_Controller control)

    Defines a Controller for the command "xinit" and applies it
    (i.e. calls its method Customise)

    :type control: OCC.wrapper.XSControl.Handle_XSControl_Controller

    """
    return _XSDRAW.XSDRAW__SetController(*args)

def XSDRAW__Controller(*args):
    """
    XSDRAW__Controller() -> Handle_XSControl_Controller

    Returns the Controller, a Null Handle if not yet defined

    :rtype: OCC.wrapper.XSControl.Handle_XSControl_Controller

    """
    return _XSDRAW.XSDRAW__Controller(*args)

def XSDRAW__SetNorm(*args):
    """
    XSDRAW__SetNorm(Standard_CString const normname) -> Standard_Boolean

    Sets a norm by its name (controller recorded as <normname> )
    Returns True if done, False if this norm is unknown

    :type normname: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XSDRAW.XSDRAW__SetNorm(*args)

def XSDRAW__Protocol(*args):
    """
    XSDRAW__Protocol() -> Handle_Interface_Protocol

    Returns the actually defined Protocol

    :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

    """
    return _XSDRAW.XSDRAW__Protocol(*args)

def XSDRAW__Model(*args):
    """
    XSDRAW__Model() -> Handle_Interface_InterfaceModel

    Returns the Model of the Session (it is Session()->Model() )

    :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

    """
    return _XSDRAW.XSDRAW__Model(*args)

def XSDRAW__SetModel(*args):
    """
    XSDRAW__SetModel(Handle_Interface_InterfaceModel model, Standard_CString const file)

    Sets a Model in session (it is Session()->SetModel(model) )
    If <file> is defined, SetLoadedFile is also done

    :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
    :type file: OCC.wrapper.Standard.Standard_CString

    """
    return _XSDRAW.XSDRAW__SetModel(*args)

def XSDRAW__NewModel(*args):
    """
    XSDRAW__NewModel() -> Handle_Interface_InterfaceModel

    Produces a new model (from the Controller), can be Null
    Does not set it in the session

    :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

    """
    return _XSDRAW.XSDRAW__NewModel(*args)

def XSDRAW__Entity(*args):
    """
    XSDRAW__Entity(Standard_Integer const num) -> Handle_Standard_Transient

    Returns the entity n0 <num> of the Model of the Session
    (it is StartingEntity)
    Null Handle if <num> is not suitable

    :type num: int
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XSDRAW.XSDRAW__Entity(*args)

def XSDRAW__Number(*args):
    """
    XSDRAW__Number(Handle_Standard_Transient ent) -> Standard_Integer

    Returns the number of an entity in the Model (StartingNumber)
    0 if <ent> unknown in the model, or null

    :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XSDRAW.XSDRAW__Number(*args)

def XSDRAW__SetTransferProcess(*args):
    """
    XSDRAW__SetTransferProcess(Handle_Standard_Transient TP)

    Sets a TransferProcess in order to analyse it (see Activator)
    It can be either a FinderProcess or a TransientProcess, in
    that case a new TransferReader is created on it

    :type TP: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XSDRAW.XSDRAW__SetTransferProcess(*args)

def XSDRAW__TransientProcess(*args):
    """
    XSDRAW__TransientProcess() -> Handle_Transfer_TransientProcess

    Returns the TransferProcess : TransientProcess detained by
    the TransferReader

    :rtype: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

    """
    return _XSDRAW.XSDRAW__TransientProcess(*args)

def XSDRAW__FinderProcess(*args):
    """
    XSDRAW__FinderProcess() -> Handle_Transfer_FinderProcess

    Returns the FinderProcess, detained by the TransferWriter

    :rtype: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess

    """
    return _XSDRAW.XSDRAW__FinderProcess(*args)

def XSDRAW__InitTransferReader(*args):
    """
    XSDRAW__InitTransferReader(Standard_Integer const mode)

    Initialises a TransferReader, according to mode :
    0 nullifies it,  1 clears it (not nullify)
    2 sets it with TransientProcess & Model
    3 idem plus roots of TransientProcess
    Remark : called with 0 at least at each SetModel/NewModel

    :type mode: int

    """
    return _XSDRAW.XSDRAW__InitTransferReader(*args)

def XSDRAW__TransferReader(*args):
    """
    XSDRAW__TransferReader() -> Handle_XSControl_TransferReader

    Returns the current TransferReader, can be null
    It detains the TransientProcess

    :rtype: OCC.wrapper.XSControl.Handle_XSControl_TransferReader

    """
    return _XSDRAW.XSDRAW__TransferReader(*args)

def XSDRAW__GetEntity(*args):
    """
    XSDRAW__GetEntity(Standard_CString const name) -> Handle_Standard_Transient

    Takes the name of an entity, either as argument, or (if <name>
    is empty) on keybord, and returns the entity
    name can be a label or a number (in alphanumeric), it is
    searched by NumberFromLabel from WorkSession.
    If <name> doesn't match en entity, a Null Handle is returned

    :type name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XSDRAW.XSDRAW__GetEntity(*args)

def XSDRAW__GetEntityNumber(*args):
    """
    XSDRAW__GetEntityNumber(Standard_CString const name) -> Standard_Integer

    Same as GetEntity, but returns the number in the model of the
    entity. Returns 0 for null handle

    :type name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XSDRAW.XSDRAW__GetEntityNumber(*args)

def XSDRAW__GetList(*args):
    """
    XSDRAW__GetList(Standard_CString const first, Standard_CString const second) -> Handle_TColStd_HSequenceOfTransient

    Evaluates and returns a list of entity, from :
    keyboard if <first> and <second> are empty, see below
    first if second is empty : can be a number/label of an entity
    or the name of a selection to be evaluated (standard)
    first : name of a selection, evaluated from a list defined by
    second
    In case of failure, returns a Null Handle

    :type first: OCC.wrapper.Standard.Standard_CString
    :type second: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

    """
    return _XSDRAW.XSDRAW__GetList(*args)

def XSDRAW__FileAndVar(*args):
    """
    XSDRAW__FileAndVar(Standard_CString const file, Standard_CString const var, Standard_CString const arg4, TCollection_AsciiString resfile, TCollection_AsciiString resvar) -> Standard_Boolean

    Analyses given file name and variable name, with a default
    name for variables. Returns resulting file name and variable
    name plus status "file to read"(True) or "already read"(False)
    In the latter case, empty resfile means no file available

    If <file> is null or empty or equates ".", considers Session
    and returned status is False
    Else, returns resfile = file and status is True
    If <var> is neither null nor empty, resvar = var
    Else, the root part of <resfile> is considered, if defined
    Else, <def> is taken

    :type file: OCC.wrapper.Standard.Standard_CString
    :type var: OCC.wrapper.Standard.Standard_CString
    :type def: OCC.wrapper.Standard.Standard_CString
    :type resfile: OCC.wrapper.TCollection.TCollection_AsciiString
    :type resvar: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _XSDRAW.XSDRAW__FileAndVar(*args)

def XSDRAW__MoreShapes(*args):
    """
    XSDRAW__MoreShapes(Handle_TopTools_HSequenceOfShape list, Standard_CString const name) -> Standard_Integer

    Analyses a name as designating Shapes from DRAW variables or
    XSTEP transfer (last Transfer on Reading). <name> can be :
    "*" : all the root shapes produced by last Transfer (Read)
    i.e. considers roots of the TransientProcess
    a name : a name of a variable DRAW

    Returns the count of designated Shapes. Their list is put in
    <list>. If <list> is null, it is firstly created. Then it is
    completed (Append without Clear) by the Shapes found
    Returns 0 if no Shape could be found

    :type list: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape
    :type name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XSDRAW.XSDRAW__MoreShapes(*args)

class Handle_XSDRAW_Vars(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XSDRAW_Vars self)

        Nullify the handle


        """
        return _XSDRAW.Handle_XSDRAW_Vars_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XSDRAW_Vars self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XSDRAW.Handle_XSDRAW_Vars_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XSDRAW_Vars self, XSDRAW_Vars thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XSDRAW.Handle_XSDRAW_Vars_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XSDRAW_Vars self, Handle_XSDRAW_Vars theHandle) -> Handle_XSDRAW_Vars
        assign(Handle_XSDRAW_Vars self, XSDRAW_Vars thePtr) -> Handle_XSDRAW_Vars
        assign(Handle_XSDRAW_Vars self, Handle_XSDRAW_Vars theHandle) -> Handle_XSDRAW_Vars

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XSDRAW.Handle_XSDRAW_Vars_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XSDRAW_Vars self) -> XSDRAW_Vars

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XSDRAW.Handle_XSDRAW_Vars_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XSDRAW_Vars self) -> XSDRAW_Vars

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XSDRAW.Handle_XSDRAW_Vars___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XSDRAW_Vars self) -> XSDRAW_Vars

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XSDRAW.Handle_XSDRAW_Vars___ref__(self, *args)


    def __hash__(self):
        return _XSDRAW.Handle_XSDRAW_Vars___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XSDRAW.Handle_XSDRAW_Vars___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XSDRAW.new_Handle_XSDRAW_Vars(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XSDRAW.Handle_XSDRAW_Vars_DownCast)
    __swig_destroy__ = _XSDRAW.delete_Handle_XSDRAW_Vars

    def Set(self, *args):
        """
        Set(Handle_XSDRAW_Vars self, Standard_CString const name, Handle_Standard_Transient val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.Handle_XSDRAW_Vars_Set(self, *args)


    def GetGeom(self, *args):
        """
        GetGeom(Handle_XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Geometry

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Geometry

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetGeom(self, *args)


    def GetCurve2d(self, *args):
        """
        GetCurve2d(Handle_XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom2d_Curve

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetCurve2d(self, *args)


    def GetCurve(self, *args):
        """
        GetCurve(Handle_XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Curve

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetCurve(self, *args)


    def GetSurface(self, *args):
        """
        GetSurface(Handle_XSDRAW_Vars self, Standard_CString & name) -> Handle_Geom_Surface

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetSurface(self, *args)


    def SetPoint(self, *args):
        """
        SetPoint(Handle_XSDRAW_Vars self, Standard_CString const name, gp_Pnt val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_Pnt

        """
        return _XSDRAW.Handle_XSDRAW_Vars_SetPoint(self, *args)


    def SetPoint2d(self, *args):
        """
        SetPoint2d(Handle_XSDRAW_Vars self, Standard_CString const name, gp_Pnt2d val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.gp.gp_Pnt2d

        """
        return _XSDRAW.Handle_XSDRAW_Vars_SetPoint2d(self, *args)


    def GetPoint(self, *args):
        """
        GetPoint(Handle_XSDRAW_Vars self, Standard_CString & name, gp_Pnt pnt) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :type pnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetPoint(self, *args)


    def GetPoint2d(self, *args):
        """
        GetPoint2d(Handle_XSDRAW_Vars self, Standard_CString & name, gp_Pnt2d pnt) -> Standard_Boolean

        :type name: OCC.wrapper.Standard.Standard_CString
        :type pnt: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetPoint2d(self, *args)


    def SetShape(self, *args):
        """
        SetShape(Handle_XSDRAW_Vars self, Standard_CString const name, TopoDS_Shape val)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSDRAW.Handle_XSDRAW_Vars_SetShape(self, *args)


    def GetShape(self, *args):
        """
        GetShape(Handle_XSDRAW_Vars self, Standard_CString & name) -> TopoDS_Shape

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetShape(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XSDRAW_Vars self) -> char const *

        :rtype: const char *

        """
        return _XSDRAW.Handle_XSDRAW_Vars_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAW.Handle_XSDRAW_Vars_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XSDRAW.Handle_XSDRAW_Vars_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Get(self, *args):
        """
        Get(Handle_XSDRAW_Vars self, Standard_CString & name) -> Handle_Standard_Transient

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XSDRAW.Handle_XSDRAW_Vars_Get(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XSDRAW_Vars self)

        Memory deallocator for transient classes


        """
        return _XSDRAW.Handle_XSDRAW_Vars_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XSDRAW_Vars self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XSDRAW_Vars self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.Handle_XSDRAW_Vars_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XSDRAW_Vars self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XSDRAW_Vars self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XSDRAW.Handle_XSDRAW_Vars_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XSDRAW_Vars self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XSDRAW.Handle_XSDRAW_Vars_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XSDRAW_Vars self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.Handle_XSDRAW_Vars_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XSDRAW_Vars self)

        Increments the reference counter of this object


        """
        return _XSDRAW.Handle_XSDRAW_Vars_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XSDRAW_Vars self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XSDRAW.Handle_XSDRAW_Vars_DecrementRefCounter(self, *args)

Handle_XSDRAW_Vars_swigregister = _XSDRAW.Handle_XSDRAW_Vars_swigregister
Handle_XSDRAW_Vars_swigregister(Handle_XSDRAW_Vars)

def Handle_XSDRAW_Vars_DownCast(thing):
    return _XSDRAW.Handle_XSDRAW_Vars_DownCast(thing)
Handle_XSDRAW_Vars_DownCast = _XSDRAW.Handle_XSDRAW_Vars_DownCast

class XSDRAW_Functions(object):
    """
    Defines additionnal commands for XSDRAW to :
    - control of initialisation (xinit, xnorm, newmodel)
    - analyse of the result of a transfer (recorded in a
    TransientProcess for Read, FinderProcess for Write) :
    statistics, various lists (roots,complete,abnormal), what
    about one specific entity, producing a model with the
    abnormal result

    This appendix of XSDRAW is compiled separately to distinguish
    basic features from user callable forms
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Defines and loads all basic functions for XSDRAW (as ActFunc)


        """
        return _XSDRAW.XSDRAW_Functions_Init(*args)

    Init = staticmethod(Init)

    def __init__(self):
        """
        Defines additionnal commands for XSDRAW to :
        - control of initialisation (xinit, xnorm, newmodel)
        - analyse of the result of a transfer (recorded in a
        TransientProcess for Read, FinderProcess for Write) :
        statistics, various lists (roots,complete,abnormal), what
        about one specific entity, producing a model with the
        abnormal result

        This appendix of XSDRAW is compiled separately to distinguish
        basic features from user callable forms
        """
        this = _XSDRAW.new_XSDRAW_Functions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XSDRAW.delete_XSDRAW_Functions
XSDRAW_Functions_swigregister = _XSDRAW.XSDRAW_Functions_swigregister
XSDRAW_Functions_swigregister(XSDRAW_Functions)

def XSDRAW_Functions_Init(*args):
    """
    XSDRAW_Functions_Init()

    Defines and loads all basic functions for XSDRAW (as ActFunc)


    """
    return _XSDRAW.XSDRAW_Functions_Init(*args)



