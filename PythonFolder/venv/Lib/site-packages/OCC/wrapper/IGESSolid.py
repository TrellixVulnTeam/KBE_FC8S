# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESSolid')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESSolid')
    _IGESSolid = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESSolid', [dirname(__file__)])
        except ImportError:
            import _IGESSolid
            return _IGESSolid
        try:
            _mod = imp.load_module('_IGESSolid', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESSolid = swig_import_helper()
    del swig_import_helper
else:
    import _IGESSolid
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESSolid.delete_SwigPyIterator

    def value(self):
        return _IGESSolid.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESSolid.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESSolid.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESSolid.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESSolid.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESSolid.SwigPyIterator_copy(self)

    def next(self):
        return _IGESSolid.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESSolid.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESSolid.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESSolid.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESSolid.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESSolid.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESSolid.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESSolid.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESSolid.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESSolid.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESSolid.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESSolid.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESSolid.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESSolid.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESSolid.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSolid.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESSolid.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESSolid.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESSolid.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESSolid.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESSolid.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESSolid.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESSolid.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSolid.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESSolid.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESSolid.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESSolid.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESSolid.ptr_to_number(item)
ptr_to_number = _IGESSolid.ptr_to_number

def HashCode(*args):
    return _IGESSolid.HashCode(*args)
HashCode = _IGESSolid.HashCode

def ptr_equal(a, b):
    return _IGESSolid.ptr_equal(a, b)
ptr_equal = _IGESSolid.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
class IGESSolid_SphericalSurface(IGESData.IGESData_IGESEntity):
    """
    defines SphericalSurface, Type <196> Form Number <0,1>
    in package IGESSolid
    Spherical surface is defined by a center and radius.
    In case of parametrised surface an axis and a
    reference direction is provided.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SphericalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SphericalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SphericalSurface self) -> IGESSolid_SphericalSurface

        defines SphericalSurface, Type <196> Form Number <0,1>
        in package IGESSolid
        Spherical surface is defined by a center and radius.
        In case of parametrised surface an axis and a
        reference direction is provided.
        """
        this = _IGESSolid.new_IGESSolid_SphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SphericalSurface self, Handle_IGESGeom_Point aCenter, Standard_Real const aRadius, Handle_IGESGeom_Direction anAxis, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        SphericalSurface
        - aCenter : the coordinates of the center point
        - aRadius : value of radius
        - anAxis  : the direction of the axis
        Null in case of Unparametrised surface
        - aRefdir : the reference direction
        Null in case of Unparametrised surface

        :type aCenter: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type aRadius: float
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_SphericalSurface_Init(self, *args)


    def Center(self, *args):
        """
        Center(IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Point

        returns the center of the spherical surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.IGESSolid_SphericalSurface_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESSolid_SphericalSurface self) -> gp_Pnt

        returns the center of the spherical surface after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_SphericalSurface_TransformedCenter(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESSolid_SphericalSurface self) -> Standard_Real

        returns the radius of the spherical surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_SphericalSurface_Radius(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis (Parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_SphericalSurface_Axis(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (Parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_SphericalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if the surface is parametrised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_SphericalSurface_IsParametrised(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SphericalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SphericalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SphericalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SphericalSurface
IGESSolid_SphericalSurface_swigregister = _IGESSolid.IGESSolid_SphericalSurface_swigregister
IGESSolid_SphericalSurface_swigregister(IGESSolid_SphericalSurface)

def IGESSolid_SphericalSurface_get_type_name(*args):
    """
    IGESSolid_SphericalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SphericalSurface_get_type_name(*args)

def IGESSolid_SphericalSurface_get_type_descriptor(*args):
    """
    IGESSolid_SphericalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SphericalSurface_get_type_descriptor(*args)

class IGESSolid_CylindricalSurface(IGESData.IGESData_IGESEntity):
    """
    defines CylindricalSurface, Type <192> Form Number <0,1>
    in package IGESSolid
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_CylindricalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_CylindricalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_CylindricalSurface self) -> IGESSolid_CylindricalSurface

        defines CylindricalSurface, Type <192> Form Number <0,1>
        in package IGESSolid
        """
        this = _IGESSolid.new_IGESSolid_CylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_CylindricalSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction anAxis, Standard_Real const aRadius, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        CylindricalSurface
        - aLocation : the location of the point on axis
        - anAxis    : the direction of the axis
        - aRadius   : the radius at the axis point
        - aRefdir   : the reference direction (parametrised surface)
        default NULL (unparametrised surface)

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRadius: float
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Point

        returns the point on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_LocationPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Direction

        returns the direction on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_Axis(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESSolid_CylindricalSurface self) -> Standard_Real

        returns the radius at the axis point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_Radius(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(IGESSolid_CylindricalSurface self) -> Standard_Boolean

        returns whether the surface is parametrised or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_IsParametrised(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction only for parametrised surface
        else returns NULL

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_ReferenceDir(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_CylindricalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_CylindricalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_CylindricalSurface
IGESSolid_CylindricalSurface_swigregister = _IGESSolid.IGESSolid_CylindricalSurface_swigregister
IGESSolid_CylindricalSurface_swigregister(IGESSolid_CylindricalSurface)

def IGESSolid_CylindricalSurface_get_type_name(*args):
    """
    IGESSolid_CylindricalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_CylindricalSurface_get_type_name(*args)

def IGESSolid_CylindricalSurface_get_type_descriptor(*args):
    """
    IGESSolid_CylindricalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_CylindricalSurface_get_type_descriptor(*args)

class IGESSolid_Loop(IGESData.IGESData_IGESEntity):
    """
    defines Loop, Type <508> Form Number <1>
    in package IGESSolid
    A Loop entity specifies a bound of a face. It represents
    a connected collection of face boundaries, seams, and
    poles of a single face.

    From IGES-5.3, a Loop can be free with Form Number 0,
    else it is a bound of a face (it is the default)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Loop
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Loop(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Loop self) -> IGESSolid_Loop

        defines Loop, Type <508> Form Number <1>
        in package IGESSolid
        A Loop entity specifies a bound of a face. It represents
        a connected collection of face boundaries, seams, and
        poles of a single face.

        From IGES-5.3, a Loop can be free with Form Number 0,
        else it is a bound of a face (it is the default)
        """
        this = _IGESSolid.new_IGESSolid_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Loop self, Handle_TColStd_HArray1OfInteger types, Handle_IGESData_HArray1OfIGESEntity edges, Handle_TColStd_HArray1OfInteger index, Handle_TColStd_HArray1OfInteger orient, Handle_TColStd_HArray1OfInteger nbParameterCurves, Handle_IGESBasic_HArray1OfHArray1OfInteger isoparametricFlags, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity curves)

        This method is used to set the fields of the class Loop
        - types              : 0 = Edge; 1 = Vertex
        - edges              : Pointer to the EdgeList or VertexList
        - index              : Index of the edge into the EdgeList
        VertexList entity
        - orient             : Orientation flag of the edge
        - nbParameterCurves  : the number of parameter space curves
        for each edge
        - isoparametricFlags : the isoparametric flag of the
        parameter space curve
        - curves             : the parameter space curves
        raises exception if length of types, edges, index, orient and
        nbParameterCurves do not match or the length of
        isoparametricFlags and curves do not match

        :type types: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type edges: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type index: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type orient: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbParameterCurves: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type isoparametricFlags: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type curves: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

        """
        return _IGESSolid.IGESSolid_Loop_Init(self, *args)


    def IsBound(self, *args):
        """
        IsBound(IGESSolid_Loop self) -> Standard_Boolean

        Tells if a Loop is a Bound (FN 1) else it is free (FN 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Loop_IsBound(self, *args)


    def SetBound(self, *args):
        """
        SetBound(IGESSolid_Loop self, Standard_Boolean const bound)

        Sets or Unset the Bound Status (from Form Number)
        Default is True

        :type bound: bool

        """
        return _IGESSolid.IGESSolid_Loop_SetBound(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(IGESSolid_Loop self) -> Standard_Integer

        returns the number of edge tuples

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Loop_NbEdges(self, *args)


    def EdgeType(self, *args):
        """
        EdgeType(IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Integer

        returns the type of Index'th edge (0 = Edge, 1 = Vertex)
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Loop_EdgeType(self, *args)


    def Edge(self, *args):
        """
        Edge(IGESSolid_Loop self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        return the EdgeList or VertexList corresponding to the Index
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_Loop_Edge(self, *args)


    def Orientation(self, *args):
        """
        Orientation(IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Boolean

        returns the orientation flag corresponding to Index'th edge
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Loop_Orientation(self, *args)


    def NbParameterCurves(self, *args):
        """
        NbParameterCurves(IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Integer

        return the number of parameter space curves associated with
        Index'th Edge
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Loop_NbParameterCurves(self, *args)


    def IsIsoparametric(self, *args):
        """
        IsIsoparametric(IGESSolid_Loop self, Standard_Integer const EdgeIndex, Standard_Integer const CurveIndex) -> Standard_Boolean

        :type EdgeIndex: int
        :type CurveIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Loop_IsIsoparametric(self, *args)


    def ParametricCurve(self, *args):
        """
        ParametricCurve(IGESSolid_Loop self, Standard_Integer const EdgeIndex, Standard_Integer const CurveIndex) -> Handle_IGESData_IGESEntity

        returns the CurveIndex'th parameter space curve associated with
        EdgeIndex'th edge
        raises exception if EdgeIndex <= 0 or EdgeIndex > NbEdges() or
        if CurveIndex <= 0 or CurveIndex > NbParameterCurves(EdgeIndex)

        :type EdgeIndex: int
        :type CurveIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_Loop_ParametricCurve(self, *args)


    def ListIndex(self, *args):
        """
        ListIndex(IGESSolid_Loop self, Standard_Integer const num) -> Standard_Integer

        raises exception If num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Loop_ListIndex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Loop_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Loop_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Loop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Loop
IGESSolid_Loop_swigregister = _IGESSolid.IGESSolid_Loop_swigregister
IGESSolid_Loop_swigregister(IGESSolid_Loop)

def IGESSolid_Loop_get_type_name(*args):
    """
    IGESSolid_Loop_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Loop_get_type_name(*args)

def IGESSolid_Loop_get_type_descriptor(*args):
    """
    IGESSolid_Loop_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Loop_get_type_descriptor(*args)

class IGESSolid_RightAngularWedge(IGESData.IGESData_IGESEntity):
    """
    defines RightAngularWedge, Type <152> Form Number <0>
    in package IGESSolid
    A right angular wedge is a triangular/trapezoidal prism
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_RightAngularWedge
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_RightAngularWedge(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_RightAngularWedge self) -> IGESSolid_RightAngularWedge

        defines RightAngularWedge, Type <152> Form Number <0>
        in package IGESSolid
        A right angular wedge is a triangular/trapezoidal prism
        """
        this = _IGESSolid.new_IGESSolid_RightAngularWedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_RightAngularWedge self, gp_XYZ aSize, Standard_Real const lowX, gp_XYZ aCorner, gp_XYZ anXAxis, gp_XYZ anZAxis)

        This method is used to set the fields of the class
        RightAngularWedge
        - aSize    : the lengths along the local axes
        - lowX     : the length at the smaller X-side
        - aCorner  : the corner point coordinates
        default (0,0,0)
        - anXAxis  : the unit vector defining local X-axis
        default (1,0,0)
        - anZAxis  : the unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type lowX: float
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type anXAxis: OCC.wrapper.gp.gp_XYZ
        :type anZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_Init(self, *args)


    def Size(self, *args):
        """
        Size(IGESSolid_RightAngularWedge self) -> gp_XYZ

        returns the size

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_Size(self, *args)


    def XBigLength(self, *args):
        """
        XBigLength(IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local X-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_XBigLength(self, *args)


    def XSmallLength(self, *args):
        """
        XSmallLength(IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the smaller length along the local X-direction at Y=LY

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_XSmallLength(self, *args)


    def YLength(self, *args):
        """
        YLength(IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local Y-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local Z-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_ZLength(self, *args)


    def Corner(self, *args):
        """
        Corner(IGESSolid_RightAngularWedge self) -> gp_Pnt

        returns the corner point coordinates

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_Corner(self, *args)


    def TransformedCorner(self, *args):
        """
        TransformedCorner(IGESSolid_RightAngularWedge self) -> gp_Pnt

        returns the corner point coordinates after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_TransformedCorner(self, *args)


    def XAxis(self, *args):
        """
        XAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local X-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Y-axis
        it is got by taking the cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Y-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Z-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Z-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_TransformedZAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_RightAngularWedge_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_RightAngularWedge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_RightAngularWedge
IGESSolid_RightAngularWedge_swigregister = _IGESSolid.IGESSolid_RightAngularWedge_swigregister
IGESSolid_RightAngularWedge_swigregister(IGESSolid_RightAngularWedge)

def IGESSolid_RightAngularWedge_get_type_name(*args):
    """
    IGESSolid_RightAngularWedge_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_RightAngularWedge_get_type_name(*args)

def IGESSolid_RightAngularWedge_get_type_descriptor(*args):
    """
    IGESSolid_RightAngularWedge_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_RightAngularWedge_get_type_descriptor(*args)

class Handle_IGESSolid_Loop(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Loop self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Loop_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Loop self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Loop self, IGESSolid_Loop thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Loop_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Loop self, Handle_IGESSolid_Loop theHandle) -> Handle_IGESSolid_Loop
        assign(Handle_IGESSolid_Loop self, IGESSolid_Loop thePtr) -> Handle_IGESSolid_Loop
        assign(Handle_IGESSolid_Loop self, Handle_IGESSolid_Loop theHandle) -> Handle_IGESSolid_Loop

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Loop_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Loop self) -> IGESSolid_Loop

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Loop_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Loop self) -> IGESSolid_Loop

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Loop___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Loop self) -> IGESSolid_Loop

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Loop___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Loop___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Loop___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Loop_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Loop

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Loop self, Handle_TColStd_HArray1OfInteger types, Handle_IGESData_HArray1OfIGESEntity edges, Handle_TColStd_HArray1OfInteger index, Handle_TColStd_HArray1OfInteger orient, Handle_TColStd_HArray1OfInteger nbParameterCurves, Handle_IGESBasic_HArray1OfHArray1OfInteger isoparametricFlags, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity curves)

        This method is used to set the fields of the class Loop
        - types              : 0 = Edge; 1 = Vertex
        - edges              : Pointer to the EdgeList or VertexList
        - index              : Index of the edge into the EdgeList
        VertexList entity
        - orient             : Orientation flag of the edge
        - nbParameterCurves  : the number of parameter space curves
        for each edge
        - isoparametricFlags : the isoparametric flag of the
        parameter space curve
        - curves             : the parameter space curves
        raises exception if length of types, edges, index, orient and
        nbParameterCurves do not match or the length of
        isoparametricFlags and curves do not match

        :type types: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type edges: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type index: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type orient: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbParameterCurves: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type isoparametricFlags: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger
        :type curves: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Init(self, *args)


    def IsBound(self, *args):
        """
        IsBound(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Tells if a Loop is a Bound (FN 1) else it is free (FN 0)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IsBound(self, *args)


    def SetBound(self, *args):
        """
        SetBound(Handle_IGESSolid_Loop self, Standard_Boolean const bound)

        Sets or Unset the Bound Status (from Form Number)
        Default is True

        :type bound: bool

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SetBound(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(Handle_IGESSolid_Loop self) -> Standard_Integer

        returns the number of edge tuples

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbEdges(self, *args)


    def EdgeType(self, *args):
        """
        EdgeType(Handle_IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Integer

        returns the type of Index'th edge (0 = Edge, 1 = Vertex)
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_EdgeType(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_IGESSolid_Loop self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        return the EdgeList or VertexList corresponding to the Index
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Edge(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Boolean

        returns the orientation flag corresponding to Index'th edge
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Orientation(self, *args)


    def NbParameterCurves(self, *args):
        """
        NbParameterCurves(Handle_IGESSolid_Loop self, Standard_Integer const Index) -> Standard_Integer

        return the number of parameter space curves associated with
        Index'th Edge
        raises exception if Index <= 0 or Index > NbEdges()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbParameterCurves(self, *args)


    def IsIsoparametric(self, *args):
        """
        IsIsoparametric(Handle_IGESSolid_Loop self, Standard_Integer const EdgeIndex, Standard_Integer const CurveIndex) -> Standard_Boolean

        :type EdgeIndex: int
        :type CurveIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IsIsoparametric(self, *args)


    def ParametricCurve(self, *args):
        """
        ParametricCurve(Handle_IGESSolid_Loop self, Standard_Integer const EdgeIndex, Standard_Integer const CurveIndex) -> Handle_IGESData_IGESEntity

        returns the CurveIndex'th parameter space curve associated with
        EdgeIndex'th edge
        raises exception if EdgeIndex <= 0 or EdgeIndex > NbEdges() or
        if CurveIndex <= 0 or CurveIndex > NbParameterCurves(EdgeIndex)

        :type EdgeIndex: int
        :type CurveIndex: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ParametricCurve(self, *args)


    def ListIndex(self, *args):
        """
        ListIndex(Handle_IGESSolid_Loop self, Standard_Integer const num) -> Standard_Integer

        raises exception If num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ListIndex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Loop self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Loop_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Loop_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Loop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Loop self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Loop self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Loop self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Loop self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Loop self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Loop self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Loop self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Loop self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Loop self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Loop self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Loop self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Loop self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Loop self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Loop self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Loop self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Loop_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Loop self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Loop self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Loop self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Loop self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Loop self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Loop self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Loop self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Loop self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Loop self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Loop self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Loop self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Loop self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Loop self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Loop self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Loop self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Loop self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Loop self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Loop_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Loop self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Loop_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Loop self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Loop self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Loop self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Loop self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Loop self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Loop self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Loop self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Loop self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Loop self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Loop self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Loop self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Loop_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Loop self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Loop self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Loop self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Loop self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Loop_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Loop self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Loop_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Loop self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Loop_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Loop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Loop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Loop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Loop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Loop_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Loop self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Loop_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Loop self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Loop self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Loop_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Loop self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Loop_DecrementRefCounter(self, *args)

Handle_IGESSolid_Loop_swigregister = _IGESSolid.Handle_IGESSolid_Loop_swigregister
Handle_IGESSolid_Loop_swigregister(Handle_IGESSolid_Loop)

def Handle_IGESSolid_Loop_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Loop_DownCast(thing)
Handle_IGESSolid_Loop_DownCast = _IGESSolid.Handle_IGESSolid_Loop_DownCast

class IGESSolid_ToolFace(object):
    """
    Tool to work on a Face. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolFace self) -> IGESSolid_ToolFace

        Returns a ToolFace, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolFace_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolFace_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Face <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolFace_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolFace_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolFace_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolFace self, Handle_IGESSolid_Face entfrom, Handle_IGESSolid_Face entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolFace_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolFace self, Handle_IGESSolid_Face ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolFace_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolFace
IGESSolid_ToolFace_swigregister = _IGESSolid.IGESSolid_ToolFace_swigregister
IGESSolid_ToolFace_swigregister(IGESSolid_ToolFace)

class Handle_IGESSolid_CylindricalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_CylindricalSurface self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_CylindricalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_CylindricalSurface self, IGESSolid_CylindricalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_CylindricalSurface self, Handle_IGESSolid_CylindricalSurface theHandle) -> Handle_IGESSolid_CylindricalSurface
        assign(Handle_IGESSolid_CylindricalSurface self, IGESSolid_CylindricalSurface thePtr) -> Handle_IGESSolid_CylindricalSurface
        assign(Handle_IGESSolid_CylindricalSurface self, Handle_IGESSolid_CylindricalSurface theHandle) -> Handle_IGESSolid_CylindricalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_CylindricalSurface self) -> IGESSolid_CylindricalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_CylindricalSurface self) -> IGESSolid_CylindricalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_CylindricalSurface self) -> IGESSolid_CylindricalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_CylindricalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_CylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_CylindricalSurface_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_CylindricalSurface

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_CylindricalSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction anAxis, Standard_Real const aRadius, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        CylindricalSurface
        - aLocation : the location of the point on axis
        - anAxis    : the direction of the axis
        - aRadius   : the radius at the axis point
        - aRefdir   : the reference direction (parametrised surface)
        default NULL (unparametrised surface)

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRadius: float
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Point

        returns the point on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LocationPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Direction

        returns the direction on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Axis(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESSolid_CylindricalSurface self) -> Standard_Real

        returns the radius at the axis point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Radius(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        returns whether the surface is parametrised or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IsParametrised(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction only for parametrised surface
        else returns NULL

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_ReferenceDir(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_CylindricalSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_CylindricalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_CylindricalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_CylindricalSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_CylindricalSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_CylindricalSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_CylindricalSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_CylindricalSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_CylindricalSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_CylindricalSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_CylindricalSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_CylindricalSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_CylindricalSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_CylindricalSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_CylindricalSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_CylindricalSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_CylindricalSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_CylindricalSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_CylindricalSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_CylindricalSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_CylindricalSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_CylindricalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_CylindricalSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_CylindricalSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_CylindricalSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_CylindricalSurface self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_CylindricalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_CylindricalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_CylindricalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_CylindricalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_CylindricalSurface self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_CylindricalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DecrementRefCounter(self, *args)

Handle_IGESSolid_CylindricalSurface_swigregister = _IGESSolid.Handle_IGESSolid_CylindricalSurface_swigregister
Handle_IGESSolid_CylindricalSurface_swigregister(Handle_IGESSolid_CylindricalSurface)

def Handle_IGESSolid_CylindricalSurface_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_CylindricalSurface_DownCast(thing)
Handle_IGESSolid_CylindricalSurface_DownCast = _IGESSolid.Handle_IGESSolid_CylindricalSurface_DownCast

class IGESSolid_ToolCylindricalSurface(object):
    """
    Tool to work on a CylindricalSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolCylindricalSurface self) -> IGESSolid_ToolCylindricalSurface

        Returns a ToolCylindricalSurface, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolCylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a CylindricalSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface entfrom, Handle_IGESSolid_CylindricalSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolCylindricalSurface self, Handle_IGESSolid_CylindricalSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolCylindricalSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolCylindricalSurface
IGESSolid_ToolCylindricalSurface_swigregister = _IGESSolid.IGESSolid_ToolCylindricalSurface_swigregister
IGESSolid_ToolCylindricalSurface_swigregister(IGESSolid_ToolCylindricalSurface)

class Handle_IGESSolid_SphericalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SphericalSurface self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SphericalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SphericalSurface self, IGESSolid_SphericalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SphericalSurface self, Handle_IGESSolid_SphericalSurface theHandle) -> Handle_IGESSolid_SphericalSurface
        assign(Handle_IGESSolid_SphericalSurface self, IGESSolid_SphericalSurface thePtr) -> Handle_IGESSolid_SphericalSurface
        assign(Handle_IGESSolid_SphericalSurface self, Handle_IGESSolid_SphericalSurface theHandle) -> Handle_IGESSolid_SphericalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SphericalSurface self) -> IGESSolid_SphericalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SphericalSurface self) -> IGESSolid_SphericalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SphericalSurface self) -> IGESSolid_SphericalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SphericalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SphericalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SphericalSurface_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SphericalSurface

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SphericalSurface self, Handle_IGESGeom_Point aCenter, Standard_Real const aRadius, Handle_IGESGeom_Direction anAxis, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        SphericalSurface
        - aCenter : the coordinates of the center point
        - aRadius : value of radius
        - anAxis  : the direction of the axis
        Null in case of Unparametrised surface
        - aRefdir : the reference direction
        Null in case of Unparametrised surface

        :type aCenter: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type aRadius: float
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Init(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Point

        returns the center of the spherical surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESSolid_SphericalSurface self) -> gp_Pnt

        returns the center of the spherical surface after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_TransformedCenter(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESSolid_SphericalSurface self) -> Standard_Real

        returns the radius of the spherical surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Radius(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis (Parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Axis(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (Parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if the surface is parametrised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IsParametrised(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SphericalSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SphericalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SphericalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SphericalSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SphericalSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SphericalSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SphericalSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SphericalSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SphericalSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SphericalSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SphericalSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SphericalSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SphericalSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SphericalSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SphericalSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SphericalSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SphericalSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SphericalSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SphericalSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SphericalSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SphericalSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SphericalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SphericalSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SphericalSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SphericalSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SphericalSurface self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SphericalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SphericalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SphericalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SphericalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SphericalSurface self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SphericalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SphericalSurface_DecrementRefCounter(self, *args)

Handle_IGESSolid_SphericalSurface_swigregister = _IGESSolid.Handle_IGESSolid_SphericalSurface_swigregister
Handle_IGESSolid_SphericalSurface_swigregister(Handle_IGESSolid_SphericalSurface)

def Handle_IGESSolid_SphericalSurface_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SphericalSurface_DownCast(thing)
Handle_IGESSolid_SphericalSurface_DownCast = _IGESSolid.Handle_IGESSolid_SphericalSurface_DownCast

class IGESSolid_VertexList(IGESData.IGESData_IGESEntity):
    """
    defines VertexList, Type <502> Form Number <1>
    in package IGESSolid
    A vertex is a point in R3. A vertex is the bound of an
    edge and can participate in the bounds of a face.
    It contains one or more vertices.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_VertexList
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_VertexList(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_VertexList self) -> IGESSolid_VertexList

        defines VertexList, Type <502> Form Number <1>
        in package IGESSolid
        A vertex is a point in R3. A vertex is the bound of an
        edge and can participate in the bounds of a face.
        It contains one or more vertices.
        """
        this = _IGESSolid.new_IGESSolid_VertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_VertexList self, Handle_TColgp_HArray1OfXYZ vertices)

        This method is used to set the fields of the class
        VertexList
        - vertices : the vertices in the list

        :type vertices: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESSolid.IGESSolid_VertexList_Init(self, *args)


    def NbVertices(self, *args):
        """
        NbVertices(IGESSolid_VertexList self) -> Standard_Integer

        return the number of vertices in the list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_VertexList_NbVertices(self, *args)


    def Vertex(self, *args):
        """
        Vertex(IGESSolid_VertexList self, Standard_Integer const num) -> gp_Pnt

        returns the num'th vertex in the list
        raises exception if num  <= 0 or num > NbVertices()

        :type num: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_VertexList_Vertex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_VertexList_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_VertexList_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_VertexList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_VertexList
IGESSolid_VertexList_swigregister = _IGESSolid.IGESSolid_VertexList_swigregister
IGESSolid_VertexList_swigregister(IGESSolid_VertexList)

def IGESSolid_VertexList_get_type_name(*args):
    """
    IGESSolid_VertexList_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_VertexList_get_type_name(*args)

def IGESSolid_VertexList_get_type_descriptor(*args):
    """
    IGESSolid_VertexList_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_VertexList_get_type_descriptor(*args)

class IGESSolid_ManifoldSolid(IGESData.IGESData_IGESEntity):
    """
    defines ManifoldSolid, Type <186> Form Number <0>
    in package IGESSolid
    A manifold solid is a bounded, closed, and finite volume
    in three dimensional Euclidean space
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_ManifoldSolid
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_ManifoldSolid(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_ManifoldSolid self) -> IGESSolid_ManifoldSolid

        defines ManifoldSolid, Type <186> Form Number <0>
        in package IGESSolid
        A manifold solid is a bounded, closed, and finite volume
        in three dimensional Euclidean space
        """
        this = _IGESSolid.new_IGESSolid_ManifoldSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_ManifoldSolid self, Handle_IGESSolid_Shell aShell, Standard_Boolean const shellflag, Handle_IGESSolid_HArray1OfShell voidShells, Handle_TColStd_HArray1OfInteger voidShellFlags)

        This method is used to set the fields of the class
        ManifoldSolid
        - aShell         : pointer to the shell
        - shellflag      : orientation flag of shell
        - voidShells     : the void shells
        - voidShellFlags : orientation of the void shells
        raises exception if length of voidShells and voidShellFlags
        do not match

        :type aShell: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type shellflag: bool
        :type voidShells: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfShell
        :type voidShellFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_Init(self, *args)


    def Shell(self, *args):
        """
        Shell(IGESSolid_ManifoldSolid self) -> Handle_IGESSolid_Shell

        returns the Shell entity which is being referred

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_Shell(self, *args)


    def OrientationFlag(self, *args):
        """
        OrientationFlag(IGESSolid_ManifoldSolid self) -> Standard_Boolean

        returns the orientation flag of the shell

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_OrientationFlag(self, *args)


    def NbVoidShells(self, *args):
        """
        NbVoidShells(IGESSolid_ManifoldSolid self) -> Standard_Integer

        returns the number of void shells

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_NbVoidShells(self, *args)


    def VoidShell(self, *args):
        """
        VoidShell(IGESSolid_ManifoldSolid self, Standard_Integer const Index) -> Handle_IGESSolid_Shell

        returns Index'th void shell.
        raises exception if Index  <= 0 or Index > NbVoidShells()

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_VoidShell(self, *args)


    def VoidOrientationFlag(self, *args):
        """
        VoidOrientationFlag(IGESSolid_ManifoldSolid self, Standard_Integer const Index) -> Standard_Boolean

        returns Index'th orientation flag.
        raises exception if Index  <= 0 or Index > NbVoidShells()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_VoidOrientationFlag(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_ManifoldSolid_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_ManifoldSolid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ManifoldSolid
IGESSolid_ManifoldSolid_swigregister = _IGESSolid.IGESSolid_ManifoldSolid_swigregister
IGESSolid_ManifoldSolid_swigregister(IGESSolid_ManifoldSolid)

def IGESSolid_ManifoldSolid_get_type_name(*args):
    """
    IGESSolid_ManifoldSolid_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_ManifoldSolid_get_type_name(*args)

def IGESSolid_ManifoldSolid_get_type_descriptor(*args):
    """
    IGESSolid_ManifoldSolid_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_ManifoldSolid_get_type_descriptor(*args)

class IGESSolid_HArray1OfFace(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_HArray1OfFace
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_HArray1OfFace(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_HArray1OfFace self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESSolid_HArray1OfFace
        __init__(IGESSolid_HArray1OfFace self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESSolid_Face theValue) -> IGESSolid_HArray1OfFace
        __init__(IGESSolid_HArray1OfFace self, NCollection_Array1_Handle_IGESSolid_Face theOther) -> IGESSolid_HArray1OfFace

        :type theOther: OCC.wrapper.IGESSolid.IGESSolid_Array1OfFace

        """
        this = _IGESSolid.new_IGESSolid_HArray1OfFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfFace

        """
        res = _IGESSolid.IGESSolid_HArray1OfFace_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESSolid_HArray1OfFace self) -> NCollection_Array1_Handle_IGESSolid_Face

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfFace

        """
        return _IGESSolid.IGESSolid_HArray1OfFace_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_HArray1OfFace_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_HArray1OfFace_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_HArray1OfFace_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_HArray1OfFace
IGESSolid_HArray1OfFace_swigregister = _IGESSolid.IGESSolid_HArray1OfFace_swigregister
IGESSolid_HArray1OfFace_swigregister(IGESSolid_HArray1OfFace)

def IGESSolid_HArray1OfFace_get_type_name(*args):
    """
    IGESSolid_HArray1OfFace_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_HArray1OfFace_get_type_name(*args)

def IGESSolid_HArray1OfFace_get_type_descriptor(*args):
    """
    IGESSolid_HArray1OfFace_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_HArray1OfFace_get_type_descriptor(*args)

class IGESSolid_HArray1OfLoop(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_HArray1OfLoop
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_HArray1OfLoop(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_HArray1OfLoop self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESSolid_HArray1OfLoop
        __init__(IGESSolid_HArray1OfLoop self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESSolid_Loop theValue) -> IGESSolid_HArray1OfLoop
        __init__(IGESSolid_HArray1OfLoop self, NCollection_Array1_Handle_IGESSolid_Loop theOther) -> IGESSolid_HArray1OfLoop

        :type theOther: OCC.wrapper.IGESSolid.IGESSolid_Array1OfLoop

        """
        this = _IGESSolid.new_IGESSolid_HArray1OfLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfLoop

        """
        res = _IGESSolid.IGESSolid_HArray1OfLoop_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESSolid_HArray1OfLoop self) -> NCollection_Array1_Handle_IGESSolid_Loop

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfLoop

        """
        return _IGESSolid.IGESSolid_HArray1OfLoop_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_HArray1OfLoop_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_HArray1OfLoop_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_HArray1OfLoop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_HArray1OfLoop
IGESSolid_HArray1OfLoop_swigregister = _IGESSolid.IGESSolid_HArray1OfLoop_swigregister
IGESSolid_HArray1OfLoop_swigregister(IGESSolid_HArray1OfLoop)

def IGESSolid_HArray1OfLoop_get_type_name(*args):
    """
    IGESSolid_HArray1OfLoop_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_HArray1OfLoop_get_type_name(*args)

def IGESSolid_HArray1OfLoop_get_type_descriptor(*args):
    """
    IGESSolid_HArray1OfLoop_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_HArray1OfLoop_get_type_descriptor(*args)

class IGESSolid_SolidOfLinearExtrusion(IGESData.IGESData_IGESEntity):
    """
    defines SolidOfLinearExtrusion, Type <164> Form Number <0>
    in package IGESSolid
    Solid of linear extrusion is defined by translatin an
    area determined by a planar curve
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SolidOfLinearExtrusion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SolidOfLinearExtrusion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SolidOfLinearExtrusion self) -> IGESSolid_SolidOfLinearExtrusion

        defines SolidOfLinearExtrusion, Type <164> Form Number <0>
        in package IGESSolid
        Solid of linear extrusion is defined by translatin an
        area determined by a planar curve
        """
        this = _IGESSolid.new_IGESSolid_SolidOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity aCurve, Standard_Real const aLength, gp_XYZ aDirection)

        This method is used to set the fields of the class
        SolidOfLinearExtrusion
        - aCurve     : the planar curve that is to be translated
        - aLength    : the length of extrusion
        - aDirection : the vector specifying the direction of extrusion
        default (0,0,1)

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aLength: float
        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_Init(self, *args)


    def Curve(self, *args):
        """
        Curve(IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_IGESEntity

        returns the planar curve that is to be translated

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_Curve(self, *args)


    def ExtrusionLength(self, *args):
        """
        ExtrusionLength(IGESSolid_SolidOfLinearExtrusion self) -> Standard_Real

        returns the Extrusion Length

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_ExtrusionLength(self, *args)


    def ExtrusionDirection(self, *args):
        """
        ExtrusionDirection(IGESSolid_SolidOfLinearExtrusion self) -> gp_Dir

        returns the Extrusion direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_ExtrusionDirection(self, *args)


    def TransformedExtrusionDirection(self, *args):
        """
        TransformedExtrusionDirection(IGESSolid_SolidOfLinearExtrusion self) -> gp_Dir

        returns ExtrusionDirection after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_TransformedExtrusionDirection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SolidOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SolidOfLinearExtrusion
IGESSolid_SolidOfLinearExtrusion_swigregister = _IGESSolid.IGESSolid_SolidOfLinearExtrusion_swigregister
IGESSolid_SolidOfLinearExtrusion_swigregister(IGESSolid_SolidOfLinearExtrusion)

def IGESSolid_SolidOfLinearExtrusion_get_type_name(*args):
    """
    IGESSolid_SolidOfLinearExtrusion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_get_type_name(*args)

def IGESSolid_SolidOfLinearExtrusion_get_type_descriptor(*args):
    """
    IGESSolid_SolidOfLinearExtrusion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SolidOfLinearExtrusion_get_type_descriptor(*args)

class IGESSolid_Shell(IGESData.IGESData_IGESEntity):
    """
    defines Shell, Type <514> Form Number <1>
    in package IGESSolid
    Shell entity is a connected entity of dimensionality 2
    which divides R3 into two arcwise connected open subsets,
    one of which is finite. Inside of the shell is defined to
    be the finite region.
    From IGES-5.3, Form can be <1> for Closed or <2> for Open
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Shell
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Shell(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Shell self) -> IGESSolid_Shell

        defines Shell, Type <514> Form Number <1>
        in package IGESSolid
        Shell entity is a connected entity of dimensionality 2
        which divides R3 into two arcwise connected open subsets,
        one of which is finite. Inside of the shell is defined to
        be the finite region.
        From IGES-5.3, Form can be <1> for Closed or <2> for Open
        """
        this = _IGESSolid.new_IGESSolid_Shell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Shell self, Handle_IGESSolid_HArray1OfFace allFaces, Handle_TColStd_HArray1OfInteger allOrient)

        This method is used to set the fields of the class Shell
        - allFaces  : the faces comprising the shell
        - allOrient : the orientation flags of the shell
        raises exception if length of allFaces & allOrient do not match

        :type allFaces: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfFace
        :type allOrient: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.IGESSolid_Shell_Init(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(IGESSolid_Shell self) -> Standard_Boolean

        Tells if a Shell is Closed, i.e. if its FormNumber is 1
        (this is the default)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Shell_IsClosed(self, *args)


    def SetClosed(self, *args):
        """
        SetClosed(IGESSolid_Shell self, Standard_Boolean const closed)

        Sets or Unsets the Closed status (FormNumber = 1 else 2)

        :type closed: bool

        """
        return _IGESSolid.IGESSolid_Shell_SetClosed(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(IGESSolid_Shell self) -> Standard_Integer

        returns the number of the face entities in the shell

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Shell_NbFaces(self, *args)


    def Face(self, *args):
        """
        Face(IGESSolid_Shell self, Standard_Integer const Index) -> Handle_IGESSolid_Face

        returns the Index'th face entity of the shell
        raises exception if Index <= 0 or Index > NbFaces()

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face

        """
        return _IGESSolid.IGESSolid_Shell_Face(self, *args)


    def Orientation(self, *args):
        """
        Orientation(IGESSolid_Shell self, Standard_Integer const Index) -> Standard_Boolean

        returns the orientation of Index'th face w.r.t the direction of
        the underlying surface
        raises exception if Index <= 0 or Index > NbFaces()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Shell_Orientation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Shell_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Shell_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Shell_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Shell
IGESSolid_Shell_swigregister = _IGESSolid.IGESSolid_Shell_swigregister
IGESSolid_Shell_swigregister(IGESSolid_Shell)

def IGESSolid_Shell_get_type_name(*args):
    """
    IGESSolid_Shell_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Shell_get_type_name(*args)

def IGESSolid_Shell_get_type_descriptor(*args):
    """
    IGESSolid_Shell_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Shell_get_type_descriptor(*args)

class IGESSolid_TopoBuilder(object):
    """
    This class manages the creation of an IGES Topologic entity
    (BREP : ManifoldSolid, Shell, Face)
    This includes definiting of Vertex and Edge Lists,
    building of Edges and Loops
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_TopoBuilder self) -> IGESSolid_TopoBuilder

        Creates an empty TopoBuilder
        This creates also a unique VertexList and a unique EdgeList,
        empty, but which can be referenced from starting


        """
        this = _IGESSolid.new_IGESSolid_TopoBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(IGESSolid_TopoBuilder self)

        Resets the TopoBuilder for an entirely new operation
        (with a new EdgeList, a new VertexList, new Shells, ...)


        """
        return _IGESSolid.IGESSolid_TopoBuilder_Clear(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(IGESSolid_TopoBuilder self, gp_XYZ val)

        Adds a Vertex to the VertexList

        :type val: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_TopoBuilder_AddVertex(self, *args)


    def NbVertices(self, *args):
        """
        NbVertices(IGESSolid_TopoBuilder self) -> Standard_Integer

        Returns the count of already recorded Vertices

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_TopoBuilder_NbVertices(self, *args)


    def Vertex(self, *args):
        """
        Returns a Vertex, given its rank

        :type num: int
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _IGESSolid.IGESSolid_TopoBuilder_Vertex(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VertexList(self, *args):
        """
        VertexList(IGESSolid_TopoBuilder self) -> Handle_IGESSolid_VertexList

        Returns the VertexList. It can be referenced, but it remains
        empty until call to EndShell or EndSolid

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList

        """
        return _IGESSolid.IGESSolid_TopoBuilder_VertexList(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(IGESSolid_TopoBuilder self, Handle_IGESData_IGESEntity curve, Standard_Integer const vstart, Standard_Integer const vend)

        Adds an Edge (3D) to the EdgeList, defined by a Curve and
        two number of Vertex, for start and end

        :type curve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type vstart: int
        :type vend: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_AddEdge(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(IGESSolid_TopoBuilder self) -> Standard_Integer

        Returns the count of recorded Edges (3D)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_TopoBuilder_NbEdges(self, *args)


    def Edge(self, *args):
        """
        Edge(IGESSolid_TopoBuilder self, Standard_Integer const num, Handle_IGESData_IGESEntity curve)

        Returns the definition of an Edge (3D) given its rank

        :type num: int
        :type curve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type vstart: int
        :type vend: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_Edge(self, *args)


    def EdgeList(self, *args):
        """
        EdgeList(IGESSolid_TopoBuilder self) -> Handle_IGESSolid_EdgeList

        Returns the EdgeList. It can be referenced, but it remains
        empty until call to EndShell or EndSolid

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList

        """
        return _IGESSolid.IGESSolid_TopoBuilder_EdgeList(self, *args)


    def MakeLoop(self, *args):
        """
        MakeLoop(IGESSolid_TopoBuilder self)

        Begins the definition of a new Loop : it is the Current Loop
        All Edges (UV) defined by MakeEdge/EndEdge will be added in it
        The Loop can then be referenced but is empty. It will be
        filled with its Edges(UV) by EndLoop (from SetOuter/AddInner)


        """
        return _IGESSolid.IGESSolid_TopoBuilder_MakeLoop(self, *args)


    def MakeEdge(self, *args):
        """
        MakeEdge(IGESSolid_TopoBuilder self, Standard_Integer const edgetype, Standard_Integer const edge3d, Standard_Integer const orientation)

        Defines an Edge(UV), to be added in the current Loop by EndEdge
        <edgetype> gives the type of the edge
        <edge3d> identifies the Edge(3D) used as support
        The EdgeList is allways the current one
        <orientation gives the orientation flag
        It is then necessary to :
        - give the parametric curves
        - close the definition of this edge(UV) by EndEdge, else
        the next call to MakeEdge will erase this one

        :type edgetype: int
        :type edge3d: int
        :type orientation: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_MakeEdge(self, *args)


    def AddCurveUV(self, *args):
        """
        AddCurveUV(IGESSolid_TopoBuilder self, Handle_IGESData_IGESEntity curve, Standard_Integer const iso)

        Adds a Parametric Curve (UV) to the current Edge(UV)

        :type curve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iso: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_AddCurveUV(self, *args)


    def EndEdge(self, *args):
        """
        EndEdge(IGESSolid_TopoBuilder self)

        Closes the definition of an Edge(UV) and adds it to the
        current Loop


        """
        return _IGESSolid.IGESSolid_TopoBuilder_EndEdge(self, *args)


    def MakeFace(self, *args):
        """
        MakeFace(IGESSolid_TopoBuilder self, Handle_IGESData_IGESEntity surface)

        Begins the definition of a new Face, on a surface
        All Loops defined by MakeLoop will be added in it, according
        the closing call : SetOuter for the Outer Loop (by default,
        if SetOuter is not called, no OuterLoop is defined);
        AddInner for the list of Inner Loops (there can be none)

        :type surface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_TopoBuilder_MakeFace(self, *args)


    def SetOuter(self, *args):
        """
        SetOuter(IGESSolid_TopoBuilder self)

        Closes the current Loop and sets it Loop as Outer Loop. If no
        current Loop has yet been defined, does nothing.


        """
        return _IGESSolid.IGESSolid_TopoBuilder_SetOuter(self, *args)


    def AddInner(self, *args):
        """
        AddInner(IGESSolid_TopoBuilder self)

        Closes the current Loop and adds it to the list of Inner Loops
        for the current Face


        """
        return _IGESSolid.IGESSolid_TopoBuilder_AddInner(self, *args)


    def EndFace(self, *args):
        """
        EndFace(IGESSolid_TopoBuilder self, Standard_Integer const orientation)

        Closes the definition of the current Face, fills it and adds
        it to the current Shell with an orientation flag (0/1)

        :type orientation: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_EndFace(self, *args)


    def MakeShell(self, *args):
        """
        MakeShell(IGESSolid_TopoBuilder self)

        Begins the definition of a new Shell (either Simple or in a
        Solid)


        """
        return _IGESSolid.IGESSolid_TopoBuilder_MakeShell(self, *args)


    def EndSimpleShell(self, *args):
        """
        EndSimpleShell(IGESSolid_TopoBuilder self)

        Closes the whole definition as that of a simple Shell


        """
        return _IGESSolid.IGESSolid_TopoBuilder_EndSimpleShell(self, *args)


    def SetMainShell(self, *args):
        """
        SetMainShell(IGESSolid_TopoBuilder self, Standard_Integer const orientation)

        Closes the definition of the current Shell as for the Main
        Shell of a Solid, with an orientation flag (0/1)

        :type orientation: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_SetMainShell(self, *args)


    def AddVoidShell(self, *args):
        """
        AddVoidShell(IGESSolid_TopoBuilder self, Standard_Integer const orientation)

        Closes the definition of the current Shell and adds it to the
        list of Void Shells of a Solid, with an orientation flag (0/1)

        :type orientation: int

        """
        return _IGESSolid.IGESSolid_TopoBuilder_AddVoidShell(self, *args)


    def EndSolid(self, *args):
        """
        EndSolid(IGESSolid_TopoBuilder self)

        Closes the whole definition as that of a ManifoldSolid
        Its call is exclusive from that of EndSimpleShell


        """
        return _IGESSolid.IGESSolid_TopoBuilder_EndSolid(self, *args)


    def Shell(self, *args):
        """
        Shell(IGESSolid_TopoBuilder self) -> Handle_IGESSolid_Shell

        Returns the current Shell. The current Shell is created empty
        by MakeShell and filled by EndShell

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _IGESSolid.IGESSolid_TopoBuilder_Shell(self, *args)


    def Solid(self, *args):
        """
        Solid(IGESSolid_TopoBuilder self) -> Handle_IGESSolid_ManifoldSolid

        Returns the current ManifoldSolid. It is created empty by
        Create and filled by EndSolid

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid

        """
        return _IGESSolid.IGESSolid_TopoBuilder_Solid(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_TopoBuilder
IGESSolid_TopoBuilder_swigregister = _IGESSolid.IGESSolid_TopoBuilder_swigregister
IGESSolid_TopoBuilder_swigregister(IGESSolid_TopoBuilder)

class IGESSolid_SolidOfRevolution(IGESData.IGESData_IGESEntity):
    """
    defines SolidOfRevolution, Type <162> Form Number <0,1>
    in package IGESSolid
    This entity is defined by revolving the area determined
    by a planar curve about a specified axis through a given
    fraction of full rotation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SolidOfRevolution
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SolidOfRevolution(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SolidOfRevolution self) -> IGESSolid_SolidOfRevolution

        defines SolidOfRevolution, Type <162> Form Number <0,1>
        in package IGESSolid
        This entity is defined by revolving the area determined
        by a planar curve about a specified axis through a given
        fraction of full rotation.
        """
        this = _IGESSolid.new_IGESSolid_SolidOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity aCurve, Standard_Real const aFract, gp_XYZ aAxisPnt, gp_XYZ aDirection)

        This method is used to set the fields of the class
        SolidOfRevolution
        - aCurve     : the curve entity that is to be revolved
        - aFract     : the fraction of full rotation (default 1.0)
        - aAxisPnt   : the point on the axis
        - aDirection : the direction of the axis

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFract: float
        :type aAxisPnt: OCC.wrapper.gp.gp_XYZ
        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_Init(self, *args)


    def SetClosedToAxis(self, *args):
        """
        SetClosedToAxis(IGESSolid_SolidOfRevolution self, Standard_Boolean const mode)

        Sets the Curve to be by default, Closed to Axis (Form 0)
        if <mode> is True, Closed to Itself (Form 1) else

        :type mode: bool

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_SetClosedToAxis(self, *args)


    def IsClosedToAxis(self, *args):
        """
        IsClosedToAxis(IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if Form Number = 0
        if Form no is 0, then the curve is closed to axis
        if 1, the curve is closed to itself.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_IsClosedToAxis(self, *args)


    def Curve(self, *args):
        """
        Curve(IGESSolid_SolidOfRevolution self) -> Handle_IGESData_IGESEntity

        returns the curve entity that is to be revolved

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_Curve(self, *args)


    def Fraction(self, *args):
        """
        Fraction(IGESSolid_SolidOfRevolution self) -> Standard_Real

        returns the fraction of full rotation that the curve is to
        be rotated

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_Fraction(self, *args)


    def AxisPoint(self, *args):
        """
        AxisPoint(IGESSolid_SolidOfRevolution self) -> gp_Pnt

        returns the point on the axis

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_AxisPoint(self, *args)


    def TransformedAxisPoint(self, *args):
        """
        TransformedAxisPoint(IGESSolid_SolidOfRevolution self) -> gp_Pnt

        returns the point on the axis after applying Trans.Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_TransformedAxisPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_SolidOfRevolution self) -> gp_Dir

        returns the direction of the axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESSolid_SolidOfRevolution self) -> gp_Dir

        returns the direction of the axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_TransformedAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SolidOfRevolution_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SolidOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SolidOfRevolution
IGESSolid_SolidOfRevolution_swigregister = _IGESSolid.IGESSolid_SolidOfRevolution_swigregister
IGESSolid_SolidOfRevolution_swigregister(IGESSolid_SolidOfRevolution)

def IGESSolid_SolidOfRevolution_get_type_name(*args):
    """
    IGESSolid_SolidOfRevolution_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SolidOfRevolution_get_type_name(*args)

def IGESSolid_SolidOfRevolution_get_type_descriptor(*args):
    """
    IGESSolid_SolidOfRevolution_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SolidOfRevolution_get_type_descriptor(*args)

class IGESSolid_SolidAssembly(IGESData.IGESData_IGESEntity):
    """
    defines SolidAssembly, Type <184> Form <0>
    in package IGESSolid
    Solid assembly is a collection of items which possess a
    shared fixed geometric relationship.

    From IGES-5.3, From 1 says that at least one item is a Brep
    else all are Primitives, Boolean Trees, Solid Instances or
    other Assemblies
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SolidAssembly
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SolidAssembly(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SolidAssembly self) -> IGESSolid_SolidAssembly

        defines SolidAssembly, Type <184> Form <0>
        in package IGESSolid
        Solid assembly is a collection of items which possess a
        shared fixed geometric relationship.

        From IGES-5.3, From 1 says that at least one item is a Brep
        else all are Primitives, Boolean Trees, Solid Instances or
        other Assemblies
        """
        this = _IGESSolid.new_IGESSolid_SolidAssembly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SolidAssembly self, Handle_IGESData_HArray1OfIGESEntity allItems, Handle_IGESGeom_HArray1OfTransformationMatrix allMatrices)

        This method is used to set the fields of the class
        SolidAssembly
        - allItems    : the collection of items
        - allMatrices : transformation matrices corresponding to each
        item
        raises exception if the length of allItems & allMatrices
        do not match

        :type allItems: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allMatrices: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix

        """
        return _IGESSolid.IGESSolid_SolidAssembly_Init(self, *args)


    def HasBrep(self, *args):
        """
        HasBrep(IGESSolid_SolidAssembly self) -> Standard_Boolean

        Tells if at least one item is a Brep, from FormNumber

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_SolidAssembly_HasBrep(self, *args)


    def SetBrep(self, *args):
        """
        SetBrep(IGESSolid_SolidAssembly self, Standard_Boolean const hasbrep)

        Sets or Unsets the status "HasBrep" from FormNumber
        Default is False

        :type hasbrep: bool

        """
        return _IGESSolid.IGESSolid_SolidAssembly_SetBrep(self, *args)


    def NbItems(self, *args):
        """
        NbItems(IGESSolid_SolidAssembly self) -> Standard_Integer

        returns the number of items in the collection

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_SolidAssembly_NbItems(self, *args)


    def Item(self, *args):
        """
        Item(IGESSolid_SolidAssembly self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th item
        raises exception if Index <= 0 or Index > NbItems()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_SolidAssembly_Item(self, *args)


    def TransfMatrix(self, *args):
        """
        TransfMatrix(IGESSolid_SolidAssembly self, Standard_Integer const Index) -> Handle_IGESGeom_TransformationMatrix

        returns the transformation matrix of the Index'th item
        raises exception if Index <= 0 or Index > NbItems()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESSolid.IGESSolid_SolidAssembly_TransfMatrix(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SolidAssembly_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SolidAssembly_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SolidAssembly_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SolidAssembly
IGESSolid_SolidAssembly_swigregister = _IGESSolid.IGESSolid_SolidAssembly_swigregister
IGESSolid_SolidAssembly_swigregister(IGESSolid_SolidAssembly)

def IGESSolid_SolidAssembly_get_type_name(*args):
    """
    IGESSolid_SolidAssembly_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SolidAssembly_get_type_name(*args)

def IGESSolid_SolidAssembly_get_type_descriptor(*args):
    """
    IGESSolid_SolidAssembly_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SolidAssembly_get_type_descriptor(*args)

class IGESSolid_ToolSphere(object):
    """
    Tool to work on a Sphere. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSphere self) -> IGESSolid_ToolSphere

        Returns a ToolSphere, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSphere_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSphere_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Sphere <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSphere_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSphere_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSphere_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere entfrom, Handle_IGESSolid_Sphere entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSphere_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSphere self, Handle_IGESSolid_Sphere ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Sphere
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSphere_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSphere
IGESSolid_ToolSphere_swigregister = _IGESSolid.IGESSolid_ToolSphere_swigregister
IGESSolid_ToolSphere_swigregister(IGESSolid_ToolSphere)

class IGESSolid_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESSolid (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_GeneralModule self) -> IGESSolid_GeneralModule

        Creates a GeneralModule from IGESSolid and puts it into GeneralLib


        """
        this = _IGESSolid.new_IGESSolid_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Shape for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_GeneralModule
IGESSolid_GeneralModule_swigregister = _IGESSolid.IGESSolid_GeneralModule_swigregister
IGESSolid_GeneralModule_swigregister(IGESSolid_GeneralModule)

def IGESSolid_GeneralModule_get_type_name(*args):
    """
    IGESSolid_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_GeneralModule_get_type_name(*args)

def IGESSolid_GeneralModule_get_type_descriptor(*args):
    """
    IGESSolid_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_GeneralModule_get_type_descriptor(*args)

class IGESSolid_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Solid File Access Module for IGESSolid (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_ReadWriteModule self) -> IGESSolid_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESSolid.new_IGESSolid_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESSolid_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESSolid

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESSolid

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ReadWriteModule
IGESSolid_ReadWriteModule_swigregister = _IGESSolid.IGESSolid_ReadWriteModule_swigregister
IGESSolid_ReadWriteModule_swigregister(IGESSolid_ReadWriteModule)

def IGESSolid_ReadWriteModule_get_type_name(*args):
    """
    IGESSolid_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_ReadWriteModule_get_type_name(*args)

def IGESSolid_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESSolid_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_ReadWriteModule_get_type_descriptor(*args)

class IGESSolid_ToolPlaneSurface(object):
    """
    Tool to work on a PlaneSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolPlaneSurface self) -> IGESSolid_ToolPlaneSurface

        Returns a ToolPlaneSurface, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolPlaneSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a PlaneSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface entfrom, Handle_IGESSolid_PlaneSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolPlaneSurface self, Handle_IGESSolid_PlaneSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolPlaneSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolPlaneSurface
IGESSolid_ToolPlaneSurface_swigregister = _IGESSolid.IGESSolid_ToolPlaneSurface_swigregister
IGESSolid_ToolPlaneSurface_swigregister(IGESSolid_ToolPlaneSurface)

class IGESSolid_PlaneSurface(IGESData.IGESData_IGESEntity):
    """
    defines PlaneSurface, Type <190> Form Number <0,1>
    in package IGESSolid
    A plane surface entity is defined by a point on the
    surface and a normal to it.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_PlaneSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_PlaneSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_PlaneSurface self) -> IGESSolid_PlaneSurface

        defines PlaneSurface, Type <190> Form Number <0,1>
        in package IGESSolid
        A plane surface entity is defined by a point on the
        surface and a normal to it.
        """
        this = _IGESSolid.new_IGESSolid_PlaneSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_PlaneSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction aNormal, Handle_IGESGeom_Direction refdir)

        This method is used to set the fields of the class
        PlaneSurface
        - aLocation : the point on the surface
        - aNormal   : the surface normal direction
        - refdir    : the reference direction (default NULL) for
        unparameterised curves

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type aNormal: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type refdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_PlaneSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Point

        returns the point on the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.IGESSolid_PlaneSurface_LocationPoint(self, *args)


    def Normal(self, *args):
        """
        Normal(IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Direction

        returns the normal to the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_PlaneSurface_Normal(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (for parameterised curve)
        returns NULL for unparameterised curve

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_PlaneSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(IGESSolid_PlaneSurface self) -> Standard_Boolean

        returns True if parameterised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_PlaneSurface_IsParametrised(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_PlaneSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_PlaneSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_PlaneSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_PlaneSurface
IGESSolid_PlaneSurface_swigregister = _IGESSolid.IGESSolid_PlaneSurface_swigregister
IGESSolid_PlaneSurface_swigregister(IGESSolid_PlaneSurface)

def IGESSolid_PlaneSurface_get_type_name(*args):
    """
    IGESSolid_PlaneSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_PlaneSurface_get_type_name(*args)

def IGESSolid_PlaneSurface_get_type_descriptor(*args):
    """
    IGESSolid_PlaneSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_PlaneSurface_get_type_descriptor(*args)

class IGESSolid_SelectedComponent(IGESData.IGESData_IGESEntity):
    """
    defines SelectedComponent, Type <182> Form Number <0>
    in package IGESSolid
    The Selected Component entity provides a means of
    selecting one component of a disjoint CSG solid
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SelectedComponent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SelectedComponent(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SelectedComponent self) -> IGESSolid_SelectedComponent

        defines SelectedComponent, Type <182> Form Number <0>
        in package IGESSolid
        The Selected Component entity provides a means of
        selecting one component of a disjoint CSG solid
        """
        this = _IGESSolid.new_IGESSolid_SelectedComponent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SelectedComponent self, Handle_IGESSolid_BooleanTree anEntity, gp_XYZ selectPnt)

        This method is used to set the fields of the class
        SelectedComponent
        - anEntity  : the Boolean tree entity
        - selectPnt : Point in or on the desired component

        :type anEntity: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type selectPnt: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_SelectedComponent_Init(self, *args)


    def Component(self, *args):
        """
        Component(IGESSolid_SelectedComponent self) -> Handle_IGESSolid_BooleanTree

        returns the Boolean tree entity

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree

        """
        return _IGESSolid.IGESSolid_SelectedComponent_Component(self, *args)


    def SelectPoint(self, *args):
        """
        SelectPoint(IGESSolid_SelectedComponent self) -> gp_Pnt

        returns the point on/in the selected component

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_SelectedComponent_SelectPoint(self, *args)


    def TransformedSelectPoint(self, *args):
        """
        TransformedSelectPoint(IGESSolid_SelectedComponent self) -> gp_Pnt

        returns the point on/in the selected component
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_SelectedComponent_TransformedSelectPoint(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SelectedComponent_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SelectedComponent_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SelectedComponent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SelectedComponent
IGESSolid_SelectedComponent_swigregister = _IGESSolid.IGESSolid_SelectedComponent_swigregister
IGESSolid_SelectedComponent_swigregister(IGESSolid_SelectedComponent)

def IGESSolid_SelectedComponent_get_type_name(*args):
    """
    IGESSolid_SelectedComponent_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SelectedComponent_get_type_name(*args)

def IGESSolid_SelectedComponent_get_type_descriptor(*args):
    """
    IGESSolid_SelectedComponent_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SelectedComponent_get_type_descriptor(*args)

class IGESSolid_SpecificModule(IGESData.IGESData_SpecificModule):
    """Defines Services attached to IGES Entities : Dump, for IGESSolid"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SpecificModule self) -> IGESSolid_SpecificModule

        Creates a SpecificModule from IGESSolid & puts it into SpecificLib


        """
        this = _IGESSolid.new_IGESSolid_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESSolid

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_SpecificModule_OwnDump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SpecificModule
IGESSolid_SpecificModule_swigregister = _IGESSolid.IGESSolid_SpecificModule_swigregister
IGESSolid_SpecificModule_swigregister(IGESSolid_SpecificModule)

def IGESSolid_SpecificModule_get_type_name(*args):
    """
    IGESSolid_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SpecificModule_get_type_name(*args)

def IGESSolid_SpecificModule_get_type_descriptor(*args):
    """
    IGESSolid_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SpecificModule_get_type_descriptor(*args)

class IGESSolid_HArray1OfVertexList(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_HArray1OfVertexList
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_HArray1OfVertexList(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_HArray1OfVertexList self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESSolid_HArray1OfVertexList
        __init__(IGESSolid_HArray1OfVertexList self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESSolid_VertexList theValue) -> IGESSolid_HArray1OfVertexList
        __init__(IGESSolid_HArray1OfVertexList self, NCollection_Array1_Handle_IGESSolid_VertexList theOther) -> IGESSolid_HArray1OfVertexList

        :type theOther: OCC.wrapper.IGESSolid.IGESSolid_Array1OfVertexList

        """
        this = _IGESSolid.new_IGESSolid_HArray1OfVertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfVertexList

        """
        res = _IGESSolid.IGESSolid_HArray1OfVertexList_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESSolid_HArray1OfVertexList self) -> NCollection_Array1_Handle_IGESSolid_VertexList

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfVertexList

        """
        return _IGESSolid.IGESSolid_HArray1OfVertexList_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_HArray1OfVertexList_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_HArray1OfVertexList_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_HArray1OfVertexList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_HArray1OfVertexList
IGESSolid_HArray1OfVertexList_swigregister = _IGESSolid.IGESSolid_HArray1OfVertexList_swigregister
IGESSolid_HArray1OfVertexList_swigregister(IGESSolid_HArray1OfVertexList)

def IGESSolid_HArray1OfVertexList_get_type_name(*args):
    """
    IGESSolid_HArray1OfVertexList_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_HArray1OfVertexList_get_type_name(*args)

def IGESSolid_HArray1OfVertexList_get_type_descriptor(*args):
    """
    IGESSolid_HArray1OfVertexList_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_HArray1OfVertexList_get_type_descriptor(*args)

class IGESSolid_ToolSolidOfRevolution(object):
    """
    Tool to work on a SolidOfRevolution. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSolidOfRevolution self) -> IGESSolid_ToolSolidOfRevolution

        Returns a ToolSolidOfRevolution, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSolidOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SolidOfRevolution <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution entfrom, Handle_IGESSolid_SolidOfRevolution entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfRevolution
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSolidOfRevolution_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSolidOfRevolution
IGESSolid_ToolSolidOfRevolution_swigregister = _IGESSolid.IGESSolid_ToolSolidOfRevolution_swigregister
IGESSolid_ToolSolidOfRevolution_swigregister(IGESSolid_ToolSolidOfRevolution)

class Handle_IGESSolid_SolidOfRevolution(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SolidOfRevolution self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SolidOfRevolution self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SolidOfRevolution self, IGESSolid_SolidOfRevolution thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution theHandle) -> Handle_IGESSolid_SolidOfRevolution
        assign(Handle_IGESSolid_SolidOfRevolution self, IGESSolid_SolidOfRevolution thePtr) -> Handle_IGESSolid_SolidOfRevolution
        assign(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESSolid_SolidOfRevolution theHandle) -> Handle_IGESSolid_SolidOfRevolution

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SolidOfRevolution self) -> IGESSolid_SolidOfRevolution

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SolidOfRevolution self) -> IGESSolid_SolidOfRevolution

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SolidOfRevolution self) -> IGESSolid_SolidOfRevolution

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SolidOfRevolution___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SolidOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SolidOfRevolution_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SolidOfRevolution

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity aCurve, Standard_Real const aFract, gp_XYZ aAxisPnt, gp_XYZ aDirection)

        This method is used to set the fields of the class
        SolidOfRevolution
        - aCurve     : the curve entity that is to be revolved
        - aFract     : the fraction of full rotation (default 1.0)
        - aAxisPnt   : the point on the axis
        - aDirection : the direction of the axis

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aFract: float
        :type aAxisPnt: OCC.wrapper.gp.gp_XYZ
        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Init(self, *args)


    def SetClosedToAxis(self, *args):
        """
        SetClosedToAxis(Handle_IGESSolid_SolidOfRevolution self, Standard_Boolean const mode)

        Sets the Curve to be by default, Closed to Axis (Form 0)
        if <mode> is True, Closed to Itself (Form 1) else

        :type mode: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SetClosedToAxis(self, *args)


    def IsClosedToAxis(self, *args):
        """
        IsClosedToAxis(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if Form Number = 0
        if Form no is 0, then the curve is closed to axis
        if 1, the curve is closed to itself.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IsClosedToAxis(self, *args)


    def Curve(self, *args):
        """
        Curve(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_IGESEntity

        returns the curve entity that is to be revolved

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Curve(self, *args)


    def Fraction(self, *args):
        """
        Fraction(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Real

        returns the fraction of full rotation that the curve is to
        be rotated

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Fraction(self, *args)


    def AxisPoint(self, *args):
        """
        AxisPoint(Handle_IGESSolid_SolidOfRevolution self) -> gp_Pnt

        returns the point on the axis

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_AxisPoint(self, *args)


    def TransformedAxisPoint(self, *args):
        """
        TransformedAxisPoint(Handle_IGESSolid_SolidOfRevolution self) -> gp_Pnt

        returns the point on the axis after applying Trans.Matrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_TransformedAxisPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_SolidOfRevolution self) -> gp_Dir

        returns the direction of the axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESSolid_SolidOfRevolution self) -> gp_Dir

        returns the direction of the axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_TransformedAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SolidOfRevolution self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidOfRevolution_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SolidOfRevolution self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SolidOfRevolution self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SolidOfRevolution self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SolidOfRevolution self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SolidOfRevolution self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SolidOfRevolution self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SolidOfRevolution self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SolidOfRevolution self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SolidOfRevolution self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SolidOfRevolution self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SolidOfRevolution self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SolidOfRevolution self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SolidOfRevolution self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SolidOfRevolution self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SolidOfRevolution self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SolidOfRevolution self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SolidOfRevolution self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SolidOfRevolution self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SolidOfRevolution self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SolidOfRevolution self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SolidOfRevolution self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SolidOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SolidOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SolidOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SolidOfRevolution self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SolidOfRevolution self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DecrementRefCounter(self, *args)

Handle_IGESSolid_SolidOfRevolution_swigregister = _IGESSolid.Handle_IGESSolid_SolidOfRevolution_swigregister
Handle_IGESSolid_SolidOfRevolution_swigregister(Handle_IGESSolid_SolidOfRevolution)

def Handle_IGESSolid_SolidOfRevolution_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DownCast(thing)
Handle_IGESSolid_SolidOfRevolution_DownCast = _IGESSolid.Handle_IGESSolid_SolidOfRevolution_DownCast

class Handle_IGESSolid_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_ReadWriteModule self, IGESSolid_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_ReadWriteModule self, Handle_IGESSolid_ReadWriteModule theHandle) -> Handle_IGESSolid_ReadWriteModule
        assign(Handle_IGESSolid_ReadWriteModule self, IGESSolid_ReadWriteModule thePtr) -> Handle_IGESSolid_ReadWriteModule
        assign(Handle_IGESSolid_ReadWriteModule self, Handle_IGESSolid_ReadWriteModule theHandle) -> Handle_IGESSolid_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_ReadWriteModule self) -> IGESSolid_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_ReadWriteModule self) -> IGESSolid_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_ReadWriteModule self) -> IGESSolid_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESSolid_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESSolid

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESSolid_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESSolid

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESSolid_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESSolid_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESSolid_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESSolid_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESSolid_ReadWriteModule_swigregister = _IGESSolid.Handle_IGESSolid_ReadWriteModule_swigregister
Handle_IGESSolid_ReadWriteModule_swigregister(Handle_IGESSolid_ReadWriteModule)

def Handle_IGESSolid_ReadWriteModule_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_ReadWriteModule_DownCast(thing)
Handle_IGESSolid_ReadWriteModule_DownCast = _IGESSolid.Handle_IGESSolid_ReadWriteModule_DownCast

class IGESSolid_ToolCylinder(object):
    """
    Tool to work on a Cylinder. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolCylinder self) -> IGESSolid_ToolCylinder

        Returns a ToolCylinder, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolCylinder_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolCylinder_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Cylinder <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolCylinder_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolCylinder_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolCylinder_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder entfrom, Handle_IGESSolid_Cylinder entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolCylinder_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolCylinder self, Handle_IGESSolid_Cylinder ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Cylinder
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolCylinder_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolCylinder
IGESSolid_ToolCylinder_swigregister = _IGESSolid.IGESSolid_ToolCylinder_swigregister
IGESSolid_ToolCylinder_swigregister(IGESSolid_ToolCylinder)

class IGESSolid_Face(IGESData.IGESData_IGESEntity):
    """
    defines Face, Type <510> Form Number <1>
    in package IGESSolid
    Face entity is a bound (partial) which has finite area
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Face
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Face(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Face self) -> IGESSolid_Face

        defines Face, Type <510> Form Number <1>
        in package IGESSolid
        Face entity is a bound (partial) which has finite area
        """
        this = _IGESSolid.new_IGESSolid_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Face self, Handle_IGESData_IGESEntity aSurface, Standard_Boolean const outerLoopFlag, Handle_IGESSolid_HArray1OfLoop loops)

        This method is used to set the fields of the class Face
        - aSurface      : Pointer to the underlying surface
        - outerLoopFlag : True means the first loop is the outer loop
        - loops         : Array of loops bounding the face

        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type outerLoopFlag: bool
        :type loops: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfLoop

        """
        return _IGESSolid.IGESSolid_Face_Init(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESSolid_Face self) -> Handle_IGESData_IGESEntity

        returns the underlying surface of the face

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_Face_Surface(self, *args)


    def NbLoops(self, *args):
        """
        NbLoops(IGESSolid_Face self) -> Standard_Integer

        returns the number of the loops bounding the face

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Face_NbLoops(self, *args)


    def HasOuterLoop(self, *args):
        """
        HasOuterLoop(IGESSolid_Face self) -> Standard_Boolean

        checks whether there is an outer loop or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_Face_HasOuterLoop(self, *args)


    def Loop(self, *args):
        """
        Loop(IGESSolid_Face self, Standard_Integer const Index) -> Handle_IGESSolid_Loop

        returns the Index'th loop that bounds the face
        raises exception if Index < 0 or Index >= NbLoops

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop

        """
        return _IGESSolid.IGESSolid_Face_Loop(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Face_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Face_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Face_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Face
IGESSolid_Face_swigregister = _IGESSolid.IGESSolid_Face_swigregister
IGESSolid_Face_swigregister(IGESSolid_Face)

def IGESSolid_Face_get_type_name(*args):
    """
    IGESSolid_Face_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Face_get_type_name(*args)

def IGESSolid_Face_get_type_descriptor(*args):
    """
    IGESSolid_Face_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Face_get_type_descriptor(*args)

class IGESSolid_Ellipsoid(IGESData.IGESData_IGESEntity):
    """
    defines Ellipsoid, Type <168> Form Number <0>
    in package IGESSolid
    The ellipsoid is a solid bounded by the surface defined
    by:
    X^2       Y^2       Z^2
    -----  +  -----  +  -----  =  1
    LX^2      LY^2      LZ^2
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Ellipsoid
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Ellipsoid(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Ellipsoid self) -> IGESSolid_Ellipsoid

        defines Ellipsoid, Type <168> Form Number <0>
        in package IGESSolid
        The ellipsoid is a solid bounded by the surface defined
        by:
        X^2       Y^2       Z^2
        -----  +  -----  +  -----  =  1
        LX^2      LY^2      LZ^2
        """
        this = _IGESSolid.new_IGESSolid_Ellipsoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Ellipsoid self, gp_XYZ aSize, gp_XYZ aCenter, gp_XYZ anXAxis, gp_XYZ anZAxis)

        This method is used to set the fields of the class
        Ellipsoid
        - aSize      : Lengths in the local X,Y,Z directions
        - aCenter    : Center point of ellipsoid (default (0,0,0))
        - anXAxis    : Unit vector defining local X-axis
        default (1,0,0)
        - anZAxis    : Unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type anXAxis: OCC.wrapper.gp.gp_XYZ
        :type anZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Ellipsoid_Init(self, *args)


    def Size(self, *args):
        """
        Size(IGESSolid_Ellipsoid self) -> gp_XYZ

        returns the size

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Ellipsoid_Size(self, *args)


    def XLength(self, *args):
        """
        XLength(IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local X-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Ellipsoid_XLength(self, *args)


    def YLength(self, *args):
        """
        YLength(IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local Y-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Ellipsoid_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local Z-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Ellipsoid_ZLength(self, *args)


    def Center(self, *args):
        """
        Center(IGESSolid_Ellipsoid self) -> gp_Pnt

        returns the center of the ellipsoid

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Ellipsoid_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESSolid_Ellipsoid self) -> gp_Pnt

        returns the center of the ellipsoid after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Ellipsoid_TransformedCenter(self, *args)


    def XAxis(self, *args):
        """
        XAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local X-direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local X-direction
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Y-direction
        which is got by taking cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Y-direction
        (which is got by taking cross product of ZAxis and XAxis)
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Z-direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Z-direction
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Ellipsoid_TransformedZAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Ellipsoid_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Ellipsoid_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Ellipsoid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Ellipsoid
IGESSolid_Ellipsoid_swigregister = _IGESSolid.IGESSolid_Ellipsoid_swigregister
IGESSolid_Ellipsoid_swigregister(IGESSolid_Ellipsoid)

def IGESSolid_Ellipsoid_get_type_name(*args):
    """
    IGESSolid_Ellipsoid_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Ellipsoid_get_type_name(*args)

def IGESSolid_Ellipsoid_get_type_descriptor(*args):
    """
    IGESSolid_Ellipsoid_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Ellipsoid_get_type_descriptor(*args)

class IGESSolid_EdgeList(IGESData.IGESData_IGESEntity):
    """
    defines EdgeList, Type <504> Form <1>
    in package IGESSolid
    EdgeList is defined as a segment joining two vertices
    It contains one or more edge tuples.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_EdgeList
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_EdgeList(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_EdgeList self) -> IGESSolid_EdgeList

        defines EdgeList, Type <504> Form <1>
        in package IGESSolid
        EdgeList is defined as a segment joining two vertices
        It contains one or more edge tuples.
        """
        this = _IGESSolid.new_IGESSolid_EdgeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_EdgeList self, Handle_IGESData_HArray1OfIGESEntity curves, Handle_IGESSolid_HArray1OfVertexList startVertexList, Handle_TColStd_HArray1OfInteger startVertexIndex, Handle_IGESSolid_HArray1OfVertexList endVertexList, Handle_TColStd_HArray1OfInteger endVertexIndex)

        This method is used to set the fields of the class
        EdgeList
        - curves           : the model space curves
        - startVertexList  : the vertex list that contains the
        start vertices
        - startVertexIndex : the index of the vertex in the
        corresponding vertex list
        - endVertexList    : the vertex list that contains the
        end vertices
        - endVertexIndex   : the index of the vertex in the
        corresponding vertex list
        raises exception if size of curves,startVertexList,startVertexIndex,
        endVertexList and endVertexIndex do no match

        :type curves: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type startVertexList: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfVertexList
        :type startVertexIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type endVertexList: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfVertexList
        :type endVertexIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.IGESSolid_EdgeList_Init(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(IGESSolid_EdgeList self) -> Standard_Integer

        returns the number of edges in the edge list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_EdgeList_NbEdges(self, *args)


    def Curve(self, *args):
        """
        Curve(IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        returns the num'th model space curve
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_EdgeList_Curve(self, *args)


    def StartVertexList(self, *args):
        """
        StartVertexList(IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESSolid_VertexList

        returns the num'th start vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList

        """
        return _IGESSolid.IGESSolid_EdgeList_StartVertexList(self, *args)


    def StartVertexIndex(self, *args):
        """
        StartVertexIndex(IGESSolid_EdgeList self, Standard_Integer const num) -> Standard_Integer

        returns the index of num'th start vertex in
        the corresponding start vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_EdgeList_StartVertexIndex(self, *args)


    def EndVertexList(self, *args):
        """
        EndVertexList(IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESSolid_VertexList

        returns the num'th end vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList

        """
        return _IGESSolid.IGESSolid_EdgeList_EndVertexList(self, *args)


    def EndVertexIndex(self, *args):
        """
        EndVertexIndex(IGESSolid_EdgeList self, Standard_Integer const num) -> Standard_Integer

        returns the index of num'th end vertex in
        the corresponding end vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_EdgeList_EndVertexIndex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_EdgeList_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_EdgeList_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_EdgeList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_EdgeList
IGESSolid_EdgeList_swigregister = _IGESSolid.IGESSolid_EdgeList_swigregister
IGESSolid_EdgeList_swigregister(IGESSolid_EdgeList)

def IGESSolid_EdgeList_get_type_name(*args):
    """
    IGESSolid_EdgeList_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_EdgeList_get_type_name(*args)

def IGESSolid_EdgeList_get_type_descriptor(*args):
    """
    IGESSolid_EdgeList_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_EdgeList_get_type_descriptor(*args)

class IGESSolid_Cylinder(IGESData.IGESData_IGESEntity):
    """
    defines Cylinder, Type <154> Form Number <0>
    in package IGESSolid
    This defines a solid cylinder
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Cylinder
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Cylinder(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Cylinder self) -> IGESSolid_Cylinder

        defines Cylinder, Type <154> Form Number <0>
        in package IGESSolid
        This defines a solid cylinder
        """
        this = _IGESSolid.new_IGESSolid_Cylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Cylinder self, Standard_Real const aHeight, Standard_Real const aRadius, gp_XYZ aCenter, gp_XYZ anAxis)

        This method is used to set the fields of the class
        Cylinder
        - aHeight : Cylinder height
        - aRadius : Cylinder radius
        - aCenter : First face center coordinates (default (0,0,0))
        - anAxis  : Unit vector in axis direction (default (0,0,1))

        :type aHeight: float
        :type aRadius: float
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type anAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Cylinder_Init(self, *args)


    def Height(self, *args):
        """
        Height(IGESSolid_Cylinder self) -> Standard_Real

        returns the cylinder height

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Cylinder_Height(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESSolid_Cylinder self) -> Standard_Real

        returns the cylinder radius

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Cylinder_Radius(self, *args)


    def FaceCenter(self, *args):
        """
        FaceCenter(IGESSolid_Cylinder self) -> gp_Pnt

        returns the first face center coordinates.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Cylinder_FaceCenter(self, *args)


    def TransformedFaceCenter(self, *args):
        """
        TransformedFaceCenter(IGESSolid_Cylinder self) -> gp_Pnt

        returns the first face center after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Cylinder_TransformedFaceCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_Cylinder self) -> gp_Dir

        returns the vector in axis direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Cylinder_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESSolid_Cylinder self) -> gp_Dir

        returns the vector in axis direction after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Cylinder_TransformedAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Cylinder_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Cylinder_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Cylinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Cylinder
IGESSolid_Cylinder_swigregister = _IGESSolid.IGESSolid_Cylinder_swigregister
IGESSolid_Cylinder_swigregister(IGESSolid_Cylinder)

def IGESSolid_Cylinder_get_type_name(*args):
    """
    IGESSolid_Cylinder_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Cylinder_get_type_name(*args)

def IGESSolid_Cylinder_get_type_descriptor(*args):
    """
    IGESSolid_Cylinder_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Cylinder_get_type_descriptor(*args)

class IGESSolid_HArray1OfShell(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_HArray1OfShell
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_HArray1OfShell(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_HArray1OfShell self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESSolid_HArray1OfShell
        __init__(IGESSolid_HArray1OfShell self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESSolid_Shell theValue) -> IGESSolid_HArray1OfShell
        __init__(IGESSolid_HArray1OfShell self, NCollection_Array1_Handle_IGESSolid_Shell theOther) -> IGESSolid_HArray1OfShell

        :type theOther: OCC.wrapper.IGESSolid.IGESSolid_Array1OfShell

        """
        this = _IGESSolid.new_IGESSolid_HArray1OfShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfShell

        """
        res = _IGESSolid.IGESSolid_HArray1OfShell_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESSolid_HArray1OfShell self) -> NCollection_Array1_Handle_IGESSolid_Shell

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfShell

        """
        return _IGESSolid.IGESSolid_HArray1OfShell_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_HArray1OfShell_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_HArray1OfShell_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_HArray1OfShell_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_HArray1OfShell
IGESSolid_HArray1OfShell_swigregister = _IGESSolid.IGESSolid_HArray1OfShell_swigregister
IGESSolid_HArray1OfShell_swigregister(IGESSolid_HArray1OfShell)

def IGESSolid_HArray1OfShell_get_type_name(*args):
    """
    IGESSolid_HArray1OfShell_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_HArray1OfShell_get_type_name(*args)

def IGESSolid_HArray1OfShell_get_type_descriptor(*args):
    """
    IGESSolid_HArray1OfShell_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_HArray1OfShell_get_type_descriptor(*args)

class IGESSolid_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESSolid"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Protocol self) -> IGESSolid_Protocol

        Description of Protocol for IGESSolid
        """
        this = _IGESSolid.new_IGESSolid_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESSolid_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESGeom)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESSolid_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESSolid.IGESSolid_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESSolid_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Protocol
IGESSolid_Protocol_swigregister = _IGESSolid.IGESSolid_Protocol_swigregister
IGESSolid_Protocol_swigregister(IGESSolid_Protocol)

def IGESSolid_Protocol_get_type_name(*args):
    """
    IGESSolid_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Protocol_get_type_name(*args)

def IGESSolid_Protocol_get_type_descriptor(*args):
    """
    IGESSolid_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Protocol_get_type_descriptor(*args)

class IGESSolid_Sphere(IGESData.IGESData_IGESEntity):
    """
    defines Sphere, Type <158> Form Number <0>
    in package IGESSolid
    This defines a sphere with a center and radius
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Sphere
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Sphere(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Sphere self) -> IGESSolid_Sphere

        defines Sphere, Type <158> Form Number <0>
        in package IGESSolid
        This defines a sphere with a center and radius
        """
        this = _IGESSolid.new_IGESSolid_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Sphere self, Standard_Real const aRadius, gp_XYZ aCenter)

        This method is used to set the fields of the class Sphere
        - aRadius : the radius of the sphere
        - aCenter : the center point coordinates (default (0,0,0))

        :type aRadius: float
        :type aCenter: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Sphere_Init(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESSolid_Sphere self) -> Standard_Real

        returns the radius of the sphere

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Sphere_Radius(self, *args)


    def Center(self, *args):
        """
        Center(IGESSolid_Sphere self) -> gp_Pnt

        returns the center of the sphere

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Sphere_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESSolid_Sphere self) -> gp_Pnt

        returns the center of the sphere after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Sphere_TransformedCenter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Sphere_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Sphere_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Sphere_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Sphere
IGESSolid_Sphere_swigregister = _IGESSolid.IGESSolid_Sphere_swigregister
IGESSolid_Sphere_swigregister(IGESSolid_Sphere)

def IGESSolid_Sphere_get_type_name(*args):
    """
    IGESSolid_Sphere_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Sphere_get_type_name(*args)

def IGESSolid_Sphere_get_type_descriptor(*args):
    """
    IGESSolid_Sphere_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Sphere_get_type_descriptor(*args)

class Handle_IGESSolid_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Protocol self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Protocol self, IGESSolid_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Protocol self, Handle_IGESSolid_Protocol theHandle) -> Handle_IGESSolid_Protocol
        assign(Handle_IGESSolid_Protocol self, IGESSolid_Protocol thePtr) -> Handle_IGESSolid_Protocol
        assign(Handle_IGESSolid_Protocol self, Handle_IGESSolid_Protocol theHandle) -> Handle_IGESSolid_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Protocol self) -> IGESSolid_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Protocol self) -> IGESSolid_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Protocol self) -> IGESSolid_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Protocol_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESSolid_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESGeom)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESSolid_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESSolid_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESSolid_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESSolid_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESSolid_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESSolid_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESSolid_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESSolid_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESSolid.Handle_IGESSolid_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESSolid_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESSolid_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESSolid_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESSolid_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESSolid_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Protocol_DecrementRefCounter(self, *args)

Handle_IGESSolid_Protocol_swigregister = _IGESSolid.Handle_IGESSolid_Protocol_swigregister
Handle_IGESSolid_Protocol_swigregister(Handle_IGESSolid_Protocol)

def Handle_IGESSolid_Protocol_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Protocol_DownCast(thing)
Handle_IGESSolid_Protocol_DownCast = _IGESSolid.Handle_IGESSolid_Protocol_DownCast

class Handle_IGESSolid_SolidOfLinearExtrusion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SolidOfLinearExtrusion self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SolidOfLinearExtrusion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SolidOfLinearExtrusion self, IGESSolid_SolidOfLinearExtrusion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion theHandle) -> Handle_IGESSolid_SolidOfLinearExtrusion
        assign(Handle_IGESSolid_SolidOfLinearExtrusion self, IGESSolid_SolidOfLinearExtrusion thePtr) -> Handle_IGESSolid_SolidOfLinearExtrusion
        assign(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion theHandle) -> Handle_IGESSolid_SolidOfLinearExtrusion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESSolid_SolidOfLinearExtrusion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESSolid_SolidOfLinearExtrusion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESSolid_SolidOfLinearExtrusion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SolidOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SolidOfLinearExtrusion

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity aCurve, Standard_Real const aLength, gp_XYZ aDirection)

        This method is used to set the fields of the class
        SolidOfLinearExtrusion
        - aCurve     : the planar curve that is to be translated
        - aLength    : the length of extrusion
        - aDirection : the vector specifying the direction of extrusion
        default (0,0,1)

        :type aCurve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type aLength: float
        :type aDirection: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Init(self, *args)


    def Curve(self, *args):
        """
        Curve(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_IGESEntity

        returns the planar curve that is to be translated

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Curve(self, *args)


    def ExtrusionLength(self, *args):
        """
        ExtrusionLength(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Real

        returns the Extrusion Length

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ExtrusionLength(self, *args)


    def ExtrusionDirection(self, *args):
        """
        ExtrusionDirection(Handle_IGESSolid_SolidOfLinearExtrusion self) -> gp_Dir

        returns the Extrusion direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ExtrusionDirection(self, *args)


    def TransformedExtrusionDirection(self, *args):
        """
        TransformedExtrusionDirection(Handle_IGESSolid_SolidOfLinearExtrusion self) -> gp_Dir

        returns ExtrusionDirection after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_TransformedExtrusionDirection(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SolidOfLinearExtrusion self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SolidOfLinearExtrusion self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SolidOfLinearExtrusion self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SolidOfLinearExtrusion self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SolidOfLinearExtrusion self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SolidOfLinearExtrusion self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SolidOfLinearExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SolidOfLinearExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SolidOfLinearExtrusion self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SolidOfLinearExtrusion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DecrementRefCounter(self, *args)

Handle_IGESSolid_SolidOfLinearExtrusion_swigregister = _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_swigregister
Handle_IGESSolid_SolidOfLinearExtrusion_swigregister(Handle_IGESSolid_SolidOfLinearExtrusion)

def Handle_IGESSolid_SolidOfLinearExtrusion_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DownCast(thing)
Handle_IGESSolid_SolidOfLinearExtrusion_DownCast = _IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion_DownCast

class NCollection_Array1_Handle_IGESSolid_Face(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESSolid_Face self) -> NCollection_Array1< opencascade::handle< IGESSolid_Face > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESSolid_Face self) -> NCollection_Array1< opencascade::handle< IGESSolid_Face > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESSolid_Face self) -> NCollection_Array1< opencascade::handle< IGESSolid_Face > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESSolid_Face self) -> NCollection_Array1< opencascade::handle< IGESSolid_Face > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESSolid.new_NCollection_Array1_Handle_IGESSolid_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESSolid_Face self, Handle_IGESSolid_Face theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESSolid_Face self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESSolid_Face self, NCollection_Array1_Handle_IGESSolid_Face theOther) -> NCollection_Array1_Handle_IGESSolid_Face

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESSolid_Face self, NCollection_Array1_Handle_IGESSolid_Face theOther) -> NCollection_Array1_Handle_IGESSolid_Face

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESSolid_Face self, NCollection_Array1_Handle_IGESSolid_Face theOther) -> NCollection_Array1_Handle_IGESSolid_Face
        assign(NCollection_Array1_Handle_IGESSolid_Face self, NCollection_Array1_Handle_IGESSolid_Face theOther) -> NCollection_Array1_Handle_IGESSolid_Face

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESSolid_Face self) -> Handle_IGESSolid_Face

        @return first element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESSolid_Face self) -> Handle_IGESSolid_Face

        @return last element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESSolid_Face self, Standard_Integer const theIndex) -> Handle_IGESSolid_Face

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESSolid_Face self, Standard_Integer const theIndex, Handle_IGESSolid_Face theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESSolid_Face self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_Resize(self, *args)

    __swig_destroy__ = _IGESSolid.delete_NCollection_Array1_Handle_IGESSolid_Face
NCollection_Array1_Handle_IGESSolid_Face_swigregister = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Face_swigregister
NCollection_Array1_Handle_IGESSolid_Face_swigregister(NCollection_Array1_Handle_IGESSolid_Face)


try:
	IGESSolid_Array1OfFace = NCollection_Array1_Handle_IGESSolid_Face
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESSolid_RightAngularWedge(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_RightAngularWedge self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_RightAngularWedge self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_RightAngularWedge self, IGESSolid_RightAngularWedge thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_RightAngularWedge self, Handle_IGESSolid_RightAngularWedge theHandle) -> Handle_IGESSolid_RightAngularWedge
        assign(Handle_IGESSolid_RightAngularWedge self, IGESSolid_RightAngularWedge thePtr) -> Handle_IGESSolid_RightAngularWedge
        assign(Handle_IGESSolid_RightAngularWedge self, Handle_IGESSolid_RightAngularWedge theHandle) -> Handle_IGESSolid_RightAngularWedge

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_RightAngularWedge self) -> IGESSolid_RightAngularWedge

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_RightAngularWedge self) -> IGESSolid_RightAngularWedge

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_RightAngularWedge self) -> IGESSolid_RightAngularWedge

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_RightAngularWedge___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_RightAngularWedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_RightAngularWedge_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_RightAngularWedge

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_RightAngularWedge self, gp_XYZ aSize, Standard_Real const lowX, gp_XYZ aCorner, gp_XYZ anXAxis, gp_XYZ anZAxis)

        This method is used to set the fields of the class
        RightAngularWedge
        - aSize    : the lengths along the local axes
        - lowX     : the length at the smaller X-side
        - aCorner  : the corner point coordinates
        default (0,0,0)
        - anXAxis  : the unit vector defining local X-axis
        default (1,0,0)
        - anZAxis  : the unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type lowX: float
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type anXAxis: OCC.wrapper.gp.gp_XYZ
        :type anZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESSolid_RightAngularWedge self) -> gp_XYZ

        returns the size

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Size(self, *args)


    def XBigLength(self, *args):
        """
        XBigLength(Handle_IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local X-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_XBigLength(self, *args)


    def XSmallLength(self, *args):
        """
        XSmallLength(Handle_IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the smaller length along the local X-direction at Y=LY

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_XSmallLength(self, *args)


    def YLength(self, *args):
        """
        YLength(Handle_IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local Y-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(Handle_IGESSolid_RightAngularWedge self) -> Standard_Real

        returns the length along the local Z-axis

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ZLength(self, *args)


    def Corner(self, *args):
        """
        Corner(Handle_IGESSolid_RightAngularWedge self) -> gp_Pnt

        returns the corner point coordinates

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Corner(self, *args)


    def TransformedCorner(self, *args):
        """
        TransformedCorner(Handle_IGESSolid_RightAngularWedge self) -> gp_Pnt

        returns the corner point coordinates after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TransformedCorner(self, *args)


    def XAxis(self, *args):
        """
        XAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local X-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Y-axis
        it is got by taking the cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Y-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Z-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(Handle_IGESSolid_RightAngularWedge self) -> gp_Dir

        returns the direction defining the local Z-axis
        after applying the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TransformedZAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_RightAngularWedge self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_RightAngularWedge_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_RightAngularWedge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_RightAngularWedge self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_RightAngularWedge self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_RightAngularWedge self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_RightAngularWedge self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_RightAngularWedge self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_RightAngularWedge self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_RightAngularWedge self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_RightAngularWedge self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_RightAngularWedge self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_RightAngularWedge self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_RightAngularWedge self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_RightAngularWedge self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_RightAngularWedge self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_RightAngularWedge self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_RightAngularWedge self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_RightAngularWedge self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_RightAngularWedge self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_RightAngularWedge self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_RightAngularWedge self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_RightAngularWedge self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_RightAngularWedge self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_RightAngularWedge self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_RightAngularWedge self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_RightAngularWedge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_RightAngularWedge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_RightAngularWedge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_RightAngularWedge self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_RightAngularWedge self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_RightAngularWedge self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DecrementRefCounter(self, *args)

Handle_IGESSolid_RightAngularWedge_swigregister = _IGESSolid.Handle_IGESSolid_RightAngularWedge_swigregister
Handle_IGESSolid_RightAngularWedge_swigregister(Handle_IGESSolid_RightAngularWedge)

def Handle_IGESSolid_RightAngularWedge_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_RightAngularWedge_DownCast(thing)
Handle_IGESSolid_RightAngularWedge_DownCast = _IGESSolid.Handle_IGESSolid_RightAngularWedge_DownCast

class IGESSolid_ToolConicalSurface(object):
    """
    Tool to work on a ConicalSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolConicalSurface self) -> IGESSolid_ToolConicalSurface

        Returns a ToolConicalSurface, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ConicalSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface entfrom, Handle_IGESSolid_ConicalSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolConicalSurface self, Handle_IGESSolid_ConicalSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolConicalSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolConicalSurface
IGESSolid_ToolConicalSurface_swigregister = _IGESSolid.IGESSolid_ToolConicalSurface_swigregister
IGESSolid_ToolConicalSurface_swigregister(IGESSolid_ToolConicalSurface)

class IGESSolid_Torus(IGESData.IGESData_IGESEntity):
    """
    defines Torus, Type <160> Form Number <0>
    in package IGESSolid
    A Torus is a solid formed by revolving a circular disc
    about a specified coplanar axis.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Torus
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Torus(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Torus self) -> IGESSolid_Torus

        defines Torus, Type <160> Form Number <0>
        in package IGESSolid
        A Torus is a solid formed by revolving a circular disc
        about a specified coplanar axis.
        """
        this = _IGESSolid.new_IGESSolid_Torus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Torus self, Standard_Real const R1, Standard_Real const R2, gp_XYZ aPoint, gp_XYZ anAxisdir)

        This method is used to set the fields of the class Torus
        - R1     : distance from center of torus to center
        of circular disc to be revolved
        - R2     : radius of circular disc
        - aPoint : center point coordinates (default (0,0,0))
        - anAxis : unit vector in axis direction (default (0,0,1))

        :type R1: float
        :type R2: float
        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type anAxisdir: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Torus_Init(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(IGESSolid_Torus self) -> Standard_Real

        returns the distance from the center of torus to the center of
        the disc to be revolved

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Torus_MajorRadius(self, *args)


    def DiscRadius(self, *args):
        """
        DiscRadius(IGESSolid_Torus self) -> Standard_Real

        returns the radius of the disc to be revolved

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Torus_DiscRadius(self, *args)


    def AxisPoint(self, *args):
        """
        AxisPoint(IGESSolid_Torus self) -> gp_Pnt

        returns the center of torus

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Torus_AxisPoint(self, *args)


    def TransformedAxisPoint(self, *args):
        """
        TransformedAxisPoint(IGESSolid_Torus self) -> gp_Pnt

        returns the center of torus after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Torus_TransformedAxisPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_Torus self) -> gp_Dir

        returns direction of the axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Torus_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESSolid_Torus self) -> gp_Dir

        returns direction of the axis after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Torus_TransformedAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Torus_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Torus_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Torus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Torus
IGESSolid_Torus_swigregister = _IGESSolid.IGESSolid_Torus_swigregister
IGESSolid_Torus_swigregister(IGESSolid_Torus)

def IGESSolid_Torus_get_type_name(*args):
    """
    IGESSolid_Torus_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Torus_get_type_name(*args)

def IGESSolid_Torus_get_type_descriptor(*args):
    """
    IGESSolid_Torus_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Torus_get_type_descriptor(*args)

class NCollection_Array1_Handle_IGESSolid_VertexList(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESSolid_VertexList self) -> NCollection_Array1< opencascade::handle< IGESSolid_VertexList > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESSolid_VertexList self) -> NCollection_Array1< opencascade::handle< IGESSolid_VertexList > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESSolid_VertexList self) -> NCollection_Array1< opencascade::handle< IGESSolid_VertexList > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESSolid_VertexList self) -> NCollection_Array1< opencascade::handle< IGESSolid_VertexList > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESSolid.new_NCollection_Array1_Handle_IGESSolid_VertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESSolid_VertexList self, Handle_IGESSolid_VertexList theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESSolid_VertexList self, NCollection_Array1_Handle_IGESSolid_VertexList theOther) -> NCollection_Array1_Handle_IGESSolid_VertexList

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESSolid_VertexList self, NCollection_Array1_Handle_IGESSolid_VertexList theOther) -> NCollection_Array1_Handle_IGESSolid_VertexList

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESSolid_VertexList self, NCollection_Array1_Handle_IGESSolid_VertexList theOther) -> NCollection_Array1_Handle_IGESSolid_VertexList
        assign(NCollection_Array1_Handle_IGESSolid_VertexList self, NCollection_Array1_Handle_IGESSolid_VertexList theOther) -> NCollection_Array1_Handle_IGESSolid_VertexList

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Handle_IGESSolid_VertexList

        @return first element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESSolid_VertexList self) -> Handle_IGESSolid_VertexList

        @return last element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESSolid_VertexList self, Standard_Integer const theIndex) -> Handle_IGESSolid_VertexList

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESSolid_VertexList self, Standard_Integer const theIndex, Handle_IGESSolid_VertexList theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESSolid_VertexList self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_Resize(self, *args)

    __swig_destroy__ = _IGESSolid.delete_NCollection_Array1_Handle_IGESSolid_VertexList
NCollection_Array1_Handle_IGESSolid_VertexList_swigregister = _IGESSolid.NCollection_Array1_Handle_IGESSolid_VertexList_swigregister
NCollection_Array1_Handle_IGESSolid_VertexList_swigregister(NCollection_Array1_Handle_IGESSolid_VertexList)


try:
	IGESSolid_Array1OfVertexList = NCollection_Array1_Handle_IGESSolid_VertexList
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESSolid_SolidAssembly(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SolidAssembly self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SolidAssembly self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SolidAssembly self, IGESSolid_SolidAssembly thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SolidAssembly self, Handle_IGESSolid_SolidAssembly theHandle) -> Handle_IGESSolid_SolidAssembly
        assign(Handle_IGESSolid_SolidAssembly self, IGESSolid_SolidAssembly thePtr) -> Handle_IGESSolid_SolidAssembly
        assign(Handle_IGESSolid_SolidAssembly self, Handle_IGESSolid_SolidAssembly theHandle) -> Handle_IGESSolid_SolidAssembly

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SolidAssembly self) -> IGESSolid_SolidAssembly

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SolidAssembly self) -> IGESSolid_SolidAssembly

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SolidAssembly self) -> IGESSolid_SolidAssembly

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SolidAssembly___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SolidAssembly___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SolidAssembly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SolidAssembly_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SolidAssembly

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_HArray1OfIGESEntity allItems, Handle_IGESGeom_HArray1OfTransformationMatrix allMatrices)

        This method is used to set the fields of the class
        SolidAssembly
        - allItems    : the collection of items
        - allMatrices : transformation matrices corresponding to each
        item
        raises exception if the length of allItems & allMatrices
        do not match

        :type allItems: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type allMatrices: OCC.wrapper.IGESGeom.Handle_IGESGeom_HArray1OfTransformationMatrix

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Init(self, *args)


    def HasBrep(self, *args):
        """
        HasBrep(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Tells if at least one item is a Brep, from FormNumber

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasBrep(self, *args)


    def SetBrep(self, *args):
        """
        SetBrep(Handle_IGESSolid_SolidAssembly self, Standard_Boolean const hasbrep)

        Sets or Unsets the status "HasBrep" from FormNumber
        Default is False

        :type hasbrep: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SetBrep(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        returns the number of items in the collection

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NbItems(self, *args)


    def Item(self, *args):
        """
        Item(Handle_IGESSolid_SolidAssembly self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th item
        raises exception if Index <= 0 or Index > NbItems()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Item(self, *args)


    def TransfMatrix(self, *args):
        """
        TransfMatrix(Handle_IGESSolid_SolidAssembly self, Standard_Integer const Index) -> Handle_IGESGeom_TransformationMatrix

        returns the transformation matrix of the Index'th item
        raises exception if Index <= 0 or Index > NbItems()

        :type Index: int
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_TransfMatrix(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SolidAssembly self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidAssembly_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidAssembly_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SolidAssembly self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SolidAssembly self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SolidAssembly self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SolidAssembly self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SolidAssembly self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SolidAssembly self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SolidAssembly self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SolidAssembly self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SolidAssembly self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SolidAssembly self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SolidAssembly self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SolidAssembly self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SolidAssembly self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SolidAssembly self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SolidAssembly self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SolidAssembly self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SolidAssembly self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SolidAssembly self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SolidAssembly self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SolidAssembly self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SolidAssembly self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SolidAssembly self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SolidAssembly self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SolidAssembly self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SolidAssembly self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SolidAssembly self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SolidAssembly self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SolidAssembly self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SolidAssembly self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidAssembly_DecrementRefCounter(self, *args)

Handle_IGESSolid_SolidAssembly_swigregister = _IGESSolid.Handle_IGESSolid_SolidAssembly_swigregister
Handle_IGESSolid_SolidAssembly_swigregister(Handle_IGESSolid_SolidAssembly)

def Handle_IGESSolid_SolidAssembly_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SolidAssembly_DownCast(thing)
Handle_IGESSolid_SolidAssembly_DownCast = _IGESSolid.Handle_IGESSolid_SolidAssembly_DownCast

class IGESSolid_SolidInstance(IGESData.IGESData_IGESEntity):
    """
    defines SolidInstance, Type <430> Form Number <0>
    in package IGESSolid
    This provides a mechanism for replicating a solid
    representation.

    From IGES-5.3, Form may be <1> for a BREP
    Else it is for a Boolean Tree, Primitive, other Solid Inst.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_SolidInstance
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_SolidInstance(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_SolidInstance self) -> IGESSolid_SolidInstance

        defines SolidInstance, Type <430> Form Number <0>
        in package IGESSolid
        This provides a mechanism for replicating a solid
        representation.

        From IGES-5.3, Form may be <1> for a BREP
        Else it is for a Boolean Tree, Primitive, other Solid Inst.
        """
        this = _IGESSolid.new_IGESSolid_SolidInstance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity anEntity)

        This method is used to set the fields of the class
        SolidInstance
        - anEntity : the entity corresponding to the solid

        :type anEntity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_SolidInstance_Init(self, *args)


    def IsBrep(self, *args):
        """
        IsBrep(IGESSolid_SolidInstance self) -> Standard_Boolean

        Tells if a SolidInstance is for a BREP
        Default is False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_SolidInstance_IsBrep(self, *args)


    def SetBrep(self, *args):
        """
        SetBrep(IGESSolid_SolidInstance self, Standard_Boolean const brep)

        Sets or unsets the Brep status (FormNumber = 1 else 0)

        :type brep: bool

        """
        return _IGESSolid.IGESSolid_SolidInstance_SetBrep(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESSolid_SolidInstance self) -> Handle_IGESData_IGESEntity

        returns the solid entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_SolidInstance_Entity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_SolidInstance_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_SolidInstance_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_SolidInstance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_SolidInstance
IGESSolid_SolidInstance_swigregister = _IGESSolid.IGESSolid_SolidInstance_swigregister
IGESSolid_SolidInstance_swigregister(IGESSolid_SolidInstance)

def IGESSolid_SolidInstance_get_type_name(*args):
    """
    IGESSolid_SolidInstance_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_SolidInstance_get_type_name(*args)

def IGESSolid_SolidInstance_get_type_descriptor(*args):
    """
    IGESSolid_SolidInstance_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_SolidInstance_get_type_descriptor(*args)

class Handle_IGESSolid_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SpecificModule self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SpecificModule self, IGESSolid_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SpecificModule self, Handle_IGESSolid_SpecificModule theHandle) -> Handle_IGESSolid_SpecificModule
        assign(Handle_IGESSolid_SpecificModule self, IGESSolid_SpecificModule thePtr) -> Handle_IGESSolid_SpecificModule
        assign(Handle_IGESSolid_SpecificModule self, Handle_IGESSolid_SpecificModule theHandle) -> Handle_IGESSolid_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SpecificModule self) -> IGESSolid_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SpecificModule self) -> IGESSolid_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SpecificModule self) -> IGESSolid_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SpecificModule_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESSolid_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESSolid

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_OwnDump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESSolid_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Specific Automatic Correction on own Parameters of an Entity.
        It works by setting in accordance redundant data, if there are
        when there is no ambiguity (else, it does nothing).
        Remark that classic Corrections on Directory Entry (to set
        void data) are taken into account alsewhere.

        For instance, many "Associativity Entities" have a Number of
        Properties which must have a fixed value.
        Or, a ConicalArc has its Form Number which records the kind of
        Conic, also determined from its coefficients
        But, a CircularArc of which Distances (Center-Start) and
        (Center-End) are not equal cannot be corrected ...

        Returns True if something has been corrected in <ent>
        By default, does nothing. If at least one of the Types
        processed by a sub-class of SpecificModule has a Correct
        procedure attached, this method can be redefined

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_OwnCorrect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESSolid_SpecificModule_swigregister = _IGESSolid.Handle_IGESSolid_SpecificModule_swigregister
Handle_IGESSolid_SpecificModule_swigregister(Handle_IGESSolid_SpecificModule)

def Handle_IGESSolid_SpecificModule_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SpecificModule_DownCast(thing)
Handle_IGESSolid_SpecificModule_DownCast = _IGESSolid.Handle_IGESSolid_SpecificModule_DownCast

class Handle_IGESSolid_HArray1OfVertexList(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_HArray1OfVertexList self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_HArray1OfVertexList self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_HArray1OfVertexList self, IGESSolid_HArray1OfVertexList thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_HArray1OfVertexList self, Handle_IGESSolid_HArray1OfVertexList theHandle) -> Handle_IGESSolid_HArray1OfVertexList
        assign(Handle_IGESSolid_HArray1OfVertexList self, IGESSolid_HArray1OfVertexList thePtr) -> Handle_IGESSolid_HArray1OfVertexList
        assign(Handle_IGESSolid_HArray1OfVertexList self, Handle_IGESSolid_HArray1OfVertexList theHandle) -> Handle_IGESSolid_HArray1OfVertexList

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_HArray1OfVertexList self) -> IGESSolid_HArray1OfVertexList

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_HArray1OfVertexList self) -> IGESSolid_HArray1OfVertexList

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_HArray1OfVertexList self) -> IGESSolid_HArray1OfVertexList

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_HArray1OfVertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_HArray1OfVertexList_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_HArray1OfVertexList

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfVertexList

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESSolid_HArray1OfVertexList self) -> NCollection_Array1_Handle_IGESSolid_VertexList

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfVertexList

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_HArray1OfVertexList self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_HArray1OfVertexList self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_HArray1OfVertexList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_HArray1OfVertexList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_HArray1OfVertexList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_HArray1OfVertexList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_HArray1OfVertexList self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_HArray1OfVertexList self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_HArray1OfVertexList self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_HArray1OfVertexList self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_DecrementRefCounter(self, *args)

Handle_IGESSolid_HArray1OfVertexList_swigregister = _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_swigregister
Handle_IGESSolid_HArray1OfVertexList_swigregister(Handle_IGESSolid_HArray1OfVertexList)

def Handle_IGESSolid_HArray1OfVertexList_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_DownCast(thing)
Handle_IGESSolid_HArray1OfVertexList_DownCast = _IGESSolid.Handle_IGESSolid_HArray1OfVertexList_DownCast

class Handle_IGESSolid_Cylinder(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Cylinder self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Cylinder self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Cylinder self, IGESSolid_Cylinder thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Cylinder self, Handle_IGESSolid_Cylinder theHandle) -> Handle_IGESSolid_Cylinder
        assign(Handle_IGESSolid_Cylinder self, IGESSolid_Cylinder thePtr) -> Handle_IGESSolid_Cylinder
        assign(Handle_IGESSolid_Cylinder self, Handle_IGESSolid_Cylinder theHandle) -> Handle_IGESSolid_Cylinder

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Cylinder self) -> IGESSolid_Cylinder

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Cylinder self) -> IGESSolid_Cylinder

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Cylinder self) -> IGESSolid_Cylinder

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Cylinder___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Cylinder___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Cylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Cylinder_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Cylinder

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Cylinder self, Standard_Real const aHeight, Standard_Real const aRadius, gp_XYZ aCenter, gp_XYZ anAxis)

        This method is used to set the fields of the class
        Cylinder
        - aHeight : Cylinder height
        - aRadius : Cylinder radius
        - aCenter : First face center coordinates (default (0,0,0))
        - anAxis  : Unit vector in axis direction (default (0,0,1))

        :type aHeight: float
        :type aRadius: float
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type anAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Init(self, *args)


    def Height(self, *args):
        """
        Height(Handle_IGESSolid_Cylinder self) -> Standard_Real

        returns the cylinder height

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Height(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESSolid_Cylinder self) -> Standard_Real

        returns the cylinder radius

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Radius(self, *args)


    def FaceCenter(self, *args):
        """
        FaceCenter(Handle_IGESSolid_Cylinder self) -> gp_Pnt

        returns the first face center coordinates.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_FaceCenter(self, *args)


    def TransformedFaceCenter(self, *args):
        """
        TransformedFaceCenter(Handle_IGESSolid_Cylinder self) -> gp_Pnt

        returns the first face center after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_TransformedFaceCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_Cylinder self) -> gp_Dir

        returns the vector in axis direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESSolid_Cylinder self) -> gp_Dir

        returns the vector in axis direction after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_TransformedAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Cylinder self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Cylinder_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Cylinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Cylinder self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Cylinder self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Cylinder self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Cylinder self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Cylinder self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Cylinder self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Cylinder self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Cylinder self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Cylinder self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Cylinder self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Cylinder self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Cylinder self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Cylinder self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Cylinder self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Cylinder self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Cylinder self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Cylinder self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Cylinder self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Cylinder self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Cylinder self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Cylinder self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Cylinder self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Cylinder self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Cylinder self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Cylinder self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Cylinder self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Cylinder self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Cylinder self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Cylinder self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Cylinder self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Cylinder self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Cylinder self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Cylinder self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Cylinder self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Cylinder self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Cylinder self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Cylinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Cylinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Cylinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Cylinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Cylinder self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Cylinder self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Cylinder self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Cylinder_DecrementRefCounter(self, *args)

Handle_IGESSolid_Cylinder_swigregister = _IGESSolid.Handle_IGESSolid_Cylinder_swigregister
Handle_IGESSolid_Cylinder_swigregister(Handle_IGESSolid_Cylinder)

def Handle_IGESSolid_Cylinder_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Cylinder_DownCast(thing)
Handle_IGESSolid_Cylinder_DownCast = _IGESSolid.Handle_IGESSolid_Cylinder_DownCast

class IGESSolid_ToroidalSurface(IGESData.IGESData_IGESEntity):
    """
    defines ToroidalSurface, Type <198> Form Number <0,1>
    in package IGESSolid
    This entity is defined by the center point, the axis
    direction and the major and minor radii. In case of
    parametrised surface a reference direction is provided.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_ToroidalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_ToroidalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_ToroidalSurface self) -> IGESSolid_ToroidalSurface

        defines ToroidalSurface, Type <198> Form Number <0,1>
        in package IGESSolid
        This entity is defined by the center point, the axis
        direction and the major and minor radii. In case of
        parametrised surface a reference direction is provided.
        """
        this = _IGESSolid.new_IGESSolid_ToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_ToroidalSurface self, Handle_IGESGeom_Point aCenter, Handle_IGESGeom_Direction anAxis, Standard_Real const majRadius, Standard_Real const minRadius, Handle_IGESGeom_Direction Refdir)

        This method is used to set the fields of the class
        ToroidalSurface
        - aCenter   : the center point coordinates
        - anAxis    : the direction of the axis
        - majRadius : the major radius
        - minRadius : the minor radius
        - Refdir    : the reference direction (parametrised)
        default Null for unparametrised surface

        :type aCenter: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type majRadius: float
        :type minRadius: float
        :type Refdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_Init(self, *args)


    def Center(self, *args):
        """
        Center(IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Point

        returns the center point coordinates of the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(IGESSolid_ToroidalSurface self) -> gp_Pnt

        returns the center point coordinates of the surface
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_TransformedCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_Axis(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(IGESSolid_ToroidalSurface self) -> Standard_Real

        returns the major radius of the surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_MajorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        MinorRadius(IGESSolid_ToroidalSurface self) -> Standard_Real

        returns the minor radius of the surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_MinorRadius(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if the surface is parametrised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_IsParametrised(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_ToroidalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_ToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToroidalSurface
IGESSolid_ToroidalSurface_swigregister = _IGESSolid.IGESSolid_ToroidalSurface_swigregister
IGESSolid_ToroidalSurface_swigregister(IGESSolid_ToroidalSurface)

def IGESSolid_ToroidalSurface_get_type_name(*args):
    """
    IGESSolid_ToroidalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_ToroidalSurface_get_type_name(*args)

def IGESSolid_ToroidalSurface_get_type_descriptor(*args):
    """
    IGESSolid_ToroidalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_ToroidalSurface_get_type_descriptor(*args)

class IGESSolid_ToolBooleanTree(object):
    """
    Tool to work on a BooleanTree. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolBooleanTree self) -> IGESSolid_ToolBooleanTree

        Returns a ToolBooleanTree, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolBooleanTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent, Interface_EntityIterator iter)

        Lists the Entities shared by a BooleanTree <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree entfrom, Handle_IGESSolid_BooleanTree entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolBooleanTree self, Handle_IGESSolid_BooleanTree ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolBooleanTree_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolBooleanTree
IGESSolid_ToolBooleanTree_swigregister = _IGESSolid.IGESSolid_ToolBooleanTree_swigregister
IGESSolid_ToolBooleanTree_swigregister(IGESSolid_ToolBooleanTree)

class Handle_IGESSolid_SelectedComponent(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SelectedComponent self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SelectedComponent self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SelectedComponent self, IGESSolid_SelectedComponent thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SelectedComponent self, Handle_IGESSolid_SelectedComponent theHandle) -> Handle_IGESSolid_SelectedComponent
        assign(Handle_IGESSolid_SelectedComponent self, IGESSolid_SelectedComponent thePtr) -> Handle_IGESSolid_SelectedComponent
        assign(Handle_IGESSolid_SelectedComponent self, Handle_IGESSolid_SelectedComponent theHandle) -> Handle_IGESSolid_SelectedComponent

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SelectedComponent self) -> IGESSolid_SelectedComponent

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SelectedComponent self) -> IGESSolid_SelectedComponent

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SelectedComponent self) -> IGESSolid_SelectedComponent

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SelectedComponent___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SelectedComponent___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SelectedComponent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SelectedComponent_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SelectedComponent

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SelectedComponent self, Handle_IGESSolid_BooleanTree anEntity, gp_XYZ selectPnt)

        This method is used to set the fields of the class
        SelectedComponent
        - anEntity  : the Boolean tree entity
        - selectPnt : Point in or on the desired component

        :type anEntity: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree
        :type selectPnt: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Init(self, *args)


    def Component(self, *args):
        """
        Component(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESSolid_BooleanTree

        returns the Boolean tree entity

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_BooleanTree

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Component(self, *args)


    def SelectPoint(self, *args):
        """
        SelectPoint(Handle_IGESSolid_SelectedComponent self) -> gp_Pnt

        returns the point on/in the selected component

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SelectPoint(self, *args)


    def TransformedSelectPoint(self, *args):
        """
        TransformedSelectPoint(Handle_IGESSolid_SelectedComponent self) -> gp_Pnt

        returns the point on/in the selected component
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_TransformedSelectPoint(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SelectedComponent self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SelectedComponent_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SelectedComponent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SelectedComponent self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SelectedComponent self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SelectedComponent self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SelectedComponent self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SelectedComponent self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SelectedComponent self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SelectedComponent self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SelectedComponent self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SelectedComponent self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SelectedComponent self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SelectedComponent self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SelectedComponent self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SelectedComponent self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SelectedComponent self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SelectedComponent self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SelectedComponent self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SelectedComponent self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SelectedComponent self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SelectedComponent self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SelectedComponent self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SelectedComponent self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SelectedComponent self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SelectedComponent self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SelectedComponent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SelectedComponent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SelectedComponent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SelectedComponent self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SelectedComponent self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SelectedComponent self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SelectedComponent_DecrementRefCounter(self, *args)

Handle_IGESSolid_SelectedComponent_swigregister = _IGESSolid.Handle_IGESSolid_SelectedComponent_swigregister
Handle_IGESSolid_SelectedComponent_swigregister(Handle_IGESSolid_SelectedComponent)

def Handle_IGESSolid_SelectedComponent_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SelectedComponent_DownCast(thing)
Handle_IGESSolid_SelectedComponent_DownCast = _IGESSolid.Handle_IGESSolid_SelectedComponent_DownCast

class IGESSolid_ToolRightAngularWedge(object):
    """
    Tool to work on a RightAngularWedge. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolRightAngularWedge self) -> IGESSolid_ToolRightAngularWedge

        Returns a ToolRightAngularWedge, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolRightAngularWedge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent, Interface_EntityIterator iter)

        Lists the Entities shared by a RightAngularWedge <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge entfrom, Handle_IGESSolid_RightAngularWedge entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolRightAngularWedge self, Handle_IGESSolid_RightAngularWedge ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_RightAngularWedge
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolRightAngularWedge_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolRightAngularWedge
IGESSolid_ToolRightAngularWedge_swigregister = _IGESSolid.IGESSolid_ToolRightAngularWedge_swigregister
IGESSolid_ToolRightAngularWedge_swigregister(IGESSolid_ToolRightAngularWedge)

class Handle_IGESSolid_EdgeList(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_EdgeList self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_EdgeList self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_EdgeList self, IGESSolid_EdgeList thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_EdgeList self, Handle_IGESSolid_EdgeList theHandle) -> Handle_IGESSolid_EdgeList
        assign(Handle_IGESSolid_EdgeList self, IGESSolid_EdgeList thePtr) -> Handle_IGESSolid_EdgeList
        assign(Handle_IGESSolid_EdgeList self, Handle_IGESSolid_EdgeList theHandle) -> Handle_IGESSolid_EdgeList

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_EdgeList self) -> IGESSolid_EdgeList

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_EdgeList self) -> IGESSolid_EdgeList

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_EdgeList self) -> IGESSolid_EdgeList

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_EdgeList___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_EdgeList___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_EdgeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_EdgeList_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_EdgeList

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_EdgeList self, Handle_IGESData_HArray1OfIGESEntity curves, Handle_IGESSolid_HArray1OfVertexList startVertexList, Handle_TColStd_HArray1OfInteger startVertexIndex, Handle_IGESSolid_HArray1OfVertexList endVertexList, Handle_TColStd_HArray1OfInteger endVertexIndex)

        This method is used to set the fields of the class
        EdgeList
        - curves           : the model space curves
        - startVertexList  : the vertex list that contains the
        start vertices
        - startVertexIndex : the index of the vertex in the
        corresponding vertex list
        - endVertexList    : the vertex list that contains the
        end vertices
        - endVertexIndex   : the index of the vertex in the
        corresponding vertex list
        raises exception if size of curves,startVertexList,startVertexIndex,
        endVertexList and endVertexIndex do no match

        :type curves: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type startVertexList: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfVertexList
        :type startVertexIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type endVertexList: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfVertexList
        :type endVertexIndex: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Init(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        returns the number of edges in the edge list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NbEdges(self, *args)


    def Curve(self, *args):
        """
        Curve(Handle_IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESData_IGESEntity

        returns the num'th model space curve
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Curve(self, *args)


    def StartVertexList(self, *args):
        """
        StartVertexList(Handle_IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESSolid_VertexList

        returns the num'th start vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_StartVertexList(self, *args)


    def StartVertexIndex(self, *args):
        """
        StartVertexIndex(Handle_IGESSolid_EdgeList self, Standard_Integer const num) -> Standard_Integer

        returns the index of num'th start vertex in
        the corresponding start vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_StartVertexIndex(self, *args)


    def EndVertexList(self, *args):
        """
        EndVertexList(Handle_IGESSolid_EdgeList self, Standard_Integer const num) -> Handle_IGESSolid_VertexList

        returns the num'th end vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_EndVertexList(self, *args)


    def EndVertexIndex(self, *args):
        """
        EndVertexIndex(Handle_IGESSolid_EdgeList self, Standard_Integer const num) -> Standard_Integer

        returns the index of num'th end vertex in
        the corresponding end vertex list
        raises Exception if num <= 0 or num > NbEdges()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_EndVertexIndex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_EdgeList self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_EdgeList_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_EdgeList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_EdgeList self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_EdgeList self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_EdgeList self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_EdgeList self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_EdgeList self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_EdgeList self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_EdgeList self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_EdgeList self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_EdgeList self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_EdgeList self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_EdgeList self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_EdgeList self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_EdgeList self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_EdgeList self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_EdgeList self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_EdgeList self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_EdgeList self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_EdgeList self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_EdgeList self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_EdgeList self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_EdgeList self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_EdgeList self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_EdgeList self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_EdgeList self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_EdgeList self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_EdgeList self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_EdgeList self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_EdgeList self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_EdgeList self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_EdgeList self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_EdgeList self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_EdgeList self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_EdgeList self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_EdgeList self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_EdgeList self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_EdgeList self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_EdgeList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_EdgeList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_EdgeList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_EdgeList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_EdgeList self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_EdgeList self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_EdgeList self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_EdgeList_DecrementRefCounter(self, *args)

Handle_IGESSolid_EdgeList_swigregister = _IGESSolid.Handle_IGESSolid_EdgeList_swigregister
Handle_IGESSolid_EdgeList_swigregister(Handle_IGESSolid_EdgeList)

def Handle_IGESSolid_EdgeList_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_EdgeList_DownCast(thing)
Handle_IGESSolid_EdgeList_DownCast = _IGESSolid.Handle_IGESSolid_EdgeList_DownCast

class IGESSolid_ToolSelectedComponent(object):
    """
    Tool to work on a SelectedComponent. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSelectedComponent self) -> IGESSolid_ToolSelectedComponent

        Returns a ToolSelectedComponent, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSelectedComponent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SelectedComponent <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent entfrom, Handle_IGESSolid_SelectedComponent entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSelectedComponent self, Handle_IGESSolid_SelectedComponent ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SelectedComponent
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSelectedComponent_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSelectedComponent
IGESSolid_ToolSelectedComponent_swigregister = _IGESSolid.IGESSolid_ToolSelectedComponent_swigregister
IGESSolid_ToolSelectedComponent_swigregister(IGESSolid_ToolSelectedComponent)

class IGESSolid_ConicalSurface(IGESData.IGESData_IGESEntity):
    """
    defines ConicalSurface, Type <194> Form Number <0,1>
    in package IGESSolid
    The right circular conical surface is defined by a
    point on the axis on the cone, the direction of the axis
    of the cone, the radius of the cone at the axis point and
    the cone semi-angle.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_ConicalSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_ConicalSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_ConicalSurface self) -> IGESSolid_ConicalSurface

        defines ConicalSurface, Type <194> Form Number <0,1>
        in package IGESSolid
        The right circular conical surface is defined by a
        point on the axis on the cone, the direction of the axis
        of the cone, the radius of the cone at the axis point and
        the cone semi-angle.
        """
        this = _IGESSolid.new_IGESSolid_ConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_ConicalSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction anAxis, Standard_Real const aRadius, Standard_Real const anAngle, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        ConicalSurface
        - aLocation : Location of the point on axis
        - anAxis    : Direction of the axis
        - aRadius   : Radius at axis point
        - anAngle   : Value of semi-angle in degrees (0<angle<90)
        - aRefdir   : Reference direction (parametrised surface)
        Null if unparametrised surface.

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRadius: float
        :type anAngle: float
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ConicalSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Point

        returns the location of the point on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.IGESSolid_ConicalSurface_LocationPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ConicalSurface_Axis(self, *args)


    def Radius(self, *args):
        """
        Radius(IGESSolid_ConicalSurface self) -> Standard_Real

        returns the radius at the axis point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ConicalSurface_Radius(self, *args)


    def SemiAngle(self, *args):
        """
        SemiAngle(IGESSolid_ConicalSurface self) -> Standard_Real

        returns the semi-angle value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ConicalSurface_SemiAngle(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction of the conical surface in case
        of parametrised surface. For unparametrised surface it returns
        NULL.

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.IGESSolid_ConicalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(IGESSolid_ConicalSurface self) -> Standard_Boolean

        returns True if Form no is 1 else false

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_ConicalSurface_IsParametrised(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_ConicalSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_ConicalSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_ConicalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ConicalSurface
IGESSolid_ConicalSurface_swigregister = _IGESSolid.IGESSolid_ConicalSurface_swigregister
IGESSolid_ConicalSurface_swigregister(IGESSolid_ConicalSurface)

def IGESSolid_ConicalSurface_get_type_name(*args):
    """
    IGESSolid_ConicalSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_ConicalSurface_get_type_name(*args)

def IGESSolid_ConicalSurface_get_type_descriptor(*args):
    """
    IGESSolid_ConicalSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_ConicalSurface_get_type_descriptor(*args)

class Handle_IGESSolid_HArray1OfShell(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_HArray1OfShell self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_HArray1OfShell self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_HArray1OfShell self, IGESSolid_HArray1OfShell thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_HArray1OfShell self, Handle_IGESSolid_HArray1OfShell theHandle) -> Handle_IGESSolid_HArray1OfShell
        assign(Handle_IGESSolid_HArray1OfShell self, IGESSolid_HArray1OfShell thePtr) -> Handle_IGESSolid_HArray1OfShell
        assign(Handle_IGESSolid_HArray1OfShell self, Handle_IGESSolid_HArray1OfShell theHandle) -> Handle_IGESSolid_HArray1OfShell

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_HArray1OfShell self) -> IGESSolid_HArray1OfShell

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_HArray1OfShell self) -> IGESSolid_HArray1OfShell

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_HArray1OfShell self) -> IGESSolid_HArray1OfShell

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_HArray1OfShell___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_HArray1OfShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_HArray1OfShell_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_HArray1OfShell

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfShell

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfShell_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESSolid_HArray1OfShell self) -> NCollection_Array1_Handle_IGESSolid_Shell

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfShell

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_HArray1OfShell self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfShell_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfShell_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_HArray1OfShell self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_HArray1OfShell self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_HArray1OfShell self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_HArray1OfShell self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_HArray1OfShell self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_HArray1OfShell self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_HArray1OfShell self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_HArray1OfShell self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_HArray1OfShell self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfShell_DecrementRefCounter(self, *args)

Handle_IGESSolid_HArray1OfShell_swigregister = _IGESSolid.Handle_IGESSolid_HArray1OfShell_swigregister
Handle_IGESSolid_HArray1OfShell_swigregister(Handle_IGESSolid_HArray1OfShell)

def Handle_IGESSolid_HArray1OfShell_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_HArray1OfShell_DownCast(thing)
Handle_IGESSolid_HArray1OfShell_DownCast = _IGESSolid.Handle_IGESSolid_HArray1OfShell_DownCast

class NCollection_Array1_Handle_IGESSolid_Shell(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESSolid_Shell self) -> NCollection_Array1< opencascade::handle< IGESSolid_Shell > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESSolid_Shell self) -> NCollection_Array1< opencascade::handle< IGESSolid_Shell > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESSolid_Shell self) -> NCollection_Array1< opencascade::handle< IGESSolid_Shell > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESSolid_Shell self) -> NCollection_Array1< opencascade::handle< IGESSolid_Shell > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESSolid.new_NCollection_Array1_Handle_IGESSolid_Shell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESSolid_Shell self, Handle_IGESSolid_Shell theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESSolid_Shell self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESSolid_Shell self, NCollection_Array1_Handle_IGESSolid_Shell theOther) -> NCollection_Array1_Handle_IGESSolid_Shell

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESSolid_Shell self, NCollection_Array1_Handle_IGESSolid_Shell theOther) -> NCollection_Array1_Handle_IGESSolid_Shell

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESSolid_Shell self, NCollection_Array1_Handle_IGESSolid_Shell theOther) -> NCollection_Array1_Handle_IGESSolid_Shell
        assign(NCollection_Array1_Handle_IGESSolid_Shell self, NCollection_Array1_Handle_IGESSolid_Shell theOther) -> NCollection_Array1_Handle_IGESSolid_Shell

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESSolid_Shell self) -> Handle_IGESSolid_Shell

        @return first element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESSolid_Shell self) -> Handle_IGESSolid_Shell

        @return last element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESSolid_Shell self, Standard_Integer const theIndex) -> Handle_IGESSolid_Shell

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESSolid_Shell self, Standard_Integer const theIndex, Handle_IGESSolid_Shell theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESSolid_Shell self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_Resize(self, *args)

    __swig_destroy__ = _IGESSolid.delete_NCollection_Array1_Handle_IGESSolid_Shell
NCollection_Array1_Handle_IGESSolid_Shell_swigregister = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Shell_swigregister
NCollection_Array1_Handle_IGESSolid_Shell_swigregister(NCollection_Array1_Handle_IGESSolid_Shell)


try:
	IGESSolid_Array1OfShell = NCollection_Array1_Handle_IGESSolid_Shell
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESSolid_Sphere(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Sphere self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Sphere self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Sphere self, IGESSolid_Sphere thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Sphere self, Handle_IGESSolid_Sphere theHandle) -> Handle_IGESSolid_Sphere
        assign(Handle_IGESSolid_Sphere self, IGESSolid_Sphere thePtr) -> Handle_IGESSolid_Sphere
        assign(Handle_IGESSolid_Sphere self, Handle_IGESSolid_Sphere theHandle) -> Handle_IGESSolid_Sphere

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Sphere self) -> IGESSolid_Sphere

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Sphere self) -> IGESSolid_Sphere

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Sphere___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Sphere self) -> IGESSolid_Sphere

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Sphere___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Sphere___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Sphere___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Sphere(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Sphere_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Sphere

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Sphere self, Standard_Real const aRadius, gp_XYZ aCenter)

        This method is used to set the fields of the class Sphere
        - aRadius : the radius of the sphere
        - aCenter : the center point coordinates (default (0,0,0))

        :type aRadius: float
        :type aCenter: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Init(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESSolid_Sphere self) -> Standard_Real

        returns the radius of the sphere

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Radius(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESSolid_Sphere self) -> gp_Pnt

        returns the center of the sphere

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESSolid_Sphere self) -> gp_Pnt

        returns the center of the sphere after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_TransformedCenter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Sphere self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Sphere_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Sphere_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Sphere self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Sphere self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Sphere self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Sphere self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Sphere self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Sphere self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Sphere self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Sphere self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Sphere self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Sphere self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Sphere self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Sphere self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Sphere self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Sphere self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Sphere self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Sphere self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Sphere self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Sphere self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Sphere self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Sphere self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Sphere self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Sphere self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Sphere self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Sphere self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Sphere self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Sphere self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Sphere self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Sphere self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Sphere self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Sphere self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Sphere self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Sphere self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Sphere self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Sphere self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Sphere self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Sphere self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Sphere self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Sphere self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Sphere self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Sphere self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Sphere self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Sphere self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Sphere self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Sphere self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Sphere self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Sphere self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Sphere_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Sphere self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Sphere self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Sphere self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Sphere self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Sphere self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Sphere self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Sphere_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Sphere self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Sphere_DecrementRefCounter(self, *args)

Handle_IGESSolid_Sphere_swigregister = _IGESSolid.Handle_IGESSolid_Sphere_swigregister
Handle_IGESSolid_Sphere_swigregister(Handle_IGESSolid_Sphere)

def Handle_IGESSolid_Sphere_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Sphere_DownCast(thing)
Handle_IGESSolid_Sphere_DownCast = _IGESSolid.Handle_IGESSolid_Sphere_DownCast

class IGESSolid_ConeFrustum(IGESData.IGESData_IGESEntity):
    """
    defines ConeFrustum, Type <156> Form Number <0>
    in package IGESSolid
    The Cone Frustum is defined by the center of the
    larger circular face of the frustum, its radius, a unit
    vector in the axis direction, a height in this direction
    and a second circular face with radius which is lesser
    than the first face.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_ConeFrustum
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_ConeFrustum(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_ConeFrustum self) -> IGESSolid_ConeFrustum

        defines ConeFrustum, Type <156> Form Number <0>
        in package IGESSolid
        The Cone Frustum is defined by the center of the
        larger circular face of the frustum, its radius, a unit
        vector in the axis direction, a height in this direction
        and a second circular face with radius which is lesser
        than the first face.
        """
        this = _IGESSolid.new_IGESSolid_ConeFrustum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_ConeFrustum self, Standard_Real const Ht, Standard_Real const R1, Standard_Real const R2, gp_XYZ Center, gp_XYZ anAxis)

        This method is used to set the fields of the class
        ConeFrustum
        - Ht     : the Height of cone
        - R1     : Radius of the larger face
        - R2     : Radius of the smaller face (default 0)
        - Center : Center of the larger face (default (0,0,0))
        - anAxis : Unit vector in axis direction (default (0,0,1))

        :type Ht: float
        :type R1: float
        :type R2: float
        :type Center: OCC.wrapper.gp.gp_XYZ
        :type anAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_ConeFrustum_Init(self, *args)


    def Height(self, *args):
        """
        Height(IGESSolid_ConeFrustum self) -> Standard_Real

        returns the height of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ConeFrustum_Height(self, *args)


    def LargerRadius(self, *args):
        """
        LargerRadius(IGESSolid_ConeFrustum self) -> Standard_Real

        returns the radius of the larger face of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ConeFrustum_LargerRadius(self, *args)


    def SmallerRadius(self, *args):
        """
        SmallerRadius(IGESSolid_ConeFrustum self) -> Standard_Real

        returns the radius of the second face of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_ConeFrustum_SmallerRadius(self, *args)


    def FaceCenter(self, *args):
        """
        FaceCenter(IGESSolid_ConeFrustum self) -> gp_Pnt

        returns the center of the larger face of the cone frustum

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_ConeFrustum_FaceCenter(self, *args)


    def TransformedFaceCenter(self, *args):
        """
        TransformedFaceCenter(IGESSolid_ConeFrustum self) -> gp_Pnt

        returns the center of the larger face of the cone frustum
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_ConeFrustum_TransformedFaceCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(IGESSolid_ConeFrustum self) -> gp_Dir

        returns the direction of the axis of the cone frustum

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_ConeFrustum_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(IGESSolid_ConeFrustum self) -> gp_Dir

        returns the direction of the axis of the cone frustum
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_ConeFrustum_TransformedAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_ConeFrustum_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_ConeFrustum_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_ConeFrustum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ConeFrustum
IGESSolid_ConeFrustum_swigregister = _IGESSolid.IGESSolid_ConeFrustum_swigregister
IGESSolid_ConeFrustum_swigregister(IGESSolid_ConeFrustum)

def IGESSolid_ConeFrustum_get_type_name(*args):
    """
    IGESSolid_ConeFrustum_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_ConeFrustum_get_type_name(*args)

def IGESSolid_ConeFrustum_get_type_descriptor(*args):
    """
    IGESSolid_ConeFrustum_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_ConeFrustum_get_type_descriptor(*args)

class Handle_IGESSolid_Ellipsoid(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Ellipsoid self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Ellipsoid self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Ellipsoid self, IGESSolid_Ellipsoid thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Ellipsoid self, Handle_IGESSolid_Ellipsoid theHandle) -> Handle_IGESSolid_Ellipsoid
        assign(Handle_IGESSolid_Ellipsoid self, IGESSolid_Ellipsoid thePtr) -> Handle_IGESSolid_Ellipsoid
        assign(Handle_IGESSolid_Ellipsoid self, Handle_IGESSolid_Ellipsoid theHandle) -> Handle_IGESSolid_Ellipsoid

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Ellipsoid self) -> IGESSolid_Ellipsoid

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Ellipsoid self) -> IGESSolid_Ellipsoid

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Ellipsoid self) -> IGESSolid_Ellipsoid

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Ellipsoid___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Ellipsoid___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Ellipsoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Ellipsoid_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Ellipsoid

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Ellipsoid self, gp_XYZ aSize, gp_XYZ aCenter, gp_XYZ anXAxis, gp_XYZ anZAxis)

        This method is used to set the fields of the class
        Ellipsoid
        - aSize      : Lengths in the local X,Y,Z directions
        - aCenter    : Center point of ellipsoid (default (0,0,0))
        - anXAxis    : Unit vector defining local X-axis
        default (1,0,0)
        - anZAxis    : Unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type aCenter: OCC.wrapper.gp.gp_XYZ
        :type anXAxis: OCC.wrapper.gp.gp_XYZ
        :type anZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESSolid_Ellipsoid self) -> gp_XYZ

        returns the size

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Size(self, *args)


    def XLength(self, *args):
        """
        XLength(Handle_IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local X-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_XLength(self, *args)


    def YLength(self, *args):
        """
        YLength(Handle_IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local Y-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(Handle_IGESSolid_Ellipsoid self) -> Standard_Real

        returns the length in the local Z-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ZLength(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESSolid_Ellipsoid self) -> gp_Pnt

        returns the center of the ellipsoid

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESSolid_Ellipsoid self) -> gp_Pnt

        returns the center of the ellipsoid after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TransformedCenter(self, *args)


    def XAxis(self, *args):
        """
        XAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local X-direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local X-direction
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Y-direction
        which is got by taking cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Y-direction
        (which is got by taking cross product of ZAxis and XAxis)
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Z-direction

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(Handle_IGESSolid_Ellipsoid self) -> gp_Dir

        returns the vector corresponding to the local Z-direction
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TransformedZAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Ellipsoid self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Ellipsoid_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Ellipsoid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Ellipsoid self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Ellipsoid self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Ellipsoid self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Ellipsoid self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Ellipsoid self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Ellipsoid self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Ellipsoid self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Ellipsoid self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Ellipsoid self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Ellipsoid self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Ellipsoid self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Ellipsoid self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Ellipsoid self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Ellipsoid self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Ellipsoid self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Ellipsoid self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Ellipsoid self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Ellipsoid self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Ellipsoid self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Ellipsoid self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Ellipsoid self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Ellipsoid self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Ellipsoid self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Ellipsoid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Ellipsoid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Ellipsoid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Ellipsoid self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Ellipsoid self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Ellipsoid self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Ellipsoid_DecrementRefCounter(self, *args)

Handle_IGESSolid_Ellipsoid_swigregister = _IGESSolid.Handle_IGESSolid_Ellipsoid_swigregister
Handle_IGESSolid_Ellipsoid_swigregister(Handle_IGESSolid_Ellipsoid)

def Handle_IGESSolid_Ellipsoid_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Ellipsoid_DownCast(thing)
Handle_IGESSolid_Ellipsoid_DownCast = _IGESSolid.Handle_IGESSolid_Ellipsoid_DownCast

class Handle_IGESSolid_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_GeneralModule self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_GeneralModule self, IGESSolid_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_GeneralModule self, Handle_IGESSolid_GeneralModule theHandle) -> Handle_IGESSolid_GeneralModule
        assign(Handle_IGESSolid_GeneralModule self, IGESSolid_GeneralModule thePtr) -> Handle_IGESSolid_GeneralModule
        assign(Handle_IGESSolid_GeneralModule self, Handle_IGESSolid_GeneralModule theHandle) -> Handle_IGESSolid_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_GeneralModule self) -> IGESSolid_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_GeneralModule self) -> IGESSolid_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_GeneralModule self) -> IGESSolid_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_GeneralModule_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Shape for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESSolid_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESSolid_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESSolid_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESSolid_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESSolid_GeneralModule_swigregister = _IGESSolid.Handle_IGESSolid_GeneralModule_swigregister
Handle_IGESSolid_GeneralModule_swigregister(Handle_IGESSolid_GeneralModule)

def Handle_IGESSolid_GeneralModule_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_GeneralModule_DownCast(thing)
Handle_IGESSolid_GeneralModule_DownCast = _IGESSolid.Handle_IGESSolid_GeneralModule_DownCast

class Handle_IGESSolid_VertexList(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_VertexList self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_VertexList self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_VertexList self, IGESSolid_VertexList thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_VertexList self, Handle_IGESSolid_VertexList theHandle) -> Handle_IGESSolid_VertexList
        assign(Handle_IGESSolid_VertexList self, IGESSolid_VertexList thePtr) -> Handle_IGESSolid_VertexList
        assign(Handle_IGESSolid_VertexList self, Handle_IGESSolid_VertexList theHandle) -> Handle_IGESSolid_VertexList

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_VertexList self) -> IGESSolid_VertexList

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_VertexList self) -> IGESSolid_VertexList

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_VertexList___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_VertexList self) -> IGESSolid_VertexList

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_VertexList___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_VertexList___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_VertexList___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_VertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_VertexList_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_VertexList

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_VertexList self, Handle_TColgp_HArray1OfXYZ vertices)

        This method is used to set the fields of the class
        VertexList
        - vertices : the vertices in the list

        :type vertices: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Init(self, *args)


    def NbVertices(self, *args):
        """
        NbVertices(Handle_IGESSolid_VertexList self) -> Standard_Integer

        return the number of vertices in the list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NbVertices(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_IGESSolid_VertexList self, Standard_Integer const num) -> gp_Pnt

        returns the num'th vertex in the list
        raises exception if num  <= 0 or num > NbVertices()

        :type num: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Vertex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_VertexList self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_VertexList_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_VertexList_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_VertexList self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_VertexList self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_VertexList self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_VertexList self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_VertexList self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_VertexList self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_VertexList self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_VertexList self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_VertexList self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_VertexList self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_VertexList self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_VertexList self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_VertexList self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_VertexList self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_VertexList self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_VertexList self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_VertexList self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_VertexList self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_VertexList self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_VertexList self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_VertexList self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_VertexList self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_VertexList self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_VertexList self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_VertexList self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_VertexList self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_VertexList self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_VertexList self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_VertexList self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_VertexList self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_VertexList self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_VertexList self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_VertexList self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_VertexList self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_VertexList self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_VertexList self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_VertexList self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_VertexList self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_VertexList self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_VertexList self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_VertexList self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_VertexList self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_VertexList self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_VertexList self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_VertexList self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_VertexList self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_VertexList_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_VertexList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_VertexList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_VertexList self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_VertexList self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_VertexList self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_VertexList self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_VertexList_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_VertexList self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_VertexList_DecrementRefCounter(self, *args)

Handle_IGESSolid_VertexList_swigregister = _IGESSolid.Handle_IGESSolid_VertexList_swigregister
Handle_IGESSolid_VertexList_swigregister(Handle_IGESSolid_VertexList)

def Handle_IGESSolid_VertexList_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_VertexList_DownCast(thing)
Handle_IGESSolid_VertexList_DownCast = _IGESSolid.Handle_IGESSolid_VertexList_DownCast

class IGESSolid_ToolShell(object):
    """
    Tool to work on a Shell. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolShell self) -> IGESSolid_ToolShell

        Returns a ToolShell, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolShell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolShell_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolShell_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Shell <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolShell_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolShell_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolShell_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolShell self, Handle_IGESSolid_Shell entfrom, Handle_IGESSolid_Shell entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolShell_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolShell self, Handle_IGESSolid_Shell ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolShell_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolShell
IGESSolid_ToolShell_swigregister = _IGESSolid.IGESSolid_ToolShell_swigregister
IGESSolid_ToolShell_swigregister(IGESSolid_ToolShell)

class Handle_IGESSolid_Torus(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Torus self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Torus_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Torus self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Torus_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Torus self, IGESSolid_Torus thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Torus_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Torus self, Handle_IGESSolid_Torus theHandle) -> Handle_IGESSolid_Torus
        assign(Handle_IGESSolid_Torus self, IGESSolid_Torus thePtr) -> Handle_IGESSolid_Torus
        assign(Handle_IGESSolid_Torus self, Handle_IGESSolid_Torus theHandle) -> Handle_IGESSolid_Torus

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Torus_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Torus self) -> IGESSolid_Torus

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Torus_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Torus self) -> IGESSolid_Torus

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Torus___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Torus self) -> IGESSolid_Torus

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Torus___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Torus___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Torus___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Torus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Torus_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Torus

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Torus self, Standard_Real const R1, Standard_Real const R2, gp_XYZ aPoint, gp_XYZ anAxisdir)

        This method is used to set the fields of the class Torus
        - R1     : distance from center of torus to center
        of circular disc to be revolved
        - R2     : radius of circular disc
        - aPoint : center point coordinates (default (0,0,0))
        - anAxis : unit vector in axis direction (default (0,0,1))

        :type R1: float
        :type R2: float
        :type aPoint: OCC.wrapper.gp.gp_XYZ
        :type anAxisdir: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Init(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(Handle_IGESSolid_Torus self) -> Standard_Real

        returns the distance from the center of torus to the center of
        the disc to be revolved

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Torus_MajorRadius(self, *args)


    def DiscRadius(self, *args):
        """
        DiscRadius(Handle_IGESSolid_Torus self) -> Standard_Real

        returns the radius of the disc to be revolved

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DiscRadius(self, *args)


    def AxisPoint(self, *args):
        """
        AxisPoint(Handle_IGESSolid_Torus self) -> gp_Pnt

        returns the center of torus

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Torus_AxisPoint(self, *args)


    def TransformedAxisPoint(self, *args):
        """
        TransformedAxisPoint(Handle_IGESSolid_Torus self) -> gp_Pnt

        returns the center of torus after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Torus_TransformedAxisPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_Torus self) -> gp_Dir

        returns direction of the axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESSolid_Torus self) -> gp_Dir

        returns direction of the axis after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Torus_TransformedAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Torus self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Torus_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Torus_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Torus_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Torus self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Torus_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Torus self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Torus self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Torus self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Torus self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Torus self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Torus self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Torus self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Torus self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Torus self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Torus self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Torus self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Torus self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Torus self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Torus self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Torus_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Torus self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Torus self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Torus self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Torus self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Torus_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Torus self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Torus self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Torus self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Torus self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Torus self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Torus self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Torus self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Torus self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Torus self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Torus self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Torus self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Torus self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Torus self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Torus_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Torus self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Torus_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Torus self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Torus self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Torus_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Torus self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Torus self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Torus self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Torus self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Torus self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Torus self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Torus self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Torus self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Torus self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Torus_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Torus self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Torus self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Torus self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Torus self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Torus_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Torus self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Torus_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Torus self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Torus_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Torus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Torus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Torus self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Torus self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Torus_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Torus self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Torus_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Torus self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Torus self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Torus_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Torus self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Torus_DecrementRefCounter(self, *args)

Handle_IGESSolid_Torus_swigregister = _IGESSolid.Handle_IGESSolid_Torus_swigregister
Handle_IGESSolid_Torus_swigregister(Handle_IGESSolid_Torus)

def Handle_IGESSolid_Torus_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Torus_DownCast(thing)
Handle_IGESSolid_Torus_DownCast = _IGESSolid.Handle_IGESSolid_Torus_DownCast

class IGESSolid_ToolToroidalSurface(object):
    """
    Tool to work on a ToroidalSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolToroidalSurface self) -> IGESSolid_ToolToroidalSurface

        Returns a ToolToroidalSurface, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ToroidalSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface entfrom, Handle_IGESSolid_ToroidalSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolToroidalSurface self, Handle_IGESSolid_ToroidalSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolToroidalSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolToroidalSurface
IGESSolid_ToolToroidalSurface_swigregister = _IGESSolid.IGESSolid_ToolToroidalSurface_swigregister
IGESSolid_ToolToroidalSurface_swigregister(IGESSolid_ToolToroidalSurface)

class IGESSolid_ToolLoop(object):
    """
    Tool to work on a Loop. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolLoop self) -> IGESSolid_ToolLoop

        Returns a ToolLoop, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolLoop_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolLoop_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Loop <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolLoop_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolLoop_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolLoop_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop entfrom, Handle_IGESSolid_Loop entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolLoop_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolLoop self, Handle_IGESSolid_Loop ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolLoop_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolLoop
IGESSolid_ToolLoop_swigregister = _IGESSolid.IGESSolid_ToolLoop_swigregister
IGESSolid_ToolLoop_swigregister(IGESSolid_ToolLoop)

class IGESSolid_Block(IGESData.IGESData_IGESEntity):
    """
    defines Block, Type <150> Form Number <0>
    in package IGESSolid
    The Block is a rectangular parallelopiped, defined with
    one vertex at (X1, Y1, Z1) and three edges lying along
    the local +X, +Y, +Z axes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_Block
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_Block(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_Block self) -> IGESSolid_Block

        defines Block, Type <150> Form Number <0>
        in package IGESSolid
        The Block is a rectangular parallelopiped, defined with
        one vertex at (X1, Y1, Z1) and three edges lying along
        the local +X, +Y, +Z axes.
        """
        this = _IGESSolid.new_IGESSolid_Block(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_Block self, gp_XYZ aSize, gp_XYZ aCorner, gp_XYZ aXAxis, gp_XYZ aZAxis)

        This method is used to set the fields of the class Block
        - aSize   : Length in each local directions
        - aCorner : Corner point coordinates. Default (0,0,0)
        - aXAxis  : Unit vector defining local X-axis
        default (1,0,0)
        - aZAxis  : Unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type aXAxis: OCC.wrapper.gp.gp_XYZ
        :type aZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Block_Init(self, *args)


    def Size(self, *args):
        """
        Size(IGESSolid_Block self) -> gp_XYZ

        returns the size of the block

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.IGESSolid_Block_Size(self, *args)


    def XLength(self, *args):
        """
        XLength(IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local X-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Block_XLength(self, *args)


    def YLength(self, *args):
        """
        YLength(IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local Y-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Block_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local Z-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.IGESSolid_Block_ZLength(self, *args)


    def Corner(self, *args):
        """
        Corner(IGESSolid_Block self) -> gp_Pnt

        returns the corner point coordinates of the Block

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Block_Corner(self, *args)


    def TransformedCorner(self, *args):
        """
        TransformedCorner(IGESSolid_Block self) -> gp_Pnt

        returns the corner point coordinates of the Block after applying
        the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.IGESSolid_Block_TransformedCorner(self, *args)


    def XAxis(self, *args):
        """
        XAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Y-axis
        it is the cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Y-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Z-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.IGESSolid_Block_TransformedZAxis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_Block_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_Block_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_Block_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_Block
IGESSolid_Block_swigregister = _IGESSolid.IGESSolid_Block_swigregister
IGESSolid_Block_swigregister(IGESSolid_Block)

def IGESSolid_Block_get_type_name(*args):
    """
    IGESSolid_Block_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_Block_get_type_name(*args)

def IGESSolid_Block_get_type_descriptor(*args):
    """
    IGESSolid_Block_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_Block_get_type_descriptor(*args)

class IGESSolid_ToolVertexList(object):
    """
    Tool to work on a VertexList. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolVertexList self) -> IGESSolid_ToolVertexList

        Returns a ToolVertexList, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolVertexList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolVertexList_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolVertexList_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent, Interface_EntityIterator iter)

        Lists the Entities shared by a VertexList <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolVertexList_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolVertexList_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolVertexList_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList entfrom, Handle_IGESSolid_VertexList entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolVertexList_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolVertexList self, Handle_IGESSolid_VertexList ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolVertexList_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolVertexList
IGESSolid_ToolVertexList_swigregister = _IGESSolid.IGESSolid_ToolVertexList_swigregister
IGESSolid_ToolVertexList_swigregister(IGESSolid_ToolVertexList)

class Handle_IGESSolid_SolidInstance(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_SolidInstance self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_SolidInstance self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_SolidInstance self, IGESSolid_SolidInstance thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_SolidInstance self, Handle_IGESSolid_SolidInstance theHandle) -> Handle_IGESSolid_SolidInstance
        assign(Handle_IGESSolid_SolidInstance self, IGESSolid_SolidInstance thePtr) -> Handle_IGESSolid_SolidInstance
        assign(Handle_IGESSolid_SolidInstance self, Handle_IGESSolid_SolidInstance theHandle) -> Handle_IGESSolid_SolidInstance

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_SolidInstance self) -> IGESSolid_SolidInstance

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_SolidInstance self) -> IGESSolid_SolidInstance

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_SolidInstance self) -> IGESSolid_SolidInstance

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_SolidInstance___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_SolidInstance___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_SolidInstance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_SolidInstance_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_SolidInstance

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity anEntity)

        This method is used to set the fields of the class
        SolidInstance
        - anEntity : the entity corresponding to the solid

        :type anEntity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Init(self, *args)


    def IsBrep(self, *args):
        """
        IsBrep(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Tells if a SolidInstance is for a BREP
        Default is False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IsBrep(self, *args)


    def SetBrep(self, *args):
        """
        SetBrep(Handle_IGESSolid_SolidInstance self, Standard_Boolean const brep)

        Sets or unsets the Brep status (FormNumber = 1 else 0)

        :type brep: bool

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SetBrep(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_IGESEntity

        returns the solid entity

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Entity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_SolidInstance self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidInstance_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_SolidInstance_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_SolidInstance self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_SolidInstance self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_SolidInstance self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_SolidInstance self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_SolidInstance self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_SolidInstance self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_SolidInstance self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_SolidInstance self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_SolidInstance self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_SolidInstance self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_SolidInstance self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_SolidInstance self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_SolidInstance self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_SolidInstance self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_SolidInstance self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_SolidInstance self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_SolidInstance self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_SolidInstance self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_SolidInstance self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_SolidInstance self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_SolidInstance self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_SolidInstance self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_SolidInstance self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_SolidInstance self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_SolidInstance self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_SolidInstance self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_SolidInstance self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_SolidInstance self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_SolidInstance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_SolidInstance self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_SolidInstance self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_SolidInstance self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_SolidInstance self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_SolidInstance self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_SolidInstance_DecrementRefCounter(self, *args)

Handle_IGESSolid_SolidInstance_swigregister = _IGESSolid.Handle_IGESSolid_SolidInstance_swigregister
Handle_IGESSolid_SolidInstance_swigregister(Handle_IGESSolid_SolidInstance)

def Handle_IGESSolid_SolidInstance_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_SolidInstance_DownCast(thing)
Handle_IGESSolid_SolidInstance_DownCast = _IGESSolid.Handle_IGESSolid_SolidInstance_DownCast

class IGESSolid_ToolEdgeList(object):
    """
    Tool to work on a EdgeList. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolEdgeList self) -> IGESSolid_ToolEdgeList

        Returns a ToolEdgeList, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolEdgeList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent, Interface_EntityIterator iter)

        Lists the Entities shared by a EdgeList <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList entfrom, Handle_IGESSolid_EdgeList entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolEdgeList self, Handle_IGESSolid_EdgeList ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolEdgeList_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolEdgeList
IGESSolid_ToolEdgeList_swigregister = _IGESSolid.IGESSolid_ToolEdgeList_swigregister
IGESSolid_ToolEdgeList_swigregister(IGESSolid_ToolEdgeList)

class Handle_IGESSolid_Block(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Block self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Block_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Block self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Block_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Block self, IGESSolid_Block thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Block_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Block self, Handle_IGESSolid_Block theHandle) -> Handle_IGESSolid_Block
        assign(Handle_IGESSolid_Block self, IGESSolid_Block thePtr) -> Handle_IGESSolid_Block
        assign(Handle_IGESSolid_Block self, Handle_IGESSolid_Block theHandle) -> Handle_IGESSolid_Block

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Block_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Block self) -> IGESSolid_Block

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Block_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Block self) -> IGESSolid_Block

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Block___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Block self) -> IGESSolid_Block

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Block___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Block___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Block___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Block(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Block_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Block

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Block self, gp_XYZ aSize, gp_XYZ aCorner, gp_XYZ aXAxis, gp_XYZ aZAxis)

        This method is used to set the fields of the class Block
        - aSize   : Length in each local directions
        - aCorner : Corner point coordinates. Default (0,0,0)
        - aXAxis  : Unit vector defining local X-axis
        default (1,0,0)
        - aZAxis  : Unit vector defining local Z-axis
        default (0,0,1)

        :type aSize: OCC.wrapper.gp.gp_XYZ
        :type aCorner: OCC.wrapper.gp.gp_XYZ
        :type aXAxis: OCC.wrapper.gp.gp_XYZ
        :type aZAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Block_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_IGESSolid_Block self) -> gp_XYZ

        returns the size of the block

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_Block_Size(self, *args)


    def XLength(self, *args):
        """
        XLength(Handle_IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local X-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Block_XLength(self, *args)


    def YLength(self, *args):
        """
        YLength(Handle_IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local Y-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Block_YLength(self, *args)


    def ZLength(self, *args):
        """
        ZLength(Handle_IGESSolid_Block self) -> Standard_Real

        returns the length of the Block along the local Z-direction

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Block_ZLength(self, *args)


    def Corner(self, *args):
        """
        Corner(Handle_IGESSolid_Block self) -> gp_Pnt

        returns the corner point coordinates of the Block

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Block_Corner(self, *args)


    def TransformedCorner(self, *args):
        """
        TransformedCorner(Handle_IGESSolid_Block self) -> gp_Pnt

        returns the corner point coordinates of the Block after applying
        the TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_Block_TransformedCorner(self, *args)


    def XAxis(self, *args):
        """
        XAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_XAxis(self, *args)


    def TransformedXAxis(self, *args):
        """
        TransformedXAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_TransformedXAxis(self, *args)


    def YAxis(self, *args):
        """
        YAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Y-axis
        it is the cross product of ZAxis and XAxis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_YAxis(self, *args)


    def TransformedYAxis(self, *args):
        """
        TransformedYAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Y-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_TransformedYAxis(self, *args)


    def ZAxis(self, *args):
        """
        ZAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local X-axis

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_ZAxis(self, *args)


    def TransformedZAxis(self, *args):
        """
        TransformedZAxis(Handle_IGESSolid_Block self) -> gp_Dir

        returns the direction defining the local Z-axis after applying
        TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_Block_TransformedZAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Block self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Block_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Block_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Block_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Block self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Block_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Block self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Block self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Block self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Block self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Block self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Block_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Block self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Block self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Block_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Block self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Block self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Block_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Block self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Block self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Block self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Block self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Block self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Block self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Block self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Block self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Block self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Block self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Block_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Block self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Block_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Block self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Block self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Block self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Block_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Block self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Block self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Block self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Block self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Block self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Block self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Block self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Block self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Block self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Block self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Block self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Block self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Block_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Block self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Block_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Block self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Block_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Block self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Block self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Block_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Block self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Block self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Block_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Block self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Block self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Block self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Block self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Block self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Block self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Block self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Block_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Block self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Block self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Block self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Block self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Block_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Block self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Block_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Block self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Block_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Block self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Block self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Block self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Block self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Block_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Block self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Block_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Block self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Block self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Block_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Block self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Block_DecrementRefCounter(self, *args)

Handle_IGESSolid_Block_swigregister = _IGESSolid.Handle_IGESSolid_Block_swigregister
Handle_IGESSolid_Block_swigregister(Handle_IGESSolid_Block)

def Handle_IGESSolid_Block_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Block_DownCast(thing)
Handle_IGESSolid_Block_DownCast = _IGESSolid.Handle_IGESSolid_Block_DownCast

class NCollection_Array1_Handle_IGESSolid_Loop(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESSolid_Loop self) -> NCollection_Array1< opencascade::handle< IGESSolid_Loop > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESSolid_Loop self) -> NCollection_Array1< opencascade::handle< IGESSolid_Loop > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESSolid_Loop self) -> NCollection_Array1< opencascade::handle< IGESSolid_Loop > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESSolid_Loop self) -> NCollection_Array1< opencascade::handle< IGESSolid_Loop > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESSolid.new_NCollection_Array1_Handle_IGESSolid_Loop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESSolid_Loop self, Handle_IGESSolid_Loop theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESSolid_Loop self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESSolid_Loop self, NCollection_Array1_Handle_IGESSolid_Loop theOther) -> NCollection_Array1_Handle_IGESSolid_Loop

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESSolid_Loop self, NCollection_Array1_Handle_IGESSolid_Loop theOther) -> NCollection_Array1_Handle_IGESSolid_Loop

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESSolid_Loop self, NCollection_Array1_Handle_IGESSolid_Loop theOther) -> NCollection_Array1_Handle_IGESSolid_Loop
        assign(NCollection_Array1_Handle_IGESSolid_Loop self, NCollection_Array1_Handle_IGESSolid_Loop theOther) -> NCollection_Array1_Handle_IGESSolid_Loop

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESSolid_Loop self) -> Handle_IGESSolid_Loop

        @return first element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESSolid_Loop self) -> Handle_IGESSolid_Loop

        @return last element

        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESSolid_Loop self, Standard_Integer const theIndex) -> Handle_IGESSolid_Loop

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESSolid_Loop self, Standard_Integer const theIndex, Handle_IGESSolid_Loop theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESSolid_Loop self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_Resize(self, *args)

    __swig_destroy__ = _IGESSolid.delete_NCollection_Array1_Handle_IGESSolid_Loop
NCollection_Array1_Handle_IGESSolid_Loop_swigregister = _IGESSolid.NCollection_Array1_Handle_IGESSolid_Loop_swigregister
NCollection_Array1_Handle_IGESSolid_Loop_swigregister(NCollection_Array1_Handle_IGESSolid_Loop)


try:
	IGESSolid_Array1OfLoop = NCollection_Array1_Handle_IGESSolid_Loop
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESSolid_PlaneSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_PlaneSurface self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_PlaneSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_PlaneSurface self, IGESSolid_PlaneSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_PlaneSurface self, Handle_IGESSolid_PlaneSurface theHandle) -> Handle_IGESSolid_PlaneSurface
        assign(Handle_IGESSolid_PlaneSurface self, IGESSolid_PlaneSurface thePtr) -> Handle_IGESSolid_PlaneSurface
        assign(Handle_IGESSolid_PlaneSurface self, Handle_IGESSolid_PlaneSurface theHandle) -> Handle_IGESSolid_PlaneSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_PlaneSurface self) -> IGESSolid_PlaneSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_PlaneSurface self) -> IGESSolid_PlaneSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_PlaneSurface self) -> IGESSolid_PlaneSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_PlaneSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_PlaneSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_PlaneSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_PlaneSurface_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_PlaneSurface

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_PlaneSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction aNormal, Handle_IGESGeom_Direction refdir)

        This method is used to set the fields of the class
        PlaneSurface
        - aLocation : the point on the surface
        - aNormal   : the surface normal direction
        - refdir    : the reference direction (default NULL) for
        unparameterised curves

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type aNormal: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type refdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Point

        returns the point on the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LocationPoint(self, *args)


    def Normal(self, *args):
        """
        Normal(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Direction

        returns the normal to the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Normal(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (for parameterised curve)
        returns NULL for unparameterised curve

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        returns True if parameterised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IsParametrised(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_PlaneSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_PlaneSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_PlaneSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_PlaneSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_PlaneSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_PlaneSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_PlaneSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_PlaneSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_PlaneSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_PlaneSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_PlaneSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_PlaneSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_PlaneSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_PlaneSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_PlaneSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_PlaneSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_PlaneSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_PlaneSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_PlaneSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_PlaneSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_PlaneSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_PlaneSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_PlaneSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_PlaneSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_PlaneSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_PlaneSurface self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_PlaneSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_PlaneSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_PlaneSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_PlaneSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_PlaneSurface self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_PlaneSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_PlaneSurface_DecrementRefCounter(self, *args)

Handle_IGESSolid_PlaneSurface_swigregister = _IGESSolid.Handle_IGESSolid_PlaneSurface_swigregister
Handle_IGESSolid_PlaneSurface_swigregister(Handle_IGESSolid_PlaneSurface)

def Handle_IGESSolid_PlaneSurface_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_PlaneSurface_DownCast(thing)
Handle_IGESSolid_PlaneSurface_DownCast = _IGESSolid.Handle_IGESSolid_PlaneSurface_DownCast

class IGESSolid_BooleanTree(IGESData.IGESData_IGESEntity):
    """
    defines BooleanTree, Type <180> Form Number <0>
    in package IGESSolid
    The Boolean tree describes a binary tree structure
    composed of regularized Boolean operations and operands,
    in post-order notation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESSolid_BooleanTree
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESSolid_BooleanTree(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESSolid_BooleanTree self) -> IGESSolid_BooleanTree

        defines BooleanTree, Type <180> Form Number <0>
        in package IGESSolid
        The Boolean tree describes a binary tree structure
        composed of regularized Boolean operations and operands,
        in post-order notation.
        """
        this = _IGESSolid.new_IGESSolid_BooleanTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESSolid_BooleanTree self, Handle_IGESData_HArray1OfIGESEntity operands, Handle_TColStd_HArray1OfInteger operations)

        This method is used to set the fields of the class
        BooleanTree
        - operands   : Array containing pointer to DE of operands
        - operations : Array containing integer type for operations

        :type operands: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type operations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.IGESSolid_BooleanTree_Init(self, *args)


    def Length(self, *args):
        """
        Length(IGESSolid_BooleanTree self) -> Standard_Integer

        returns the length of the post-order list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_BooleanTree_Length(self, *args)


    def IsOperand(self, *args):
        """
        IsOperand(IGESSolid_BooleanTree self, Standard_Integer const Index) -> Standard_Boolean

        returns True if Index'th value in the post-order list is an Operand;
        else returns False if it is an Integer Operations
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.IGESSolid_BooleanTree_IsOperand(self, *args)


    def Operand(self, *args):
        """
        Operand(IGESSolid_BooleanTree self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th value in the post-order list only if it is
        an operand else returns NULL
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.IGESSolid_BooleanTree_Operand(self, *args)


    def Operation(self, *args):
        """
        Operation(IGESSolid_BooleanTree self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value in the post-order list only if it is
        an operation else returns 0
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.IGESSolid_BooleanTree_Operation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESSolid.IGESSolid_BooleanTree_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESSolid.IGESSolid_BooleanTree_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.IGESSolid_BooleanTree_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESSolid.delete_IGESSolid_BooleanTree
IGESSolid_BooleanTree_swigregister = _IGESSolid.IGESSolid_BooleanTree_swigregister
IGESSolid_BooleanTree_swigregister(IGESSolid_BooleanTree)

def IGESSolid_BooleanTree_get_type_name(*args):
    """
    IGESSolid_BooleanTree_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESSolid.IGESSolid_BooleanTree_get_type_name(*args)

def IGESSolid_BooleanTree_get_type_descriptor(*args):
    """
    IGESSolid_BooleanTree_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESSolid.IGESSolid_BooleanTree_get_type_descriptor(*args)

class IGESSolid_ToolSolidOfLinearExtrusion(object):
    """
    Tool to work on a SolidOfLinearExtrusion. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSolidOfLinearExtrusion self) -> IGESSolid_ToolSolidOfLinearExtrusion

        Returns a ToolSolidOfLinearExtrusion, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSolidOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SolidOfLinearExtrusion <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion entfrom, Handle_IGESSolid_SolidOfLinearExtrusion entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSolidOfLinearExtrusion self, Handle_IGESSolid_SolidOfLinearExtrusion ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidOfLinearExtrusion
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSolidOfLinearExtrusion
IGESSolid_ToolSolidOfLinearExtrusion_swigregister = _IGESSolid.IGESSolid_ToolSolidOfLinearExtrusion_swigregister
IGESSolid_ToolSolidOfLinearExtrusion_swigregister(IGESSolid_ToolSolidOfLinearExtrusion)

class Handle_IGESSolid_ToroidalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_ToroidalSurface self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_ToroidalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_ToroidalSurface self, IGESSolid_ToroidalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_ToroidalSurface self, Handle_IGESSolid_ToroidalSurface theHandle) -> Handle_IGESSolid_ToroidalSurface
        assign(Handle_IGESSolid_ToroidalSurface self, IGESSolid_ToroidalSurface thePtr) -> Handle_IGESSolid_ToroidalSurface
        assign(Handle_IGESSolid_ToroidalSurface self, Handle_IGESSolid_ToroidalSurface theHandle) -> Handle_IGESSolid_ToroidalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_ToroidalSurface self) -> IGESSolid_ToroidalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_ToroidalSurface self) -> IGESSolid_ToroidalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_ToroidalSurface self) -> IGESSolid_ToroidalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_ToroidalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_ToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_ToroidalSurface_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_ToroidalSurface

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_ToroidalSurface self, Handle_IGESGeom_Point aCenter, Handle_IGESGeom_Direction anAxis, Standard_Real const majRadius, Standard_Real const minRadius, Handle_IGESGeom_Direction Refdir)

        This method is used to set the fields of the class
        ToroidalSurface
        - aCenter   : the center point coordinates
        - anAxis    : the direction of the axis
        - majRadius : the major radius
        - minRadius : the minor radius
        - Refdir    : the reference direction (parametrised)
        default Null for unparametrised surface

        :type aCenter: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type majRadius: float
        :type minRadius: float
        :type Refdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Init(self, *args)


    def Center(self, *args):
        """
        Center(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Point

        returns the center point coordinates of the surface

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Center(self, *args)


    def TransformedCenter(self, *args):
        """
        TransformedCenter(Handle_IGESSolid_ToroidalSurface self) -> gp_Pnt

        returns the center point coordinates of the surface
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_TransformedCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Axis(self, *args)


    def MajorRadius(self, *args):
        """
        MajorRadius(Handle_IGESSolid_ToroidalSurface self) -> Standard_Real

        returns the major radius of the surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_MajorRadius(self, *args)


    def MinorRadius(self, *args):
        """
        MinorRadius(Handle_IGESSolid_ToroidalSurface self) -> Standard_Real

        returns the minor radius of the surface

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_MinorRadius(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction (parametrised surface)
        Null is returned if the surface is not parametrised

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if the surface is parametrised, else False

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IsParametrised(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_ToroidalSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ToroidalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ToroidalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_ToroidalSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_ToroidalSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_ToroidalSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_ToroidalSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_ToroidalSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_ToroidalSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_ToroidalSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_ToroidalSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_ToroidalSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_ToroidalSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_ToroidalSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_ToroidalSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_ToroidalSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_ToroidalSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_ToroidalSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_ToroidalSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_ToroidalSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_ToroidalSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_ToroidalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_ToroidalSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_ToroidalSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_ToroidalSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_ToroidalSurface self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_ToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_ToroidalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_ToroidalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_ToroidalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_ToroidalSurface self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_ToroidalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DecrementRefCounter(self, *args)

Handle_IGESSolid_ToroidalSurface_swigregister = _IGESSolid.Handle_IGESSolid_ToroidalSurface_swigregister
Handle_IGESSolid_ToroidalSurface_swigregister(Handle_IGESSolid_ToroidalSurface)

def Handle_IGESSolid_ToroidalSurface_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_ToroidalSurface_DownCast(thing)
Handle_IGESSolid_ToroidalSurface_DownCast = _IGESSolid.Handle_IGESSolid_ToroidalSurface_DownCast

class Handle_IGESSolid_ConicalSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_ConicalSurface self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_ConicalSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_ConicalSurface self, IGESSolid_ConicalSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_ConicalSurface self, Handle_IGESSolid_ConicalSurface theHandle) -> Handle_IGESSolid_ConicalSurface
        assign(Handle_IGESSolid_ConicalSurface self, IGESSolid_ConicalSurface thePtr) -> Handle_IGESSolid_ConicalSurface
        assign(Handle_IGESSolid_ConicalSurface self, Handle_IGESSolid_ConicalSurface theHandle) -> Handle_IGESSolid_ConicalSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_ConicalSurface self) -> IGESSolid_ConicalSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_ConicalSurface self) -> IGESSolid_ConicalSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_ConicalSurface self) -> IGESSolid_ConicalSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_ConicalSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_ConicalSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_ConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_ConicalSurface_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_ConicalSurface

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_ConicalSurface self, Handle_IGESGeom_Point aLocation, Handle_IGESGeom_Direction anAxis, Standard_Real const aRadius, Standard_Real const anAngle, Handle_IGESGeom_Direction aRefdir)

        This method is used to set the fields of the class
        ConicalSurface
        - aLocation : Location of the point on axis
        - anAxis    : Direction of the axis
        - aRadius   : Radius at axis point
        - anAngle   : Value of semi-angle in degrees (0<angle<90)
        - aRefdir   : Reference direction (parametrised surface)
        Null if unparametrised surface.

        :type aLocation: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :type anAxis: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction
        :type aRadius: float
        :type anAngle: float
        :type aRefdir: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Init(self, *args)


    def LocationPoint(self, *args):
        """
        LocationPoint(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Point

        returns the location of the point on the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LocationPoint(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Direction

        returns the direction of the axis

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Axis(self, *args)


    def Radius(self, *args):
        """
        Radius(Handle_IGESSolid_ConicalSurface self) -> Standard_Real

        returns the radius at the axis point

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Radius(self, *args)


    def SemiAngle(self, *args):
        """
        SemiAngle(Handle_IGESSolid_ConicalSurface self) -> Standard_Real

        returns the semi-angle value

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SemiAngle(self, *args)


    def ReferenceDir(self, *args):
        """
        ReferenceDir(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESGeom_Direction

        returns the reference direction of the conical surface in case
        of parametrised surface. For unparametrised surface it returns
        NULL.

        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_ReferenceDir(self, *args)


    def IsParametrised(self, *args):
        """
        IsParametrised(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        returns True if Form no is 1 else false

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IsParametrised(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_ConicalSurface self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ConicalSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ConicalSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_ConicalSurface self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_ConicalSurface self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_ConicalSurface self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_ConicalSurface self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_ConicalSurface self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_ConicalSurface self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_ConicalSurface self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_ConicalSurface self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_ConicalSurface self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_ConicalSurface self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_ConicalSurface self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_ConicalSurface self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_ConicalSurface self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_ConicalSurface self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_ConicalSurface self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_ConicalSurface self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_ConicalSurface self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_ConicalSurface self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_ConicalSurface self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_ConicalSurface self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_ConicalSurface self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_ConicalSurface self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_ConicalSurface self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_ConicalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_ConicalSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_ConicalSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_ConicalSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_ConicalSurface self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_ConicalSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConicalSurface_DecrementRefCounter(self, *args)

Handle_IGESSolid_ConicalSurface_swigregister = _IGESSolid.Handle_IGESSolid_ConicalSurface_swigregister
Handle_IGESSolid_ConicalSurface_swigregister(Handle_IGESSolid_ConicalSurface)

def Handle_IGESSolid_ConicalSurface_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_ConicalSurface_DownCast(thing)
Handle_IGESSolid_ConicalSurface_DownCast = _IGESSolid.Handle_IGESSolid_ConicalSurface_DownCast

class Handle_IGESSolid_HArray1OfLoop(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_HArray1OfLoop self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_HArray1OfLoop self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_HArray1OfLoop self, IGESSolid_HArray1OfLoop thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_HArray1OfLoop self, Handle_IGESSolid_HArray1OfLoop theHandle) -> Handle_IGESSolid_HArray1OfLoop
        assign(Handle_IGESSolid_HArray1OfLoop self, IGESSolid_HArray1OfLoop thePtr) -> Handle_IGESSolid_HArray1OfLoop
        assign(Handle_IGESSolid_HArray1OfLoop self, Handle_IGESSolid_HArray1OfLoop theHandle) -> Handle_IGESSolid_HArray1OfLoop

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_HArray1OfLoop self) -> IGESSolid_HArray1OfLoop

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_HArray1OfLoop self) -> IGESSolid_HArray1OfLoop

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_HArray1OfLoop self) -> IGESSolid_HArray1OfLoop

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_HArray1OfLoop___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_HArray1OfLoop(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_HArray1OfLoop_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_HArray1OfLoop

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfLoop

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfLoop_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESSolid_HArray1OfLoop self) -> NCollection_Array1_Handle_IGESSolid_Loop

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfLoop

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_HArray1OfLoop self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfLoop_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfLoop_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_HArray1OfLoop self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_HArray1OfLoop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_HArray1OfLoop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_HArray1OfLoop self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_HArray1OfLoop self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_HArray1OfLoop self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_HArray1OfLoop self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_HArray1OfLoop self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_HArray1OfLoop self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_DecrementRefCounter(self, *args)

Handle_IGESSolid_HArray1OfLoop_swigregister = _IGESSolid.Handle_IGESSolid_HArray1OfLoop_swigregister
Handle_IGESSolid_HArray1OfLoop_swigregister(Handle_IGESSolid_HArray1OfLoop)

def Handle_IGESSolid_HArray1OfLoop_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_HArray1OfLoop_DownCast(thing)
Handle_IGESSolid_HArray1OfLoop_DownCast = _IGESSolid.Handle_IGESSolid_HArray1OfLoop_DownCast

class IGESSolid_ToolSolidInstance(object):
    """
    Tool to work on a SolidInstance. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSolidInstance self) -> IGESSolid_ToolSolidInstance

        Returns a ToolSolidInstance, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSolidInstance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SolidInstance <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance entfrom, Handle_IGESSolid_SolidInstance entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSolidInstance self, Handle_IGESSolid_SolidInstance ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidInstance
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSolidInstance_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSolidInstance
IGESSolid_ToolSolidInstance_swigregister = _IGESSolid.IGESSolid_ToolSolidInstance_swigregister
IGESSolid_ToolSolidInstance_swigregister(IGESSolid_ToolSolidInstance)

class Handle_IGESSolid_HArray1OfFace(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_HArray1OfFace self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_HArray1OfFace self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_HArray1OfFace self, IGESSolid_HArray1OfFace thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_HArray1OfFace self, Handle_IGESSolid_HArray1OfFace theHandle) -> Handle_IGESSolid_HArray1OfFace
        assign(Handle_IGESSolid_HArray1OfFace self, IGESSolid_HArray1OfFace thePtr) -> Handle_IGESSolid_HArray1OfFace
        assign(Handle_IGESSolid_HArray1OfFace self, Handle_IGESSolid_HArray1OfFace theHandle) -> Handle_IGESSolid_HArray1OfFace

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_HArray1OfFace self) -> IGESSolid_HArray1OfFace

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_HArray1OfFace self) -> IGESSolid_HArray1OfFace

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_HArray1OfFace self) -> IGESSolid_HArray1OfFace

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_HArray1OfFace___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_HArray1OfFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_HArray1OfFace_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_HArray1OfFace

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfFace

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfFace_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESSolid_HArray1OfFace self) -> NCollection_Array1_Handle_IGESSolid_Face

        :rtype: OCC.wrapper.IGESSolid.IGESSolid_Array1OfFace

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_HArray1OfFace self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfFace_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_HArray1OfFace_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_HArray1OfFace self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_HArray1OfFace self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_HArray1OfFace self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_HArray1OfFace self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_HArray1OfFace self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_HArray1OfFace self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_HArray1OfFace self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_HArray1OfFace self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_HArray1OfFace self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_HArray1OfFace_DecrementRefCounter(self, *args)

Handle_IGESSolid_HArray1OfFace_swigregister = _IGESSolid.Handle_IGESSolid_HArray1OfFace_swigregister
Handle_IGESSolid_HArray1OfFace_swigregister(Handle_IGESSolid_HArray1OfFace)

def Handle_IGESSolid_HArray1OfFace_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_HArray1OfFace_DownCast(thing)
Handle_IGESSolid_HArray1OfFace_DownCast = _IGESSolid.Handle_IGESSolid_HArray1OfFace_DownCast

class Handle_IGESSolid_ConeFrustum(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_ConeFrustum self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_ConeFrustum self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_ConeFrustum self, IGESSolid_ConeFrustum thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_ConeFrustum self, Handle_IGESSolid_ConeFrustum theHandle) -> Handle_IGESSolid_ConeFrustum
        assign(Handle_IGESSolid_ConeFrustum self, IGESSolid_ConeFrustum thePtr) -> Handle_IGESSolid_ConeFrustum
        assign(Handle_IGESSolid_ConeFrustum self, Handle_IGESSolid_ConeFrustum theHandle) -> Handle_IGESSolid_ConeFrustum

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_ConeFrustum self) -> IGESSolid_ConeFrustum

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_ConeFrustum self) -> IGESSolid_ConeFrustum

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_ConeFrustum self) -> IGESSolid_ConeFrustum

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_ConeFrustum___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_ConeFrustum___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_ConeFrustum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_ConeFrustum_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_ConeFrustum

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_ConeFrustum self, Standard_Real const Ht, Standard_Real const R1, Standard_Real const R2, gp_XYZ Center, gp_XYZ anAxis)

        This method is used to set the fields of the class
        ConeFrustum
        - Ht     : the Height of cone
        - R1     : Radius of the larger face
        - R2     : Radius of the smaller face (default 0)
        - Center : Center of the larger face (default (0,0,0))
        - anAxis : Unit vector in axis direction (default (0,0,1))

        :type Ht: float
        :type R1: float
        :type R2: float
        :type Center: OCC.wrapper.gp.gp_XYZ
        :type anAxis: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Init(self, *args)


    def Height(self, *args):
        """
        Height(Handle_IGESSolid_ConeFrustum self) -> Standard_Real

        returns the height of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Height(self, *args)


    def LargerRadius(self, *args):
        """
        LargerRadius(Handle_IGESSolid_ConeFrustum self) -> Standard_Real

        returns the radius of the larger face of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LargerRadius(self, *args)


    def SmallerRadius(self, *args):
        """
        SmallerRadius(Handle_IGESSolid_ConeFrustum self) -> Standard_Real

        returns the radius of the second face of the cone frustum

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SmallerRadius(self, *args)


    def FaceCenter(self, *args):
        """
        FaceCenter(Handle_IGESSolid_ConeFrustum self) -> gp_Pnt

        returns the center of the larger face of the cone frustum

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_FaceCenter(self, *args)


    def TransformedFaceCenter(self, *args):
        """
        TransformedFaceCenter(Handle_IGESSolid_ConeFrustum self) -> gp_Pnt

        returns the center of the larger face of the cone frustum
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_TransformedFaceCenter(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_IGESSolid_ConeFrustum self) -> gp_Dir

        returns the direction of the axis of the cone frustum

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Axis(self, *args)


    def TransformedAxis(self, *args):
        """
        TransformedAxis(Handle_IGESSolid_ConeFrustum self) -> gp_Dir

        returns the direction of the axis of the cone frustum
        after applying TransformationMatrix

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_TransformedAxis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_ConeFrustum self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ConeFrustum_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ConeFrustum_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_ConeFrustum self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_ConeFrustum self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_ConeFrustum self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_ConeFrustum self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_ConeFrustum self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_ConeFrustum self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_ConeFrustum self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_ConeFrustum self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_ConeFrustum self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_ConeFrustum self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_ConeFrustum self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_ConeFrustum self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_ConeFrustum self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_ConeFrustum self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_ConeFrustum self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_ConeFrustum self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_ConeFrustum self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_ConeFrustum self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_ConeFrustum self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_ConeFrustum self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_ConeFrustum self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_ConeFrustum self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_ConeFrustum self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_ConeFrustum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_ConeFrustum self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_ConeFrustum self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_ConeFrustum self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_ConeFrustum self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_ConeFrustum self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ConeFrustum_DecrementRefCounter(self, *args)

Handle_IGESSolid_ConeFrustum_swigregister = _IGESSolid.Handle_IGESSolid_ConeFrustum_swigregister
Handle_IGESSolid_ConeFrustum_swigregister(Handle_IGESSolid_ConeFrustum)

def Handle_IGESSolid_ConeFrustum_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_ConeFrustum_DownCast(thing)
Handle_IGESSolid_ConeFrustum_DownCast = _IGESSolid.Handle_IGESSolid_ConeFrustum_DownCast

class Handle_IGESSolid_ManifoldSolid(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_ManifoldSolid self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_ManifoldSolid self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_ManifoldSolid self, IGESSolid_ManifoldSolid thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_ManifoldSolid self, Handle_IGESSolid_ManifoldSolid theHandle) -> Handle_IGESSolid_ManifoldSolid
        assign(Handle_IGESSolid_ManifoldSolid self, IGESSolid_ManifoldSolid thePtr) -> Handle_IGESSolid_ManifoldSolid
        assign(Handle_IGESSolid_ManifoldSolid self, Handle_IGESSolid_ManifoldSolid theHandle) -> Handle_IGESSolid_ManifoldSolid

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_ManifoldSolid self) -> IGESSolid_ManifoldSolid

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_ManifoldSolid self) -> IGESSolid_ManifoldSolid

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_ManifoldSolid self) -> IGESSolid_ManifoldSolid

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_ManifoldSolid___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_ManifoldSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_ManifoldSolid_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_ManifoldSolid

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_ManifoldSolid self, Handle_IGESSolid_Shell aShell, Standard_Boolean const shellflag, Handle_IGESSolid_HArray1OfShell voidShells, Handle_TColStd_HArray1OfInteger voidShellFlags)

        This method is used to set the fields of the class
        ManifoldSolid
        - aShell         : pointer to the shell
        - shellflag      : orientation flag of shell
        - voidShells     : the void shells
        - voidShellFlags : orientation of the void shells
        raises exception if length of voidShells and voidShellFlags
        do not match

        :type aShell: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :type shellflag: bool
        :type voidShells: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfShell
        :type voidShellFlags: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Init(self, *args)


    def Shell(self, *args):
        """
        Shell(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESSolid_Shell

        returns the Shell entity which is being referred

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Shell(self, *args)


    def OrientationFlag(self, *args):
        """
        OrientationFlag(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        returns the orientation flag of the shell

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_OrientationFlag(self, *args)


    def NbVoidShells(self, *args):
        """
        NbVoidShells(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        returns the number of void shells

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NbVoidShells(self, *args)


    def VoidShell(self, *args):
        """
        VoidShell(Handle_IGESSolid_ManifoldSolid self, Standard_Integer const Index) -> Handle_IGESSolid_Shell

        returns Index'th void shell.
        raises exception if Index  <= 0 or Index > NbVoidShells()

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_VoidShell(self, *args)


    def VoidOrientationFlag(self, *args):
        """
        VoidOrientationFlag(Handle_IGESSolid_ManifoldSolid self, Standard_Integer const Index) -> Standard_Boolean

        returns Index'th orientation flag.
        raises exception if Index  <= 0 or Index > NbVoidShells()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_VoidOrientationFlag(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_ManifoldSolid self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ManifoldSolid_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_ManifoldSolid_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_ManifoldSolid self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_ManifoldSolid self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_ManifoldSolid self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_ManifoldSolid self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_ManifoldSolid self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_ManifoldSolid self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_ManifoldSolid self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_ManifoldSolid self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_ManifoldSolid self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_ManifoldSolid self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_ManifoldSolid self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_ManifoldSolid self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_ManifoldSolid self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_ManifoldSolid self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_ManifoldSolid self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_ManifoldSolid self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_ManifoldSolid self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_ManifoldSolid self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_ManifoldSolid self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_ManifoldSolid self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_ManifoldSolid self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_ManifoldSolid self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_ManifoldSolid self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_ManifoldSolid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_ManifoldSolid self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_ManifoldSolid self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_ManifoldSolid self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_ManifoldSolid self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_ManifoldSolid self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DecrementRefCounter(self, *args)

Handle_IGESSolid_ManifoldSolid_swigregister = _IGESSolid.Handle_IGESSolid_ManifoldSolid_swigregister
Handle_IGESSolid_ManifoldSolid_swigregister(Handle_IGESSolid_ManifoldSolid)

def Handle_IGESSolid_ManifoldSolid_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_ManifoldSolid_DownCast(thing)
Handle_IGESSolid_ManifoldSolid_DownCast = _IGESSolid.Handle_IGESSolid_ManifoldSolid_DownCast

class IGESSolid_ToolTorus(object):
    """
    Tool to work on a Torus. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolTorus self) -> IGESSolid_ToolTorus

        Returns a ToolTorus, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolTorus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolTorus_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolTorus_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Torus <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolTorus_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolTorus_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolTorus_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus entfrom, Handle_IGESSolid_Torus entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolTorus_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolTorus self, Handle_IGESSolid_Torus ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Torus
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolTorus_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolTorus
IGESSolid_ToolTorus_swigregister = _IGESSolid.IGESSolid_ToolTorus_swigregister
IGESSolid_ToolTorus_swigregister(IGESSolid_ToolTorus)

class Handle_IGESSolid_Shell(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Shell self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Shell_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Shell self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Shell_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Shell self, IGESSolid_Shell thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Shell_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Shell self, Handle_IGESSolid_Shell theHandle) -> Handle_IGESSolid_Shell
        assign(Handle_IGESSolid_Shell self, IGESSolid_Shell thePtr) -> Handle_IGESSolid_Shell
        assign(Handle_IGESSolid_Shell self, Handle_IGESSolid_Shell theHandle) -> Handle_IGESSolid_Shell

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Shell_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Shell self) -> IGESSolid_Shell

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Shell_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Shell self) -> IGESSolid_Shell

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Shell___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Shell self) -> IGESSolid_Shell

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Shell___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Shell___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Shell___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Shell(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Shell_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Shell

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Shell self, Handle_IGESSolid_HArray1OfFace allFaces, Handle_TColStd_HArray1OfInteger allOrient)

        This method is used to set the fields of the class Shell
        - allFaces  : the faces comprising the shell
        - allOrient : the orientation flags of the shell
        raises exception if length of allFaces & allOrient do not match

        :type allFaces: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfFace
        :type allOrient: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Init(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Tells if a Shell is Closed, i.e. if its FormNumber is 1
        (this is the default)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_IsClosed(self, *args)


    def SetClosed(self, *args):
        """
        SetClosed(Handle_IGESSolid_Shell self, Standard_Boolean const closed)

        Sets or Unsets the Closed status (FormNumber = 1 else 2)

        :type closed: bool

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SetClosed(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(Handle_IGESSolid_Shell self) -> Standard_Integer

        returns the number of the face entities in the shell

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NbFaces(self, *args)


    def Face(self, *args):
        """
        Face(Handle_IGESSolid_Shell self, Standard_Integer const Index) -> Handle_IGESSolid_Face

        returns the Index'th face entity of the shell
        raises exception if Index <= 0 or Index > NbFaces()

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Face(self, *args)


    def Orientation(self, *args):
        """
        Orientation(Handle_IGESSolid_Shell self, Standard_Integer const Index) -> Standard_Boolean

        returns the orientation of Index'th face w.r.t the direction of
        the underlying surface
        raises exception if Index <= 0 or Index > NbFaces()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Orientation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Shell self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Shell_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Shell_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Shell_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Shell self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Shell_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Shell self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Shell self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Shell self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Shell self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Shell self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Shell self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Shell self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Shell self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Shell self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Shell self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Shell self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Shell self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Shell self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Shell self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Shell_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Shell self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Shell self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Shell self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Shell self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Shell_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Shell self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Shell self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Shell self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Shell self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Shell self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Shell self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Shell self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Shell self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Shell self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Shell self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Shell self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Shell self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Shell self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Shell_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Shell self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Shell_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Shell self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Shell self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Shell self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Shell self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Shell self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Shell self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Shell self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Shell self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Shell self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Shell self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Shell self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Shell_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Shell self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Shell self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Shell self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Shell self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Shell_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Shell self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Shell_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Shell self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Shell_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Shell self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Shell self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Shell self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Shell self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Shell_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Shell self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Shell_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Shell self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Shell self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Shell_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Shell self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Shell_DecrementRefCounter(self, *args)

Handle_IGESSolid_Shell_swigregister = _IGESSolid.Handle_IGESSolid_Shell_swigregister
Handle_IGESSolid_Shell_swigregister(Handle_IGESSolid_Shell)

def Handle_IGESSolid_Shell_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Shell_DownCast(thing)
Handle_IGESSolid_Shell_DownCast = _IGESSolid.Handle_IGESSolid_Shell_DownCast

class IGESSolid_ToolManifoldSolid(object):
    """
    Tool to work on a ManifoldSolid. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolManifoldSolid self) -> IGESSolid_ToolManifoldSolid

        Returns a ToolManifoldSolid, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolManifoldSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ManifoldSolid <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid entfrom, Handle_IGESSolid_ManifoldSolid entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolManifoldSolid self, Handle_IGESSolid_ManifoldSolid ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolManifoldSolid_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolManifoldSolid
IGESSolid_ToolManifoldSolid_swigregister = _IGESSolid.IGESSolid_ToolManifoldSolid_swigregister
IGESSolid_ToolManifoldSolid_swigregister(IGESSolid_ToolManifoldSolid)

class IGESSolid_(object):
    """This package consists of B-Rep and CSG Solid entities"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESSolid.IGESSolid__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESSolid_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Protocol

        """
        return _IGESSolid.IGESSolid__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """This package consists of B-Rep and CSG Solid entities"""
        this = _IGESSolid.new_IGESSolid_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESSolid.delete_IGESSolid_
IGESSolid__swigregister = _IGESSolid.IGESSolid__swigregister
IGESSolid__swigregister(IGESSolid_)

def IGESSolid__Init(*args):
    """
    IGESSolid__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESSolid.IGESSolid__Init(*args)

def IGESSolid__Protocol(*args):
    """
    IGESSolid__Protocol() -> Handle_IGESSolid_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Protocol

    """
    return _IGESSolid.IGESSolid__Protocol(*args)

class IGESSolid_ToolSolidAssembly(object):
    """
    Tool to work on a SolidAssembly. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSolidAssembly self) -> IGESSolid_ToolSolidAssembly

        Returns a ToolSolidAssembly, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSolidAssembly(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SolidAssembly <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly entfrom, Handle_IGESSolid_SolidAssembly entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSolidAssembly self, Handle_IGESSolid_SolidAssembly ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SolidAssembly
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSolidAssembly_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSolidAssembly
IGESSolid_ToolSolidAssembly_swigregister = _IGESSolid.IGESSolid_ToolSolidAssembly_swigregister
IGESSolid_ToolSolidAssembly_swigregister(IGESSolid_ToolSolidAssembly)

class IGESSolid_ToolSphericalSurface(object):
    """
    Tool to work on a SphericalSurface. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolSphericalSurface self) -> IGESSolid_ToolSphericalSurface

        Returns a ToolSphericalSurface, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolSphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SphericalSurface <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface entfrom, Handle_IGESSolid_SphericalSurface entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolSphericalSurface self, Handle_IGESSolid_SphericalSurface ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolSphericalSurface_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolSphericalSurface
IGESSolid_ToolSphericalSurface_swigregister = _IGESSolid.IGESSolid_ToolSphericalSurface_swigregister
IGESSolid_ToolSphericalSurface_swigregister(IGESSolid_ToolSphericalSurface)

class Handle_IGESSolid_BooleanTree(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_BooleanTree self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_BooleanTree self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_BooleanTree self, IGESSolid_BooleanTree thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_BooleanTree self, Handle_IGESSolid_BooleanTree theHandle) -> Handle_IGESSolid_BooleanTree
        assign(Handle_IGESSolid_BooleanTree self, IGESSolid_BooleanTree thePtr) -> Handle_IGESSolid_BooleanTree
        assign(Handle_IGESSolid_BooleanTree self, Handle_IGESSolid_BooleanTree theHandle) -> Handle_IGESSolid_BooleanTree

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_BooleanTree self) -> IGESSolid_BooleanTree

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_BooleanTree self) -> IGESSolid_BooleanTree

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_BooleanTree self) -> IGESSolid_BooleanTree

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_BooleanTree___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_BooleanTree___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_BooleanTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_BooleanTree_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_BooleanTree

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_BooleanTree self, Handle_IGESData_HArray1OfIGESEntity operands, Handle_TColStd_HArray1OfInteger operations)

        This method is used to set the fields of the class
        BooleanTree
        - operands   : Array containing pointer to DE of operands
        - operations : Array containing integer type for operations

        :type operands: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type operations: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Init(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        returns the length of the post-order list

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Length(self, *args)


    def IsOperand(self, *args):
        """
        IsOperand(Handle_IGESSolid_BooleanTree self, Standard_Integer const Index) -> Standard_Boolean

        returns True if Index'th value in the post-order list is an Operand;
        else returns False if it is an Integer Operations
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IsOperand(self, *args)


    def Operand(self, *args):
        """
        Operand(Handle_IGESSolid_BooleanTree self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the Index'th value in the post-order list only if it is
        an operand else returns NULL
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Operand(self, *args)


    def Operation(self, *args):
        """
        Operation(Handle_IGESSolid_BooleanTree self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th value in the post-order list only if it is
        an operation else returns 0
        raises exception if Index < 1 or Index > Length()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Operation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_BooleanTree self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_BooleanTree_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_BooleanTree_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_BooleanTree self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_BooleanTree self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_BooleanTree self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_BooleanTree self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_BooleanTree self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_BooleanTree self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_BooleanTree self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_BooleanTree self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_BooleanTree self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_BooleanTree self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_BooleanTree self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_BooleanTree self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_BooleanTree self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_BooleanTree self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_BooleanTree self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_BooleanTree self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_BooleanTree self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_BooleanTree self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_BooleanTree self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_BooleanTree self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_BooleanTree self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_BooleanTree self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_BooleanTree self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_BooleanTree self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_BooleanTree self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_BooleanTree self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_BooleanTree self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_BooleanTree self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_BooleanTree self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_BooleanTree self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_BooleanTree self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_BooleanTree self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_BooleanTree self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_BooleanTree self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_BooleanTree self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_BooleanTree self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_BooleanTree self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_BooleanTree self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_BooleanTree_DecrementRefCounter(self, *args)

Handle_IGESSolid_BooleanTree_swigregister = _IGESSolid.Handle_IGESSolid_BooleanTree_swigregister
Handle_IGESSolid_BooleanTree_swigregister(Handle_IGESSolid_BooleanTree)

def Handle_IGESSolid_BooleanTree_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_BooleanTree_DownCast(thing)
Handle_IGESSolid_BooleanTree_DownCast = _IGESSolid.Handle_IGESSolid_BooleanTree_DownCast

class IGESSolid_ToolConeFrustum(object):
    """
    Tool to work on a ConeFrustum. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolConeFrustum self) -> IGESSolid_ToolConeFrustum

        Returns a ToolConeFrustum, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolConeFrustum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ConeFrustum <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum entfrom, Handle_IGESSolid_ConeFrustum entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolConeFrustum self, Handle_IGESSolid_ConeFrustum ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConeFrustum
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolConeFrustum_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolConeFrustum
IGESSolid_ToolConeFrustum_swigregister = _IGESSolid.IGESSolid_ToolConeFrustum_swigregister
IGESSolid_ToolConeFrustum_swigregister(IGESSolid_ToolConeFrustum)

class Handle_IGESSolid_Face(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESSolid_Face self)

        Nullify the handle


        """
        return _IGESSolid.Handle_IGESSolid_Face_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESSolid_Face self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESSolid.Handle_IGESSolid_Face_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESSolid_Face self, IGESSolid_Face thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESSolid.Handle_IGESSolid_Face_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESSolid_Face self, Handle_IGESSolid_Face theHandle) -> Handle_IGESSolid_Face
        assign(Handle_IGESSolid_Face self, IGESSolid_Face thePtr) -> Handle_IGESSolid_Face
        assign(Handle_IGESSolid_Face self, Handle_IGESSolid_Face theHandle) -> Handle_IGESSolid_Face

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESSolid.Handle_IGESSolid_Face_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESSolid_Face self) -> IGESSolid_Face

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Face_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESSolid_Face self) -> IGESSolid_Face

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESSolid.Handle_IGESSolid_Face___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESSolid_Face self) -> IGESSolid_Face

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESSolid.Handle_IGESSolid_Face___ref__(self, *args)


    def __hash__(self):
        return _IGESSolid.Handle_IGESSolid_Face___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESSolid.Handle_IGESSolid_Face___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESSolid.new_Handle_IGESSolid_Face(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESSolid.Handle_IGESSolid_Face_DownCast)
    __swig_destroy__ = _IGESSolid.delete_Handle_IGESSolid_Face

    def Init(self, *args):
        """
        Init(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity aSurface, Standard_Boolean const outerLoopFlag, Handle_IGESSolid_HArray1OfLoop loops)

        This method is used to set the fields of the class Face
        - aSurface      : Pointer to the underlying surface
        - outerLoopFlag : True means the first loop is the outer loop
        - loops         : Array of loops bounding the face

        :type aSurface: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type outerLoopFlag: bool
        :type loops: OCC.wrapper.IGESSolid.Handle_IGESSolid_HArray1OfLoop

        """
        return _IGESSolid.Handle_IGESSolid_Face_Init(self, *args)


    def Surface(self, *args):
        """
        Surface(Handle_IGESSolid_Face self) -> Handle_IGESData_IGESEntity

        returns the underlying surface of the face

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Surface(self, *args)


    def NbLoops(self, *args):
        """
        NbLoops(Handle_IGESSolid_Face self) -> Standard_Integer

        returns the number of the loops bounding the face

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_NbLoops(self, *args)


    def HasOuterLoop(self, *args):
        """
        HasOuterLoop(Handle_IGESSolid_Face self) -> Standard_Boolean

        checks whether there is an outer loop or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasOuterLoop(self, *args)


    def Loop(self, *args):
        """
        Loop(Handle_IGESSolid_Face self, Standard_Integer const Index) -> Handle_IGESSolid_Loop

        returns the Index'th loop that bounds the face
        raises exception if Index < 0 or Index >= NbLoops

        :type Index: int
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop

        """
        return _IGESSolid.Handle_IGESSolid_Face_Loop(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESSolid_Face self) -> char const *

        :rtype: const char *

        """
        return _IGESSolid.Handle_IGESSolid_Face_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Face_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESSolid.Handle_IGESSolid_Face_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESSolid_Face self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESSolid.Handle_IGESSolid_Face_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESSolid_Face self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESSolid_Face self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESSolid_Face self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESSolid_Face self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESSolid_Face self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Face_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESSolid_Face self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESSolid_Face self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Face_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESSolid_Face self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESSolid_Face self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESSolid.Handle_IGESSolid_Face_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESSolid_Face self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESSolid_Face self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESSolid_Face self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESSolid_Face self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESSolid_Face self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESSolid_Face self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESSolid_Face self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESSolid_Face self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESSolid_Face self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESSolid_Face self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESSolid.Handle_IGESSolid_Face_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESSolid_Face self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESSolid.Handle_IGESSolid_Face_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESSolid_Face self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESSolid_Face self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESSolid_Face self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Face_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESSolid_Face self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESSolid_Face self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESSolid_Face self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESSolid_Face self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESSolid_Face self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESSolid_Face self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESSolid_Face self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESSolid_Face self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESSolid_Face self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESSolid_Face self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESSolid_Face self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Face_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESSolid_Face self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Face_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESSolid_Face self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESSolid.Handle_IGESSolid_Face_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESSolid_Face self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESSolid_Face self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESSolid.Handle_IGESSolid_Face_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESSolid_Face self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESSolid_Face self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Face_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESSolid_Face self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESSolid_Face self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESSolid_Face self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESSolid_Face self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESSolid_Face self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.Handle_IGESSolid_Face_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESSolid_Face self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESSolid_Face self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESSolid_Face self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESSolid.Handle_IGESSolid_Face_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESSolid_Face self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESSolid.Handle_IGESSolid_Face_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESSolid_Face self)

        Memory deallocator for transient classes


        """
        return _IGESSolid.Handle_IGESSolid_Face_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESSolid_Face self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESSolid_Face self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESSolid_Face self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESSolid_Face self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESSolid.Handle_IGESSolid_Face_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESSolid_Face self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESSolid.Handle_IGESSolid_Face_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESSolid_Face self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESSolid_Face self)

        Increments the reference counter of this object


        """
        return _IGESSolid.Handle_IGESSolid_Face_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESSolid_Face self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESSolid.Handle_IGESSolid_Face_DecrementRefCounter(self, *args)

Handle_IGESSolid_Face_swigregister = _IGESSolid.Handle_IGESSolid_Face_swigregister
Handle_IGESSolid_Face_swigregister(Handle_IGESSolid_Face)

def Handle_IGESSolid_Face_DownCast(thing):
    return _IGESSolid.Handle_IGESSolid_Face_DownCast(thing)
Handle_IGESSolid_Face_DownCast = _IGESSolid.Handle_IGESSolid_Face_DownCast

class IGESSolid_ToolEllipsoid(object):
    """
    Tool to work on a Ellipsoid. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolEllipsoid self) -> IGESSolid_ToolEllipsoid

        Returns a ToolEllipsoid, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolEllipsoid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Ellipsoid <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid entfrom, Handle_IGESSolid_Ellipsoid entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolEllipsoid self, Handle_IGESSolid_Ellipsoid ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Ellipsoid
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolEllipsoid_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolEllipsoid
IGESSolid_ToolEllipsoid_swigregister = _IGESSolid.IGESSolid_ToolEllipsoid_swigregister
IGESSolid_ToolEllipsoid_swigregister(IGESSolid_ToolEllipsoid)

class IGESSolid_ToolBlock(object):
    """
    Tool to work on a Block. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESSolid_ToolBlock self) -> IGESSolid_ToolBlock

        Returns a ToolBlock, ready to work


        """
        this = _IGESSolid.new_IGESSolid_ToolBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESSolid.IGESSolid_ToolBlock_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESSolid.IGESSolid_ToolBlock_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Block <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESSolid.IGESSolid_ToolBlock_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESSolid.IGESSolid_ToolBlock_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESSolid.IGESSolid_ToolBlock_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESSolid_ToolBlock self, Handle_IGESSolid_Block entfrom, Handle_IGESSolid_Block entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type entto: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESSolid.IGESSolid_ToolBlock_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESSolid_ToolBlock self, Handle_IGESSolid_Block ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESSolid.Handle_IGESSolid_Block
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESSolid.IGESSolid_ToolBlock_OwnDump(self, *args)

    __swig_destroy__ = _IGESSolid.delete_IGESSolid_ToolBlock
IGESSolid_ToolBlock_swigregister = _IGESSolid.IGESSolid_ToolBlock_swigregister
IGESSolid_ToolBlock_swigregister(IGESSolid_ToolBlock)



