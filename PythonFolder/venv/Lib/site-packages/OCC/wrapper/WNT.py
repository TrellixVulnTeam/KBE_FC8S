# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_WNT')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_WNT')
    _WNT = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_WNT', [dirname(__file__)])
        except ImportError:
            import _WNT
            return _WNT
        try:
            _mod = imp.load_module('_WNT', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _WNT = swig_import_helper()
    del swig_import_helper
else:
    import _WNT
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _WNT.delete_SwigPyIterator

    def value(self):
        return _WNT.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _WNT.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _WNT.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _WNT.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _WNT.SwigPyIterator_equal(self, x)

    def copy(self):
        return _WNT.SwigPyIterator_copy(self)

    def next(self):
        return _WNT.SwigPyIterator_next(self)

    def __next__(self):
        return _WNT.SwigPyIterator___next__(self)

    def previous(self):
        return _WNT.SwigPyIterator_previous(self)

    def advance(self, n):
        return _WNT.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _WNT.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _WNT.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _WNT.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _WNT.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _WNT.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _WNT.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _WNT.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _WNT.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_WNT.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _WNT.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _WNT.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WNT.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _WNT.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _WNT.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _WNT.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _WNT.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_WNT.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _WNT.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _WNT.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _WNT.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _WNT.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _WNT.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _WNT.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _WNT.ptr_to_number(item)
ptr_to_number = _WNT.ptr_to_number

def HashCode(*args):
    return _WNT.HashCode(*args)
HashCode = _WNT.HashCode

def ptr_equal(a, b):
    return _WNT.ptr_equal(a, b)
ptr_equal = _WNT.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
WNT_OT_PORTRAIT = _WNT.WNT_OT_PORTRAIT
WNT_OT_LANDSCAPE = _WNT.WNT_OT_LANDSCAPE
class WNT_Window(Aspect.Aspect_Window):
    """This class defines Windows NT window"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_WNT_Window
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_WNT_Window(self) 
            return h


    def __init__(self, *args):
        """
        __init__(WNT_Window self, Standard_CString const theTitle, Handle_WNT_WClass theClass, WNT_Dword const & theStyle, Standard_Integer const thePxLeft, Standard_Integer const thePxTop, Standard_Integer const thePxWidth, Standard_Integer const thePxHeight, Quantity_NameOfColor const theBackColor=Quantity_NOC_MATRAGRAY, Aspect_Handle const theParent=None, Aspect_Handle const theMenu=None, Standard_Address const theClientStruct=None) -> WNT_Window
        __init__(WNT_Window self, Aspect_Handle const aHandle, Quantity_NameOfColor const aBackColor=Quantity_NOC_MATRAGRAY) -> WNT_Window

        Creates a Window based on the existing window handle.
        This handle equals ( aPart1 << 16 ) + aPart2.

        :type aHandle: OCC.wrapper.Aspect.Aspect_Handle
        :type aBackColor: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        this = _WNT.new_WNT_Window(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetCursor(self, *args):
        """
        SetCursor(WNT_Window self, Aspect_Handle const aCursor)

        Sets cursor <aCursor> for ENTIRE WINDOW CLASS to which
        the Window belongs.

        :type aCursor: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.WNT_Window_SetCursor(self, *args)


    def Map(self, *args):
        """
        Map(WNT_Window self)
        Map(WNT_Window self, Standard_Integer const aMapMode)

        Opens a window <me> according to <aMapMode>.
        This method is specific to Windows NT.
        <aMapMode> can be one of SW_xxx constants defined
        in <windows.h>. See documentation.

        :type aMapMode: int

        """
        return _WNT.WNT_Window_Map(self, *args)


    def Unmap(self, *args):
        """
        Unmap(WNT_Window self)

        Closes the window <me>.


        """
        return _WNT.WNT_Window_Unmap(self, *args)


    def DoResize(self, *args):
        """
        DoResize(WNT_Window self) -> Aspect_TypeOfResize

        Applies the resizing to the window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfResize

        """
        return _WNT.WNT_Window_DoResize(self, *args)


    def DoMapping(self, *args):
        """
        DoMapping(WNT_Window self) -> Standard_Boolean

        Apply the mapping change to the window <me>
        and returns TRUE if the window is mapped at screen.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.WNT_Window_DoMapping(self, *args)


    def SetPos(self, *args):
        """
        SetPos(WNT_Window self, Standard_Integer const X, Standard_Integer const Y, Standard_Integer const X1, Standard_Integer const Y1)

        Changes variables due to window position.

        :type X: int
        :type Y: int
        :type X1: int
        :type Y1: int

        """
        return _WNT.WNT_Window_SetPos(self, *args)


    def IsMapped(self, *args):
        """
        IsMapped(WNT_Window self) -> Standard_Boolean

        Returns True if the window <me> is opened
        and False if the window is closed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.WNT_Window_IsMapped(self, *args)


    def Ratio(self, *args):
        """
        Ratio(WNT_Window self) -> Standard_Real

        Returns The Window RATIO equal to the physical
        WIDTH/HEIGHT dimensions.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _WNT.WNT_Window_Ratio(self, *args)


    def Position(self, *args):
        """
        Position(WNT_Window self)

        Returns The Window POSITION in PIXEL

        :type X1: int
        :type Y1: int
        :type X2: int
        :type Y2: int

        """
        return _WNT.WNT_Window_Position(self, *args)


    def Size(self, *args):
        """
        Size(WNT_Window self)

        Returns The Window SIZE in PIXEL

        :type Width: int
        :type Height: int

        """
        return _WNT.WNT_Window_Size(self, *args)


    def HWindow(self, *args):
        """
        HWindow(WNT_Window self) -> Aspect_Handle

        Returns the Windows NT handle of the created window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.WNT_Window_HWindow(self, *args)


    def HParentWindow(self, *args):
        """
        HParentWindow(WNT_Window self) -> Aspect_Handle

        Returns the Windows NT handle parent of the created window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.WNT_Window_HParentWindow(self, *args)


    def NativeFBConfig(self, *args):
        """
        NativeFBConfig(WNT_Window self) -> Aspect_FBConfig

        Returns nothing on Windows

        :rtype: OCC.wrapper.Aspect.Aspect_FBConfig

        """
        return _WNT.WNT_Window_NativeFBConfig(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _WNT.WNT_Window_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _WNT.WNT_Window_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.WNT_Window_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _WNT.delete_WNT_Window
WNT_Window_swigregister = _WNT.WNT_Window_swigregister
WNT_Window_swigregister(WNT_Window)

def WNT_Window_get_type_name(*args):
    """
    WNT_Window_get_type_name() -> char const *

    :rtype: const char *

    """
    return _WNT.WNT_Window_get_type_name(*args)

def WNT_Window_get_type_descriptor(*args):
    """
    WNT_Window_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _WNT.WNT_Window_get_type_descriptor(*args)

class Handle_WNT_Window(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_WNT_Window self)

        Nullify the handle


        """
        return _WNT.Handle_WNT_Window_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_WNT_Window self) -> bool

        Check for being null

        :rtype: bool

        """
        return _WNT.Handle_WNT_Window_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_WNT_Window self, WNT_Window thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _WNT.Handle_WNT_Window_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_WNT_Window self, Handle_WNT_Window theHandle) -> Handle_WNT_Window
        assign(Handle_WNT_Window self, WNT_Window thePtr) -> Handle_WNT_Window
        assign(Handle_WNT_Window self, Handle_WNT_Window theHandle) -> Handle_WNT_Window

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _WNT.Handle_WNT_Window_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_WNT_Window self) -> WNT_Window

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _WNT.Handle_WNT_Window_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_WNT_Window self) -> WNT_Window

        Member access operator (note non-const)

        :rtype: T *

        """
        return _WNT.Handle_WNT_Window___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_WNT_Window self) -> WNT_Window

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _WNT.Handle_WNT_Window___ref__(self, *args)


    def __hash__(self):
        return _WNT.Handle_WNT_Window___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _WNT.Handle_WNT_Window___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _WNT.new_Handle_WNT_Window(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_WNT.Handle_WNT_Window_DownCast)
    __swig_destroy__ = _WNT.delete_Handle_WNT_Window

    def SetCursor(self, *args):
        """
        SetCursor(Handle_WNT_Window self, Aspect_Handle const aCursor)

        Sets cursor <aCursor> for ENTIRE WINDOW CLASS to which
        the Window belongs.

        :type aCursor: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.Handle_WNT_Window_SetCursor(self, *args)


    def Map(self, *args):
        """
        Map(Handle_WNT_Window self)
        Map(Handle_WNT_Window self, Standard_Integer const aMapMode)

        Opens a window <me> according to <aMapMode>.
        This method is specific to Windows NT.
        <aMapMode> can be one of SW_xxx constants defined
        in <windows.h>. See documentation.

        :type aMapMode: int

        """
        return _WNT.Handle_WNT_Window_Map(self, *args)


    def Unmap(self, *args):
        """
        Unmap(Handle_WNT_Window self)

        Closes the window <me>.


        """
        return _WNT.Handle_WNT_Window_Unmap(self, *args)


    def DoResize(self, *args):
        """
        DoResize(Handle_WNT_Window self) -> Aspect_TypeOfResize

        Applies the resizing to the window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfResize

        """
        return _WNT.Handle_WNT_Window_DoResize(self, *args)


    def DoMapping(self, *args):
        """
        DoMapping(Handle_WNT_Window self) -> Standard_Boolean

        Apply the mapping change to the window <me>
        and returns TRUE if the window is mapped at screen.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_Window_DoMapping(self, *args)


    def SetPos(self, *args):
        """
        SetPos(Handle_WNT_Window self, Standard_Integer const X, Standard_Integer const Y, Standard_Integer const X1, Standard_Integer const Y1)

        Changes variables due to window position.

        :type X: int
        :type Y: int
        :type X1: int
        :type Y1: int

        """
        return _WNT.Handle_WNT_Window_SetPos(self, *args)


    def IsMapped(self, *args):
        """
        IsMapped(Handle_WNT_Window self) -> Standard_Boolean

        Returns True if the window <me> is opened
        and False if the window is closed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_Window_IsMapped(self, *args)


    def Ratio(self, *args):
        """
        Ratio(Handle_WNT_Window self) -> Standard_Real

        Returns The Window RATIO equal to the physical
        WIDTH/HEIGHT dimensions.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _WNT.Handle_WNT_Window_Ratio(self, *args)


    def Position(self, *args):
        """
        Position(Handle_WNT_Window self)

        Returns The Window POSITION in PIXEL

        :type X1: int
        :type Y1: int
        :type X2: int
        :type Y2: int

        """
        return _WNT.Handle_WNT_Window_Position(self, *args)


    def Size(self, *args):
        """
        Size(Handle_WNT_Window self)

        Returns The Window SIZE in PIXEL

        :type Width: int
        :type Height: int

        """
        return _WNT.Handle_WNT_Window_Size(self, *args)


    def HWindow(self, *args):
        """
        HWindow(Handle_WNT_Window self) -> Aspect_Handle

        Returns the Windows NT handle of the created window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.Handle_WNT_Window_HWindow(self, *args)


    def HParentWindow(self, *args):
        """
        HParentWindow(Handle_WNT_Window self) -> Aspect_Handle

        Returns the Windows NT handle parent of the created window <me>.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.Handle_WNT_Window_HParentWindow(self, *args)


    def NativeFBConfig(self, *args):
        """
        NativeFBConfig(Handle_WNT_Window self) -> Aspect_FBConfig

        Returns nothing on Windows

        :rtype: OCC.wrapper.Aspect.Aspect_FBConfig

        """
        return _WNT.Handle_WNT_Window_NativeFBConfig(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_WNT_Window self) -> char const *

        :rtype: const char *

        """
        return _WNT.Handle_WNT_Window_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_Window_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_Window_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBackground(self, *args):
        """
        SetBackground(Handle_WNT_Window self, Aspect_Background ABack)
        SetBackground(Handle_WNT_Window self, Quantity_Color color)
        SetBackground(Handle_WNT_Window self, Aspect_GradientBackground ABackground)
        SetBackground(Handle_WNT_Window self, Quantity_Color theFirstColor, Quantity_Color theSecondColor, Aspect_GradientFillMethod const theFillMethod)

        Modifies the window gradient background.

        :type theFirstColor: OCC.wrapper.Quantity.Quantity_Color
        :type theSecondColor: OCC.wrapper.Quantity.Quantity_Color
        :type theFillMethod: OCC.wrapper.Aspect.Aspect_GradientFillMethod

        """
        return _WNT.Handle_WNT_Window_SetBackground(self, *args)


    def Background(self, *args):
        """
        Background(Handle_WNT_Window self) -> Aspect_Background

        Returns the window background.

        :rtype: OCC.wrapper.Aspect.Aspect_Background

        """
        return _WNT.Handle_WNT_Window_Background(self, *args)


    def BackgroundFillMethod(self, *args):
        """
        BackgroundFillMethod(Handle_WNT_Window self) -> Aspect_FillMethod

        Returns the current image background fill mode.

        :rtype: OCC.wrapper.Aspect.Aspect_FillMethod

        """
        return _WNT.Handle_WNT_Window_BackgroundFillMethod(self, *args)


    def GradientBackground(self, *args):
        """
        GradientBackground(Handle_WNT_Window self) -> Aspect_GradientBackground

        Returns the window gradient background.

        :rtype: OCC.wrapper.Aspect.Aspect_GradientBackground

        """
        return _WNT.Handle_WNT_Window_GradientBackground(self, *args)


    def IsVirtual(self, *args):
        """
        IsVirtual(Handle_WNT_Window self) -> Standard_Boolean

        Returns True if the window <me> is virtual

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_Window_IsVirtual(self, *args)


    def SetVirtual(self, *args):
        """
        SetVirtual(Handle_WNT_Window self, Standard_Boolean const theVirtual)

        Setup the virtual state

        :type theVirtual: bool

        """
        return _WNT.Handle_WNT_Window_SetVirtual(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_WNT_Window self)

        Memory deallocator for transient classes


        """
        return _WNT.Handle_WNT_Window_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_WNT_Window self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_WNT_Window self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_Window_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_WNT_Window self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_WNT_Window self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_Window_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_WNT_Window self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _WNT.Handle_WNT_Window_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_WNT_Window self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_Window_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_WNT_Window self)

        Increments the reference counter of this object


        """
        return _WNT.Handle_WNT_Window_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_WNT_Window self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_Window_DecrementRefCounter(self, *args)

Handle_WNT_Window_swigregister = _WNT.Handle_WNT_Window_swigregister
Handle_WNT_Window_swigregister(Handle_WNT_Window)

def Handle_WNT_Window_DownCast(thing):
    return _WNT.Handle_WNT_Window_DownCast(thing)
Handle_WNT_Window_DownCast = _WNT.Handle_WNT_Window_DownCast

class WNT_WClass(Standard.Standard_Transient):
    """
    This class defines a Windows NT window class.
    A window in Windows NT is always created based on a
    window class. The window class identifies the window
    procedure that processes messages to the window. Each
    window class has unique name ( character string ). More
    than one window can be created based on a single window
    class. For example, all button windows in Windows NT
    are created based on the same window class. The window
    class defines the window procedure and some other
    characteristics ( background, mouse cursor shape etc. )
    of the windows that are created based on that class.
    When we create a window, we define additional
    characteristics of the window that are unique to that
    window. So, we have to create and register window
    class before creation of any window. Of course, it's possible
    to create a new window class for each window inside
    the Window class and do not use the WClass at all.
    We implemented this class for sake of flexibility of
    event processing.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_WNT_WClass
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_WNT_WClass(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _WNT.WNT_WClass_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _WNT.WNT_WClass_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.WNT_WClass_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(WNT_WClass self, TCollection_AsciiString theClassName, Standard_Address const theWndProc, unsigned int const theStyle, Standard_Integer const theClassExtra=0, Standard_Integer const theWindowExtra=0, Aspect_Handle const theCursor=None, Aspect_Handle const theIcon=None, TCollection_AsciiString theMenuName) -> WNT_WClass

        Creates a Windows NT window class and registers it.

        :type theClassName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theWndProc: OCC.wrapper.Standard.Standard_Address
        :type theStyle: const unsigned int
        :type theClassExtra: int
        :type theWindowExtra: int
        :type theCursor: OCC.wrapper.Aspect.Aspect_Handle
        :type theIcon: OCC.wrapper.Aspect.Aspect_Handle
        :type theMenuName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        this = _WNT.new_WNT_WClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def WndProc(self, *args):
        """
        WndProc(WNT_WClass self) -> Standard_Address

        Returns address of window procedure.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _WNT.WNT_WClass_WndProc(self, *args)


    def Name(self, *args):
        """
        Returns a class name.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _WNT.WNT_WClass_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Instance(self, *args):
        """
        Instance(WNT_WClass self) -> Aspect_Handle

        Returns a program instance handle.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.WNT_WClass_Instance(self, *args)

    __swig_destroy__ = _WNT.delete_WNT_WClass
WNT_WClass_swigregister = _WNT.WNT_WClass_swigregister
WNT_WClass_swigregister(WNT_WClass)

def WNT_WClass_get_type_name(*args):
    """
    WNT_WClass_get_type_name() -> char const *

    :rtype: const char *

    """
    return _WNT.WNT_WClass_get_type_name(*args)

def WNT_WClass_get_type_descriptor(*args):
    """
    WNT_WClass_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _WNT.WNT_WClass_get_type_descriptor(*args)

class Handle_WNT_WClass(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_WNT_WClass self)

        Nullify the handle


        """
        return _WNT.Handle_WNT_WClass_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_WNT_WClass self) -> bool

        Check for being null

        :rtype: bool

        """
        return _WNT.Handle_WNT_WClass_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_WNT_WClass self, WNT_WClass thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _WNT.Handle_WNT_WClass_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_WNT_WClass self, Handle_WNT_WClass theHandle) -> Handle_WNT_WClass
        assign(Handle_WNT_WClass self, WNT_WClass thePtr) -> Handle_WNT_WClass
        assign(Handle_WNT_WClass self, Handle_WNT_WClass theHandle) -> Handle_WNT_WClass

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _WNT.Handle_WNT_WClass_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_WNT_WClass self) -> WNT_WClass

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _WNT.Handle_WNT_WClass_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_WNT_WClass self) -> WNT_WClass

        Member access operator (note non-const)

        :rtype: T *

        """
        return _WNT.Handle_WNT_WClass___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_WNT_WClass self) -> WNT_WClass

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _WNT.Handle_WNT_WClass___ref__(self, *args)


    def __hash__(self):
        return _WNT.Handle_WNT_WClass___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _WNT.Handle_WNT_WClass___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _WNT.new_Handle_WNT_WClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_WNT.Handle_WNT_WClass_DownCast)
    __swig_destroy__ = _WNT.delete_Handle_WNT_WClass

    def get_type_name(self, *args):
        """
        get_type_name(Handle_WNT_WClass self) -> char const *

        :rtype: const char *

        """
        return _WNT.Handle_WNT_WClass_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_WClass_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_WClass_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def WndProc(self, *args):
        """
        WndProc(Handle_WNT_WClass self) -> Standard_Address

        Returns address of window procedure.

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _WNT.Handle_WNT_WClass_WndProc(self, *args)


    def Name(self, *args):
        """
        Returns a class name.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _WNT.Handle_WNT_WClass_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Instance(self, *args):
        """
        Instance(Handle_WNT_WClass self) -> Aspect_Handle

        Returns a program instance handle.

        :rtype: OCC.wrapper.Aspect.Aspect_Handle

        """
        return _WNT.Handle_WNT_WClass_Instance(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_WNT_WClass self)

        Memory deallocator for transient classes


        """
        return _WNT.Handle_WNT_WClass_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_WNT_WClass self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_WNT_WClass self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_WClass_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_WNT_WClass self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_WNT_WClass self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_WClass_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_WNT_WClass self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _WNT.Handle_WNT_WClass_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_WNT_WClass self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_WClass_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_WNT_WClass self)

        Increments the reference counter of this object


        """
        return _WNT.Handle_WNT_WClass_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_WNT_WClass self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_WClass_DecrementRefCounter(self, *args)

Handle_WNT_WClass_swigregister = _WNT.Handle_WNT_WClass_swigregister
Handle_WNT_WClass_swigregister(Handle_WNT_WClass)

def Handle_WNT_WClass_DownCast(thing):
    return _WNT.Handle_WNT_WClass_DownCast(thing)
Handle_WNT_WClass_DownCast = _WNT.Handle_WNT_WClass_DownCast

class WNT_ClassDefinitionError(Standard.Standard_ConstructionError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_WNT_ClassDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_WNT_ClassDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(WNT_ClassDefinitionError self) -> WNT_ClassDefinitionError
        __init__(WNT_ClassDefinitionError self, Standard_CString const theMessage) -> WNT_ClassDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _WNT.new_WNT_ClassDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_WNT_ClassDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.WNT.Handle_WNT_ClassDefinitionError

        """
        return _WNT.WNT_ClassDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _WNT.WNT_ClassDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _WNT.WNT_ClassDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.WNT_ClassDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _WNT.delete_WNT_ClassDefinitionError
WNT_ClassDefinitionError_swigregister = _WNT.WNT_ClassDefinitionError_swigregister
WNT_ClassDefinitionError_swigregister(WNT_ClassDefinitionError)

def WNT_ClassDefinitionError_NewInstance(*args):
    """
    WNT_ClassDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_WNT_ClassDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.WNT.Handle_WNT_ClassDefinitionError

    """
    return _WNT.WNT_ClassDefinitionError_NewInstance(*args)

def WNT_ClassDefinitionError_get_type_name(*args):
    """
    WNT_ClassDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _WNT.WNT_ClassDefinitionError_get_type_name(*args)

def WNT_ClassDefinitionError_get_type_descriptor(*args):
    """
    WNT_ClassDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _WNT.WNT_ClassDefinitionError_get_type_descriptor(*args)

class Handle_WNT_ClassDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_WNT_ClassDefinitionError self)

        Nullify the handle


        """
        return _WNT.Handle_WNT_ClassDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_WNT_ClassDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _WNT.Handle_WNT_ClassDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_WNT_ClassDefinitionError self, WNT_ClassDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _WNT.Handle_WNT_ClassDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_WNT_ClassDefinitionError self, Handle_WNT_ClassDefinitionError theHandle) -> Handle_WNT_ClassDefinitionError
        assign(Handle_WNT_ClassDefinitionError self, WNT_ClassDefinitionError thePtr) -> Handle_WNT_ClassDefinitionError
        assign(Handle_WNT_ClassDefinitionError self, Handle_WNT_ClassDefinitionError theHandle) -> Handle_WNT_ClassDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _WNT.Handle_WNT_ClassDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_WNT_ClassDefinitionError self) -> WNT_ClassDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _WNT.Handle_WNT_ClassDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_WNT_ClassDefinitionError self) -> WNT_ClassDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _WNT.Handle_WNT_ClassDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_WNT_ClassDefinitionError self) -> WNT_ClassDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _WNT.Handle_WNT_ClassDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _WNT.Handle_WNT_ClassDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _WNT.Handle_WNT_ClassDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _WNT.new_Handle_WNT_ClassDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_WNT.Handle_WNT_ClassDefinitionError_DownCast)
    __swig_destroy__ = _WNT.delete_Handle_WNT_ClassDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_WNT_ClassDefinitionError self, Standard_CString const theMessage) -> Handle_WNT_ClassDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.WNT.Handle_WNT_ClassDefinitionError

        """
        return _WNT.Handle_WNT_ClassDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_WNT_ClassDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _WNT.Handle_WNT_ClassDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_ClassDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _WNT.Handle_WNT_ClassDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_WNT_ClassDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _WNT.Handle_WNT_ClassDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_WNT_ClassDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _WNT.Handle_WNT_ClassDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_WNT_ClassDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _WNT.Handle_WNT_ClassDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_WNT_ClassDefinitionError self)
        Reraise(Handle_WNT_ClassDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_WNT_ClassDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _WNT.Handle_WNT_ClassDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_WNT_ClassDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _WNT.Handle_WNT_ClassDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_WNT_ClassDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _WNT.Handle_WNT_ClassDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_WNT_ClassDefinitionError self)

        Memory deallocator for transient classes


        """
        return _WNT.Handle_WNT_ClassDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_WNT_ClassDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_WNT_ClassDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_ClassDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_WNT_ClassDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_WNT_ClassDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _WNT.Handle_WNT_ClassDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_WNT_ClassDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _WNT.Handle_WNT_ClassDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_WNT_ClassDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_ClassDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_WNT_ClassDefinitionError self)

        Increments the reference counter of this object


        """
        return _WNT.Handle_WNT_ClassDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_WNT_ClassDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _WNT.Handle_WNT_ClassDefinitionError_DecrementRefCounter(self, *args)

Handle_WNT_ClassDefinitionError_swigregister = _WNT.Handle_WNT_ClassDefinitionError_swigregister
Handle_WNT_ClassDefinitionError_swigregister(Handle_WNT_ClassDefinitionError)

def Handle_WNT_ClassDefinitionError_DownCast(thing):
    return _WNT.Handle_WNT_ClassDefinitionError_DownCast(thing)
Handle_WNT_ClassDefinitionError_DownCast = _WNT.Handle_WNT_ClassDefinitionError_DownCast



