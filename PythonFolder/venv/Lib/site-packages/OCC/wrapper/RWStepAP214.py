# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepAP214')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepAP214')
    _RWStepAP214 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepAP214', [dirname(__file__)])
        except ImportError:
            import _RWStepAP214
            return _RWStepAP214
        try:
            _mod = imp.load_module('_RWStepAP214', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepAP214 = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepAP214
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepAP214.delete_SwigPyIterator

    def value(self):
        return _RWStepAP214.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepAP214.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepAP214.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepAP214.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepAP214.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepAP214.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepAP214.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepAP214.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepAP214.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepAP214.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepAP214.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepAP214.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepAP214.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepAP214.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepAP214.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepAP214.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepAP214.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepAP214.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepAP214.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepAP214.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepAP214.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepAP214.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepAP214.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepAP214.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepAP214.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepAP214.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepAP214.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepAP214.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepAP214.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepAP214.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepAP214.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepAP214.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepAP214.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepAP214.ptr_to_number(item)
ptr_to_number = _RWStepAP214.ptr_to_number

def HashCode(*args):
    return _RWStepAP214.HashCode(*args)
HashCode = _RWStepAP214.HashCode

def ptr_equal(a, b):
    return _RWStepAP214.ptr_equal(a, b)
ptr_equal = _RWStepAP214.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepAP214
else:
    import StepAP214
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepVisual
else:
    import StepVisual
del _swig_python_version_info
class RWStepAP214_ReadWriteModule(StepData.StepData_ReadWriteModule):
    """General module to read and write StepAP214 entities"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_RWStepAP214_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_RWStepAP214_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(RWStepAP214_ReadWriteModule self) -> RWStepAP214_ReadWriteModule

        General module to read and write StepAP214 entities
        """
        this = _RWStepAP214.new_RWStepAP214_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseStep(self, *args):
        """
        CaseStep(RWStepAP214_ReadWriteModule self, TCollection_AsciiString atype) -> Standard_Integer
        CaseStep(RWStepAP214_ReadWriteModule self, NCollection_Sequence_TCollection_AsciiString types) -> Standard_Integer

        associates a positive Case Number to each type of StepAP214 Complex entity,
        given as a String defined in the EXPRESS form

        :type types: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_CaseStep(self, *args)


    def IsComplex(self, *args):
        """
        IsComplex(RWStepAP214_ReadWriteModule self, Standard_Integer const CN) -> Standard_Boolean

        returns True if the Case Number corresponds to a Complex Type

        :type CN: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_IsComplex(self, *args)


    def StepType(self, *args):
        """
        returns a StepType (defined in EXPRESS form which belongs to a
        Type of Entity, identified by its CaseNumber determined by Protocol

        :type CN: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _RWStepAP214.RWStepAP214_ReadWriteModule_StepType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ComplexType(self, *args):
        """
        ComplexType(RWStepAP214_ReadWriteModule self, Standard_Integer const CN, NCollection_Sequence_TCollection_AsciiString types) -> Standard_Boolean

        :type CN: int
        :type types: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_ComplexType(self, *args)


    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_ReadWriteModule self, Standard_Integer const CN, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        :type CN: int
        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_ReadWriteModule self, Standard_Integer const CN, StepData_StepWriter SW, Handle_Standard_Transient ent)

        :type CN: int
        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_WriteStep(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _RWStepAP214.RWStepAP214_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.RWStepAP214_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_ReadWriteModule
RWStepAP214_ReadWriteModule_swigregister = _RWStepAP214.RWStepAP214_ReadWriteModule_swigregister
RWStepAP214_ReadWriteModule_swigregister(RWStepAP214_ReadWriteModule)

def RWStepAP214_ReadWriteModule_get_type_name(*args):
    """
    RWStepAP214_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _RWStepAP214.RWStepAP214_ReadWriteModule_get_type_name(*args)

def RWStepAP214_ReadWriteModule_get_type_descriptor(*args):
    """
    RWStepAP214_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _RWStepAP214.RWStepAP214_ReadWriteModule_get_type_descriptor(*args)

class RWStepAP214_RWAppliedDateAssignment(object):
    """Read & Write Module for AppliedDateAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedDateAssignment self) -> RWStepAP214_RWAppliedDateAssignment

        Read & Write Module for AppliedDateAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedDateAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedDateAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedDateAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedDateAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedDateAssignment self, Handle_StepAP214_AppliedDateAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedDateAssignment
RWStepAP214_RWAppliedDateAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedDateAssignment_swigregister
RWStepAP214_RWAppliedDateAssignment_swigregister(RWStepAP214_RWAppliedDateAssignment)

class RWStepAP214_RWAutoDesignActualDateAndTimeAssignment(object):
    """Read & Write Module for AutoDesignActualDateAndTimeAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignActualDateAndTimeAssignment self) -> RWStepAP214_RWAutoDesignActualDateAndTimeAssignment

        Read & Write Module for AutoDesignActualDateAndTimeAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignActualDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignActualDateAndTimeAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignActualDateAndTimeAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignActualDateAndTimeAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignActualDateAndTimeAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignActualDateAndTimeAssignment self, Handle_StepAP214_AutoDesignActualDateAndTimeAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignActualDateAndTimeAssignment
RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_swigregister
RWStepAP214_RWAutoDesignActualDateAndTimeAssignment_swigregister(RWStepAP214_RWAutoDesignActualDateAndTimeAssignment)

class RWStepAP214_RWAutoDesignDocumentReference(object):
    """Read & Write Module for AutoDesignDocumentReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignDocumentReference self) -> RWStepAP214_RWAutoDesignDocumentReference

        Read & Write Module for AutoDesignDocumentReference
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignDocumentReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignDocumentReference ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDocumentReference

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDocumentReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignDocumentReference self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignDocumentReference ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDocumentReference

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDocumentReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignDocumentReference self, Handle_StepAP214_AutoDesignDocumentReference ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDocumentReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDocumentReference_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignDocumentReference
RWStepAP214_RWAutoDesignDocumentReference_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignDocumentReference_swigregister
RWStepAP214_RWAutoDesignDocumentReference_swigregister(RWStepAP214_RWAutoDesignDocumentReference)

class RWStepAP214_RWAppliedApprovalAssignment(object):
    """Read & Write Module for AppliedApprovalAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedApprovalAssignment self) -> RWStepAP214_RWAppliedApprovalAssignment

        Read & Write Module for AppliedApprovalAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedApprovalAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedApprovalAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedApprovalAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedApprovalAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedApprovalAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedApprovalAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedApprovalAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedApprovalAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedApprovalAssignment self, Handle_StepAP214_AppliedApprovalAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedApprovalAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedApprovalAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedApprovalAssignment
RWStepAP214_RWAppliedApprovalAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedApprovalAssignment_swigregister
RWStepAP214_RWAppliedApprovalAssignment_swigregister(RWStepAP214_RWAppliedApprovalAssignment)

class RWStepAP214_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        enforced the initialisation of the  libraries


        """
        return _RWStepAP214.RWStepAP214__Init(*args)

    Init = staticmethod(Init)

    def __init__(self):
        this = _RWStepAP214.new_RWStepAP214_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_
RWStepAP214__swigregister = _RWStepAP214.RWStepAP214__swigregister
RWStepAP214__swigregister(RWStepAP214_)

def RWStepAP214__Init(*args):
    """
    RWStepAP214__Init()

    enforced the initialisation of the  libraries


    """
    return _RWStepAP214.RWStepAP214__Init(*args)

class RWStepAP214_RWExternallyDefinedClass(object):
    """Read & Write tool for ExternallyDefinedClass"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWExternallyDefinedClass self) -> RWStepAP214_RWExternallyDefinedClass

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWExternallyDefinedClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWExternallyDefinedClass self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_ExternallyDefinedClass ent)

        Reads ExternallyDefinedClass

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedClass

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedClass_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWExternallyDefinedClass self, StepData_StepWriter SW, Handle_StepAP214_ExternallyDefinedClass ent)

        Writes ExternallyDefinedClass

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedClass

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedClass_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWExternallyDefinedClass self, Handle_StepAP214_ExternallyDefinedClass ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedClass
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedClass_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWExternallyDefinedClass
RWStepAP214_RWExternallyDefinedClass_swigregister = _RWStepAP214.RWStepAP214_RWExternallyDefinedClass_swigregister
RWStepAP214_RWExternallyDefinedClass_swigregister(RWStepAP214_RWExternallyDefinedClass)

class RWStepAP214_RWAppliedDocumentReference(object):
    """Read & Write Module for AppliedDocumentReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedDocumentReference self) -> RWStepAP214_RWAppliedDocumentReference

        Read & Write Module for AppliedDocumentReference
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedDocumentReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedDocumentReference ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDocumentReference

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDocumentReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedDocumentReference self, StepData_StepWriter SW, Handle_StepAP214_AppliedDocumentReference ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDocumentReference

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDocumentReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedDocumentReference self, Handle_StepAP214_AppliedDocumentReference ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDocumentReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDocumentReference_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedDocumentReference
RWStepAP214_RWAppliedDocumentReference_swigregister = _RWStepAP214.RWStepAP214_RWAppliedDocumentReference_swigregister
RWStepAP214_RWAppliedDocumentReference_swigregister(RWStepAP214_RWAppliedDocumentReference)

class RWStepAP214_RWAutoDesignPresentedItem(object):
    """Read & Write Module for AutoDesignPresentedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignPresentedItem self) -> RWStepAP214_RWAutoDesignPresentedItem

        Read & Write Module for AutoDesignPresentedItem
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignPresentedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignPresentedItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPresentedItem

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPresentedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignPresentedItem self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignPresentedItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPresentedItem

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPresentedItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignPresentedItem self, Handle_StepAP214_AutoDesignPresentedItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPresentedItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPresentedItem_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignPresentedItem
RWStepAP214_RWAutoDesignPresentedItem_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignPresentedItem_swigregister
RWStepAP214_RWAutoDesignPresentedItem_swigregister(RWStepAP214_RWAutoDesignPresentedItem)

class RWStepAP214_RWAutoDesignActualDateAssignment(object):
    """Read & Write Module for AutoDesignActualDateAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignActualDateAssignment self) -> RWStepAP214_RWAutoDesignActualDateAssignment

        Read & Write Module for AutoDesignActualDateAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignActualDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignActualDateAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignActualDateAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignActualDateAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignActualDateAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignActualDateAssignment self, Handle_StepAP214_AutoDesignActualDateAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignActualDateAssignment
RWStepAP214_RWAutoDesignActualDateAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignActualDateAssignment_swigregister
RWStepAP214_RWAutoDesignActualDateAssignment_swigregister(RWStepAP214_RWAutoDesignActualDateAssignment)

class RWStepAP214_RWAutoDesignSecurityClassificationAssignment(object):
    """Read & Write Module for AutoDesignSecurityClassificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignSecurityClassificationAssignment self) -> RWStepAP214_RWAutoDesignSecurityClassificationAssignment

        Read & Write Module for AutoDesignSecurityClassificationAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignSecurityClassificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignSecurityClassificationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignSecurityClassificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignSecurityClassificationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignSecurityClassificationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignSecurityClassificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignSecurityClassificationAssignment self, Handle_StepAP214_AutoDesignSecurityClassificationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignSecurityClassificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignSecurityClassificationAssignment
RWStepAP214_RWAutoDesignSecurityClassificationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignSecurityClassificationAssignment_swigregister
RWStepAP214_RWAutoDesignSecurityClassificationAssignment_swigregister(RWStepAP214_RWAutoDesignSecurityClassificationAssignment)

class RWStepAP214_RWAppliedSecurityClassificationAssignment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(RWStepAP214_RWAppliedSecurityClassificationAssignment self) -> RWStepAP214_RWAppliedSecurityClassificationAssignment"""
        this = _RWStepAP214.new_RWStepAP214_RWAppliedSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedSecurityClassificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedSecurityClassificationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedSecurityClassificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedSecurityClassificationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedSecurityClassificationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedSecurityClassificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedSecurityClassificationAssignment self, Handle_StepAP214_AppliedSecurityClassificationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedSecurityClassificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedSecurityClassificationAssignment
RWStepAP214_RWAppliedSecurityClassificationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedSecurityClassificationAssignment_swigregister
RWStepAP214_RWAppliedSecurityClassificationAssignment_swigregister(RWStepAP214_RWAppliedSecurityClassificationAssignment)

class RWStepAP214_GeneralModule(StepData.StepData_GeneralModule):
    """
    Defines General Services for StepAP214 Entities
    (Share,Check,Copy; Trace already inherited)
    Depends (for case numbers) of Protocol from StepAP214
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_RWStepAP214_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_RWStepAP214_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(RWStepAP214_GeneralModule self) -> RWStepAP214_GeneralModule

        Creates a GeneralModule


        """
        this = _RWStepAP214.new_RWStepAP214_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def FillSharedCase(self, *args):
        """
        FillSharedCase(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according to a Case Number <CN> (provided by StepAP214
        Protocol).

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_FillSharedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Specific Checking of an Entity <ent>

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_CheckCase(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Specific Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        Use method Transferred from CopyTool to work

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_CopyCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_NewVoid(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_CategoryNumber(self, *args)


    def Name(self, *args):
        """
        Name(RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of a STEP Entity according to its type

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _RWStepAP214.RWStepAP214_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.RWStepAP214_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_GeneralModule
RWStepAP214_GeneralModule_swigregister = _RWStepAP214.RWStepAP214_GeneralModule_swigregister
RWStepAP214_GeneralModule_swigregister(RWStepAP214_GeneralModule)

def RWStepAP214_GeneralModule_get_type_name(*args):
    """
    RWStepAP214_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _RWStepAP214.RWStepAP214_GeneralModule_get_type_name(*args)

def RWStepAP214_GeneralModule_get_type_descriptor(*args):
    """
    RWStepAP214_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _RWStepAP214.RWStepAP214_GeneralModule_get_type_descriptor(*args)

class Handle_RWStepAP214_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_RWStepAP214_ReadWriteModule self)

        Nullify the handle


        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_RWStepAP214_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_RWStepAP214_ReadWriteModule self, RWStepAP214_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_RWStepAP214_ReadWriteModule self, Handle_RWStepAP214_ReadWriteModule theHandle) -> Handle_RWStepAP214_ReadWriteModule
        assign(Handle_RWStepAP214_ReadWriteModule self, RWStepAP214_ReadWriteModule thePtr) -> Handle_RWStepAP214_ReadWriteModule
        assign(Handle_RWStepAP214_ReadWriteModule self, Handle_RWStepAP214_ReadWriteModule theHandle) -> Handle_RWStepAP214_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_RWStepAP214_ReadWriteModule self) -> RWStepAP214_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_RWStepAP214_ReadWriteModule self) -> RWStepAP214_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_RWStepAP214_ReadWriteModule self) -> RWStepAP214_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _RWStepAP214.new_Handle_RWStepAP214_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_RWStepAP214.Handle_RWStepAP214_ReadWriteModule_DownCast)
    __swig_destroy__ = _RWStepAP214.delete_Handle_RWStepAP214_ReadWriteModule

    def CaseStep(self, *args):
        """
        CaseStep(Handle_RWStepAP214_ReadWriteModule self, TCollection_AsciiString atype) -> Standard_Integer
        CaseStep(Handle_RWStepAP214_ReadWriteModule self, NCollection_Sequence_TCollection_AsciiString types) -> Standard_Integer

        associates a positive Case Number to each type of StepAP214 Complex entity,
        given as a String defined in the EXPRESS form

        :type types: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_CaseStep(self, *args)


    def IsComplex(self, *args):
        """
        IsComplex(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN) -> Standard_Boolean

        returns True if the Case Number corresponds to a Complex Type

        :type CN: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_IsComplex(self, *args)


    def StepType(self, *args):
        """
        returns a StepType (defined in EXPRESS form which belongs to a
        Type of Entity, identified by its CaseNumber determined by Protocol

        :type CN: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_StepType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ComplexType(self, *args):
        """
        ComplexType(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN, NCollection_Sequence_TCollection_AsciiString types) -> Standard_Boolean

        :type CN: int
        :type types: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_ComplexType(self, *args)


    def ReadStep(self, *args):
        """
        ReadStep(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        :type CN: int
        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN, StepData_StepWriter SW, Handle_Standard_Transient ent)

        :type CN: int
        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_WriteStep(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_RWStepAP214_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_RWStepAP214_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translate the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with a StepReaderData, in which the Type of an Entity
        is defined as a String : Reads the RecordType <num> then calls
        CaseNum (this type)
        Warning : The methods CaseStep, StepType and Recognize,
        must be in phase (triplets CaseNum-StepType-Type of Object)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_CaseNum(self, *args)


    def ShortType(self, *args):
        """
        ShortType(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN) -> TCollection_AsciiString

        Function specific to STEP. Some STEP Types have a short form
        This method can be redefined to fill it
        By default, returns an empty string, which is then interpreted
        to take normal form from StepType

        :type CN: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_ShortType(self, *args)


    def Read(self, *args):
        """
        Read(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function, calls ReadStep

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_RWStepAP214_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_RWStepAP214_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_RWStepAP214_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_RWStepAP214_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_RWStepAP214_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_RWStepAP214_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_RWStepAP214_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_RWStepAP214_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_RWStepAP214_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_RWStepAP214_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_RWStepAP214_ReadWriteModule_swigregister = _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_swigregister
Handle_RWStepAP214_ReadWriteModule_swigregister(Handle_RWStepAP214_ReadWriteModule)

def Handle_RWStepAP214_ReadWriteModule_DownCast(thing):
    return _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_DownCast(thing)
Handle_RWStepAP214_ReadWriteModule_DownCast = _RWStepAP214.Handle_RWStepAP214_ReadWriteModule_DownCast

class RWStepAP214_RWAppliedDateAndTimeAssignment(object):
    """Read & Write Module for AppliedDateAndTimeAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedDateAndTimeAssignment self) -> RWStepAP214_RWAppliedDateAndTimeAssignment

        Read & Write Module for AppliedDateAndTimeAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedDateAndTimeAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedDateAndTimeAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAndTimeAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedDateAndTimeAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedDateAndTimeAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAndTimeAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedDateAndTimeAssignment self, Handle_StepAP214_AppliedDateAndTimeAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedDateAndTimeAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedDateAndTimeAssignment
RWStepAP214_RWAppliedDateAndTimeAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedDateAndTimeAssignment_swigregister
RWStepAP214_RWAppliedDateAndTimeAssignment_swigregister(RWStepAP214_RWAppliedDateAndTimeAssignment)

class RWStepAP214_RWAppliedExternalIdentificationAssignment(object):
    """Read & Write tool for AppliedExternalIdentificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedExternalIdentificationAssignment self) -> RWStepAP214_RWAppliedExternalIdentificationAssignment

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedExternalIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedExternalIdentificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedExternalIdentificationAssignment ent)

        Reads AppliedExternalIdentificationAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedExternalIdentificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedExternalIdentificationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedExternalIdentificationAssignment ent)

        Writes AppliedExternalIdentificationAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedExternalIdentificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedExternalIdentificationAssignment self, Handle_StepAP214_AppliedExternalIdentificationAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedExternalIdentificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedExternalIdentificationAssignment
RWStepAP214_RWAppliedExternalIdentificationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedExternalIdentificationAssignment_swigregister
RWStepAP214_RWAppliedExternalIdentificationAssignment_swigregister(RWStepAP214_RWAppliedExternalIdentificationAssignment)

class RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment(object):
    """Read & Write Module for AutoDesignNominalDateAndTimeAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment self) -> RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment

        Read & Write Module for AutoDesignNominalDateAndTimeAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment self, Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment
RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_swigregister
RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment_swigregister(RWStepAP214_RWAutoDesignNominalDateAndTimeAssignment)

class RWStepAP214_RWAutoDesignNominalDateAssignment(object):
    """Read & Write Module for AutoDesignNominalDateAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignNominalDateAssignment self) -> RWStepAP214_RWAutoDesignNominalDateAssignment

        Read & Write Module for AutoDesignNominalDateAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignNominalDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignNominalDateAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignNominalDateAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignNominalDateAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignNominalDateAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignNominalDateAssignment self, Handle_StepAP214_AutoDesignNominalDateAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignNominalDateAssignment
RWStepAP214_RWAutoDesignNominalDateAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignNominalDateAssignment_swigregister
RWStepAP214_RWAutoDesignNominalDateAssignment_swigregister(RWStepAP214_RWAutoDesignNominalDateAssignment)

class RWStepAP214_RWAutoDesignOrganizationAssignment(object):
    """Read & Write Module for AutoDesignOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignOrganizationAssignment self) -> RWStepAP214_RWAutoDesignOrganizationAssignment

        Read & Write Module for AutoDesignOrganizationAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignOrganizationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignOrganizationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignOrganizationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignOrganizationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignOrganizationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignOrganizationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignOrganizationAssignment self, Handle_StepAP214_AutoDesignOrganizationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignOrganizationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignOrganizationAssignment
RWStepAP214_RWAutoDesignOrganizationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignOrganizationAssignment_swigregister
RWStepAP214_RWAutoDesignOrganizationAssignment_swigregister(RWStepAP214_RWAutoDesignOrganizationAssignment)

class RWStepAP214_RWRepItemGroup(object):
    """Read & Write tool for RepItemGroup"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWRepItemGroup self) -> RWStepAP214_RWRepItemGroup

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWRepItemGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWRepItemGroup self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_RepItemGroup ent)

        Reads RepItemGroup

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_RepItemGroup

        """
        return _RWStepAP214.RWStepAP214_RWRepItemGroup_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWRepItemGroup self, StepData_StepWriter SW, Handle_StepAP214_RepItemGroup ent)

        Writes RepItemGroup

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_RepItemGroup

        """
        return _RWStepAP214.RWStepAP214_RWRepItemGroup_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWRepItemGroup self, Handle_StepAP214_RepItemGroup ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_RepItemGroup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWRepItemGroup_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWRepItemGroup
RWStepAP214_RWRepItemGroup_swigregister = _RWStepAP214.RWStepAP214_RWRepItemGroup_swigregister
RWStepAP214_RWRepItemGroup_swigregister(RWStepAP214_RWRepItemGroup)

class RWStepAP214_RWAutoDesignApprovalAssignment(object):
    """Read & Write Module for AutoDesignApprovalAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignApprovalAssignment self) -> RWStepAP214_RWAutoDesignApprovalAssignment

        Read & Write Module for AutoDesignApprovalAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignApprovalAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignApprovalAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignApprovalAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignApprovalAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignApprovalAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignApprovalAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignApprovalAssignment self, Handle_StepAP214_AutoDesignApprovalAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignApprovalAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignApprovalAssignment
RWStepAP214_RWAutoDesignApprovalAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignApprovalAssignment_swigregister
RWStepAP214_RWAutoDesignApprovalAssignment_swigregister(RWStepAP214_RWAutoDesignApprovalAssignment)

class RWStepAP214_RWAppliedPersonAndOrganizationAssignment(object):
    """Read & Write Module for AppliedPersonAndOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedPersonAndOrganizationAssignment self) -> RWStepAP214_RWAppliedPersonAndOrganizationAssignment

        Read & Write Module for AppliedPersonAndOrganizationAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedPersonAndOrganizationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedPersonAndOrganizationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPersonAndOrganizationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedPersonAndOrganizationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedPersonAndOrganizationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPersonAndOrganizationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedPersonAndOrganizationAssignment self, Handle_StepAP214_AppliedPersonAndOrganizationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPersonAndOrganizationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedPersonAndOrganizationAssignment
RWStepAP214_RWAppliedPersonAndOrganizationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedPersonAndOrganizationAssignment_swigregister
RWStepAP214_RWAppliedPersonAndOrganizationAssignment_swigregister(RWStepAP214_RWAppliedPersonAndOrganizationAssignment)

class RWStepAP214_RWClass(object):
    """Read & Write tool for Class"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWClass self) -> RWStepAP214_RWClass

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWClass self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_Class ent)

        Reads Class

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_Class

        """
        return _RWStepAP214.RWStepAP214_RWClass_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWClass self, StepData_StepWriter SW, Handle_StepAP214_Class ent)

        Writes Class

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_Class

        """
        return _RWStepAP214.RWStepAP214_RWClass_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWClass self, Handle_StepAP214_Class ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_Class
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWClass_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWClass
RWStepAP214_RWClass_swigregister = _RWStepAP214.RWStepAP214_RWClass_swigregister
RWStepAP214_RWClass_swigregister(RWStepAP214_RWClass)

class RWStepAP214_RWAppliedPresentedItem(object):
    """Read & Write Module for AppliedPresentedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedPresentedItem self) -> RWStepAP214_RWAppliedPresentedItem

        Read & Write Module for AppliedPresentedItem
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedPresentedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedPresentedItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPresentedItem

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPresentedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedPresentedItem self, StepData_StepWriter SW, Handle_StepAP214_AppliedPresentedItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPresentedItem

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPresentedItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedPresentedItem self, Handle_StepAP214_AppliedPresentedItem ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPresentedItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedPresentedItem_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedPresentedItem
RWStepAP214_RWAppliedPresentedItem_swigregister = _RWStepAP214.RWStepAP214_RWAppliedPresentedItem_swigregister
RWStepAP214_RWAppliedPresentedItem_swigregister(RWStepAP214_RWAppliedPresentedItem)

class RWStepAP214_RWAutoDesignDateAndPersonAssignment(object):
    """Read & Write Module for AutoDesignDateAndPersonAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignDateAndPersonAssignment self) -> RWStepAP214_RWAutoDesignDateAndPersonAssignment

        Read & Write Module for AutoDesignDateAndPersonAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignDateAndPersonAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignDateAndPersonAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignDateAndPersonAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDateAndPersonAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignDateAndPersonAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignDateAndPersonAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDateAndPersonAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignDateAndPersonAssignment self, Handle_StepAP214_AutoDesignDateAndPersonAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignDateAndPersonAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignDateAndPersonAssignment
RWStepAP214_RWAutoDesignDateAndPersonAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignDateAndPersonAssignment_swigregister
RWStepAP214_RWAutoDesignDateAndPersonAssignment_swigregister(RWStepAP214_RWAutoDesignDateAndPersonAssignment)

class RWStepAP214_RWAppliedOrganizationAssignment(object):
    """Read & Write Module for AppliedOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedOrganizationAssignment self) -> RWStepAP214_RWAppliedOrganizationAssignment

        Read & Write Module for AppliedOrganizationAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedOrganizationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedOrganizationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedOrganizationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedOrganizationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedOrganizationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedOrganizationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedOrganizationAssignment self, Handle_StepAP214_AppliedOrganizationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedOrganizationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedOrganizationAssignment
RWStepAP214_RWAppliedOrganizationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedOrganizationAssignment_swigregister
RWStepAP214_RWAppliedOrganizationAssignment_swigregister(RWStepAP214_RWAppliedOrganizationAssignment)

class RWStepAP214_RWAutoDesignGroupAssignment(object):
    """Read & Write Module for AutoDesignGroupAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignGroupAssignment self) -> RWStepAP214_RWAutoDesignGroupAssignment

        Read & Write Module for AutoDesignGroupAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignGroupAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignGroupAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignGroupAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignGroupAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignGroupAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignGroupAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignGroupAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignGroupAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignGroupAssignment self, Handle_StepAP214_AutoDesignGroupAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignGroupAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignGroupAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignGroupAssignment
RWStepAP214_RWAutoDesignGroupAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignGroupAssignment_swigregister
RWStepAP214_RWAutoDesignGroupAssignment_swigregister(RWStepAP214_RWAutoDesignGroupAssignment)

class RWStepAP214_RWExternallyDefinedGeneralProperty(object):
    """Read & Write tool for ExternallyDefinedGeneralProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWExternallyDefinedGeneralProperty self) -> RWStepAP214_RWExternallyDefinedGeneralProperty

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWExternallyDefinedGeneralProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWExternallyDefinedGeneralProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_ExternallyDefinedGeneralProperty ent)

        Reads ExternallyDefinedGeneralProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedGeneralProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWExternallyDefinedGeneralProperty self, StepData_StepWriter SW, Handle_StepAP214_ExternallyDefinedGeneralProperty ent)

        Writes ExternallyDefinedGeneralProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedGeneralProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWExternallyDefinedGeneralProperty self, Handle_StepAP214_ExternallyDefinedGeneralProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWExternallyDefinedGeneralProperty_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWExternallyDefinedGeneralProperty
RWStepAP214_RWExternallyDefinedGeneralProperty_swigregister = _RWStepAP214.RWStepAP214_RWExternallyDefinedGeneralProperty_swigregister
RWStepAP214_RWExternallyDefinedGeneralProperty_swigregister(RWStepAP214_RWExternallyDefinedGeneralProperty)

class RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment(object):
    """Read & Write Module for AutoDesignPersonAndOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment self) -> RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment

        Read & Write Module for AutoDesignPersonAndOrganizationAssignment
        """
        this = _RWStepAP214.new_RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment self, StepData_StepWriter SW, Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment self, Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment
RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_swigregister
RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment_swigregister(RWStepAP214_RWAutoDesignPersonAndOrganizationAssignment)

class RWStepAP214_RWAppliedGroupAssignment(object):
    """Read & Write tool for AppliedGroupAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepAP214_RWAppliedGroupAssignment self) -> RWStepAP214_RWAppliedGroupAssignment

        Empty constructor


        """
        this = _RWStepAP214.new_RWStepAP214_RWAppliedGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepAP214_RWAppliedGroupAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepAP214_AppliedGroupAssignment ent)

        Reads AppliedGroupAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedGroupAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedGroupAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepAP214_RWAppliedGroupAssignment self, StepData_StepWriter SW, Handle_StepAP214_AppliedGroupAssignment ent)

        Writes AppliedGroupAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedGroupAssignment

        """
        return _RWStepAP214.RWStepAP214_RWAppliedGroupAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepAP214_RWAppliedGroupAssignment self, Handle_StepAP214_AppliedGroupAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedGroupAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.RWStepAP214_RWAppliedGroupAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepAP214.delete_RWStepAP214_RWAppliedGroupAssignment
RWStepAP214_RWAppliedGroupAssignment_swigregister = _RWStepAP214.RWStepAP214_RWAppliedGroupAssignment_swigregister
RWStepAP214_RWAppliedGroupAssignment_swigregister(RWStepAP214_RWAppliedGroupAssignment)

class Handle_RWStepAP214_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_RWStepAP214_GeneralModule self)

        Nullify the handle


        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_RWStepAP214_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_RWStepAP214_GeneralModule self, RWStepAP214_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_RWStepAP214_GeneralModule self, Handle_RWStepAP214_GeneralModule theHandle) -> Handle_RWStepAP214_GeneralModule
        assign(Handle_RWStepAP214_GeneralModule self, RWStepAP214_GeneralModule thePtr) -> Handle_RWStepAP214_GeneralModule
        assign(Handle_RWStepAP214_GeneralModule self, Handle_RWStepAP214_GeneralModule theHandle) -> Handle_RWStepAP214_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_RWStepAP214_GeneralModule self) -> RWStepAP214_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_RWStepAP214_GeneralModule self) -> RWStepAP214_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_RWStepAP214_GeneralModule self) -> RWStepAP214_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _RWStepAP214.Handle_RWStepAP214_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _RWStepAP214.new_Handle_RWStepAP214_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_RWStepAP214.Handle_RWStepAP214_GeneralModule_DownCast)
    __swig_destroy__ = _RWStepAP214.delete_Handle_RWStepAP214_GeneralModule

    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according to a Case Number <CN> (provided by StepAP214
        Protocol).

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_FillSharedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Specific Checking of an Entity <ent>

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_CheckCase(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Specific Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        Use method Transferred from CopyTool to work

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_CopyCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_NewVoid(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_CategoryNumber(self, *args)


    def Name(self, *args):
        """
        Name(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of a STEP Entity according to its type

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_RWStepAP214_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.Handle_RWStepAP214_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _RWStepAP214.Handle_RWStepAP214_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillShared(self, *args):
        """
        FillShared(Handle_RWStepAP214_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_RWStepAP214_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_RWStepAP214_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_ListImplied(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> (see above)
        are Referenced while not considered as Shared (not copied if
        <ent> is, references not renewed by CopyCase but by
        ImpliedCase, only if referenced Entities have been Copied too)
        FillSharedCase + ListImpliedCase give the complete list of
        Referenced Entities
        The provided default method does nothing (Implied References
        are specific of a little amount of Entity Classes).

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_ListImpliedCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        Remark that it should be in phase with the implementation of
        NewVoid+CopyCase/NewCopyCase
        Default returns always False, can be redefined

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_CanCopy(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_NewCopiedCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Specific Copying of Implied References
        A Default is provided which does nothing (must current case !)
        Already copied references (by CopyFrom) must remain unchanged
        Use method Search from CopyTool to work

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_RenewImpliedCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_RWStepAP214_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an entity to be deleted. What does it mean :
        Basically, any class of entity may define its own destructor
        By default, it does nothing but calling destructors on fields
        With the Memory Manager, it is useless to call destructor,
        it is done automatically when the Handle is nullified(cleared)
        BUT this is ineffective in looping structures (whatever these
        are "Implied" references or not).

        THUS : if no loop may appear in definitions, a class which
        inherits from TShared is correctly managed by automatic way
        BUT if there can be loops (or simply back pointers), they must
        be broken, for instance by clearing fields of one of the nodes
        The default does nothing, to be redefined if a loop can occur
        (Implied generally requires WhenDelete, but other cases can
        occur)

        Warning : <dispatched> tells if the entity to be deleted has been
        produced by Dispatch or not. Hence WhenDelete must be in
        coherence with Dispatch
        Dispatch can either copy or not.
        If it copies the entity, this one should be deleted
        If it doesnt (i.e. duplicates the handle) nothing to do

        If <dispatch> is False, normal deletion is to be performed

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_WhenDeleteCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_RWStepAP214_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_RWStepAP214_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_RWStepAP214_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_RWStepAP214_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_RWStepAP214_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_RWStepAP214_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_RWStepAP214_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_RWStepAP214_GeneralModule self)

        Increments the reference counter of this object


        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_RWStepAP214_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _RWStepAP214.Handle_RWStepAP214_GeneralModule_DecrementRefCounter(self, *args)

Handle_RWStepAP214_GeneralModule_swigregister = _RWStepAP214.Handle_RWStepAP214_GeneralModule_swigregister
Handle_RWStepAP214_GeneralModule_swigregister(Handle_RWStepAP214_GeneralModule)

def Handle_RWStepAP214_GeneralModule_DownCast(thing):
    return _RWStepAP214.Handle_RWStepAP214_GeneralModule_DownCast(thing)
Handle_RWStepAP214_GeneralModule_DownCast = _RWStepAP214.Handle_RWStepAP214_GeneralModule_DownCast



